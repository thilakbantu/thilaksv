[
    {
      "id": "ruby_001",
      "question": "What is a variable in Ruby?",
      "options": [
        { "id": "option_1", "text": "A fixed value that cannot change", "isCorrect": false },
        { "id": "option_2", "text": "A named storage for a value that can be changed", "isCorrect": true },
        { "id": "option_3", "text": "A built-in Ruby method", "isCorrect": false },
        { "id": "option_4", "text": "A type of class in Ruby", "isCorrect": false }
      ],
      "hint": "Variables store values that can change during program execution.",
      "answerDescription": "In Ruby, variables are used to store data that can be modified throughout the program's execution."
    },
    {
      "id": "ruby_002",
      "question": "Which of the following is a valid way to declare a variable in Ruby?",
      "options": [
        { "id": "option_1", "text": "var my_var = 10", "isCorrect": false },
        { "id": "option_2", "text": "my_var = 10", "isCorrect": true },
        { "id": "option_3", "text": "int my_var = 10", "isCorrect": false },
        { "id": "option_4", "text": "let my_var = 10", "isCorrect": false }
      ],
      "hint": "Ruby does not require explicit variable type declarations.",
      "answerDescription": "In Ruby, variables are declared without specifying a type, and they are assigned values using the `=` operator."
    },
    {
      "id": "ruby_003",
      "question": "Which of the following is NOT a valid data type in Ruby?",
      "options": [
        { "id": "option_1", "text": "Integer", "isCorrect": false },
        { "id": "option_2", "text": "String", "isCorrect": false },
        { "id": "option_3", "text": "Boolean", "isCorrect": false },
        { "id": "option_4", "text": "Character", "isCorrect": true }
      ],
      "hint": "Ruby does not have a separate 'Character' data type.",
      "answerDescription": "Ruby does not have a specific 'Character' data type. Instead, single characters are represented as strings of length one."
    },
    {
      "id": "ruby_004",
      "question": "How do you define a constant in Ruby?",
      "options": [
        { "id": "option_1", "text": "Using the `const` keyword", "isCorrect": false },
        { "id": "option_2", "text": "By defining a variable with an uppercase name", "isCorrect": true },
        { "id": "option_3", "text": "By prefixing a variable with `$`", "isCorrect": false },
        { "id": "option_4", "text": "By using `final` before the variable name", "isCorrect": false }
      ],
      "hint": "Ruby constants are written in uppercase letters.",
      "answerDescription": "In Ruby, constants are defined using uppercase variable names. Although they can be changed, Ruby will issue a warning if a constant is reassigned."
 },
{
      "id": "ruby_005",
      "question": "What will be the output of `5 / 2` in Ruby?",
      "options": [
        { "id": "option_1", "text": "2.5", "isCorrect": false },
        { "id": "option_2", "text": "2", "isCorrect": true },
        { "id": "option_3", "text": "3", "isCorrect": false },
        { "id": "option_4", "text": "An error", "isCorrect": false }
      ],
      "hint": "Integer division in Ruby returns an integer.",
      "answerDescription": "When dividing two integers in Ruby, the result is an integer (rounded down). To get a floating-point result, at least one operand must be a float (e.g., `5.0 / 2`)."
}, 
 {
    "id": "ruby_006",
    "question": "Which symbol is used to define a variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "$", "isCorrect": false },
      { "id": "option_2", "text": "!", "isCorrect": false },
      { "id": "option_3", "text": "=", "isCorrect": true },
      { "id": "option_4", "text": "#", "isCorrect": false }
    ],
    "hint": "Variables in Ruby are assigned values using a specific operator.",
    "answerDescription": "The `=` symbol is used in Ruby to assign values to variables."
  },
  {
    "id": "ruby_007",
    "question": "Which of the following is a valid way to define a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "const MAX_VALUE = 100", "isCorrect": false },
      { "id": "option_2", "text": "let MAX_VALUE = 100", "isCorrect": false },
      { "id": "option_3", "text": "MAX_VALUE = 100", "isCorrect": true },
      { "id": "option_4", "text": "final MAX_VALUE = 100", "isCorrect": false }
    ],
    "hint": "Constants in Ruby are written in uppercase.",
    "answerDescription": "In Ruby, constants are defined using uppercase letters, and though they can be reassigned, a warning will be issued."
  },
  {
    "id": "ruby_008",
    "question": "What type of variable starts with `@` in Ruby?",
    "options": [
      { "id": "option_1", "text": "Global variable", "isCorrect": false },
      { "id": "option_2", "text": "Local variable", "isCorrect": false },
      { "id": "option_3", "text": "Instance variable", "isCorrect": true },
      { "id": "option_4", "text": "Class variable", "isCorrect": false }
    ],
    "hint": "Instance variables belong to an object and are prefixed with a special character.",
    "answerDescription": "In Ruby, instance variables begin with `@` and are tied to specific object instances."
  },
  {
    "id": "ruby_009",
    "question": "What is the default value of an uninitialized instance variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "0", "isCorrect": false },
      { "id": "option_2", "text": "\"\"", "isCorrect": false },
      { "id": "option_3", "text": "nil", "isCorrect": true },
      { "id": "option_4", "text": "undefined", "isCorrect": false }
    ],
    "hint": "In Ruby, uninitialized variables return a special value instead of causing an error.",
    "answerDescription": "An uninitialized instance variable in Ruby has a default value of `nil`."
  },
  {
    "id": "ruby_010",
    "question": "Which data type in Ruby is mutable?",
    "options": [
      { "id": "option_1", "text": "Symbol", "isCorrect": false },
      { "id": "option_2", "text": "Integer", "isCorrect": false },
      { "id": "option_3", "text": "String", "isCorrect": true },
      { "id": "option_4", "text": "Boolean", "isCorrect": false }
    ],
    "hint": "This data type allows modification after creation.",
    "answerDescription": "Strings in Ruby are mutable, meaning they can be changed after they are created."
  },
  {
    "id": "ruby_011",
    "question": "Which keyword is used to define a global variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "global", "isCorrect": false },
      { "id": "option_2", "text": "@", "isCorrect": false },
      { "id": "option_3", "text": "$", "isCorrect": true },
      { "id": "option_4", "text": "self", "isCorrect": false }
    ],
    "hint": "Global variables in Ruby start with a special character.",
    "answerDescription": "Global variables in Ruby are prefixed with a `$` sign."
  },
  {
    "id": "ruby_012",
    "question": "Which of the following is an immutable data type in Ruby?",
    "options": [
      { "id": "option_1", "text": "Array", "isCorrect": false },
      { "id": "option_2", "text": "String", "isCorrect": false },
      { "id": "option_3", "text": "Symbol", "isCorrect": true },
      { "id": "option_4", "text": "Hash", "isCorrect": false }
    ],
    "hint": "This data type is often used as hash keys and cannot be changed.",
    "answerDescription": "Symbols in Ruby are immutable, meaning they cannot be modified once created."
  },
  {
    "id": "ruby_013",
    "question": "How do you check the data type of a variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "typeof variable", "isCorrect": false },
      { "id": "option_2", "text": "variable.datatype", "isCorrect": false },
      { "id": "option_3", "text": "variable.class", "isCorrect": true },
      { "id": "option_4", "text": "variable.type", "isCorrect": false }
    ],
    "hint": "In Ruby, every object belongs to a specific class.",
    "answerDescription": "You can check the data type of a variable in Ruby by using the `.class` method."
  },
  {
    "id": "ruby_014",
    "question": "Which of the following represents a floating-point number in Ruby?",
    "options": [
      { "id": "option_1", "text": "100", "isCorrect": false },
      { "id": "option_2", "text": "'100.0'", "isCorrect": false },
      { "id": "option_3", "text": "100.0", "isCorrect": true },
      { "id": "option_4", "text": "[100.0]", "isCorrect": false }
    ],
    "hint": "Floating-point numbers contain decimal points.",
    "answerDescription": "In Ruby, numbers with decimal points (e.g., `100.0`) are considered floating-point numbers."
  },
  {
    "id": "ruby_015",
    "question": "What will `10 == '10'` return in Ruby?",
    "options": [
      { "id": "option_1", "text": "true", "isCorrect": false },
      { "id": "option_2", "text": "nil", "isCorrect": false },
      { "id": "option_3", "text": "false", "isCorrect": true },
      { "id": "option_4", "text": "An error", "isCorrect": false }
    ],
    "hint": "Ruby is strictly typed when comparing values of different types.",
    "answerDescription": "The `==` operator in Ruby returns `false` when comparing an integer (`10`) with a string (`'10'`) because they are different data types."
}, 
 {
    "id": "ruby_016",
    "question": "What is the scope of a local variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "Accessible from anywhere in the program", "isCorrect": false },
      { "id": "option_2", "text": "Shared across all instances of a class", "isCorrect": false },
      { "id": "option_3", "text": "Accessible from different methods within a class", "isCorrect": false },
      { "id": "option_4", "text": "Limited to the block or method where it is defined", "isCorrect": true }
    ],
    "hint": "Local variables are only accessible within their declared scope.",
    "answerDescription": "In Ruby, a local variable is only accessible within the block, method, or class where it is declared."
  },
  {
    "id": "ruby_017",
    "question": "How do you define a multi-line string in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using single quotes (`'`)", "isCorrect": false },
      { "id": "option_2", "text": "Using brackets (`[]`)", "isCorrect": false },
      { "id": "option_3", "text": "Using a backslash (`\\`)", "isCorrect": false },
      { "id": "option_4", "text": "Using heredoc (`<<-TEXT`)", "isCorrect": true }
    ],
    "hint": "Ruby provides a special syntax for defining multi-line strings.",
    "answerDescription": "The heredoc syntax (`<<-TEXT ... TEXT`) allows you to create multi-line strings in Ruby."
  },
  {
    "id": "ruby_018",
    "question": "Which method is used to convert a string into an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_f", "isCorrect": false },
      { "id": "option_2", "text": "parseInt", "isCorrect": false },
      { "id": "option_3", "text": "convert_to_int", "isCorrect": false },
      { "id": "option_4", "text": "to_i", "isCorrect": true }
    ],
    "hint": "Ruby provides a built-in method to convert strings to integers.",
    "answerDescription": "The `.to_i` method in Ruby converts a string into an integer."
  },
  {
    "id": "ruby_019",
    "question": "Which operator is used for exponentiation in Ruby?",
    "options": [
      { "id": "option_1", "text": "^", "isCorrect": false },
      { "id": "option_2", "text": "**", "isCorrect": false },
      { "id": "option_3", "text": "//", "isCorrect": false },
      { "id": "option_4", "text": "**", "isCorrect": true }
    ],
    "hint": "Ruby uses a double symbol for exponentiation.",
    "answerDescription": "The `**` operator in Ruby is used for exponentiation (e.g., `2**3` equals `8`)."
  },
  {
    "id": "ruby_020",
    "question": "What does `nil` represent in Ruby?",
    "options": [
      { "id": "option_1", "text": "An empty string", "isCorrect": false },
      { "id": "option_2", "text": "A boolean value", "isCorrect": false },
      { "id": "option_3", "text": "A number", "isCorrect": false },
      { "id": "option_4", "text": "The absence of a value", "isCorrect": true }
    ],
    "hint": "`nil` is often used to indicate an undefined or missing value.",
    "answerDescription": "In Ruby, `nil` represents the absence of a value or an undefined variable."
  },
  {
    "id": "ruby_021",
    "question": "What is the difference between `puts` and `print` in Ruby?",
    "options": [
      { "id": "option_1", "text": "`print` adds a new line, `puts` does not", "isCorrect": false },
      { "id": "option_2", "text": "`puts` is used for debugging, `print` is not", "isCorrect": false },
      { "id": "option_3", "text": "`puts` works only with strings", "isCorrect": false },
      { "id": "option_4", "text": "`puts` adds a new line, `print` does not", "isCorrect": true }
    ],
    "hint": "One of these methods automatically appends a newline character.",
    "answerDescription": "`puts` automatically adds a newline at the end of the output, while `print` does not."
  },
  {
    "id": "ruby_022",
    "question": "How do you define an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "`array = {1, 2, 3}`", "isCorrect": false },
      { "id": "option_2", "text": "`array = <1, 2, 3>`", "isCorrect": false },
      { "id": "option_3", "text": "`array = (1, 2, 3)`", "isCorrect": false },
      { "id": "option_4", "text": "`array = [1, 2, 3]`", "isCorrect": true }
    ],
    "hint": "Arrays in Ruby are enclosed within specific brackets.",
    "answerDescription": "In Ruby, arrays are defined using square brackets (`[ ]`)."
  },
  {
    "id": "ruby_023",
    "question": "Which method is used to remove whitespace from a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "strip_whitespace", "isCorrect": false },
      { "id": "option_2", "text": "remove_spaces", "isCorrect": false },
      { "id": "option_3", "text": "clean", "isCorrect": false },
      { "id": "option_4", "text": "strip", "isCorrect": true }
    ],
    "hint": "This method removes spaces from the beginning and end of a string.",
    "answerDescription": "The `.strip` method in Ruby removes leading and trailing whitespace from a string."
  },
  {
    "id": "ruby_024",
    "question": "Which keyword is used to create a loop in Ruby?",
    "options": [
      { "id": "option_1", "text": "forEach", "isCorrect": false },
      { "id": "option_2", "text": "whileLoop", "isCorrect": false },
      { "id": "option_3", "text": "iterate", "isCorrect": false },
      { "id": "option_4", "text": "while", "isCorrect": true }
    ],
    "hint": "Ruby provides a simple loop structure using this keyword.",
    "answerDescription": "The `while` keyword in Ruby is used to create loops that execute as long as a condition is true."
  },
  {
    "id": "ruby_025",
    "question": "What does the `chomp` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Removes spaces from the string", "isCorrect": false },
      { "id": "option_2", "text": "Converts the string to lowercase", "isCorrect": false },
      { "id": "option_3", "text": "Removes all vowels from the string", "isCorrect": false },
      { "id": "option_4", "text": "Removes the trailing newline character", "isCorrect": true }
    ],
    "hint": "It is commonly used when reading input from the user.",
    "answerDescription": "The `chomp` method in Ruby removes the trailing newline character from a string."
  },  {
    "id": "ruby_026",
    "question": "Which method is used to find the length of a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "length", "isCorrect": true },
      { "id": "option_2", "text": "sizeOf", "isCorrect": false },
      { "id": "option_3", "text": "count", "isCorrect": false },
      { "id": "option_4", "text": "lengthOf", "isCorrect": false }
    ],
    "hint": "Ruby provides a simple method to count characters in a string.",
    "answerDescription": "The `.length` method in Ruby returns the number of characters in a string."
  },
  {
    "id": "ruby_027",
    "question": "How do you define a hash in Ruby?",
    "options": [
      { "id": "option_1", "text": "hash = { key: 'value' }", "isCorrect": true },
      { "id": "option_2", "text": "hash = [ key: 'value' ]", "isCorrect": false },
      { "id": "option_3", "text": "hash = ( key: 'value' )", "isCorrect": false },
      { "id": "option_4", "text": "hash = < key: 'value' >", "isCorrect": false }
    ],
    "hint": "Hashes use curly braces `{}` and key-value pairs.",
    "answerDescription": "In Ruby, hashes are defined using `{ key: 'value' }` syntax."
  },
  {
    "id": "ruby_028",
    "question": "Which method converts an integer to a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_s", "isCorrect": true },
      { "id": "option_2", "text": "convert", "isCorrect": false },
      { "id": "option_3", "text": "to_str", "isCorrect": false },
      { "id": "option_4", "text": "stringify", "isCorrect": false }
    ],
    "hint": "This method adds `_s` to the end of the type.",
    "answerDescription": "The `.to_s` method in Ruby converts an integer to a string."
  },
  {
    "id": "ruby_029",
    "question": "What is the purpose of the `each` method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Iterates over elements in an array or hash", "isCorrect": true },
      { "id": "option_2", "text": "Sorts an array", "isCorrect": false },
      { "id": "option_3", "text": "Removes elements from an array", "isCorrect": false },
      { "id": "option_4", "text": "Checks if an element exists in an array", "isCorrect": false }
    ],
    "hint": "It is commonly used for looping through collections.",
    "answerDescription": "The `each` method in Ruby allows iteration over elements in an array or hash."
  },
  {
    "id": "ruby_030",
    "question": "Which method is used to check if a string contains a specific substring?",
    "options": [
      { "id": "option_1", "text": "include?", "isCorrect": true },
      { "id": "option_2", "text": "contains?", "isCorrect": false },
      { "id": "option_3", "text": "has?", "isCorrect": false },
      { "id": "option_4", "text": "exists?", "isCorrect": false }
    ],
    "hint": "The method name is similar to checking inclusion.",
    "answerDescription": "The `.include?` method in Ruby checks if a string contains a given substring."
  },
  {
    "id": "ruby_031",
    "question": "How do you declare a symbol in Ruby?",
    "options": [
      { "id": "option_1", "text": ":symbol_name", "isCorrect": true },
      { "id": "option_2", "text": "symbol 'name'", "isCorrect": false },
      { "id": "option_3", "text": "symbol_name()", "isCorrect": false },
      { "id": "option_4", "text": "{symbol_name}", "isCorrect": false }
    ],
    "hint": "Symbols in Ruby begin with a special character.",
    "answerDescription": "A symbol in Ruby is defined using a colon followed by the name, like `:symbol_name`."
  },
  {
    "id": "ruby_032",
    "question": "Which method is used to remove the last element from an array?",
    "options": [
      { "id": "option_1", "text": "pop", "isCorrect": true },
      { "id": "option_2", "text": "delete_last", "isCorrect": false },
      { "id": "option_3", "text": "remove_last", "isCorrect": false },
      { "id": "option_4", "text": "trim", "isCorrect": false }
    ],
    "hint": "This method ‘pops’ the last element off the array.",
    "answerDescription": "The `.pop` method in Ruby removes and returns the last element of an array."
  },
  {
    "id": "ruby_033",
    "question": "Which method returns an array of keys from a hash?",
    "options": [
      { "id": "option_1", "text": "keys", "isCorrect": true },
      { "id": "option_2", "text": "get_keys", "isCorrect": false },
      { "id": "option_3", "text": "extract_keys", "isCorrect": false },
      { "id": "option_4", "text": "all_keys", "isCorrect": false }
    ],
    "hint": "This method retrieves only the keys from a hash.",
    "answerDescription": "The `.keys` method in Ruby returns an array of all keys in a hash."
  },
  {
    "id": "ruby_034",
    "question": "How do you create a range from 1 to 10 in Ruby?",
    "options": [
      { "id": "option_1", "text": "(1..10)", "isCorrect": true },
      { "id": "option_2", "text": "[1-10]", "isCorrect": false },
      { "id": "option_3", "text": "{1..10}", "isCorrect": false },
      { "id": "option_4", "text": "(1-10)", "isCorrect": false }
    ],
    "hint": "Ranges in Ruby are defined using two dots.",
    "answerDescription": "A range from 1 to 10 in Ruby is created using `(1..10)`."
  },
  {
    "id": "ruby_035",
    "question": "What does the `reverse` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Reverses the order of elements in a string or array", "isCorrect": true },
      { "id": "option_2", "text": "Deletes the last element in an array", "isCorrect": false },
      { "id": "option_3", "text": "Removes duplicate values", "isCorrect": false },
      { "id": "option_4", "text": "Sorts elements in descending order", "isCorrect": false }
    ],
    "hint": "It changes the sequence of elements.",
    "answerDescription": "The `.reverse` method in Ruby reverses the order of elements in a string or array."
  },  {
    "id": "ruby_036",
    "question": "Which keyword is used to define a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "function", "isCorrect": false },
      { "id": "option_2", "text": "def", "isCorrect": true },
      { "id": "option_3", "text": "method", "isCorrect": false },
      { "id": "option_4", "text": "define", "isCorrect": false }
    ],
    "hint": "Ruby uses a short and simple keyword to define methods.",
    "answerDescription": "In Ruby, the `def` keyword is used to define a method."
  },
  {
    "id": "ruby_037",
    "question": "What is the default value of an initialized variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "0", "isCorrect": false },
      { "id": "option_2", "text": "nil", "isCorrect": true },
      { "id": "option_3", "text": "undefined", "isCorrect": false },
      { "id": "option_4", "text": "false", "isCorrect": false }
    ],
    "hint": "Ruby assigns a special value to uninitialized variables.",
    "answerDescription": "In Ruby, uninitialized variables have a default value of `nil`."
  },
  {
    "id": "ruby_038",
    "question": "Which method is used to split a string into an array?",
    "options": [
      { "id": "option_1", "text": "divide", "isCorrect": false },
      { "id": "option_2", "text": "split", "isCorrect": true },
      { "id": "option_3", "text": "explode", "isCorrect": false },
      { "id": "option_4", "text": "break", "isCorrect": false }
    ],
    "hint": "This method divides a string into substrings based on a delimiter.",
    "answerDescription": "The `.split` method in Ruby splits a string into an array based on a given delimiter."
  },
  {
    "id": "ruby_039",
    "question": "Which operator is used for string concatenation in Ruby?",
    "options": [
      { "id": "option_1", "text": "&", "isCorrect": false },
      { "id": "option_2", "text": "+", "isCorrect": true },
      { "id": "option_3", "text": "-", "isCorrect": false },
      { "id": "option_4", "text": "*", "isCorrect": false }
    ],
    "hint": "The same operator is used for addition in numbers.",
    "answerDescription": "In Ruby, the `+` operator is used for string concatenation."
  },
  {
    "id": "ruby_040",
    "question": "What will `puts 5 == '5'` return in Ruby?",
    "options": [
      { "id": "option_1", "text": "'5'", "isCorrect": false },
      { "id": "option_2", "text": "false", "isCorrect": true },
      { "id": "option_3", "text": "true", "isCorrect": false },
      { "id": "option_4", "text": "nil", "isCorrect": false }
    ],
    "hint": "Ruby is strict about comparing different data types.",
    "answerDescription": "Since `5` is an integer and `'5'` is a string, `5 == '5'` returns `false` in Ruby."
  },
  {
    "id": "ruby_041",
    "question": "Which method adds an element to the end of an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "insert", "isCorrect": false },
      { "id": "option_2", "text": "push", "isCorrect": true },
      { "id": "option_3", "text": "append", "isCorrect": false },
      { "id": "option_4", "text": "add", "isCorrect": false }
    ],
    "hint": "This method ‘pushes’ a new element to the array.",
    "answerDescription": "The `.push` method in Ruby adds an element to the end of an array."
  },
  {
    "id": "ruby_042",
    "question": "What is the result of `3 ** 2` in Ruby?",
    "options": [
      { "id": "option_1", "text": "5", "isCorrect": false },
      { "id": "option_2", "text": "9", "isCorrect": true },
      { "id": "option_3", "text": "6", "isCorrect": false },
      { "id": "option_4", "text": "8", "isCorrect": false }
    ],
    "hint": "This operator is used for exponentiation.",
    "answerDescription": "`3 ** 2` means `3` raised to the power of `2`, which equals `9`."
  },
  {
    "id": "ruby_043",
    "question": "Which method is used to convert a string to lowercase in Ruby?",
    "options": [
      { "id": "option_1", "text": "down", "isCorrect": false },
      { "id": "option_2", "text": "downcase", "isCorrect": true },
      { "id": "option_3", "text": "lower", "isCorrect": false },
      { "id": "option_4", "text": "smallcase", "isCorrect": false }
    ],
    "hint": "This method changes all uppercase letters to lowercase.",
    "answerDescription": "The `.downcase` method in Ruby converts a string to lowercase."
  },
  {
    "id": "ruby_044",
    "question": "Which method removes duplicate elements from an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "clean", "isCorrect": false },
      { "id": "option_2", "text": "uniq", "isCorrect": true },
      { "id": "option_3", "text": "distinct", "isCorrect": false },
      { "id": "option_4", "text": "filter", "isCorrect": false }
    ],
    "hint": "This method keeps only unique elements in an array.",
    "answerDescription": "The `.uniq` method in Ruby removes duplicate elements from an array."
  },
  {
    "id": "ruby_045",
    "question": "What does the `times` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Divides numbers", "isCorrect": false },
      { "id": "option_2", "text": "Repeats a block of code a specified number of times", "isCorrect": true },
      { "id": "option_3", "text": "Multiplies two numbers", "isCorrect": false },
      { "id": "option_4", "text": "Iterates over an array", "isCorrect": false }
    ],
    "hint": "It is commonly used for looping in Ruby.",
    "answerDescription": "The `.times` method in Ruby executes a block of code a specified number of times."
  },  {
    "id": "ruby_046",
    "question": "Which method is used to remove leading and trailing whitespace from a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "strip_whitespace", "isCorrect": false },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "strip", "isCorrect": true },
      { "id": "option_4", "text": "clean", "isCorrect": false }
    ],
    "hint": "This method 'strips' unnecessary spaces from the string.",
    "answerDescription": "The `.strip` method in Ruby removes leading and trailing whitespace from a string."
  },
  {
    "id": "ruby_047",
    "question": "Which method checks if an array is empty in Ruby?",
    "options": [
      { "id": "option_1", "text": "null?", "isCorrect": false },
      { "id": "option_2", "text": "blank?", "isCorrect": false },
      { "id": "option_3", "text": "empty?", "isCorrect": true },
      { "id": "option_4", "text": "zero?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the array has no elements.",
    "answerDescription": "The `.empty?` method in Ruby checks whether an array has any elements or not."
  },
  {
    "id": "ruby_048",
    "question": "Which keyword is used to return a value from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "yield", "isCorrect": false },
      { "id": "option_2", "text": "break", "isCorrect": false },
      { "id": "option_3", "text": "return", "isCorrect": true },
      { "id": "option_4", "text": "exit", "isCorrect": false }
    ],
    "hint": "This keyword explicitly sends a value back to the caller.",
    "answerDescription": "The `return` keyword in Ruby is used to return a value from a method."
  },
  {
    "id": "ruby_049",
    "question": "Which operator is used for comparison in Ruby?",
    "options": [
      { "id": "option_1", "text": "=", "isCorrect": false },
      { "id": "option_2", "text": ":=", "isCorrect": false },
      { "id": "option_3", "text": "==", "isCorrect": true },
      { "id": "option_4", "text": "!=", "isCorrect": false }
    ],
    "hint": "This operator is used to check equality.",
    "answerDescription": "The `==` operator in Ruby is used to compare two values for equality."
  },
  {
    "id": "ruby_050",
    "question": "What is the result of `nil.to_s` in Ruby?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": false },
      { "id": "option_2", "text": "0", "isCorrect": false },
      { "id": "option_3", "text": "\"\"", "isCorrect": true },
      { "id": "option_4", "text": "false", "isCorrect": false }
    ],
    "hint": "Converting `nil` to a string results in an empty string.",
    "answerDescription": "The `to_s` method in Ruby converts `nil` to an empty string (`\"\"`)."
  },
  {
    "id": "ruby_051",
    "question": "Which loop executes at least once before checking the condition in Ruby?",
    "options": [
      { "id": "option_1", "text": "for", "isCorrect": false },
      { "id": "option_2", "text": "while", "isCorrect": false },
      { "id": "option_3", "text": "do-while", "isCorrect": true },
      { "id": "option_4", "text": "until", "isCorrect": false }
    ],
    "hint": "This loop ensures the body runs at least once.",
    "answerDescription": "The `do-while` loop in Ruby executes once before checking the condition."
  },
  {
    "id": "ruby_052",
    "question": "Which method is used to get the class of an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "type", "isCorrect": false },
      { "id": "option_2", "text": "get_class", "isCorrect": false },
      { "id": "option_3", "text": "class", "isCorrect": true },
      { "id": "option_4", "text": "typeof", "isCorrect": false }
    ],
    "hint": "This method directly returns the object's class.",
    "answerDescription": "The `.class` method in Ruby returns the class of an object."
  },
  {
    "id": "ruby_053",
    "question": "Which method converts a float to an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_f", "isCorrect": false },
      { "id": "option_2", "text": "integer", "isCorrect": false },
      { "id": "option_3", "text": "to_i", "isCorrect": true },
      { "id": "option_4", "text": "convert", "isCorrect": false }
    ],
    "hint": "This method changes the type from float to integer.",
    "answerDescription": "The `.to_i` method in Ruby converts a float to an integer by truncating the decimal part."
  },
  {
    "id": "ruby_054",
    "question": "Which method checks if a string starts with a specific substring in Ruby?",
    "options": [
      { "id": "option_1", "text": "begin_with?", "isCorrect": false },
      { "id": "option_2", "text": "has_prefix?", "isCorrect": false },
      { "id": "option_3", "text": "start_with?", "isCorrect": true },
      { "id": "option_4", "text": "first?", "isCorrect": false }
    ],
    "hint": "This method verifies whether a string starts with a given substring.",
    "answerDescription": "The `.start_with?` method in Ruby checks if a string starts with a specific substring."
  },
  {
    "id": "ruby_055",
    "question": "Which method converts all characters in a string to uppercase in Ruby?",
    "options": [
      { "id": "option_1", "text": "uppercase", "isCorrect": false },
      { "id": "option_2", "text": "to_upper", "isCorrect": false },
      { "id": "option_3", "text": "upcase", "isCorrect": true },
      { "id": "option_4", "text": "capitalize_all", "isCorrect": false }
    ],
    "hint": "This method changes all lowercase letters to uppercase.",
    "answerDescription": "The `.upcase` method in Ruby converts a string to uppercase."
  }, 
  {
    "id": "ruby_056",
    "question": "Which method is used to check the length of a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "count", "isCorrect": false },
      { "id": "option_2", "text": "size_of", "isCorrect": false },
      { "id": "option_3", "text": "length_of", "isCorrect": false },
      { "id": "option_4", "text": "length", "isCorrect": true }
    ],
    "hint": "This method returns the number of characters in a string.",
    "answerDescription": "The `.length` method in Ruby returns the number of characters in a string."
  },
  {
    "id": "ruby_057",
    "question": "What is the logical AND operator in Ruby?",
    "options": [
      { "id": "option_1", "text": "&", "isCorrect": false },
      { "id": "option_2", "text": "&&=", "isCorrect": false },
      { "id": "option_3", "text": "and", "isCorrect": false },
      { "id": "option_4", "text": "&&", "isCorrect": true }
    ],
    "hint": "This operator is commonly used to combine multiple boolean expressions.",
    "answerDescription": "The `&&` operator in Ruby performs logical AND operation."
  },
  {
    "id": "ruby_058",
    "question": "Which method is used to reverse an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "invert", "isCorrect": false },
      { "id": "option_2", "text": "backward", "isCorrect": false },
      { "id": "option_3", "text": "flip", "isCorrect": false },
      { "id": "option_4", "text": "reverse", "isCorrect": true }
    ],
    "hint": "This method returns an array in reversed order.",
    "answerDescription": "The `.reverse` method in Ruby reverses the elements of an array."
  },
  {
    "id": "ruby_059",
    "question": "Which symbol is used to define a symbol in Ruby?",
    "options": [
      { "id": "option_1", "text": "#", "isCorrect": false },
      { "id": "option_2", "text": "@", "isCorrect": false },
      { "id": "option_3", "text": "$", "isCorrect": false },
      { "id": "option_4", "text": ":", "isCorrect": true }
    ],
    "hint": "Symbols in Ruby start with a special character.",
    "answerDescription": "In Ruby, a symbol is defined using the `:` character, e.g., `:symbol_name`."
  },
  {
    "id": "ruby_060",
    "question": "Which method converts a hash to an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "list", "isCorrect": false },
      { "id": "option_2", "text": "arr", "isCorrect": false },
      { "id": "option_3", "text": "arrayify", "isCorrect": false },
      { "id": "option_4", "text": "to_a", "isCorrect": true }
    ],
    "hint": "This method changes a hash into an array representation.",
    "answerDescription": "The `.to_a` method in Ruby converts a hash into an array."
  },
  {
    "id": "ruby_061",
    "question": "Which method is used to iterate over each element in an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "loop", "isCorrect": false },
      { "id": "option_2", "text": "traverse", "isCorrect": false },
      { "id": "option_3", "text": "cycle", "isCorrect": false },
      { "id": "option_4", "text": "each", "isCorrect": true }
    ],
    "hint": "This method is commonly used to loop through each array element.",
    "answerDescription": "The `.each` method in Ruby iterates over each element in an array."
  },
  {
    "id": "ruby_062",
    "question": "Which method is used to merge two hashes in Ruby?",
    "options": [
      { "id": "option_1", "text": "combine", "isCorrect": false },
      { "id": "option_2", "text": "append", "isCorrect": false },
      { "id": "option_3", "text": "concat", "isCorrect": false },
      { "id": "option_4", "text": "merge", "isCorrect": true }
    ],
    "hint": "This method allows you to join two hashes together.",
    "answerDescription": "The `.merge` method in Ruby combines two hashes into one."
  },
  {
    "id": "ruby_063",
    "question": "Which method removes the last element from an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "delete_last", "isCorrect": false },
      { "id": "option_2", "text": "remove_end", "isCorrect": false },
      { "id": "option_3", "text": "cut", "isCorrect": false },
      { "id": "option_4", "text": "pop", "isCorrect": true }
    ],
    "hint": "This method 'pops' an element from the array.",
    "answerDescription": "The `.pop` method in Ruby removes the last element from an array."
  },
  {
    "id": "ruby_064",
    "question": "Which method is used to replace a substring in a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "substitute", "isCorrect": false },
      { "id": "option_2", "text": "switch", "isCorrect": false },
      { "id": "option_3", "text": "modify", "isCorrect": false },
      { "id": "option_4", "text": "sub", "isCorrect": true }
    ],
    "hint": "This method replaces only the first occurrence of a substring.",
    "answerDescription": "The `.sub` method in Ruby replaces the first occurrence of a substring with another string."
  },
  {
    "id": "ruby_2065",
    "question": "Which method is used to remove leading and trailing whitespace from a string?",
    "options": [
      { "id": "option_1", "text": "strip", "isCorrect": true },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "remove_space", "isCorrect": false },
      { "id": "option_4", "text": "chomp", "isCorrect": false }
    ],
    "hint": "This method removes unnecessary spaces from both ends of a string.",
    "answerDescription": "The `strip` method removes leading and trailing whitespace from a string."
  },
   {
    "id": "ruby_066",
    "question": "Which keyword is used to define a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "ALL_CAPS", "isCorrect": true },
      { "id": "option_2", "text": "const", "isCorrect": false },
      { "id": "option_3", "text": "final", "isCorrect": false },
      { "id": "option_4", "text": "constant", "isCorrect": false }
    ],
    "hint": "In Ruby, constants are written in all uppercase letters.",
    "answerDescription": "Constants in Ruby are defined by using uppercase letters, such as `MY_CONSTANT`."
  },
  {
    "id": "ruby_067",
    "question": "Which method is used to round a float to the nearest integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "round", "isCorrect": true },
      { "id": "option_2", "text": "ceil", "isCorrect": false },
      { "id": "option_3", "text": "floor", "isCorrect": false },
      { "id": "option_4", "text": "truncate", "isCorrect": false }
    ],
    "hint": "This method rounds the number to the closest integer.",
    "answerDescription": "The `.round` method in Ruby rounds a floating-point number to the nearest integer."
  },
  {
    "id": "ruby_068",
    "question": "Which method is used to convert a string to an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_i", "isCorrect": true },
      { "id": "option_2", "text": "integer", "isCorrect": false },
      { "id": "option_3", "text": "convert", "isCorrect": false },
      { "id": "option_4", "text": "parse", "isCorrect": false }
    ],
    "hint": "This method changes a string into an integer.",
    "answerDescription": "The `.to_i` method in Ruby converts a string to an integer."
  },
  {
    "id": "ruby_069",
    "question": "Which method is used to repeat a string multiple times in Ruby?",
    "options": [
      { "id": "option_1", "text": "*", "isCorrect": true },
      { "id": "option_2", "text": "+", "isCorrect": false },
      { "id": "option_3", "text": "&", "isCorrect": false },
      { "id": "option_4", "text": "repeat", "isCorrect": false }
    ],
    "hint": "This operator multiplies a string by a number to repeat it.",
    "answerDescription": "Using `*` in Ruby with a string allows repetition, e.g., `'hi' * 3` results in `'hihihi'`."
  },
  {
    "id": "ruby_070",
    "question": "Which method is used to delete a key-value pair from a hash in Ruby?",
    "options": [
      { "id": "option_1", "text": "delete", "isCorrect": true },
      { "id": "option_2", "text": "remove", "isCorrect": false },
      { "id": "option_3", "text": "erase", "isCorrect": false },
      { "id": "option_4", "text": "discard", "isCorrect": false }
    ],
    "hint": "This method removes a key from a hash.",
    "answerDescription": "The `.delete` method in Ruby removes a key-value pair from a hash."
  },
  {
    "id": "ruby_071",
    "question": "Which method checks if a hash has a specific key in Ruby?",
    "options": [
      { "id": "option_1", "text": "key?", "isCorrect": true },
      { "id": "option_2", "text": "has?", "isCorrect": false },
      { "id": "option_3", "text": "exists?", "isCorrect": false },
      { "id": "option_4", "text": "includes?", "isCorrect": false }
    ],
    "hint": "This method checks if a given key exists in the hash.",
    "answerDescription": "The `.key?` method in Ruby checks if a specific key exists in a hash."
  },
  {
    "id": "ruby_072",
    "question": "Which method is used to find the first element in an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "first", "isCorrect": true },
      { "id": "option_2", "text": "head", "isCorrect": false },
      { "id": "option_3", "text": "begin", "isCorrect": false },
      { "id": "option_4", "text": "start", "isCorrect": false }
    ],
    "hint": "This method returns the first element of an array.",
    "answerDescription": "The `.first` method in Ruby returns the first element of an array."
  },
  {
    "id": "ruby_073",
    "question": "Which method is used to find the last element in an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "last", "isCorrect": true },
      { "id": "option_2", "text": "end", "isCorrect": false },
      { "id": "option_3", "text": "final", "isCorrect": false },
      { "id": "option_4", "text": "tail", "isCorrect": false }
    ],
    "hint": "This method returns the last element of an array.",
    "answerDescription": "The `.last` method in Ruby returns the last element of an array."
  },
  {
    "id": "ruby_074",
    "question": "Which method is used to shuffle the elements in an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "shuffle", "isCorrect": true },
      { "id": "option_2", "text": "randomize", "isCorrect": false },
      { "id": "option_3", "text": "mix", "isCorrect": false },
      { "id": "option_4", "text": "scramble", "isCorrect": false }
    ],
    "hint": "This method rearranges the elements randomly.",
    "answerDescription": "The `.shuffle` method in Ruby randomly rearranges the elements of an array."
  },
  {
    "id": "ruby_075",
    "question": "Which method converts an array into a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "join", "isCorrect": true },
      { "id": "option_2", "text": "merge", "isCorrect": false },
      { "id": "option_3", "text": "concat", "isCorrect": false },
      { "id": "option_4", "text": "to_s", "isCorrect": false }
    ],
    "hint": "This method joins array elements into a single string.",
    "answerDescription": "The `.join` method in Ruby converts an array into a string."
  },
  {
    "id": "ruby_076",
    "question": "Which method removes whitespace from both ends of a string?",
    "options": [
      { "id": "option_1", "text": "strip", "isCorrect": true },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "chop", "isCorrect": false },
      { "id": "option_4", "text": "cut", "isCorrect": false }
    ],
    "hint": "This method is useful for cleaning user input.",
    "answerDescription": "The `strip` method removes whitespace from both ends of a string."
  },
  {
    "id": "ruby_077",
    "question": "Which method checks if an array is empty in Ruby?",
    "options": [
      { "id": "option_1", "text": "null?", "isCorrect": false },
      { "id": "option_2", "text": "empty?", "isCorrect": true },
      { "id": "option_3", "text": "size?", "isCorrect": false },
      { "id": "option_4", "text": "zero?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the array has no elements.",
    "answerDescription": "The `.empty?` method in Ruby checks if an array is empty."
  },
  {
    "id": "ruby_078",
    "question": "Which method is used to convert a symbol to a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "stringify", "isCorrect": false },
      { "id": "option_2", "text": "to_s", "isCorrect": true },
      { "id": "option_3", "text": "convert", "isCorrect": false },
      { "id": "option_4", "text": "cast", "isCorrect": false }
    ],
    "hint": "This method is commonly used to turn symbols into strings.",
    "answerDescription": "The `.to_s` method in Ruby converts a symbol into a string."
  },
  {
    "id": "ruby_079",
    "question": "Which method returns the number of elements in an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "count_of", "isCorrect": false },
      { "id": "option_2", "text": "length", "isCorrect": true },
      { "id": "option_3", "text": "size_of", "isCorrect": false },
      { "id": "option_4", "text": "total", "isCorrect": false }
    ],
    "hint": "This method returns the total number of elements.",
    "answerDescription": "The `.length` method in Ruby returns the number of elements in an array."
  },
  {
    "id": "ruby_080",
    "question": "Which method is used to sort an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "arrange", "isCorrect": false },
      { "id": "option_2", "text": "sort", "isCorrect": true },
      { "id": "option_3", "text": "order", "isCorrect": false },
      { "id": "option_4", "text": "sequence", "isCorrect": false }
    ],
    "hint": "This method sorts elements in ascending order by default.",
    "answerDescription": "The `.sort` method in Ruby arranges the elements of an array in ascending order."
  },
  {
    "id": "ruby_081",
    "question": "Which keyword is used to define a function in Ruby?",
    "options": [
      { "id": "option_1", "text": "fun", "isCorrect": false },
      { "id": "option_2", "text": "def", "isCorrect": true },
      { "id": "option_3", "text": "define", "isCorrect": false },
      { "id": "option_4", "text": "function", "isCorrect": false }
    ],
    "hint": "This keyword is followed by the function name and parameters.",
    "answerDescription": "The `def` keyword in Ruby is used to define a function."
  },
  {
    "id": "ruby_082",
    "question": "Which method is used to convert a string to uppercase in Ruby?",
    "options": [
      { "id": "option_1", "text": "upcase!", "isCorrect": false },
      { "id": "option_2", "text": "upcase", "isCorrect": true },
      { "id": "option_3", "text": "upper", "isCorrect": false },
      { "id": "option_4", "text": "capitalize", "isCorrect": false }
    ],
    "hint": "This method converts all letters in a string to uppercase.",
    "answerDescription": "The `.upcase` method in Ruby converts all characters in a string to uppercase."
  },
  {
    "id": "ruby_083",
    "question": "Which method is used to check if a string includes a certain substring in Ruby?",
    "options": [
      { "id": "option_1", "text": "has?", "isCorrect": false },
      { "id": "option_2", "text": "include?", "isCorrect": true },
      { "id": "option_3", "text": "contains?", "isCorrect": false },
      { "id": "option_4", "text": "exists?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the substring exists in the string.",
    "answerDescription": "The `.include?` method in Ruby checks if a string contains a specific substring."
  },
  {
    "id": "ruby_084",
    "question": "Which method is used to remove whitespace from both ends of a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "strip!", "isCorrect": false },
      { "id": "option_2", "text": "strip", "isCorrect": true },
      { "id": "option_3", "text": "trim", "isCorrect": false },
      { "id": "option_4", "text": "cut", "isCorrect": false }
    ],
    "hint": "This method removes leading and trailing spaces.",
    "answerDescription": "The `.strip` method in Ruby removes whitespace from both ends of a string."
  },
  {
    "id": "ruby_085",
    "question": "Which method is used to check the class of an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "typeof", "isCorrect": false },
      { "id": "option_2", "text": "class", "isCorrect": true },
      { "id": "option_3", "text": "type", "isCorrect": false },
      { "id": "option_4", "text": "category", "isCorrect": false }
    ],
    "hint": "This method returns the object's class name.",
    "answerDescription": "The `.class` method in Ruby returns the class of an object."
  },  {
    "id": "ruby_086",
    "question": "Which keyword is used to exit a loop in Ruby?",
    "options": [
      { "id": "option_1", "text": "stop", "isCorrect": false },
      { "id": "option_2", "text": "halt", "isCorrect": false },
      { "id": "option_3", "text": "break", "isCorrect": true },
      { "id": "option_4", "text": "exit", "isCorrect": false }
    ],
    "hint": "This keyword immediately stops loop execution.",
    "answerDescription": "The `break` keyword in Ruby is used to exit a loop prematurely."
  },
  {
    "id": "ruby_087",
    "question": "Which method is used to get a range of elements from an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "subarray", "isCorrect": false },
      { "id": "option_2", "text": "slice!", "isCorrect": false },
      { "id": "option_3", "text": "slice", "isCorrect": true },
      { "id": "option_4", "text": "cut", "isCorrect": false }
    ],
    "hint": "This method returns a subset of an array based on index.",
    "answerDescription": "The `.slice` method in Ruby retrieves a portion of an array using an index range."
  },
  {
    "id": "ruby_088",
    "question": "Which method returns a boolean value if a hash contains a specific value?",
    "options": [
      { "id": "option_1", "text": "has_value", "isCorrect": false },
      { "id": "option_2", "text": "includes?", "isCorrect": false },
      { "id": "option_3", "text": "value?", "isCorrect": true },
      { "id": "option_4", "text": "exists?", "isCorrect": false }
    ],
    "hint": "This method checks if a hash has a specific value.",
    "answerDescription": "The `.value?` method in Ruby checks whether a specific value exists in a hash."
  },
  {
    "id": "ruby_089",
    "question": "Which method is used to iterate over a hash in Ruby?",
    "options": [
      { "id": "option_1", "text": "each_item", "isCorrect": false },
      { "id": "option_2", "text": "loop", "isCorrect": false },
      { "id": "option_3", "text": "each", "isCorrect": true },
      { "id": "option_4", "text": "for_each", "isCorrect": false }
    ],
    "hint": "This method iterates through key-value pairs in a hash.",
    "answerDescription": "The `.each` method in Ruby is used to iterate over key-value pairs in a hash."
  },
  {
    "id": "ruby_090",
    "question": "Which method is used to return the number of elements in an array?",
    "options": [
      { "id": "option_1", "text": "length", "isCorrect": true },
      { "id": "option_2", "text": "count_elements", "isCorrect": false },
      { "id": "option_3", "text": "total", "isCorrect": false },
      { "id": "option_4", "text": "sum", "isCorrect": false }
    ],
    "hint": "This method returns the number of items stored in an array.",
    "answerDescription": "The `length` method returns the number of elements in an array."
  },
  {
    "id": "ruby_091",
    "question": "Which method is used to remove duplicate elements from an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "unique", "isCorrect": false },
      { "id": "option_2", "text": "distinct", "isCorrect": false },
      { "id": "option_3", "text": "uniq", "isCorrect": true },
      { "id": "option_4", "text": "remove_duplicates", "isCorrect": false }
    ],
    "hint": "This method returns a new array with unique elements.",
    "answerDescription": "The `.uniq` method in Ruby removes duplicate elements from an array."
  },
  {
    "id": "ruby_092",
    "question": "Which method is used to swapcase all letters in a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "invert_case", "isCorrect": false },
      { "id": "option_2", "text": "toggle", "isCorrect": false },
      { "id": "option_3", "text": "swapcase", "isCorrect": true },
      { "id": "option_4", "text": "reverse_case", "isCorrect": false }
    ],
    "hint": "This method switches uppercase to lowercase and vice versa.",
    "answerDescription": "The `.swapcase` method in Ruby swaps the case of all letters in a string."
  },
  {
    "id": "ruby_093",
    "question": "Which method is used to add an element to the end of an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "append", "isCorrect": false },
      { "id": "option_2", "text": "push!", "isCorrect": false },
      { "id": "option_3", "text": "push", "isCorrect": true },
      { "id": "option_4", "text": "add", "isCorrect": false }
    ],
    "hint": "This method appends an element to the array.",
    "answerDescription": "The `.push` method in Ruby adds an element to the end of an array."
  },
  {
    "id": "ruby_094",
    "question": "Which method returns a reversed version of a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "invert", "isCorrect": false },
      { "id": "option_2", "text": "flip", "isCorrect": false },
      { "id": "option_3", "text": "reverse", "isCorrect": true },
      { "id": "option_4", "text": "backwards", "isCorrect": false }
    ],
    "hint": "This method returns a string with characters in reverse order.",
    "answerDescription": "The `.reverse` method in Ruby returns a new string with characters reversed."
  },
  {
    "id": "ruby_095",
    "question": "Which method is used to find the index of an element in an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "find_index", "isCorrect": false },
      { "id": "option_2", "text": "get_index", "isCorrect": false },
      { "id": "option_3", "text": "index", "isCorrect": true },
      { "id": "option_4", "text": "locate", "isCorrect": false }
    ],
    "hint": "This method returns the position of an element in the array.",
    "answerDescription": "The `.index` method in Ruby finds the index of an element in an array."
  },  {
    "id": "ruby_096",
    "question": "Which method is used to convert a string into an array of words in Ruby?",
    "options": [
      { "id": "option_1", "text": "split!", "isCorrect": false },
      { "id": "option_2", "text": "separate", "isCorrect": false },
      { "id": "option_3", "text": "explode", "isCorrect": false },
      { "id": "option_4", "text": "split", "isCorrect": true }
    ],
    "hint": "This method divides a string into an array based on a delimiter.",
    "answerDescription": "The `.split` method in Ruby converts a string into an array of words based on a delimiter."
  },
  {
    "id": "ruby_097",
    "question": "Which method is used to merge two hashes in Ruby?",
    "options": [
      { "id": "option_1", "text": "combine", "isCorrect": false },
      { "id": "option_2", "text": "append", "isCorrect": false },
      { "id": "option_3", "text": "concat", "isCorrect": false },
      { "id": "option_4", "text": "merge", "isCorrect": true }
    ],
    "hint": "This method combines two hashes into a single hash.",
    "answerDescription": "The `.merge` method in Ruby is used to merge two hashes together."
  },
  {
    "id": "ruby_098",
    "question": "Which method removes the last element from an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "remove_last", "isCorrect": false },
      { "id": "option_2", "text": "delete_end", "isCorrect": false },
      { "id": "option_3", "text": "drop_last", "isCorrect": false },
      { "id": "option_4", "text": "pop", "isCorrect": true }
    ],
    "hint": "This method removes and returns the last element of an array.",
    "answerDescription": "The `.pop` method in Ruby removes and returns the last element of an array."
  },
  {
    "id": "ruby_099",
    "question": "Which method checks if a hash contains a specific key?",
    "options": [
      { "id": "option_1", "text": "has?", "isCorrect": false },
      { "id": "option_2", "text": "find_key", "isCorrect": false },
      { "id": "option_3", "text": "includes?", "isCorrect": false },
      { "id": "option_4", "text": "key?", "isCorrect": true }
    ],
    "hint": "This method checks whether a given key exists in a hash.",
    "answerDescription": "The `.key?` method in Ruby is used to check if a hash contains a specific key."
  },
  {
    "id": "ruby_100",
    "question": "Which method removes the first element from an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "delete_first", "isCorrect": false },
      { "id": "option_2", "text": "drop", "isCorrect": false },
      { "id": "option_3", "text": "remove_head", "isCorrect": false },
      { "id": "option_4", "text": "shift", "isCorrect": true }
    ],
    "hint": "This method removes and returns the first element of an array.",
    "answerDescription": "The `.shift` method in Ruby removes and returns the first element of an array."
  },
  {
    "id": "ruby_101",
    "question": "Which operator is used for modulo operations in Ruby?",
    "options": [
      { "id": "option_1", "text": "//", "isCorrect": false },
      { "id": "option_2", "text": "mod", "isCorrect": false },
      { "id": "option_3", "text": "&", "isCorrect": false },
      { "id": "option_4", "text": "%", "isCorrect": true }
    ],
    "hint": "This operator returns the remainder of a division operation.",
    "answerDescription": "The `%` operator in Ruby is used for modulo operations, returning the remainder of division."
  },
  {
    "id": "ruby_102",
    "question": "Which method is used to repeat a string multiple times in Ruby?",
    "options": [
      { "id": "option_1", "text": "repeat", "isCorrect": false },
      { "id": "option_2", "text": "duplicate", "isCorrect": false },
      { "id": "option_3", "text": "replay", "isCorrect": false },
      { "id": "option_4", "text": "*", "isCorrect": true }
    ],
    "hint": "This operator is used to duplicate a string a specified number of times.",
    "answerDescription": "The `*` operator in Ruby repeats a string multiple times, e.g., `'hello' * 3` results in `'hellohellohello'`."
  },
  {
    "id": "ruby_103",
    "question": "Which method is used to check if a string starts with a specific substring in Ruby?",
    "options": [
      { "id": "option_1", "text": "begin?", "isCorrect": false },
      { "id": "option_2", "text": "first?", "isCorrect": false },
      { "id": "option_3", "text": "init?", "isCorrect": false },
      { "id": "option_4", "text": "start_with?", "isCorrect": true }
    ],
    "hint": "This method checks whether a string starts with a certain substring.",
    "answerDescription": "The `.start_with?` method in Ruby checks if a string begins with a specified substring."
  },
  {
    "id": "ruby_104",
    "question": "Which method converts a floating-point number to an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_i!", "isCorrect": false },
      { "id": "option_2", "text": "int_convert", "isCorrect": false },
      { "id": "option_3", "text": "integerize", "isCorrect": false },
      { "id": "option_4", "text": "to_i", "isCorrect": true }
    ],
    "hint": "This method removes the decimal part of a floating number.",
    "answerDescription": "The `.to_i` method in Ruby converts a floating-point number to an integer by truncating the decimal part."
  },
  {
    "id": "ruby_105",
    "question": "Which method is used to get the last element of an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "last_one", "isCorrect": false },
      { "id": "option_2", "text": "end", "isCorrect": false },
      { "id": "option_3", "text": "tail", "isCorrect": false },
      { "id": "option_4", "text": "last", "isCorrect": true }
    ],
    "hint": "This method retrieves the final element of an array.",
    "answerDescription": "The `.last` method in Ruby returns the last element of an array."
  },  {
    "id": "ruby_106",
    "question": "Which method is used to convert a string to lowercase in Ruby?",
    "options": [
      { "id": "option_1", "text": "downcase", "isCorrect": true },
      { "id": "option_2", "text": "lower", "isCorrect": false },
      { "id": "option_3", "text": "smallcase", "isCorrect": false },
      { "id": "option_4", "text": "tolower", "isCorrect": false }
    ],
    "hint": "This method returns a new string with all lowercase letters.",
    "answerDescription": "The `.downcase` method in Ruby converts all letters in a string to lowercase."
  },
  {
    "id": "ruby_107",
    "question": "Which method is used to convert a string to uppercase in Ruby?",
    "options": [
      { "id": "option_1", "text": "upcase", "isCorrect": true },
      { "id": "option_2", "text": "uppercase", "isCorrect": false },
      { "id": "option_3", "text": "toupper", "isCorrect": false },
      { "id": "option_4", "text": "bigcase", "isCorrect": false }
    ],
    "hint": "This method returns a new string with all uppercase letters.",
    "answerDescription": "The `.upcase` method in Ruby converts all letters in a string to uppercase."
  },
  {
    "id": "ruby_108",
    "question": "Which method is used to remove leading and trailing whitespace in Ruby?",
    "options": [
      { "id": "option_1", "text": "strip", "isCorrect": true },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "clean", "isCorrect": false },
      { "id": "option_4", "text": "chomp", "isCorrect": false }
    ],
    "hint": "This method removes whitespace from both ends of a string.",
    "answerDescription": "The `.strip` method in Ruby removes leading and trailing whitespace from a string."
  },
  {
    "id": "ruby_109",
    "question": "Which method is used to capitalize the first letter of a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "capitalize", "isCorrect": true },
      { "id": "option_2", "text": "titlecase", "isCorrect": false },
      { "id": "option_3", "text": "first_upper", "isCorrect": false },
      { "id": "option_4", "text": "upper_first", "isCorrect": false }
    ],
    "hint": "This method converts the first letter of a string to uppercase.",
    "answerDescription": "The `.capitalize` method in Ruby makes the first letter uppercase and the rest lowercase."
  },
  {
    "id": "ruby_110",
    "question": "Which method is used to check if an array is empty in Ruby?",
    "options": [
      { "id": "option_1", "text": "empty?", "isCorrect": true },
      { "id": "option_2", "text": "size?", "isCorrect": false },
      { "id": "option_3", "text": "length?", "isCorrect": false },
      { "id": "option_4", "text": "nil?", "isCorrect": false }
    ],
    "hint": "This method returns true if an array has no elements.",
    "answerDescription": "The `.empty?` method in Ruby checks if an array is empty."
  },
  {
    "id": "ruby_111",
    "question": "Which method returns the number of elements in an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "length", "isCorrect": true },
      { "id": "option_2", "text": "count", "isCorrect": false },
      { "id": "option_3", "text": "size?", "isCorrect": false },
      { "id": "option_4", "text": "elements", "isCorrect": false }
    ],
    "hint": "This method counts the elements in an array.",
    "answerDescription": "The `.length` method in Ruby returns the number of elements in an array."
  },
  {
    "id": "ruby_112",
    "question": "Which method is used to check if a string contains a specific substring in Ruby?",
    "options": [
      { "id": "option_1", "text": "include?", "isCorrect": true },
      { "id": "option_2", "text": "has?", "isCorrect": false },
      { "id": "option_3", "text": "contains?", "isCorrect": false },
      { "id": "option_4", "text": "find", "isCorrect": false }
    ],
    "hint": "This method checks for substring presence in a string.",
    "answerDescription": "The `.include?` method in Ruby checks if a string contains a specific substring."
  },
  {
    "id": "ruby_113",
    "question": "Which method is used to delete a key-value pair from a hash in Ruby?",
    "options": [
      { "id": "option_1", "text": "delete", "isCorrect": true },
      { "id": "option_2", "text": "remove", "isCorrect": false },
      { "id": "option_3", "text": "erase", "isCorrect": false },
      { "id": "option_4", "text": "discard", "isCorrect": false }
    ],
    "hint": "This method removes a key and its associated value from a hash.",
    "answerDescription": "The `.delete` method in Ruby removes a key-value pair from a hash."
  },
  {
    "id": "ruby_114",
    "question": "Which method is used to check if an object is nil in Ruby?",
    "options": [
      { "id": "option_1", "text": "nil?", "isCorrect": true },
      { "id": "option_2", "text": "empty?", "isCorrect": false },
      { "id": "option_3", "text": "zero?", "isCorrect": false },
      { "id": "option_4", "text": "none?", "isCorrect": false }
    ],
    "hint": "This method checks if an object is `nil`.",
    "answerDescription": "The `.nil?` method in Ruby returns `true` if the object is `nil`."
  },
  {
    "id": "ruby_115",
    "question": "Which method is used to concatenate two strings in Ruby?",
    "options": [
      { "id": "option_1", "text": "concat", "isCorrect": true },
      { "id": "option_2", "text": "merge", "isCorrect": false },
      { "id": "option_3", "text": "combine", "isCorrect": false },
      { "id": "option_4", "text": "append", "isCorrect": false }
    ],
    "hint": "This method joins two strings together.",
    "answerDescription": "The `.concat` method in Ruby appends one string to another."
  },
  {
    "id": "ruby_116",
    "question": "How do you declare an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using square brackets: []", "isCorrect": true },
      { "id": "option_2", "text": "Using curly brackets: {}", "isCorrect": false },
      { "id": "option_3", "text": "Using angle brackets: <>", "isCorrect": false },
      { "id": "option_4", "text": "Using parentheses: ()", "isCorrect": false }
    ],
    "hint": "Ruby uses the same syntax as JavaScript for arrays.",
    "answerDescription": "Arrays in Ruby are declared using square brackets: `[1, 2, 3]`."
  },
  {
    "id": "ruby_117",
    "question": "Which method returns the absolute value of a number in Ruby?",
    "options": [
      { "id": "option_1", "text": "absval", "isCorrect": false },
      { "id": "option_2", "text": "abs", "isCorrect": true },
      { "id": "option_3", "text": "absolute", "isCorrect": false },
      { "id": "option_4", "text": "modulus", "isCorrect": false }
    ],
    "hint": "This method removes the sign from a number.",
    "answerDescription": "The `.abs` method in Ruby returns the absolute value of a number."
  },
  {
    "id": "ruby_118",
    "question": "Which operator is used to compare if two values are equal in Ruby?",
    "options": [
      { "id": "option_1", "text": "=", "isCorrect": false },
      { "id": "option_2", "text": "==", "isCorrect": true },
      { "id": "option_3", "text": "===", "isCorrect": false },
      { "id": "option_4", "text": "!=", "isCorrect": false }
    ],
    "hint": "This operator checks equality between two values.",
    "answerDescription": "The `==` operator is used for value comparison in Ruby."
  },
  {
    "id": "ruby_119",
    "question": "Which method is used to check if an array includes a specific element?",
    "options": [
      { "id": "option_1", "text": "has?", "isCorrect": false },
      { "id": "option_2", "text": "include?", "isCorrect": true },
      { "id": "option_3", "text": "contains?", "isCorrect": false },
      { "id": "option_4", "text": "exists?", "isCorrect": false }
    ],
    "hint": "This method checks if an array contains a specific value.",
    "answerDescription": "The `.include?` method in Ruby checks if an array contains a given element."
  },
  {
    "id": "ruby_120",
    "question": "Which method is used to join an array into a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "merge", "isCorrect": false },
      { "id": "option_2", "text": "join", "isCorrect": true },
      { "id": "option_3", "text": "combine", "isCorrect": false },
      { "id": "option_4", "text": "concatenate", "isCorrect": false }
    ],
    "hint": "This method merges all elements of an array into a single string.",
    "answerDescription": "The `.join` method in Ruby converts an array into a string, using a separator if provided."
  },
  {
    "id": "ruby_121",
    "question": "Which method is used to get the index of an element in an array?",
    "options": [
      { "id": "option_1", "text": "find", "isCorrect": false },
      { "id": "option_2", "text": "index", "isCorrect": true },
      { "id": "option_3", "text": "position", "isCorrect": false },
      { "id": "option_4", "text": "search", "isCorrect": false }
    ],
    "hint": "This method returns the position of an element in an array.",
    "answerDescription": "The `.index` method in Ruby returns the index of the first occurrence of a specified element."
  },
  {
    "id": "ruby_122",
    "question": "Which method is used to reverse an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "flip", "isCorrect": false },
      { "id": "option_2", "text": "reverse", "isCorrect": true },
      { "id": "option_3", "text": "invert", "isCorrect": false },
      { "id": "option_4", "text": "backward", "isCorrect": false }
    ],
    "hint": "This method returns an array in reverse order.",
    "answerDescription": "The `.reverse` method in Ruby returns a reversed copy of the array."
  },
  {
    "id": "ruby_123",
    "question": "Which method removes all nil values from an array?",
    "options": [
      { "id": "option_1", "text": "remove_nil", "isCorrect": false },
      { "id": "option_2", "text": "compact", "isCorrect": true },
      { "id": "option_3", "text": "delete_nil", "isCorrect": false },
      { "id": "option_4", "text": "purge", "isCorrect": false }
    ],
    "hint": "This method removes `nil` values from an array.",
    "answerDescription": "The `.compact` method in Ruby removes all `nil` values from an array."
  },
  {
    "id": "ruby_124",
    "question": "Which method is used to remove duplicates from an array?",
    "options": [
      { "id": "option_1", "text": "unique", "isCorrect": false },
      { "id": "option_2", "text": "uniq", "isCorrect": true },
      { "id": "option_3", "text": "distinct", "isCorrect": false },
      { "id": "option_4", "text": "filter", "isCorrect": false }
    ],
    "hint": "This method removes duplicate elements from an array.",
    "answerDescription": "The `.uniq` method in Ruby removes duplicate elements from an array."
  },
  {
    "id": "ruby_125",
    "question": "Which method returns a random element from an array?",
    "options": [
      { "id": "option_1", "text": "rand_element", "isCorrect": false },
      { "id": "option_2", "text": "sample", "isCorrect": true },
      { "id": "option_3", "text": "pick_random", "isCorrect": false },
      { "id": "option_4", "text": "shuffle", "isCorrect": false }
    ],
    "hint": "This method randomly selects an element from an array.",
    "answerDescription": "The `.sample` method in Ruby returns a random element from an array."
  },  {
    "id": "ruby_126",
    "question": "Which method is used to check if a string starts with a specific substring?",
    "options": [
      { "id": "option_1", "text": "begin_with?", "isCorrect": false },
      { "id": "option_2", "text": "has_prefix?", "isCorrect": false },
      { "id": "option_3", "text": "start_with?", "isCorrect": true },
      { "id": "option_4", "text": "prefix?", "isCorrect": false }
    ],
    "hint": "This method checks if a string begins with the specified characters.",
    "answerDescription": "The `.start_with?` method in Ruby checks if a string starts with a given substring."
  },
  {
    "id": "ruby_127",
    "question": "Which method is used to check if a string ends with a specific substring?",
    "options": [
      { "id": "option_1", "text": "has_suffix?", "isCorrect": false },
      { "id": "option_2", "text": "end?", "isCorrect": false },
      { "id": "option_3", "text": "end_with?", "isCorrect": true },
      { "id": "option_4", "text": "suffix?", "isCorrect": false }
    ],
    "hint": "This method checks if a string ends with the specified characters.",
    "answerDescription": "The `.end_with?` method in Ruby checks if a string ends with a given substring."
  },
  {
    "id": "ruby_128",
    "question": "Which method is used to remove the last element of an array?",
    "options": [
      { "id": "option_1", "text": "delete_last", "isCorrect": false },
      { "id": "option_2", "text": "remove_last", "isCorrect": false },
      { "id": "option_3", "text": "pop", "isCorrect": true },
      { "id": "option_4", "text": "drop_last", "isCorrect": false }
    ],
    "hint": "This method removes and returns the last element of an array.",
    "answerDescription": "The `.pop` method in Ruby removes the last element from an array."
  },
  {
    "id": "ruby_129",
    "question": "Which method is used to add an element to the end of an array?",
    "options": [
      { "id": "option_1", "text": "push_last", "isCorrect": false },
      { "id": "option_2", "text": "append", "isCorrect": false },
      { "id": "option_3", "text": "push", "isCorrect": true },
      { "id": "option_4", "text": "add_end", "isCorrect": false }
    ],
    "hint": "This method inserts an element at the end of an array.",
    "answerDescription": "The `.push` method in Ruby adds an element to the end of an array."
  },
  {
    "id": "ruby_130",
    "question": "Which method is used to remove the first element of an array?",
    "options": [
      { "id": "option_1", "text": "delete_first", "isCorrect": false },
      { "id": "option_2", "text": "remove_start", "isCorrect": false },
      { "id": "option_3", "text": "shift", "isCorrect": true },
      { "id": "option_4", "text": "drop_first", "isCorrect": false }
    ],
    "hint": "This method removes and returns the first element of an array.",
    "answerDescription": "The `.shift` method in Ruby removes the first element from an array."
  },
  {
    "id": "ruby_131",
    "question": "Which method is used to add an element to the beginning of an array?",
    "options": [
      { "id": "option_1", "text": "push_start", "isCorrect": false },
      { "id": "option_2", "text": "prepend", "isCorrect": false },
      { "id": "option_3", "text": "unshift", "isCorrect": true },
      { "id": "option_4", "text": "insert_first", "isCorrect": false }
    ],
    "hint": "This method inserts an element at the beginning of an array.",
    "answerDescription": "The `.unshift` method in Ruby adds an element to the beginning of an array."
  },
  {
    "id": "ruby_132",
    "question": "Which method returns a sorted array without modifying the original array?",
    "options": [
      { "id": "option_1", "text": "order", "isCorrect": false },
      { "id": "option_2", "text": "arrange", "isCorrect": false },
      { "id": "option_3", "text": "sort", "isCorrect": true },
      { "id": "option_4", "text": "sorted", "isCorrect": false }
    ],
    "hint": "This method returns a sorted version of an array without changing the original.",
    "answerDescription": "The `.sort` method in Ruby returns a new array sorted in ascending order."
  },
  {
    "id": "ruby_133",
    "question": "Which method sorts an array in place, modifying the original array?",
    "options": [
      { "id": "option_1", "text": "sort_now", "isCorrect": false },
      { "id": "option_2", "text": "arrange!", "isCorrect": false },
      { "id": "option_3", "text": "sort!", "isCorrect": true },
      { "id": "option_4", "text": "order!", "isCorrect": false }
    ],
    "hint": "This method sorts an array and modifies it in place.",
    "answerDescription": "The `.sort!` method in Ruby sorts an array in place, modifying the original array."
  },
  {
    "id": "ruby_134",
    "question": "Which method is used to check if a number is even in Ruby?",
    "options": [
      { "id": "option_1", "text": "even_number?", "isCorrect": false },
      { "id": "option_2", "text": "is_even?", "isCorrect": false },
      { "id": "option_3", "text": "even?", "isCorrect": true },
      { "id": "option_4", "text": "check_even", "isCorrect": false }
    ],
    "hint": "This method returns true if a number is even.",
    "answerDescription": "The `.even?` method in Ruby returns `true` if a number is even."
  },
  {
    "id": "ruby_135",
    "question": "Which method is used to check if a number is odd in Ruby?",
    "options": [
      { "id": "option_1", "text": "odd_number?", "isCorrect": false },
      { "id": "option_2", "text": "is_odd?", "isCorrect": false },
      { "id": "option_3", "text": "odd?", "isCorrect": true },
      { "id": "option_4", "text": "check_odd", "isCorrect": false }
    ],
    "hint": "This method returns true if a number is odd.",
    "answerDescription": "The `.odd?` method in Ruby returns `true` if a number is odd."
  },  {
    "id": "ruby_136",
    "question": "Which keyword is used to define a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "const", "isCorrect": false },
      { "id": "option_2", "text": "define", "isCorrect": false },
      { "id": "option_3", "text": "static", "isCorrect": false },
      { "id": "option_4", "text": "Ruby does not have a specific keyword, but constants are written in uppercase.", "isCorrect": true }
    ],
    "hint": "In Ruby, constants are typically named using uppercase letters.",
    "answerDescription": "Ruby does not have a `const` keyword. Instead, constants are conventionally written in uppercase."
  },
  {
    "id": "ruby_137",
    "question": "Which method is used to convert a string to an integer?",
    "options": [
      { "id": "option_1", "text": "string_to_int", "isCorrect": false },
      { "id": "option_2", "text": "integer", "isCorrect": false },
      { "id": "option_3", "text": "convert", "isCorrect": false },
      { "id": "option_4", "text": "to_i", "isCorrect": true }
    ],
    "hint": "This method changes a string into an integer.",
    "answerDescription": "The `.to_i` method in Ruby converts a string to an integer."
  },
  {
    "id": "ruby_138",
    "question": "Which method is used to convert an integer to a string?",
    "options": [
      { "id": "option_1", "text": "stringify", "isCorrect": false },
      { "id": "option_2", "text": "convert_to_string", "isCorrect": false },
      { "id": "option_3", "text": "integer_to_s", "isCorrect": false },
      { "id": "option_4", "text": "to_s", "isCorrect": true }
    ],
    "hint": "This method converts an object into a string format.",
    "answerDescription": "The `.to_s` method in Ruby converts an integer to a string."
  },
  {
    "id": "ruby_139",
    "question": "Which method is used to check the class of an object?",
    "options": [
      { "id": "option_1", "text": "getClass", "isCorrect": false },
      { "id": "option_2", "text": "typeof", "isCorrect": false },
      { "id": "option_3", "text": "type", "isCorrect": false },
      { "id": "option_4", "text": "class", "isCorrect": true }
    ],
    "hint": "This method returns the class of an object.",
    "answerDescription": "The `.class` method in Ruby returns the class of a given object."
  },
  {
    "id": "ruby_140",
    "question": "Which method is used to get the length of a string?",
    "options": [
      { "id": "option_1", "text": "sizeOf", "isCorrect": false },
      { "id": "option_2", "text": "count", "isCorrect": false },
      { "id": "option_3", "text": "characters", "isCorrect": false },
      { "id": "option_4", "text": "length", "isCorrect": true }
    ],
    "hint": "This method returns the number of characters in a string.",
    "answerDescription": "The `.length` method in Ruby returns the number of characters in a string."
  },
  {
    "id": "ruby_141",
    "question": "Which method is used to check if a string contains a specific substring?",
    "options": [
      { "id": "option_1", "text": "includes?", "isCorrect": false },
      { "id": "option_2", "text": "exists?", "isCorrect": false },
      { "id": "option_3", "text": "contains?", "isCorrect": false },
      { "id": "option_4", "text": "include?", "isCorrect": true }
    ],
    "hint": "This method checks for the presence of a substring.",
    "answerDescription": "The `.include?` method in Ruby checks if a string contains a specific substring."
  },
  {
    "id": "ruby_142",
    "question": "Which method is used to replace a substring in a string?",
    "options": [
      { "id": "option_1", "text": "change", "isCorrect": false },
      { "id": "option_2", "text": "modify", "isCorrect": false },
      { "id": "option_3", "text": "swap", "isCorrect": false },
      { "id": "option_4", "text": "gsub", "isCorrect": true }
    ],
    "hint": "This method globally substitutes occurrences of a substring.",
    "answerDescription": "The `.gsub` method in Ruby replaces all occurrences of a substring within a string."
  },
  {
    "id": "ruby_143",
    "question": "Which method is used to repeat a string multiple times?",
    "options": [
      { "id": "option_1", "text": "duplicate", "isCorrect": false },
      { "id": "option_2", "text": "repeat", "isCorrect": false },
      { "id": "option_3", "text": "multiply", "isCorrect": false },
      { "id": "option_4", "text": "*", "isCorrect": true }
    ],
    "hint": "This operator repeats a string a given number of times.",
    "answerDescription": "In Ruby, the `*` operator is used to repeat a string (e.g., `'abc' * 3` results in `'abcabcabc'`)."
  },
  {
    "id": "ruby_144",
    "question": "Which method is used to remove whitespace from the beginning and end of a string?",
    "options": [
      { "id": "option_1", "text": "clean", "isCorrect": false },
      { "id": "option_2", "text": "strip_whitespace", "isCorrect": false },
      { "id": "option_3", "text": "trim", "isCorrect": false },
      { "id": "option_4", "text": "strip", "isCorrect": true }
    ],
    "hint": "This method removes leading and trailing spaces from a string.",
    "answerDescription": "The `.strip` method in Ruby removes leading and trailing whitespace from a string."
  },
  {
    "id": "ruby_145",
    "question": "Which method is used to convert a string to uppercase?",
    "options": [
      { "id": "option_1", "text": "toUpperCase", "isCorrect": false },
      { "id": "option_2", "text": "make_upper", "isCorrect": false },
      { "id": "option_3", "text": "capitalize_all", "isCorrect": false },
      { "id": "option_4", "text": "upcase", "isCorrect": true }
    ],
    "hint": "This method converts all characters in a string to uppercase.",
    "answerDescription": "The `.upcase` method in Ruby converts a string to uppercase."
  },  {
    "id": "ruby_146",
    "question": "Which method is used to convert a string to lowercase?",
    "options": [
      { "id": "option_1", "text": "downcase", "isCorrect": true },
      { "id": "option_2", "text": "toLowerCase", "isCorrect": false },
      { "id": "option_3", "text": "make_lower", "isCorrect": false },
      { "id": "option_4", "text": "lowercase_all", "isCorrect": false }
    ],
    "hint": "This method converts all characters in a string to lowercase.",
    "answerDescription": "The `.downcase` method in Ruby converts a string to lowercase."
  },
  {
    "id": "ruby_147",
    "question": "Which operator is used to concatenate strings in Ruby?",
    "options": [
      { "id": "option_1", "text": "+", "isCorrect": true },
      { "id": "option_2", "text": "&", "isCorrect": false },
      { "id": "option_3", "text": "*", "isCorrect": false },
      { "id": "option_4", "text": "#", "isCorrect": false }
    ],
    "hint": "This operator is commonly used for addition but also works for string concatenation.",
    "answerDescription": "The `+` operator in Ruby is used to concatenate (join) two strings."
  },
  {
    "id": "ruby_148",
    "question": "Which method is used to reverse a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "reverse", "isCorrect": true },
      { "id": "option_2", "text": "invert", "isCorrect": false },
      { "id": "option_3", "text": "flip", "isCorrect": false },
      { "id": "option_4", "text": "rev", "isCorrect": false }
    ],
    "hint": "This method returns the characters of a string in reverse order.",
    "answerDescription": "The `.reverse` method in Ruby reverses the order of characters in a string."
  },
  {
    "id": "ruby_149",
    "question": "Which method is used to check if a hash contains a specific key?",
    "options": [
      { "id": "option_1", "text": "key?", "isCorrect": true },
      { "id": "option_2", "text": "contains_key?", "isCorrect": false },
      { "id": "option_3", "text": "has?", "isCorrect": false },
      { "id": "option_4", "text": "include?", "isCorrect": false }
    ],
    "hint": "This method checks if a specific key exists in a hash.",
    "answerDescription": "The `.key?` method in Ruby checks if a hash contains a specific key."
  },
  {
    "id": "ruby_150",
    "question": "Which method is used to check if a hash contains a specific value?",
    "options": [
      { "id": "option_1", "text": "value?", "isCorrect": true },
      { "id": "option_2", "text": "contains_value?", "isCorrect": false },
      { "id": "option_3", "text": "has_value?", "isCorrect": false },
      { "id": "option_4", "text": "include?", "isCorrect": false }
    ],
    "hint": "This method checks if a specific value exists in a hash.",
    "answerDescription": "The `.value?` method in Ruby checks if a hash contains a specific value."
  },
  {
    "id": "ruby_151",
    "question": "Which method is used to remove and return the last key-value pair from a hash?",
    "options": [
      { "id": "option_1", "text": "shift", "isCorrect": true },
      { "id": "option_2", "text": "pop", "isCorrect": false },
      { "id": "option_3", "text": "delete_last", "isCorrect": false },
      { "id": "option_4", "text": "remove_end", "isCorrect": false }
    ],
    "hint": "This method removes and returns the first key-value pair from a hash.",
    "answerDescription": "The `.shift` method in Ruby removes and returns the first key-value pair from a hash."
  },
  {
    "id": "ruby_152",
    "question": "Which method is used to merge two hashes?",
    "options": [
      { "id": "option_1", "text": "merge", "isCorrect": true },
      { "id": "option_2", "text": "combine", "isCorrect": false },
      { "id": "option_3", "text": "concat", "isCorrect": false },
      { "id": "option_4", "text": "add", "isCorrect": false }
    ],
    "hint": "This method returns a new hash by combining two hashes.",
    "answerDescription": "The `.merge` method in Ruby combines two hashes, returning a new hash with merged key-value pairs."
  },
  {
    "id": "ruby_153",
    "question": "Which method returns all the keys in a hash?",
    "options": [
      { "id": "option_1", "text": "keys", "isCorrect": true },
      { "id": "option_2", "text": "get_keys", "isCorrect": false },
      { "id": "option_3", "text": "extract_keys", "isCorrect": false },
      { "id": "option_4", "text": "fetch_keys", "isCorrect": false }
    ],
    "hint": "This method returns an array containing all keys of a hash.",
    "answerDescription": "The `.keys` method in Ruby returns an array containing all keys of a hash."
  },
  {
    "id": "ruby_154",
    "question": "Which method returns all the values in a hash?",
    "options": [
      { "id": "option_1", "text": "values", "isCorrect": true },
      { "id": "option_2", "text": "get_values", "isCorrect": false },
      { "id": "option_3", "text": "extract_values", "isCorrect": false },
      { "id": "option_4", "text": "fetch_values", "isCorrect": false }
    ],
    "hint": "This method returns an array containing all values of a hash.",
    "answerDescription": "The `.values` method in Ruby returns an array containing all values of a hash."
  },
  {
    "id": "ruby_155",
    "question": "Which method is used to delete a key-value pair from a hash?",
    "options": [
      { "id": "option_1", "text": "delete", "isCorrect": true },
      { "id": "option_2", "text": "remove_key", "isCorrect": false },
      { "id": "option_3", "text": "erase", "isCorrect": false },
      { "id": "option_4", "text": "del", "isCorrect": false }
    ],
    "hint": "This method removes a key-value pair from a hash by key.",
    "answerDescription": "The `.delete` method in Ruby removes a key-value pair from a hash by key."
  },  {
    "id": "ruby_156",
    "question": "Which method is used to check if an array is empty?",
    "options": [
      { "id": "option_1", "text": "nil?", "isCorrect": false },
      { "id": "option_2", "text": "empty?", "isCorrect": true },
      { "id": "option_3", "text": "length == 0", "isCorrect": false },
      { "id": "option_4", "text": "blank?", "isCorrect": false }
    ],
    "hint": "This method returns true if an array has no elements.",
    "answerDescription": "The `.empty?` method in Ruby returns `true` if an array contains no elements."
  },
  {
    "id": "ruby_157",
    "question": "Which method returns the first element of an array?",
    "options": [
      { "id": "option_1", "text": "head", "isCorrect": false },
      { "id": "option_2", "text": "first", "isCorrect": true },
      { "id": "option_3", "text": "begin", "isCorrect": false },
      { "id": "option_4", "text": "top", "isCorrect": false }
    ],
    "hint": "This method retrieves the first item in an array.",
    "answerDescription": "The `.first` method in Ruby returns the first element of an array."
  },
  {
    "id": "ruby_158",
    "question": "Which method returns the last element of an array?",
    "options": [
      { "id": "option_1", "text": "tail", "isCorrect": false },
      { "id": "option_2", "text": "last", "isCorrect": true },
      { "id": "option_3", "text": "end", "isCorrect": false },
      { "id": "option_4", "text": "bottom", "isCorrect": false }
    ],
    "hint": "This method retrieves the last item in an array.",
    "answerDescription": "The `.last` method in Ruby returns the last element of an array."
  },
  {
    "id": "ruby_159",
    "question": "Which method is used to add an element to the end of an array?",
    "options": [
      { "id": "option_1", "text": "insert", "isCorrect": false },
      { "id": "option_2", "text": "push", "isCorrect": true },
      { "id": "option_3", "text": "append", "isCorrect": false },
      { "id": "option_4", "text": "add", "isCorrect": false }
    ],
    "hint": "This method places an element at the last position of an array.",
    "answerDescription": "The `.push` method in Ruby adds an element to the end of an array."
  },
  {
    "id": "ruby_160",
    "question": "Which method removes and returns the last element of an array?",
    "options": [
      { "id": "option_1", "text": "remove_last", "isCorrect": false },
      { "id": "option_2", "text": "pop", "isCorrect": true },
      { "id": "option_3", "text": "delete_last", "isCorrect": false },
      { "id": "option_4", "text": "drop", "isCorrect": false }
    ],
    "hint": "This method extracts the final element from an array.",
    "answerDescription": "The `.pop` method in Ruby removes and returns the last element of an array."
  },
  {
    "id": "ruby_161",
    "question": "Which method is used to add an element to the beginning of an array?",
    "options": [
      { "id": "option_1", "text": "prepend", "isCorrect": false },
      { "id": "option_2", "text": "unshift", "isCorrect": true },
      { "id": "option_3", "text": "add_start", "isCorrect": false },
      { "id": "option_4", "text": "insert", "isCorrect": false }
    ],
    "hint": "This method places an element at the start of an array.",
    "answerDescription": "The `.unshift` method in Ruby adds an element to the beginning of an array."
  },
  {
    "id": "ruby_162",
    "question": "Which method removes and returns the first element of an array?",
    "options": [
      { "id": "option_1", "text": "pop", "isCorrect": false },
      { "id": "option_2", "text": "shift", "isCorrect": true },
      { "id": "option_3", "text": "delete_first", "isCorrect": false },
      { "id": "option_4", "text": "drop", "isCorrect": false }
    ],
    "hint": "This method extracts the first element from an array.",
    "answerDescription": "The `.shift` method in Ruby removes and returns the first element of an array."
  },
  {
    "id": "ruby_163",
    "question": "Which method is used to remove nil values from an array?",
    "options": [
      { "id": "option_1", "text": "clean_nil", "isCorrect": false },
      { "id": "option_2", "text": "compact", "isCorrect": true },
      { "id": "option_3", "text": "remove_nil", "isCorrect": false },
      { "id": "option_4", "text": "clear_nil", "isCorrect": false }
    ],
    "hint": "This method returns a new array with all nil values removed.",
    "answerDescription": "The `.compact` method in Ruby removes all nil values from an array."
  },
  {
    "id": "ruby_164",
    "question": "Which method sorts an array in ascending order?",
    "options": [
      { "id": "option_1", "text": "arrange", "isCorrect": false },
      { "id": "option_2", "text": "sort", "isCorrect": true },
      { "id": "option_3", "text": "order", "isCorrect": false },
      { "id": "option_4", "text": "ascending", "isCorrect": false }
    ],
    "hint": "This method arranges elements in an array in increasing order.",
    "answerDescription": "The `.sort` method in Ruby sorts an array in ascending order."
  },
  {
    "id": "ruby_165",
    "question": "Which method returns the unique elements of an array?",
    "options": [
      { "id": "option_1", "text": "distinct", "isCorrect": false },
      { "id": "option_2", "text": "uniq", "isCorrect": true },
      { "id": "option_3", "text": "unique", "isCorrect": false },
      { "id": "option_4", "text": "deduplicate", "isCorrect": false }
    ],
    "hint": "This method removes duplicate values from an array.",
    "answerDescription": "The `.uniq` method in Ruby returns a new array with duplicate values removed."
  },
  {
    "id": "ruby_166",
    "question": "Which method is used to check if a string includes a specific substring?",
    "options": [
      { "id": "option_1", "text": "has?", "isCorrect": false },
      { "id": "option_2", "text": "contains?", "isCorrect": false },
      { "id": "option_3", "text": "include?", "isCorrect": true },
      { "id": "option_4", "text": "exists?", "isCorrect": false }
    ],
    "hint": "This method checks whether a string contains a specific substring.",
    "answerDescription": "The `.include?` method in Ruby checks if a string includes a specific substring."
  },
  {
    "id": "ruby_167",
    "question": "Which method is used to get the length of a string?",
    "options": [
      { "id": "option_1", "text": "count", "isCorrect": false },
      { "id": "option_2", "text": "size", "isCorrect": false },
      { "id": "option_3", "text": "length", "isCorrect": true },
      { "id": "option_4", "text": "chars", "isCorrect": false }
    ],
    "hint": "This method returns the number of characters in a string.",
    "answerDescription": "The `.length` method in Ruby returns the number of characters in a string."
  },
  {
    "id": "ruby_168",
    "question": "Which method removes whitespace from the beginning and end of a string?",
    "options": [
      { "id": "option_1", "text": "clean", "isCorrect": false },
      { "id": "option_2", "text": "strip_spaces", "isCorrect": false },
      { "id": "option_3", "text": "strip", "isCorrect": true },
      { "id": "option_4", "text": "trim", "isCorrect": false }
    ],
    "hint": "This method removes leading and trailing whitespace from a string.",
    "answerDescription": "The `.strip` method in Ruby removes whitespace from both ends of a string."
  },
  {
    "id": "ruby_169",
    "question": "Which method is used to replace a substring in a string?",
    "options": [
      { "id": "option_1", "text": "switch", "isCorrect": false },
      { "id": "option_2", "text": "substitute", "isCorrect": false },
      { "id": "option_3", "text": "gsub", "isCorrect": true },
      { "id": "option_4", "text": "replace", "isCorrect": false }
    ],
    "hint": "This method performs global substitution in a string.",
    "answerDescription": "The `.gsub` method in Ruby replaces all occurrences of a specified substring."
  },
  {
    "id": "ruby_170",
    "question": "Which method converts all characters in a string to uppercase?",
    "options": [
      { "id": "option_1", "text": "capitalize_all", "isCorrect": false },
      { "id": "option_2", "text": "toUpperCase", "isCorrect": false },
      { "id": "option_3", "text": "upcase", "isCorrect": true },
      { "id": "option_4", "text": "uppercase", "isCorrect": false }
    ],
    "hint": "This method changes all lowercase letters to uppercase in a string.",
    "answerDescription": "The `.upcase` method in Ruby converts all characters in a string to uppercase."
  },
  {
    "id": "ruby_171",
    "question": "Which method splits a string into an array based on a delimiter?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "divide", "isCorrect": false },
      { "id": "option_3", "text": "split", "isCorrect": true },
      { "id": "option_4", "text": "slice", "isCorrect": false }
    ],
    "hint": "This method separates a string into multiple parts based on a given character.",
    "answerDescription": "The `.split` method in Ruby divides a string into an array based on a specified delimiter."
  },
  {
    "id": "ruby_172",
    "question": "Which method converts a string to a symbol?",
    "options": [
      { "id": "option_1", "text": "convert_to_symbol", "isCorrect": false },
      { "id": "option_2", "text": "symbolize", "isCorrect": false },
      { "id": "option_3", "text": "to_sym", "isCorrect": true },
      { "id": "option_4", "text": "make_symbol", "isCorrect": false }
    ],
    "hint": "This method is used to transform a string into a symbol.",
    "answerDescription": "The `.to_sym` method in Ruby converts a string to a symbol."
  },
  {
    "id": "ruby_173",
    "question": "Which method is used to repeat a string multiple times?",
    "options": [
      { "id": "option_1", "text": "repeat", "isCorrect": false },
      { "id": "option_2", "text": "duplicate", "isCorrect": false },
      { "id": "option_3", "text": "*", "isCorrect": true },
      { "id": "option_4", "text": "times", "isCorrect": false }
    ],
    "hint": "This operator multiplies the string by a specified number.",
    "answerDescription": "The `*` operator in Ruby repeats a string multiple times."
  },
  {
    "id": "ruby_174",
    "question": "Which method capitalizes only the first letter of a string?",
    "options": [
      { "id": "option_1", "text": "capitalize_all", "isCorrect": false },
      { "id": "option_2", "text": "upcase", "isCorrect": false },
      { "id": "option_3", "text": "capitalize", "isCorrect": true },
      { "id": "option_4", "text": "titlecase", "isCorrect": false }
    ],
    "hint": "This method makes only the first character uppercase while keeping the rest lowercase.",
    "answerDescription": "The `.capitalize` method in Ruby makes the first letter uppercase and the rest lowercase."
  },
  {
    "id": "ruby_175",
    "question": "Which method converts a number to a string?",
    "options": [
      { "id": "option_1", "text": "convert_to_string", "isCorrect": false },
      { "id": "option_2", "text": "stringify", "isCorrect": false },
      { "id": "option_3", "text": "to_s", "isCorrect": true },
      { "id": "option_4", "text": "str", "isCorrect": false }
    ],
    "hint": "This method is commonly used to transform numbers into string format.",
    "answerDescription": "The `.to_s` method in Ruby converts a number to a string."
  },
  {
    "id": "ruby_176",
    "question": "Which method is used to convert a string into an integer?",
    "options": [
      { "id": "option_1", "text": "convert_to_int", "isCorrect": false },
      { "id": "option_2", "text": "parse_int", "isCorrect": false },
      { "id": "option_3", "text": "integer", "isCorrect": false },
      { "id": "option_4", "text": "to_i", "isCorrect": true }
    ],
    "hint": "This method transforms a string representation of a number into an integer.",
    "answerDescription": "The `.to_i` method in Ruby converts a string to an integer."
  },
  {
    "id": "ruby_177",
    "question": "Which operator is used to check equality between two values?",
    "options": [
      { "id": "option_1", "text": "=", "isCorrect": false },
      { "id": "option_2", "text": "===", "isCorrect": false },
      { "id": "option_3", "text": "!=", "isCorrect": false },
      { "id": "option_4", "text": "==", "isCorrect": true }
    ],
    "hint": "This operator checks if two values are equal.",
    "answerDescription": "The `==` operator in Ruby checks if two values are equal."
  },
  {
    "id": "ruby_178",
    "question": "Which method checks if a hash has a specific key?",
    "options": [
      { "id": "option_1", "text": "includes_key?", "isCorrect": false },
      { "id": "option_2", "text": "find_key?", "isCorrect": false },
      { "id": "option_3", "text": "has?", "isCorrect": false },
      { "id": "option_4", "text": "has_key?", "isCorrect": true }
    ],
    "hint": "This method returns true if the specified key exists in a hash.",
    "answerDescription": "The `.has_key?` method in Ruby checks if a hash contains a specific key."
  },
  {
    "id": "ruby_179",
    "question": "Which method returns an array of all keys in a hash?",
    "options": [
      { "id": "option_1", "text": "get_keys", "isCorrect": false },
      { "id": "option_2", "text": "fetch_keys", "isCorrect": false },
      { "id": "option_3", "text": "keys_list", "isCorrect": false },
      { "id": "option_4", "text": "keys", "isCorrect": true }
    ],
    "hint": "This method retrieves all keys stored in a hash.",
    "answerDescription": "The `.keys` method in Ruby returns an array containing all keys in a hash."
  },
  {
    "id": "ruby_180",
    "question": "Which method is used to merge two hashes?",
    "options": [
      { "id": "option_1", "text": "combine", "isCorrect": false },
      { "id": "option_2", "text": "concat", "isCorrect": false },
      { "id": "option_3", "text": "append", "isCorrect": false },
      { "id": "option_4", "text": "merge", "isCorrect": true }
    ],
    "hint": "This method returns a new hash containing contents of both hashes.",
    "answerDescription": "The `.merge` method in Ruby combines two hashes into a new one."
  },
  {
    "id": "ruby_181",
    "question": "Which method is used to iterate through each key-value pair in a hash?",
    "options": [
      { "id": "option_1", "text": "for_each", "isCorrect": false },
      { "id": "option_2", "text": "loop", "isCorrect": false },
      { "id": "option_3", "text": "step", "isCorrect": false },
      { "id": "option_4", "text": "each", "isCorrect": true }
    ],
    "hint": "This method is used to loop through a hash.",
    "answerDescription": "The `.each` method in Ruby iterates over key-value pairs in a hash."
  },
  {
    "id": "ruby_182",
    "question": "Which method returns an array of all values in a hash?",
    "options": [
      { "id": "option_1", "text": "get_values", "isCorrect": false },
      { "id": "option_2", "text": "fetch_values", "isCorrect": false },
      { "id": "option_3", "text": "values_list", "isCorrect": false },
      { "id": "option_4", "text": "values", "isCorrect": true }
    ],
    "hint": "This method retrieves all values stored in a hash.",
    "answerDescription": "The `.values` method in Ruby returns an array containing all values in a hash."
  },
  {
    "id": "ruby_183",
    "question": "Which method deletes a key-value pair from a hash?",
    "options": [
      { "id": "option_1", "text": "remove_key", "isCorrect": false },
      { "id": "option_2", "text": "delete_pair", "isCorrect": false },
      { "id": "option_3", "text": "erase", "isCorrect": false },
      { "id": "option_4", "text": "delete", "isCorrect": true }
    ],
    "hint": "This method removes a key and its associated value from a hash.",
    "answerDescription": "The `.delete` method in Ruby removes a specified key-value pair from a hash."
  },
  {
    "id": "ruby_184",
    "question": "Which method checks if a hash has a specific value?",
    "options": [
      { "id": "option_1", "text": "includes_value?", "isCorrect": false },
      { "id": "option_2", "text": "find_value?", "isCorrect": false },
      { "id": "option_3", "text": "has?", "isCorrect": false },
      { "id": "option_4", "text": "has_value?", "isCorrect": true }
    ],
    "hint": "This method returns true if the specified value exists in a hash.",
    "answerDescription": "The `.has_value?` method in Ruby checks if a hash contains a specific value."
  },
  {
    "id": "ruby_185",
    "question": "Which method returns the default value of a hash when a key is not found?",
    "options": [
      { "id": "option_1", "text": "fetch_default", "isCorrect": false },
      { "id": "option_2", "text": "default_value", "isCorrect": false },
      { "id": "option_3", "text": "fallback", "isCorrect": false },
      { "id": "option_4", "text": "default", "isCorrect": true }
    ],
    "hint": "This method provides a fallback value if a key is missing.",
    "answerDescription": "The `.default` method in Ruby returns the default value of a hash when a key is not found."
  },
  {
    "id": "ruby_186",
    "question": "Which keyword is used to define a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "A variable starting with an uppercase letter", "isCorrect": true },
      { "id": "option_2", "text": "const", "isCorrect": false },
      { "id": "option_3", "text": "define_constant", "isCorrect": false },
      { "id": "option_4", "text": "final", "isCorrect": false }
    ],
    "hint": "In Ruby, constants start with an uppercase letter.",
    "answerDescription": "Ruby defines constants using variable names that begin with an uppercase letter."
  },
  {
    "id": "ruby_187",
    "question": "Which data type is used to store a sequence of characters in Ruby?",
    "options": [
      { "id": "option_1", "text": "String", "isCorrect": true },
      { "id": "option_2", "text": "Character", "isCorrect": false },
      { "id": "option_3", "text": "Text", "isCorrect": false },
      { "id": "option_4", "text": "Word", "isCorrect": false }
    ],
    "hint": "This data type is enclosed in quotes.",
    "answerDescription": "A `String` in Ruby is used to store sequences of characters."
  },
  {
    "id": "ruby_188",
    "question": "Which method is used to determine the type of a variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "class", "isCorrect": true },
      { "id": "option_2", "text": "typeof", "isCorrect": false },
      { "id": "option_3", "text": "getType", "isCorrect": false },
      { "id": "option_4", "text": "varType", "isCorrect": false }
    ],
    "hint": "In Ruby, every object belongs to a class.",
    "answerDescription": "The `.class` method in Ruby returns the class of an object, determining its type."
  },
  {
    "id": "ruby_189",
    "question": "Which data type in Ruby is used for true or false values?",
    "options": [
      { "id": "option_1", "text": "Boolean", "isCorrect": true },
      { "id": "option_2", "text": "Binary", "isCorrect": false },
      { "id": "option_3", "text": "Bit", "isCorrect": false },
      { "id": "option_4", "text": "Flag", "isCorrect": false }
    ],
    "hint": "It represents logical truth values.",
    "answerDescription": "A `Boolean` in Ruby represents either `true` or `false`."
  },
  {
    "id": "ruby_190",
    "question": "Which method is used to check if a variable is nil in Ruby?",
    "options": [
      { "id": "option_1", "text": "nil?", "isCorrect": true },
      { "id": "option_2", "text": "isNil?", "isCorrect": false },
      { "id": "option_3", "text": "check_nil", "isCorrect": false },
      { "id": "option_4", "text": "empty?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the value is `nil`.",
    "answerDescription": "The `.nil?` method in Ruby checks whether a variable is `nil`."
  },
  {
    "id": "ruby_191",
    "question": "Which method returns an array with elements sorted in ascending order?",
    "options": [
      { "id": "option_1", "text": "sort", "isCorrect": true },
      { "id": "option_2", "text": "arrange", "isCorrect": false },
      { "id": "option_3", "text": "order", "isCorrect": false },
      { "id": "option_4", "text": "sorted", "isCorrect": false }
    ],
    "hint": "This method returns a new array with sorted elements.",
    "answerDescription": "The `sort` method sorts an array in ascending order."
  },
  {
    "id": "ruby_192",
    "question": "Which symbol represents the beginning of a variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "@", "isCorrect": true },
      { "id": "option_2", "text": "#", "isCorrect": false },
      { "id": "option_3", "text": "$", "isCorrect": false },
      { "id": "option_4", "text": "&", "isCorrect": false }
    ],
    "hint": "This symbol is used for instance variables.",
    "answerDescription": "In Ruby, instance variables begin with `@`."
  },
  {
    "id": "ruby_193",
    "question": "Which method is used to convert an integer to a string?",
    "options": [
      { "id": "option_1", "text": "to_s", "isCorrect": true },
      { "id": "option_2", "text": "convertToString", "isCorrect": false },
      { "id": "option_3", "text": "to_str", "isCorrect": false },
      { "id": "option_4", "text": "int_to_s", "isCorrect": false }
    ],
    "hint": "This method transforms an integer into a string representation.",
    "answerDescription": "The `.to_s` method in Ruby converts an integer to a string."
  },
  {
    "id": "ruby_194",
    "question": "Which method is used to check if a string contains a specific substring?",
    "options": [
      { "id": "option_1", "text": "include?", "isCorrect": true },
      { "id": "option_2", "text": "has_substring?", "isCorrect": false },
      { "id": "option_3", "text": "contains?", "isCorrect": false },
      { "id": "option_4", "text": "find?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if a substring is found.",
    "answerDescription": "The `.include?` method in Ruby checks whether a string contains a given substring."
  },
  {
    "id": "ruby_195",
    "question": "Which method removes leading and trailing whitespace from a string?",
    "options": [
      { "id": "option_1", "text": "strip", "isCorrect": true },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "chop", "isCorrect": false },
      { "id": "option_4", "text": "clean", "isCorrect": false }
    ],
    "hint": "This method removes unwanted spaces from both ends of a string.",
    "answerDescription": "The `.strip` method in Ruby removes leading and trailing whitespace from a string."
  },
  {
    "id": "ruby_196",
    "question": "How do you determine the number of parameters a method accepts?",
    "options": [
      { "id": "option_1", "text": "Using `.params`", "isCorrect": false },
      { "id": "option_2", "text": "With `.arguments`", "isCorrect": false },
      { "id": "option_3", "text": "By calling `.size` on the method", "isCorrect": false },
      { "id": "option_4", "text": "Using `.arity`", "isCorrect": true }
    ],
    "hint": "Ruby provides a method to check parameter count.",
    "answerDescription": "The `.arity` method returns the number of arguments a method expects."
  },
  {
    "id": "ruby_197",
    "question": "What is the default value of an uninitialized variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "0", "isCorrect": false },
      { "id": "option_2", "text": "nil", "isCorrect": true },
      { "id": "option_3", "text": "false", "isCorrect": false },
      { "id": "option_4", "text": "undefined", "isCorrect": false }
    ],
    "hint": "In Ruby, uninitialized variables do not have a default numeric value.",
    "answerDescription": "An uninitialized variable in Ruby has a default value of `nil`."
  },
  {
    "id": "ruby_198",
    "question": "Which of the following is a valid Ruby symbol?",
    "options": [
      { "id": "option_1", "text": ":name", "isCorrect": true },
      { "id": "option_2", "text": "\"symbol\"", "isCorrect": false },
      { "id": "option_3", "text": "symbol", "isCorrect": false },
      { "id": "option_4", "text": "$symbol", "isCorrect": false }
    ],
    "hint": "Symbols in Ruby begin with a specific character.",
    "answerDescription": "Symbols in Ruby start with a colon, e.g., `:name`."
  },
  {
    "id": "ruby_199",
    "question": "Which method is used to convert a string to an integer?",
    "options": [
      { "id": "option_1", "text": "to_number", "isCorrect": false },
      { "id": "option_2", "text": "to_i", "isCorrect": true },
      { "id": "option_3", "text": "convertInt", "isCorrect": false },
      { "id": "option_4", "text": "int()", "isCorrect": false }
    ],
    "hint": "The method starts with 'to' and ends with a lowercase letter.",
    "answerDescription": "In Ruby, `.to_i` converts a string to an integer."
  },
  {
    "id": "ruby_200",
    "question": "Which character is used to indicate a symbol in Ruby?",
    "options": [
      { "id": "option_1", "text": "#", "isCorrect": false },
      { "id": "option_2", "text": ":", "isCorrect": true },
      { "id": "option_3", "text": "@", "isCorrect": false },
      { "id": "option_4", "text": "$", "isCorrect": false }
    ],
    "hint": "Symbols are prefixed with this character.",
    "answerDescription": "Symbols in Ruby start with `:`."
  },
  {
    "id": "ruby_201",
    "question": "Which method checks if an array is empty?",
    "options": [
      { "id": "option_1", "text": "isempty?", "isCorrect": false },
      { "id": "option_2", "text": "empty?", "isCorrect": true },
      { "id": "option_3", "text": "size == 0", "isCorrect": false },
      { "id": "option_4", "text": "nil?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if an array has no elements.",
    "answerDescription": "The `.empty?` method in Ruby checks whether an array has zero elements."
  },
  {
    "id": "ruby_202",
    "question": "Which operator is used for comparison in Ruby?",
    "options": [
      { "id": "option_1", "text": "=", "isCorrect": false },
      { "id": "option_2", "text": "==", "isCorrect": true },
      { "id": "option_3", "text": "===", "isCorrect": false },
      { "id": "option_4", "text": "!=", "isCorrect": false }
    ],
    "hint": "This operator consists of two equal signs.",
    "answerDescription": "Ruby uses `==` to compare values."
  },
  {
    "id": "ruby_203",
    "question": "Which method is used to find the length of a string?",
    "options": [
      { "id": "option_1", "text": "size()", "isCorrect": false },
      { "id": "option_2", "text": "length", "isCorrect": true },
      { "id": "option_3", "text": "count()", "isCorrect": false },
      { "id": "option_4", "text": "str_len", "isCorrect": false }
    ],
    "hint": "This method returns the number of characters in a string.",
    "answerDescription": "The `.length` method in Ruby returns the number of characters in a string."
  },
  {
    "id": "ruby_204",
    "question": "Which method converts a hash into an array?",
    "options": [
      { "id": "option_1", "text": "to_list", "isCorrect": false },
      { "id": "option_2", "text": "to_a", "isCorrect": true },
      { "id": "option_3", "text": "arrayify", "isCorrect": false },
      { "id": "option_4", "text": "convert_array", "isCorrect": false }
    ],
    "hint": "This method starts with 'to'.",
    "answerDescription": "The `.to_a` method in Ruby converts a hash into an array."
  },
  {
    "id": "ruby_205",
    "question": "Which method checks if an object responds to a method?",
    "options": [
      { "id": "option_1", "text": "can_call?", "isCorrect": false },
      { "id": "option_2", "text": "respond_to?", "isCorrect": true },
      { "id": "option_3", "text": "has_method?", "isCorrect": false },
      { "id": "option_4", "text": "exists?", "isCorrect": false }
    ],
    "hint": "This method checks whether an object can execute a specific method.",
    "answerDescription": "The `.respond_to?` method in Ruby checks if an object can respond to a method call."
  },  {
    "id": "ruby_206",
    "question": "What is the purpose of the `chomp` method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Adds a newline to a string", "isCorrect": false },
      { "id": "option_2", "text": "Removes all whitespace", "isCorrect": false },
      { "id": "option_3", "text": "Removes the trailing newline character", "isCorrect": true },
      { "id": "option_4", "text": "Capitalizes the string", "isCorrect": false }
    ],
    "hint": "This method is often used when handling user input.",
    "answerDescription": "The `.chomp` method in Ruby removes the trailing newline character from a string."
  },
  {
    "id": "ruby_207",
    "question": "Which method converts a string to uppercase in Ruby?",
    "options": [
      { "id": "option_1", "text": "capitalize_all", "isCorrect": false },
      { "id": "option_2", "text": "toUpperCase", "isCorrect": false },
      { "id": "option_3", "text": "upcase", "isCorrect": true },
      { "id": "option_4", "text": "upper", "isCorrect": false }
    ],
    "hint": "The method name starts with 'up'.",
    "answerDescription": "In Ruby, `.upcase` converts all letters in a string to uppercase."
  },
  {
    "id": "ruby_208",
    "question": "What is the result of `5 / 2` in Ruby?",
    "options": [
      { "id": "option_1", "text": "2.5", "isCorrect": false },
      { "id": "option_2", "text": "5/2", "isCorrect": false },
      { "id": "option_3", "text": "2", "isCorrect": true },
      { "id": "option_4", "text": "3", "isCorrect": false }
    ],
    "hint": "Ruby performs integer division when both operands are integers.",
    "answerDescription": "Since both `5` and `2` are integers, Ruby returns `2` as the result of integer division."
  },
  {
    "id": "ruby_209",
    "question": "Which of the following is a valid way to define a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "const VALUE = 100", "isCorrect": false },
      { "id": "option_2", "text": "var VALUE = 100", "isCorrect": false },
      { "id": "option_3", "text": "VALUE = 100", "isCorrect": true },
      { "id": "option_4", "text": "define VALUE = 100", "isCorrect": false }
    ],
    "hint": "In Ruby, constants are written in uppercase letters.",
    "answerDescription": "Ruby constants are defined using uppercase names, e.g., `VALUE = 100`."
  },
  {
    "id": "ruby_210",
    "question": "Which method removes the last element from an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "delete_last", "isCorrect": false },
      { "id": "option_2", "text": "remove()", "isCorrect": false },
      { "id": "option_3", "text": "pop", "isCorrect": true },
      { "id": "option_4", "text": "shift", "isCorrect": false }
    ],
    "hint": "This method is often used in stack operations.",
    "answerDescription": "In Ruby, `.pop` removes the last element from an array."
  },
  {
    "id": "ruby_211",
    "question": "How do you check if a hash contains a specific key?",
    "options": [
      { "id": "option_1", "text": "has_key?", "isCorrect": false },
      { "id": "option_2", "text": "checkKey()", "isCorrect": false },
      { "id": "option_3", "text": "key?", "isCorrect": true },
      { "id": "option_4", "text": "exists?", "isCorrect": false }
    ],
    "hint": "The method name ends with a `?`.",
    "answerDescription": "The `.key?` method checks if a given key exists in a Ruby hash."
  },
  {
    "id": "ruby_212",
    "question": "Which of the following data types is mutable in Ruby?",
    "options": [
      { "id": "option_1", "text": "Symbol", "isCorrect": false },
      { "id": "option_2", "text": "Fixnum", "isCorrect": false },
      { "id": "option_3", "text": "Array", "isCorrect": true },
      { "id": "option_4", "text": "NilClass", "isCorrect": false }
    ],
    "hint": "This data type allows modifying its contents.",
    "answerDescription": "In Ruby, arrays are mutable, meaning their elements can be changed after creation."
  },
  {
    "id": "ruby_213",
    "question": "Which of the following represents a valid Ruby symbol?",
    "options": [
      { "id": "option_1", "text": "symbol_name", "isCorrect": false },
      { "id": "option_2", "text": "@symbol", "isCorrect": false },
      { "id": "option_3", "text": ":symbol", "isCorrect": true },
      { "id": "option_4", "text": "#symbol", "isCorrect": false }
    ],
    "hint": "Symbols are prefixed with a colon.",
    "answerDescription": "A valid Ruby symbol starts with `:`, such as `:symbol`."
  },
  {
    "id": "ruby_214",
    "question": "Which method is used to combine two arrays in Ruby?",
    "options": [
      { "id": "option_1", "text": "concat()", "isCorrect": false },
      { "id": "option_2", "text": "combine()", "isCorrect": false },
      { "id": "option_3", "text": "+", "isCorrect": true },
      { "id": "option_4", "text": "append()", "isCorrect": false }
    ],
    "hint": "This operator is also used for arithmetic operations.",
    "answerDescription": "In Ruby, the `+` operator combines two arrays into a new array."
  },
  {
    "id": "ruby_215",
    "question": "Which method reverses the elements of an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "flip", "isCorrect": false },
      { "id": "option_2", "text": "invert", "isCorrect": false },
      { "id": "option_3", "text": "mirror", "isCorrect": false },
      { "id": "option_4", "text": "reverse", "isCorrect": true }
    ],
    "hint": "This method returns an array with elements in reverse order.",
    "answerDescription": "The `reverse` method in Ruby reverses the elements of an array."
  },
  {
    "id": "ruby_216",
    "question": "What is the purpose of `alias` in Ruby?",
    "options": [
      { "id": "option_1", "text": "To rename variables", "isCorrect": false },
      { "id": "option_2", "text": "To create a constant", "isCorrect": false },
      { "id": "option_3", "text": "To define a singleton method", "isCorrect": false },
      { "id": "option_4", "text": "To create an alternative name for a method", "isCorrect": true }
    ],
    "hint": "It helps define multiple names for the same method.",
    "answerDescription": "The `alias` keyword in Ruby is used to create alternative names for methods."
  },
  {
    "id": "ruby_217",
    "question": "How do you find the length of an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "count()", "isCorrect": false },
      { "id": "option_2", "text": "sizeOf()", "isCorrect": false },
      { "id": "option_3", "text": "arrayLength()", "isCorrect": false },
      { "id": "option_4", "text": "length", "isCorrect": true }
    ],
    "hint": "This method is commonly used for measuring size in Ruby.",
    "answerDescription": "The `.length` method returns the number of elements in an array."
  },
  {
    "id": "ruby_218",
    "question": "Which method returns the size of a hash or an array?",
    "options": [
      { "id": "option_1", "text": "length", "isCorrect": true },
      { "id": "option_2", "text": "size?", "isCorrect": false },
      { "id": "option_3", "text": "count", "isCorrect": false },
      { "id": "option_4", "text": "elements", "isCorrect": false }
    ],
    "hint": "This method works on both arrays and hashes.",
    "answerDescription": "The `length` method returns the number of elements in an array or hash."
  },
  {
    "id": "ruby_219",
    "question": "Which method is used to iterate over each element of an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "forEach", "isCorrect": false },
      { "id": "option_2", "text": "loop", "isCorrect": false },
      { "id": "option_3", "text": "traverse", "isCorrect": false },
      { "id": "option_4", "text": "each", "isCorrect": true }
    ],
    "hint": "This method is commonly used in Ruby loops.",
    "answerDescription": "In Ruby, the `.each` method is used to iterate through an array."
  },
  {
    "id": "ruby_220",
    "question": "Which method is used to remove whitespace from both ends of a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "strip", "isCorrect": true },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "chomp", "isCorrect": false },
      { "id": "option_4", "text": "clean", "isCorrect": false }
    ],
    "hint": "Ruby has a method that 'strips' unwanted spaces.",
    "answerDescription": "The `.strip` method removes leading and trailing whitespace from a string."
  },
  {
    "id": "ruby_221",
    "question": "Which of the following is a valid Ruby comment?",
    "options": [
      { "id": "option_1", "text": "// This is a comment", "isCorrect": false },
      { "id": "option_2", "text": "/* This is a comment */", "isCorrect": false },
      { "id": "option_3", "text": "-- This is a comment", "isCorrect": false },
      { "id": "option_4", "text": "# This is a comment", "isCorrect": true }
    ],
    "hint": "Ruby comments start with a specific symbol.",
    "answerDescription": "In Ruby, single-line comments begin with `#`."
  },
  {
    "id": "ruby_222",
    "question": "Which data type is used to represent whole numbers in Ruby?",
    "options": [
      { "id": "option_1", "text": "Float", "isCorrect": false },
      { "id": "option_2", "text": "Decimal", "isCorrect": false },
      { "id": "option_3", "text": "Number", "isCorrect": false },
      { "id": "option_4", "text": "Integer", "isCorrect": true }
    ],
    "hint": "Ruby has a specific class for whole numbers.",
    "answerDescription": "Ruby uses the `Integer` class to represent whole numbers."
  },
  {
    "id": "ruby_223",
    "question": "What will be the output of `puts 10 == \"10\"` in Ruby?",
    "options": [
      { "id": "option_1", "text": "true", "isCorrect": false },
      { "id": "option_2", "text": "10", "isCorrect": false },
      { "id": "option_3", "text": "\"10\"", "isCorrect": false },
      { "id": "option_4", "text": "false", "isCorrect": true }
    ],
    "hint": "Ruby is strict about data types in comparisons.",
    "answerDescription": "In Ruby, `10 == \"10\"` evaluates to `false` because an integer and a string are different types."
  },
  {
    "id": "ruby_224",
    "question": "Which operator is used to check if two values are identical in Ruby?",
    "options": [
      { "id": "option_1", "text": "==", "isCorrect": false },
      { "id": "option_2", "text": "!=", "isCorrect": false },
      { "id": "option_3", "text": ">", "isCorrect": false },
      { "id": "option_4", "text": "===", "isCorrect": true }
    ],
    "hint": "Ruby has a special triple equals operator.",
    "answerDescription": "The `===` operator in Ruby checks if two values are identical."
  },
  {
    "id": "ruby_225",
    "question": "What is the output of `nil.to_s` in Ruby?",
    "options": [
      { "id": "option_1", "text": "\"nil\"", "isCorrect": false },
      { "id": "option_2", "text": "nil", "isCorrect": false },
      { "id": "option_3", "text": "error", "isCorrect": false },
      { "id": "option_4", "text": "\"\"", "isCorrect": true }
    ],
    "hint": "Converting `nil` to a string results in an empty string.",
    "answerDescription": "In Ruby, calling `nil.to_s` returns an empty string (`\"\"`)."
  },  {
    "id": "ruby_226",
    "question": "Which method is always used to convert a string to an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_i", "isCorrect": true },
      { "id": "option_2", "text": "convertInt", "isCorrect": false },
      { "id": "option_3", "text": "parseInt", "isCorrect": false },
      { "id": "option_4", "text": "int()", "isCorrect": false }
    ],
    "hint": "Ruby has a built-in method that starts with 'to_'.",
    "answerDescription": "In Ruby, the `to_i` method is used to convert a string into an integer."
  },
  {
    "id": "ruby_227",
    "question": "How do you define a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "By using all uppercase letters", "isCorrect": true },
      { "id": "option_2", "text": "By using the 'const' keyword", "isCorrect": false },
      { "id": "option_3", "text": "By using a dollar sign ($)", "isCorrect": false },
      { "id": "option_4", "text": "By using the 'static' keyword", "isCorrect": false }
    ],
    "hint": "Ruby constants follow naming conventions rather than using special keywords.",
    "answerDescription": "In Ruby, constants are defined using uppercase letters, e.g., `MAX_VALUE`."
  },
  {
    "id": "ruby_228",
    "question": "Which method is used to check the data type of a variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "class", "isCorrect": true },
      { "id": "option_2", "text": "typeof", "isCorrect": false },
      { "id": "option_3", "text": "getType", "isCorrect": false },
      { "id": "option_4", "text": "instanceof", "isCorrect": false }
    ],
    "hint": "Ruby uses an intuitive method that returns the object's class.",
    "answerDescription": "The `.class` method in Ruby returns the class of an object."
  },
  {
    "id": "ruby_229",
    "question": "How do you write an if statement in Ruby?",
    "options": [
      { "id": "option_1", "text": "if condition ... end", "isCorrect": true },
      { "id": "option_2", "text": "if(condition) {}", "isCorrect": false },
      { "id": "option_3", "text": "if: condition then", "isCorrect": false },
      { "id": "option_4", "text": "if condition -> end", "isCorrect": false }
    ],
    "hint": "Ruby does not use curly braces for conditionals.",
    "answerDescription": "Ruby's `if` statement follows the syntax: `if condition ... end`."
  },
  {
    "id": "ruby_230",
    "question": "What does the `push` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Adds an element to the end of an array", "isCorrect": true },
      { "id": "option_2", "text": "Removes the last element from an array", "isCorrect": false },
      { "id": "option_3", "text": "Adds an element to the beginning of an array", "isCorrect": false },
      { "id": "option_4", "text": "Sorts an array", "isCorrect": false }
    ],
    "hint": "This method is used to grow an array.",
    "answerDescription": "The `.push` method appends an element to the end of an array."
  },
  {
    "id": "ruby_231",
    "question": "What is the default data type of a variable that stores a number in Ruby?",
    "options": [
      { "id": "option_1", "text": "Float", "isCorrect": false },
      { "id": "option_2", "text": "Integer", "isCorrect": true },
      { "id": "option_3", "text": "String", "isCorrect": false },
      { "id": "option_4", "text": "Symbol", "isCorrect": false }
    ],
    "hint": "Whole numbers in Ruby are automatically stored in this type.",
    "answerDescription": "Ruby treats numbers without decimals as Integers by default."
  },
  {
    "id": "ruby_232",
    "question": "How do you declare a floating-point number in Ruby?",
    "options": [
      { "id": "option_1", "text": "float num = 5.5", "isCorrect": false },
      { "id": "option_2", "text": "num = 5.5", "isCorrect": true },
      { "id": "option_3", "text": "float(5.5)", "isCorrect": false },
      { "id": "option_4", "text": "var num = 5.5", "isCorrect": false }
    ],
    "hint": "Ruby does not require explicit type declarations.",
    "answerDescription": "In Ruby, assigning a decimal number to a variable automatically makes it a Float."
  },
  {
    "id": "ruby_233",
    "question": "Which keyword is used to define a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "const", "isCorrect": false },
      { "id": "option_2", "text": "No specific keyword, just use uppercase letters", "isCorrect": true },
      { "id": "option_3", "text": "static", "isCorrect": false },
      { "id": "option_4", "text": "final", "isCorrect": false }
    ],
    "hint": "Ruby constants follow a naming convention rather than a keyword.",
    "answerDescription": "Constants in Ruby are written in uppercase (e.g., `PI = 3.14`)."
  },
  {
    "id": "ruby_234",
    "question": "Which data type does Ruby use to represent textual data?",
    "options": [
      { "id": "option_1", "text": "Char", "isCorrect": false },
      { "id": "option_2", "text": "String", "isCorrect": true },
      { "id": "option_3", "text": "Text", "isCorrect": false },
      { "id": "option_4", "text": "Symbol", "isCorrect": false }
    ],
    "hint": "Ruby uses a class for handling textual data.",
    "answerDescription": "Strings in Ruby are enclosed in quotes, e.g., `'Hello'` or `\"World\"`."
  },
  {
    "id": "ruby_235",
    "question": "What will be the output of `5 / 2` in Ruby?",
    "options": [
      { "id": "option_1", "text": "2.5", "isCorrect": false },
      { "id": "option_2", "text": "2", "isCorrect": true },
      { "id": "option_3", "text": "2.0", "isCorrect": false },
      { "id": "option_4", "text": "5.0 / 2.0", "isCorrect": false }
    ],
    "hint": "Integer division in Ruby returns an integer.",
    "answerDescription": "Ruby performs integer division when both operands are integers, so `5 / 2` results in `2`."
  },
  {
    "id": "ruby_236",
    "question": "Which of the following is a valid Ruby symbol?",
    "options": [
      { "id": "option_1", "text": "\"hello\"", "isCorrect": false },
      { "id": "option_2", "text": ":hello", "isCorrect": true },
      { "id": "option_3", "text": "hello:", "isCorrect": false },
      { "id": "option_4", "text": "$hello", "isCorrect": false }
    ],
    "hint": "Ruby symbols start with a colon.",
    "answerDescription": "Symbols in Ruby are written as `:symbol_name`, making them immutable identifiers."
  },
  {
    "id": "ruby_237",
    "question": "How do you convert an integer to a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_string()", "isCorrect": false },
      { "id": "option_2", "text": "to_s", "isCorrect": true },
      { "id": "option_3", "text": "stringify()", "isCorrect": false },
      { "id": "option_4", "text": "convertToStr()", "isCorrect": false }
    ],
    "hint": "Ruby uses a simple method that starts with `to_`.",
    "answerDescription": "The `.to_s` method converts an integer into a string in Ruby."
  },
  {
    "id": "ruby_238",
    "question": "Which method checks if a variable is nil in Ruby?",
    "options": [
      { "id": "option_1", "text": "null?", "isCorrect": false },
      { "id": "option_2", "text": "nil?", "isCorrect": true },
      { "id": "option_3", "text": "isNil()", "isCorrect": false },
      { "id": "option_4", "text": "check_nil()", "isCorrect": false }
    ],
    "hint": "Ruby has a built-in method that checks for nil values.",
    "answerDescription": "The `.nil?` method returns `true` if a variable is `nil`, otherwise it returns `false`."
  },
  {
    "id": "ruby_239",
    "question": "Which operator is used to check the type of a variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "typeof", "isCorrect": false },
      { "id": "option_2", "text": "instance_of?", "isCorrect": true },
      { "id": "option_3", "text": "is_a?", "isCorrect": false },
      { "id": "option_4", "text": "type()", "isCorrect": false }
    ],
    "hint": "Ruby has a method that ends with `?` to check types.",
    "answerDescription": "The `instance_of?` method checks if an object is of a specific class."
  },
  {
    "id": "ruby_240",
    "question": "Which of the following is a valid floating-point number in Ruby?",
    "options": [
      { "id": "option_1", "text": "5.5.5", "isCorrect": false },
      { "id": "option_2", "text": "3.14", "isCorrect": true },
      { "id": "option_3", "text": "3,14", "isCorrect": false },
      { "id": "option_4", "text": "5f", "isCorrect": false }
    ],
    "hint": "Floating-point numbers in Ruby use a decimal point.",
    "answerDescription": "Numbers with decimals, like `3.14`, are treated as floating-point numbers in Ruby."
  },   {
    "id": "ruby_241",
    "question": "Which method is used to get the class of a variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "typeof()", "isCorrect": false },
      { "id": "option_2", "text": "type()", "isCorrect": false },
      { "id": "option_3", "text": "class", "isCorrect": true },
      { "id": "option_4", "text": "getClass()", "isCorrect": false }
    ],
    "hint": "Ruby uses a method without parentheses to get an object's class.",
    "answerDescription": "Calling `.class` on a variable returns its class in Ruby."
  },
  {
    "id": "ruby_242",
    "question": "How do you check if a variable is an Integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "is_integer?", "isCorrect": false },
      { "id": "option_2", "text": "integer?", "isCorrect": false },
      { "id": "option_3", "text": "is_a?(Integer)", "isCorrect": true },
      { "id": "option_4", "text": "check_integer()", "isCorrect": false }
    ],
    "hint": "Ruby uses `is_a?` to check an object's class.",
    "answerDescription": "The `.is_a?(Integer)` method checks if a variable is an Integer."
  },
  {
    "id": "ruby_243",
    "question": "Which of the following correctly declares a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "const PI = 3.14", "isCorrect": false },
      { "id": "option_2", "text": "final PI = 3.14", "isCorrect": false },
      { "id": "option_3", "text": "PI = 3.14", "isCorrect": true },
      { "id": "option_4", "text": "var PI = 3.14", "isCorrect": false }
    ],
    "hint": "Ruby constants are written in uppercase without a special keyword.",
    "answerDescription": "In Ruby, constants are defined using uppercase letters, e.g., `PI = 3.14`."
  },
  {
    "id": "ruby_244",
    "question": "Which of the following is a mutable data type in Ruby?",
    "options": [
      { "id": "option_1", "text": "Symbol", "isCorrect": false },
      { "id": "option_2", "text": "Integer", "isCorrect": false },
      { "id": "option_3", "text": "String", "isCorrect": true },
      { "id": "option_4", "text": "Float", "isCorrect": false }
    ],
    "hint": "Mutable means changeable, and only one of these can be modified.",
    "answerDescription": "Strings in Ruby can be modified, while other types like Symbols and Integers are immutable."
  },
  {
    "id": "ruby_245",
    "question": "What will `puts 3.0 / 2` output in Ruby?",
    "options": [
      { "id": "option_1", "text": "1", "isCorrect": false },
      { "id": "option_2", "text": "2", "isCorrect": false },
      { "id": "option_3", "text": "1.5", "isCorrect": true },
      { "id": "option_4", "text": "2.0", "isCorrect": false }
    ],
    "hint": "Floating-point division returns a decimal value.",
    "answerDescription": "Since `3.0` is a Float, division with `2` results in `1.5`, a floating-point number."
  },
  {
    "id": "ruby_246",
    "question": "How do you declare a local variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "var name = 'John'", "isCorrect": false },
      { "id": "option_2", "text": "name := 'John'", "isCorrect": false },
      { "id": "option_3", "text": "name = 'John'", "isCorrect": true },
      { "id": "option_4", "text": "let name = 'John'", "isCorrect": false }
    ],
    "hint": "Ruby does not use `var`, `let`, or `:=` for variable declaration.",
    "answerDescription": "In Ruby, local variables are assigned directly, e.g., `name = 'John'`."
  },
  {
    "id": "ruby_247",
    "question": "Which of the following correctly converts a string to an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "convert_to_int('42')", "isCorrect": false },
      { "id": "option_2", "text": "str_to_int('42')", "isCorrect": false },
      { "id": "option_3", "text": "'42'.to_i", "isCorrect": true },
      { "id": "option_4", "text": "int('42')", "isCorrect": false }
    ],
    "hint": "Ruby uses a simple `to_` method for type conversion.",
    "answerDescription": "The `.to_i` method converts a string to an integer, e.g., `'42'.to_i` returns `42`."
  },
  {
    "id": "ruby_248",
    "question": "What value does an uninitialized variable hold in Ruby?",
    "options": [
      { "id": "option_1", "text": "0", "isCorrect": false },
      { "id": "option_2", "text": "\"\"", "isCorrect": false },
      { "id": "option_3", "text": "nil", "isCorrect": true },
      { "id": "option_4", "text": "undefined", "isCorrect": false }
    ],
    "hint": "Ruby assigns a special value to uninitialized variables.",
    "answerDescription": "In Ruby, uninitialized variables hold `nil` by default."
  },
  {
    "id": "ruby_249",
    "question": "Which method can be used to convert a floating-point number to an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "float_to_int()", "isCorrect": false },
      { "id": "option_2", "text": "truncate()", "isCorrect": false },
      { "id": "option_3", "text": "to_i", "isCorrect": true },
      { "id": "option_4", "text": "parseInt()", "isCorrect": false }
    ],
    "hint": "Ruby provides a simple `.to_` method for conversion.",
    "answerDescription": "The `.to_i` method removes the decimal part, converting a float to an integer."
  },
  {
    "id": "ruby_250",
    "question": "Which keyword is used for defining global variables in Ruby?",
    "options": [
      { "id": "option_1", "text": "@", "isCorrect": false },
      { "id": "option_2", "text": "const", "isCorrect": false },
      { "id": "option_3", "text": "$", "isCorrect": true },
      { "id": "option_4", "text": "&", "isCorrect": false }
    ],
    "hint": "Global variables in Ruby begin with a special character.",
    "answerDescription": "Global variables in Ruby start with `$`, e.g., `$global_var = 10`."
  },
  {
    "id": "ruby_251",
    "question": "Which symbol is used to denote instance variables in Ruby?",
    "options": [
      { "id": "option_1", "text": "$", "isCorrect": false },
      { "id": "option_2", "text": "&&", "isCorrect": false },
      { "id": "option_3", "text": "#", "isCorrect": false },
      { "id": "option_4", "text": "@", "isCorrect": true }
    ],
    "hint": "Instance variables in Ruby start with a special character.",
    "answerDescription": "Instance variables in Ruby begin with `@`, e.g., `@variable_name`."
  },
  {
    "id": "ruby_252",
    "question": "What will `x = nil` return when printed?",
    "options": [
      { "id": "option_1", "text": "0", "isCorrect": false },
      { "id": "option_2", "text": "undefined", "isCorrect": false },
      { "id": "option_3", "text": "false", "isCorrect": false },
      { "id": "option_4", "text": "nil", "isCorrect": true }
    ],
    "hint": "Ruby uses a special value for uninitialized or empty variables.",
    "answerDescription": "In Ruby, `nil` represents the absence of a value."
  },
  {
    "id": "ruby_253",
    "question": "Which of the following is a valid boolean value in Ruby?",
    "options": [
      { "id": "option_1", "text": "Yes", "isCorrect": false },
      { "id": "option_2", "text": "1", "isCorrect": false },
      { "id": "option_3", "text": "ON", "isCorrect": false },
      { "id": "option_4", "text": "true", "isCorrect": true }
    ],
    "hint": "Boolean values in Ruby are lowercase.",
    "answerDescription": "Ruby boolean values are `true` and `false`, both written in lowercase."
  },
  {
    "id": "ruby_254",
    "question": "How do you define a floating-point number in Ruby?",
    "options": [
      { "id": "option_1", "text": "float x = 2.5", "isCorrect": false },
      { "id": "option_2", "text": "x := 2.5", "isCorrect": false },
      { "id": "option_3", "text": "x = float(2.5)", "isCorrect": false },
      { "id": "option_4", "text": "x = 2.5", "isCorrect": true }
    ],
    "hint": "Ruby does not require explicit type declarations.",
    "answerDescription": "Floating-point numbers in Ruby are simply defined with a decimal, e.g., `x = 2.5`."
  },
  {
    "id": "ruby_255",
    "question": "Which symbol is used to define a block in Ruby?",
    "options": [
      { "id": "option_1", "text": "{}", "isCorrect": false },
      { "id": "option_2", "text": "do-end", "isCorrect": false },
      { "id": "option_3", "text": "both {} and do-end", "isCorrect": false },
      { "id": "option_4", "text": "All of the above", "isCorrect": true }
    ],
    "hint": "Ruby allows multiple syntaxes for defining blocks.",
    "answerDescription": "Ruby supports both `{}` and `do-end` for defining blocks."
  },
  {
    "id": "ruby_256",
    "question": "Which data type is used to represent unique, immutable identifiers in Ruby?",
    "options": [
      { "id": "option_1", "text": "String", "isCorrect": false },
      { "id": "option_2", "text": "Array", "isCorrect": false },
      { "id": "option_3", "text": "Integer", "isCorrect": false },
      { "id": "option_4", "text": "Symbol", "isCorrect": true }
    ],
    "hint": "Symbols in Ruby are prefixed with a colon `:`.",
    "answerDescription": "Symbols (e.g., `:symbol_name`) are immutable and commonly used for keys in hashes."
  },
  {
    "id": "ruby_257",
    "question": "What does the `.to_s` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Converts a string to an integer", "isCorrect": false },
      { "id": "option_2", "text": "Converts a float to an integer", "isCorrect": false },
      { "id": "option_3", "text": "Converts a symbol to a boolean", "isCorrect": false },
      { "id": "option_4", "text": "Converts a value to a string", "isCorrect": true }
    ],
    "hint": "Ruby provides `.to_s` to convert values into a specific type.",
    "answerDescription": "The `.to_s` method converts a value into a string, e.g., `5.to_s` results in `'5'`."
  },
  {
    "id": "ruby_258",
    "question": "How do you define a block variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "#var", "isCorrect": false },
      { "id": "option_2", "text": "@var", "isCorrect": false },
      { "id": "option_3", "text": "var:", "isCorrect": false },
      { "id": "option_4", "text": "|var|", "isCorrect": true }
    ],
    "hint": "Block variables are enclosed within specific symbols.",
    "answerDescription": "In Ruby, block variables are defined using pipes (`| |`), e.g., `{ |var| puts var }`."
  },
  {
    "id": "ruby_259",
    "question": "Which method is used to find the length of a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "sizeOf()", "isCorrect": false },
      { "id": "option_2", "text": "count()", "isCorrect": false },
      { "id": "option_3", "text": "lengthOf()", "isCorrect": false },
      { "id": "option_4", "text": "length", "isCorrect": true }
    ],
    "hint": "Ruby provides a simple property to get string length.",
    "answerDescription": "The `.length` method returns the number of characters in a string, e.g., `'Ruby'.length` results in `4`."
  },
  {
    "id": "ruby_260",
    "question": "What will be the result of `'5' * 3` in Ruby?",
    "options": [
      { "id": "option_1", "text": "15", "isCorrect": false },
      { "id": "option_2", "text": "Error", "isCorrect": false },
      { "id": "option_3", "text": "[5, 5, 5]", "isCorrect": false },
      { "id": "option_4", "text": "'555'", "isCorrect": true }
    ],
    "hint": "Multiplication of a string with an integer repeats the string.",
    "answerDescription": "In Ruby, multiplying a string by a number repeats the string, e.g., `'5' * 3` results in `'555'`."
  },
  {
    "id": "ruby_261",
    "question": "What keyword is used to define a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "A variable name in uppercase", "isCorrect": true },
      { "id": "option_2", "text": "const", "isCorrect": false },
      { "id": "option_3", "text": "final", "isCorrect": false },
      { "id": "option_4", "text": "constant", "isCorrect": false }
    ],
    "hint": "Ruby does not have a `const` keyword like some other languages.",
    "answerDescription": "In Ruby, constants are written in uppercase, e.g., `MY_CONSTANT = 10`."
  },
  {
    "id": "ruby_262",
    "question": "Which data type in Ruby represents a sequence of characters?",
    "options": [
      { "id": "option_1", "text": "String", "isCorrect": true },
      { "id": "option_2", "text": "Symbol", "isCorrect": false },
      { "id": "option_3", "text": "Integer", "isCorrect": false },
      { "id": "option_4", "text": "Array", "isCorrect": false }
    ],
    "hint": "Text values are enclosed in quotes.",
    "answerDescription": "Ruby strings are enclosed in single or double quotes, e.g., `'Hello'` or `\"World\"`."
  },
  {
    "id": "ruby_263",
    "question": "How do you interpolate variables inside a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `#{}` inside double quotes", "isCorrect": true },
      { "id": "option_2", "text": "Using `%s` like in C", "isCorrect": false },
      { "id": "option_3", "text": "Using `+` to concatenate", "isCorrect": false },
      { "id": "option_4", "text": "Using single quotes", "isCorrect": false }
    ],
    "hint": "Interpolation only works with double-quoted strings.",
    "answerDescription": "Ruby allows embedding variables in strings using `#{}` inside double-quoted strings."
  },
  {
    "id": "ruby_264",
    "question": "Which of the following represents an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "10", "isCorrect": true },
      { "id": "option_2", "text": "10.5", "isCorrect": false },
      { "id": "option_3", "text": "\"10\"", "isCorrect": false },
      { "id": "option_4", "text": ":10", "isCorrect": false }
    ],
    "hint": "Integers are whole numbers without decimals.",
    "answerDescription": "In Ruby, `10` is an integer, whereas `10.5` is a float and `\"10\"` is a string."
  },
  {
    "id": "ruby_265",
    "question": "Which method is used to convert a hash into an array of key-value pairs?",
    "options": [
      { "id": "option_1", "text": "transform", "isCorrect": false },
      { "id": "option_2", "text": "to_pair", "isCorrect": false },
      { "id": "option_3", "text": "to_a", "isCorrect": true },
      { "id": "option_4", "text": "flatten", "isCorrect": false }
    ],
    "hint": "This method converts the hash into an array where each key-value pair is a nested array.",
    "answerDescription": "The `to_a` method converts a hash into an array of key-value pairs."
  },
  {
    "id": "ruby_266",
    "question": "What method is used to check the data type of a variable in Ruby?",
    "options": [
      { "id": "option_1", "text": ".class", "isCorrect": true },
      { "id": "option_2", "text": ".typeOf", "isCorrect": false },
      { "id": "option_3", "text": ".typeof", "isCorrect": false },
      { "id": "option_4", "text": ".dataType", "isCorrect": false }
    ],
    "hint": "This method returns the class of an object.",
    "answerDescription": "The `.class` method returns the class of a variable, e.g., `5.class` returns `Integer`."
  },
  {
    "id": "ruby_267",
    "question": "What is the value of `!!nil` in Ruby?",
    "options": [
      { "id": "option_1", "text": "false", "isCorrect": true },
      { "id": "option_2", "text": "true", "isCorrect": false },
      { "id": "option_3", "text": "nil", "isCorrect": false },
      { "id": "option_4", "text": "1", "isCorrect": false }
    ],
    "hint": "Double negation converts a value to its boolean equivalent.",
    "answerDescription": "`nil` is treated as false in Ruby, so `!!nil` evaluates to `false`."
  },
  {
    "id": "ruby_268",
    "question": "How do you define a global variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "By prefixing it with `$`", "isCorrect": true },
      { "id": "option_2", "text": "By using `var` keyword", "isCorrect": false },
      { "id": "option_3", "text": "By using `global` keyword", "isCorrect": false },
      { "id": "option_4", "text": "By defining it inside a class", "isCorrect": false }
    ],
    "hint": "Global variables in Ruby always start with a special symbol.",
    "answerDescription": "In Ruby, global variables are prefixed with `$`, e.g., `$global_var = 10`."
  },
  {
    "id": "ruby_269",
    "question": "Which method can be used to convert a string to an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": ".to_i", "isCorrect": true },
      { "id": "option_2", "text": ".int()", "isCorrect": false },
      { "id": "option_3", "text": ".convertToInt()", "isCorrect": false },
      { "id": "option_4", "text": ".as_integer", "isCorrect": false }
    ],
    "hint": "Ruby provides a simple method that starts with `to_`.",
    "answerDescription": "The `.to_i` method converts a string to an integer, e.g., `\"123\".to_i` results in `123`."
  },
  {
    "id": "ruby_270",
    "question": "Which method can be used to check if a variable is `nil`?",
    "options": [
      { "id": "option_1", "text": ".nil?", "isCorrect": true },
      { "id": "option_2", "text": ".isNil()", "isCorrect": false },
      { "id": "option_3", "text": ".checkNil()", "isCorrect": false },
      { "id": "option_4", "text": ".equalsNil()", "isCorrect": false }
    ],
    "hint": "This method ends with a question mark.",
    "answerDescription": "In Ruby, `.nil?` is used to check if a variable is `nil`, e.g., `x.nil?`."
  },  {
    "id": "ruby_271",
    "question": "Which of the following is a valid way to declare a symbol in Ruby?",
    "options": [
      { "id": "option_1", "text": "\"symbol\"", "isCorrect": false },
      { "id": "option_2", "text": ":symbol", "isCorrect": true },
      { "id": "option_3", "text": "symbol()", "isCorrect": false },
      { "id": "option_4", "text": "new Symbol('symbol')", "isCorrect": false }
    ],
    "hint": "Symbols in Ruby start with a special character.",
    "answerDescription": "Ruby symbols are prefixed with a colon, e.g., `:my_symbol`."
  },
  {
    "id": "ruby_272",
    "question": "Which keyword is used to define a block-scoped variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "var", "isCorrect": false },
      { "id": "option_2", "text": "No keyword is required", "isCorrect": true },
      { "id": "option_3", "text": "let", "isCorrect": false },
      { "id": "option_4", "text": "block", "isCorrect": false }
    ],
    "hint": "Ruby variables are implicitly scoped.",
    "answerDescription": "In Ruby, block variables are simply defined without a special keyword."
  },
  {
    "id": "ruby_273",
    "question": "What does the `freeze` method do to an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "Deletes the object", "isCorrect": false },
      { "id": "option_2", "text": "Prevents modification", "isCorrect": true },
      { "id": "option_3", "text": "Converts the object to a string", "isCorrect": false },
      { "id": "option_4", "text": "Duplicates the object", "isCorrect": false }
    ],
    "hint": "It locks the object to prevent changes.",
    "answerDescription": "Calling `.freeze` on an object prevents further modifications to it."
  },
  {
    "id": "ruby_274",
    "question": "Which of the following is a valid floating-point number in Ruby?",
    "options": [
      { "id": "option_1", "text": "100", "isCorrect": false },
      { "id": "option_2", "text": "10.5", "isCorrect": true },
      { "id": "option_3", "text": "\"10.5\"", "isCorrect": false },
      { "id": "option_4", "text": ":10.5", "isCorrect": false }
    ],
    "hint": "Floating-point numbers contain a decimal point.",
    "answerDescription": "In Ruby, `10.5` is a float, while `100` is an integer."
  },
  {
    "id": "ruby_275",
    "question": "What does `nil.to_i` return in Ruby?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": false },
      { "id": "option_2", "text": "0", "isCorrect": true },
      { "id": "option_3", "text": "An error", "isCorrect": false },
      { "id": "option_4", "text": "Infinity", "isCorrect": false }
    ],
    "hint": "Converting `nil` to an integer results in a default number.",
    "answerDescription": "Calling `.to_i` on `nil` returns `0` instead of an error."
  },
  {
    "id": "ruby_276",
    "question": "Which method is used to round a float to the nearest integer in Ruby?",
    "options": [
      { "id": "option_1", "text": ".ceil", "isCorrect": false },
      { "id": "option_2", "text": ".round", "isCorrect": true },
      { "id": "option_3", "text": ".truncate", "isCorrect": false },
      { "id": "option_4", "text": ".floor", "isCorrect": false }
    ],
    "hint": "This method rounds to the closest whole number.",
    "answerDescription": "Ruby's `.round` method rounds a float to the nearest integer."
  },
  {
    "id": "ruby_277",
    "question": "What is the default value of an uninitialized variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "0", "isCorrect": false },
      { "id": "option_2", "text": "nil", "isCorrect": true },
      { "id": "option_3", "text": "undefined", "isCorrect": false },
      { "id": "option_4", "text": "false", "isCorrect": false }
    ],
    "hint": "Ruby assigns an absence-of-value indicator.",
    "answerDescription": "In Ruby, an uninitialized variable holds `nil` until assigned a value."
  },
  {
    "id": "ruby_278",
    "question": "What does `10 / 3` return in Ruby if both numbers are integers?",
    "options": [
      { "id": "option_1", "text": "3.33", "isCorrect": false },
      { "id": "option_2", "text": "3", "isCorrect": true },
      { "id": "option_3", "text": "3.0", "isCorrect": false },
      { "id": "option_4", "text": "An error", "isCorrect": false }
    ],
    "hint": "Integer division truncates decimals.",
    "answerDescription": "In Ruby, dividing two integers returns an integer, so `10 / 3` is `3`."
  },
  {
    "id": "ruby_279",
    "question": "What happens if you use an undefined variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "It defaults to `nil`", "isCorrect": false },
      { "id": "option_2", "text": "It raises an error", "isCorrect": true },
      { "id": "option_3", "text": "It is automatically assigned a value", "isCorrect": false },
      { "id": "option_4", "text": "It returns an empty string", "isCorrect": false }
    ],
    "hint": "Ruby does not allow undefined variables to be used.",
    "answerDescription": "Accessing an undefined variable in Ruby results in a `NameError`."
  },
  {
    "id": "ruby_280",
    "question": "How do you convert an integer to a float in Ruby?",
    "options": [
      { "id": "option_1", "text": ".to_int", "isCorrect": false },
      { "id": "option_2", "text": ".to_f", "isCorrect": true },
      { "id": "option_3", "text": ".convert_float", "isCorrect": false },
      { "id": "option_4", "text": ".asFloat", "isCorrect": false }
    ],
    "hint": "Ruby uses a simple `to_` method for type conversion.",
    "answerDescription": "Calling `.to_f` on an integer converts it to a float, e.g., `5.to_f` results in `5.0`."
  },
  {
    "id": "ruby_281",
    "question": "Which data type is used to store `true` or `false` values in Ruby?",
    "options": [
      { "id": "option_1", "text": "String", "isCorrect": false },
      { "id": "option_2", "text": "Integer", "isCorrect": false },
      { "id": "option_3", "text": "Symbol", "isCorrect": false },
      { "id": "option_4", "text": "Boolean", "isCorrect": true }
    ],
    "hint": "This type represents logical values.",
    "answerDescription": "The `Boolean` type in Ruby consists of two values: `true` and `false`."
  },
  {
    "id": "ruby_282",
    "question": "What will `puts 5.0 / 2` output in Ruby?",
    "options": [
      { "id": "option_1", "text": "2", "isCorrect": false },
      { "id": "option_2", "text": "2.5", "isCorrect": false },
      { "id": "option_3", "text": "An error", "isCorrect": false },
      { "id": "option_4", "text": "2.5", "isCorrect": true }
    ],
    "hint": "Division with a float results in a float.",
    "answerDescription": "Since `5.0` is a float, Ruby performs floating-point division, resulting in `2.5`."
  },
  {
    "id": "ruby_283",
    "question": "Which method is used to check the class of a variable in Ruby?",
    "options": [
      { "id": "option_1", "text": ".typeof", "isCorrect": false },
      { "id": "option_2", "text": ".kind_of?", "isCorrect": false },
      { "id": "option_3", "text": ".instanceof?", "isCorrect": false },
      { "id": "option_4", "text": ".class", "isCorrect": true }
    ],
    "hint": "This method directly returns the variable's class name.",
    "answerDescription": "Calling `.class` on a variable returns its data type, such as `5.class` returning `Integer`."
  },
  {
    "id": "ruby_284",
    "question": "What will `nil.to_s` return in Ruby?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": false },
      { "id": "option_2", "text": "0", "isCorrect": false },
      { "id": "option_3", "text": "An error", "isCorrect": false },
      { "id": "option_4", "text": "\"\"", "isCorrect": true }
    ],
    "hint": "It returns an empty string.",
    "answerDescription": "In Ruby, `nil.to_s` converts `nil` to an empty string (`\"\"`)."
  },
  {
    "id": "ruby_285",
    "question": "Which of the following is a valid constant name in Ruby?",
    "options": [
      { "id": "option_1", "text": "my_constant", "isCorrect": false },
      { "id": "option_2", "text": "MyConstant", "isCorrect": false },
      { "id": "option_3", "text": "_MY_CONSTANT", "isCorrect": false },
      { "id": "option_4", "text": "MY_CONSTANT", "isCorrect": true }
    ],
    "hint": "Constants are typically written in all uppercase.",
    "answerDescription": "Ruby constants are conventionally written in uppercase, e.g., `MY_CONSTANT`."
  },
  {
    "id": "ruby_286",
    "question": "What will `5.to_s + \"5\"` output in Ruby?",
    "options": [
      { "id": "option_1", "text": "10", "isCorrect": false },
      { "id": "option_2", "text": "55", "isCorrect": false },
      { "id": "option_3", "text": "An error", "isCorrect": false },
      { "id": "option_4", "text": "\"55\"", "isCorrect": true }
    ],
    "hint": "String concatenation occurs here.",
    "answerDescription": "Calling `to_s` on `5` converts it to a string, so `\"5\" + \"5\"` results in `\"55\"`."
  },
  {
    "id": "ruby_287",
    "question": "Which operator is used to find the remainder of division in Ruby?",
    "options": [
      { "id": "option_1", "text": "/", "isCorrect": false },
      { "id": "option_2", "text": "*", "isCorrect": false },
      { "id": "option_3", "text": "**", "isCorrect": false },
      { "id": "option_4", "text": "%", "isCorrect": true }
    ],
    "hint": "This operator is called modulus.",
    "answerDescription": "The `%` operator returns the remainder of division, e.g., `10 % 3` results in `1`."
  },
  {
    "id": "ruby_288",
    "question": "How can you convert a string into an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": ".to_f", "isCorrect": false },
      { "id": "option_2", "text": ".convert", "isCorrect": false },
      { "id": "option_3", "text": ".asInteger", "isCorrect": false },
      { "id": "option_4", "text": ".to_i", "isCorrect": true }
    ],
    "hint": "The method starts with `to_`.",
    "answerDescription": "The `.to_i` method converts a string to an integer, e.g., `\"42\".to_i` returns `42`."
  },
  {
    "id": "ruby_289",
    "question": "What will `\"ruby\".upcase` return?",
    "options": [
      { "id": "option_1", "text": "\"ruby\"", "isCorrect": false },
      { "id": "option_2", "text": "Ruby", "isCorrect": false },
      { "id": "option_3", "text": "RUBY!", "isCorrect": false },
      { "id": "option_4", "text": "\"RUBY\"", "isCorrect": true }
    ],
    "hint": "It converts all characters to uppercase.",
    "answerDescription": "The `.upcase` method converts a string to all uppercase, so `\"ruby\".upcase` returns `\"RUBY\"`."
  },
  {
    "id": "ruby_290",
    "question": "Which of the following is a dynamically typed language?",
    "options": [
      { "id": "option_1", "text": "Java", "isCorrect": false },
      { "id": "option_2", "text": "C", "isCorrect": false },
      { "id": "option_3", "text": "C++", "isCorrect": false },
      { "id": "option_4", "text": "Ruby", "isCorrect": true }
    ],
    "hint": "Ruby does not require explicit type declarations.",
    "answerDescription": "Ruby is dynamically typed, meaning variables do not need explicit type definitions."
  },  {
    "id": "ruby_291",
    "question": "What keyword is used to declare a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "A variable name in all uppercase", "isCorrect": true },
      { "id": "option_2", "text": "const", "isCorrect": false },
      { "id": "option_3", "text": "let", "isCorrect": false },
      { "id": "option_4", "text": "static", "isCorrect": false }
    ],
    "hint": "Ruby constants are defined by using uppercase letters.",
    "answerDescription": "In Ruby, constants are conventionally named in uppercase, e.g., `MY_CONSTANT = 10`."
  },
  {
    "id": "ruby_292",
    "question": "Which method converts an integer to a string in Ruby?",
    "options": [
      { "id": "option_1", "text": ".to_s", "isCorrect": true },
      { "id": "option_2", "text": ".to_str", "isCorrect": false },
      { "id": "option_3", "text": ".stringify", "isCorrect": false },
      { "id": "option_4", "text": ".asString", "isCorrect": false }
    ],
    "hint": "The method starts with 'to_'.",
    "answerDescription": "The `.to_s` method converts an integer into a string, e.g., `10.to_s` returns `'10'`."
  },
  {
    "id": "ruby_293",
    "question": "Which of the following is NOT a valid Ruby data type?",
    "options": [
      { "id": "option_1", "text": "Tuple", "isCorrect": true },
      { "id": "option_2", "text": "Integer", "isCorrect": false },
      { "id": "option_3", "text": "Array", "isCorrect": false },
      { "id": "option_4", "text": "Symbol", "isCorrect": false }
    ],
    "hint": "Ruby does not have this Python-like collection type.",
    "answerDescription": "Ruby does not support 'Tuple' as a data type. It uses Arrays instead."
  },
  {
    "id": "ruby_294",
    "question": "How do you declare a global variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "By prefixing with `$`", "isCorrect": true },
      { "id": "option_2", "text": "By using `global` keyword", "isCorrect": false },
      { "id": "option_3", "text": "By prefixing with `@`", "isCorrect": false },
      { "id": "option_4", "text": "By using `var` keyword", "isCorrect": false }
    ],
    "hint": "Global variables start with a special character.",
    "answerDescription": "Global variables in Ruby start with `$`, e.g., `$global_var = 10`."
  },
  {
    "id": "ruby_295",
    "question": "What will `5.0.to_i` return in Ruby?",
    "options": [
      { "id": "option_1", "text": "5", "isCorrect": true },
      { "id": "option_2", "text": "5.0", "isCorrect": false },
      { "id": "option_3", "text": "An error", "isCorrect": false },
      { "id": "option_4", "text": "nil", "isCorrect": false }
    ],
    "hint": "This method removes the decimal part.",
    "answerDescription": "`to_i` converts floating-point numbers to integers by truncating the decimal part."
  },
  {
    "id": "ruby_296",
    "question": "Which of the following is a mutable data type in Ruby?",
    "options": [
      { "id": "option_1", "text": "Array", "isCorrect": true },
      { "id": "option_2", "text": "Symbol", "isCorrect": false },
      { "id": "option_3", "text": "Fixnum", "isCorrect": false },
      { "id": "option_4", "text": "TrueClass", "isCorrect": false }
    ],
    "hint": "This data type allows modification after creation.",
    "answerDescription": "Arrays in Ruby are mutable, meaning elements can be added, removed, or changed."
  },
  {
    "id": "ruby_297",
    "question": "Which symbol is used to define an instance variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "@", "isCorrect": true },
      { "id": "option_2", "text": "#", "isCorrect": false },
      { "id": "option_3", "text": "$", "isCorrect": false },
      { "id": "option_4", "text": "&", "isCorrect": false }
    ],
    "hint": "This symbol is placed before instance variables.",
    "answerDescription": "Instance variables in Ruby begin with `@`, such as `@name`."
  },
  {
    "id": "ruby_298",
    "question": "What will `\"123\".to_i` return in Ruby?",
    "options": [
      { "id": "option_1", "text": "123", "isCorrect": true },
      { "id": "option_2", "text": "“123”", "isCorrect": false },
      { "id": "option_3", "text": "An error", "isCorrect": false },
      { "id": "option_4", "text": "nil", "isCorrect": false }
    ],
    "hint": "It converts a string to a number.",
    "answerDescription": "Calling `.to_i` on a string extracts its numeric value, returning `123`."
  },
  {
    "id": "ruby_299",
    "question": "Which method checks if a variable is `nil` in Ruby?",
    "options": [
      { "id": "option_1", "text": ".nil?", "isCorrect": true },
      { "id": "option_2", "text": ".empty?", "isCorrect": false },
      { "id": "option_3", "text": ".zero?", "isCorrect": false },
      { "id": "option_4", "text": ".blank?", "isCorrect": false }
    ],
    "hint": "This method ends with a question mark.",
    "answerDescription": "The `.nil?` method returns `true` if a variable is `nil`."
  },
  {
    "id": "ruby_300",
    "question": "Which of these is an immutable data type in Ruby?",
    "options": [
      { "id": "option_1", "text": "Symbol", "isCorrect": true },
      { "id": "option_2", "text": "Array", "isCorrect": false },
      { "id": "option_3", "text": "String", "isCorrect": false },
      { "id": "option_4", "text": "Hash", "isCorrect": false }
    ],
    "hint": "This type is often used as a key in hashes.",
    "answerDescription": "Symbols in Ruby are immutable, meaning they cannot be changed after creation."
  },  {
    "id": "ruby_301",
    "question": "Which keyword is used for a conditional statement in Ruby?",
    "options": [
      { "id": "option_1", "text": "if", "isCorrect": true },
      { "id": "option_2", "text": "when", "isCorrect": false },
      { "id": "option_3", "text": "unless", "isCorrect": false },
      { "id": "option_4", "text": "case", "isCorrect": false }
    ],
    "hint": "It is the most commonly used condition keyword.",
    "answerDescription": "The `if` statement is used to execute code only if a condition is true."
  },
  {
    "id": "ruby_302",
    "question": "Which loop will execute at least once regardless of the condition?",
    "options": [
      { "id": "option_1", "text": "begin...while", "isCorrect": true },
      { "id": "option_2", "text": "while", "isCorrect": false },
      { "id": "option_3", "text": "for", "isCorrect": false },
      { "id": "option_4", "text": "each", "isCorrect": false }
    ],
    "hint": "This loop structure ensures at least one execution.",
    "answerDescription": "The `begin...while` loop executes the code block once before checking the condition."
  },
  {
    "id": "ruby_303",
    "question": "What keyword is used to define multiple conditions in a `case` statement?",
    "options": [
      { "id": "option_1", "text": "when", "isCorrect": true },
      { "id": "option_2", "text": "elsif", "isCorrect": false },
      { "id": "option_3", "text": "default", "isCorrect": false },
      { "id": "option_4", "text": "switch", "isCorrect": false }
    ],
    "hint": "This keyword is used for each case option.",
    "answerDescription": "The `when` keyword is used inside `case` statements to define different conditions."
  },
  {
    "id": "ruby_304",
    "question": "What will `unless false` do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Execute the block", "isCorrect": true },
      { "id": "option_2", "text": "Skip execution", "isCorrect": false },
      { "id": "option_3", "text": "Throw an error", "isCorrect": false },
      { "id": "option_4", "text": "Return nil", "isCorrect": false }
    ],
    "hint": "The `unless` statement runs when the condition is false.",
    "answerDescription": "`unless false` is equivalent to `if true`, so the block executes."
  },
  {
    "id": "ruby_305",
    "question": "Which keyword is used to exit a loop in Ruby?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": true },
      { "id": "option_2", "text": "exit", "isCorrect": false },
      { "id": "option_3", "text": "return", "isCorrect": false },
      { "id": "option_4", "text": "stop", "isCorrect": false }
    ],
    "hint": "This keyword immediately stops loop execution.",
    "answerDescription": "The `break` keyword is used to exit a loop before its natural termination."
  },
  {
    "id": "ruby_306",
    "question": "What does the `next` keyword do inside a loop?",
    "options": [
      { "id": "option_1", "text": "Skips to the next iteration", "isCorrect": true },
      { "id": "option_2", "text": "Stops the loop", "isCorrect": false },
      { "id": "option_3", "text": "Repeats the current iteration", "isCorrect": false },
      { "id": "option_4", "text": "Throws an error", "isCorrect": false }
    ],
    "hint": "This keyword helps to skip certain loop cycles.",
    "answerDescription": "The `next` keyword skips the current iteration and proceeds to the next loop cycle."
  },
  {
    "id": "ruby_307",
    "question": "Which keyword is used to retry a loop iteration in Ruby?",
    "options": [
      { "id": "option_1", "text": "redo", "isCorrect": true },
      { "id": "option_2", "text": "retry", "isCorrect": false },
      { "id": "option_3", "text": "again", "isCorrect": false },
      { "id": "option_4", "text": "repeat", "isCorrect": false }
    ],
    "hint": "This keyword repeats the current iteration.",
    "answerDescription": "The `redo` keyword restarts the current loop iteration without re-evaluating the condition."
  },
  {
    "id": "ruby_308",
    "question": "Which loop is best suited for iterating over an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "each", "isCorrect": true },
      { "id": "option_2", "text": "for", "isCorrect": false },
      { "id": "option_3", "text": "while", "isCorrect": false },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "This method is commonly used in Ruby collections.",
    "answerDescription": "The `each` method is preferred for iterating over arrays and hashes in Ruby."
  },
  {
    "id": "ruby_309",
    "question": "What is the default return value of an `if` statement if no `else` is present and the condition is false?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": true },
      { "id": "option_2", "text": "false", "isCorrect": false },
      { "id": "option_3", "text": "0", "isCorrect": false },
      { "id": "option_4", "text": "undefined", "isCorrect": false }
    ],
    "hint": "Ruby returns this value when no condition matches.",
    "answerDescription": "If an `if` statement does not execute due to a false condition, it returns `nil`."
  },
{
 "id": "ruby_310",
 "question": "Which statement is used to execute code when no `case` condition matches?",
  "options": [
   { "id": "option_1", "text": "else", "isCorrect": true },
   { "id": "option_2", "text": "default", "isCorrect": false },
   { "id": "option_3", "text": "otherwise", "isCorrect": false },
   { "id": "option_4", "text": "fallback", "isCorrect": false }
  ],
  "hint": "This keyword is also used in `if` statements.",
  "answerDescription": "The `else` statement in a `case` structure handles cases that do not match any `when` condition."
},  {
    "id": "ruby_311",
    "question": "What will the following statement return? `puts 'Hello' if nil`",
    "options": [
      { "id": "option_1", "text": "Hello", "isCorrect": false },
      { "id": "option_2", "text": "Nothing", "isCorrect": true },
      { "id": "option_3", "text": "nil", "isCorrect": false },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "The condition in `if` must be truthy for execution.",
    "answerDescription": "Since `nil` is a falsy value in Ruby, the statement does not execute, so nothing is printed."
  },
  {
    "id": "ruby_312",
    "question": "Which loop is guaranteed to execute at least once?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "begin...end while", "isCorrect": true },
      { "id": "option_3", "text": "for", "isCorrect": false },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "This loop executes the body before checking the condition.",
    "answerDescription": "A `begin...end while` loop always runs at least once before evaluating the condition."
  },
  {
    "id": "ruby_313",
    "question": "Which keyword is used to define an alternate condition inside an `if` statement?",
    "options": [
      { "id": "option_1", "text": "else", "isCorrect": false },
      { "id": "option_2", "text": "elsif", "isCorrect": true },
      { "id": "option_3", "text": "when", "isCorrect": false },
      { "id": "option_4", "text": "otherwise", "isCorrect": false }
    ],
    "hint": "It is used between `if` and `else` to define additional conditions.",
    "answerDescription": "The `elsif` keyword allows multiple conditional checks inside an `if` block."
  },
  {
    "id": "ruby_314",
    "question": "Which loop is best suited for iterating through a range of numbers?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "for", "isCorrect": true },
      { "id": "option_3", "text": "each", "isCorrect": false },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "This loop is commonly used with ranges.",
    "answerDescription": "The `for` loop is ideal for iterating through a range of numbers in Ruby."
  },
  {
    "id": "ruby_315",
    "question": "Which statement is used to skip the rest of the code inside a loop iteration?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "next", "isCorrect": true },
      { "id": "option_3", "text": "continue", "isCorrect": false },
      { "id": "option_4", "text": "redo", "isCorrect": false }
    ],
    "hint": "It allows skipping the remaining loop body and moving to the next iteration.",
    "answerDescription": "The `next` keyword skips the remaining code in the current iteration and moves to the next iteration."
  },
  {
    "id": "ruby_316",
    "question": "What will `unless true` do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Execute the block", "isCorrect": false },
      { "id": "option_2", "text": "Skip execution", "isCorrect": true },
      { "id": "option_3", "text": "Throw an error", "isCorrect": false },
      { "id": "option_4", "text": "Return nil", "isCorrect": false }
    ],
    "hint": "The `unless` statement only runs if the condition is false.",
    "answerDescription": "`unless true` is equivalent to `if false`, so the block is not executed."
  },
  {
    "id": "ruby_317",
    "question": "Which keyword is used to execute code when no conditions in a `case` statement match?",
    "options": [
      { "id": "option_1", "text": "when", "isCorrect": false },
      { "id": "option_2", "text": "else", "isCorrect": true },
      { "id": "option_3", "text": "default", "isCorrect": false },
      { "id": "option_4", "text": "otherwise", "isCorrect": false }
    ],
    "hint": "This keyword is used to handle unmatched cases in a `case` statement.",
    "answerDescription": "The `else` keyword provides a default case when no `when` conditions match."
  },
  {
    "id": "ruby_318",
    "question": "Which statement is used to immediately exit a loop?",
    "options": [
      { "id": "option_1", "text": "return", "isCorrect": false },
      { "id": "option_2", "text": "break", "isCorrect": true },
      { "id": "option_3", "text": "exit", "isCorrect": false },
      { "id": "option_4", "text": "stop", "isCorrect": false }
    ],
    "hint": "This statement immediately stops loop execution.",
    "answerDescription": "The `break` keyword is used to exit a loop before it naturally completes."
  },
  {
    "id": "ruby_319",
    "question": "Which keyword is used to restart a loop iteration without evaluating the condition again?",
    "options": [
      { "id": "option_1", "text": "continue", "isCorrect": false },
      { "id": "option_2", "text": "redo", "isCorrect": true },
      { "id": "option_3", "text": "retry", "isCorrect": false },
      { "id": "option_4", "text": "next", "isCorrect": false }
    ],
    "hint": "It restarts the current loop iteration.",
    "answerDescription": "The `redo` keyword repeats the current iteration without rechecking the condition."
  },
  {
    "id": "ruby_320",
    "question": "What will be the output of `5.times { |i| puts i if i > 2 }`?",
    "options": [
      { "id": "option_1", "text": "0 1 2 3 4", "isCorrect": false },
      { "id": "option_2", "text": "3 4", "isCorrect": true },
      { "id": "option_3", "text": "2 3 4", "isCorrect": false },
      { "id": "option_4", "text": "1 2 3 4", "isCorrect": false }
    ],
    "hint": "The block only prints numbers greater than 2.",
    "answerDescription": "The `times` method iterates from `0` to `4`, printing only values greater than `2`, which are `3` and `4`."
  },  {
    "id": "ruby_321",
    "question": "What is the output of `if 0 then puts 'Hello' end` in Ruby?",
    "options": [
      { "id": "option_1", "text": "Nothing", "isCorrect": false },
      { "id": "option_2", "text": "Hello", "isCorrect": true },
      { "id": "option_3", "text": "Error", "isCorrect": false },
      { "id": "option_4", "text": "nil", "isCorrect": false }
    ],
    "hint": "In Ruby, 0 is considered a truthy value.",
    "answerDescription": "Unlike some other languages, `0` is truthy in Ruby, so 'Hello' is printed."
  },
  {
    "id": "ruby_322",
    "question": "Which looping structure is best for an infinite loop in Ruby?",
    "options": [
      { "id": "option_1", "text": "while true", "isCorrect": false },
      { "id": "option_2", "text": "loop do", "isCorrect": true },
      { "id": "option_3", "text": "until false", "isCorrect": false },
      { "id": "option_4", "text": "for i in 1..Infinity", "isCorrect": false }
    ],
    "hint": "`loop do` is designed for indefinite iteration unless explicitly stopped.",
    "answerDescription": "`loop do` is an infinite loop unless it encounters a `break` statement."
  },
  {
    "id": "ruby_323",
    "question": "What will `5.downto(3) { |i| print i }` output?",
    "options": [
      { "id": "option_1", "text": "3 4 5", "isCorrect": false },
      { "id": "option_2", "text": "543", "isCorrect": true },
      { "id": "option_3", "text": "5 4 3", "isCorrect": false },
      { "id": "option_4", "text": "Nothing", "isCorrect": false }
    ],
    "hint": "It counts down from 5 to 3, printing numbers without spaces.",
    "answerDescription": "`downto` iterates downward from the start to the end value."
  },
  {
    "id": "ruby_324",
    "question": "Which keyword in Ruby allows retrying a failed loop iteration?",
    "options": [
      { "id": "option_1", "text": "redo", "isCorrect": false },
      { "id": "option_2", "text": "retry", "isCorrect": true },
      { "id": "option_3", "text": "next", "isCorrect": false },
      { "id": "option_4", "text": "break", "isCorrect": false }
    ],
    "hint": "It is commonly used inside `begin-rescue` blocks.",
    "answerDescription": "`retry` restarts the loop iteration from the beginning."
  },
  {
    "id": "ruby_325",
    "question": "Which control structure is used for pattern matching in Ruby?",
    "options": [
      { "id": "option_1", "text": "if-elsif", "isCorrect": false },
      { "id": "option_2", "text": "case-when", "isCorrect": true },
      { "id": "option_3", "text": "for-in", "isCorrect": false },
      { "id": "option_4", "text": "loop-do", "isCorrect": false }
    ],
    "hint": "It allows checking multiple conditions in a structured way.",
    "answerDescription": "`case-when` is used for comparing a variable against multiple values."
  },
  {
    "id": "ruby_326",
    "question": "What will `unless false` do?",
    "options": [
      { "id": "option_1", "text": "Skip execution", "isCorrect": false },
      { "id": "option_2", "text": "Execute the block", "isCorrect": true },
      { "id": "option_3", "text": "Throw an error", "isCorrect": false },
      { "id": "option_4", "text": "Return false", "isCorrect": false }
    ],
    "hint": "`unless` executes when the condition is false.",
    "answerDescription": "`unless false` behaves like `if true`, so the block runs."
  },
  {
    "id": "ruby_327",
    "question": "Which statement is used inside a loop to restart the current iteration?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "redo", "isCorrect": true },
      { "id": "option_3", "text": "next", "isCorrect": false },
      { "id": "option_4", "text": "continue", "isCorrect": false }
    ],
    "hint": "It restarts the iteration without rechecking the condition.",
    "answerDescription": "The `redo` statement restarts the iteration from the beginning."
  },
  {
    "id": "ruby_328",
    "question": "What does the `until` loop do?",
    "options": [
      { "id": "option_1", "text": "Repeats while the condition is true", "isCorrect": false },
      { "id": "option_2", "text": "Repeats until the condition becomes true", "isCorrect": true },
      { "id": "option_3", "text": "Executes only once", "isCorrect": false },
      { "id": "option_4", "text": "Throws an error if the condition is false", "isCorrect": false }
    ],
    "hint": "It works opposite to `while`.",
    "answerDescription": "The `until` loop continues running until its condition becomes true."
  },
  {
    "id": "ruby_329",
    "question": "Which loop method is commonly used for iterating over arrays?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "each", "isCorrect": true },
      { "id": "option_3", "text": "for", "isCorrect": false },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "`each` is an iterator commonly used with collections.",
    "answerDescription": "The `each` method iterates over an array, yielding each element."
  },
  {
    "id": "ruby_330",
    "question": "What does `5.times { puts 'Hello' }` do?",
    "options": [
      { "id": "option_1", "text": "Prints 'Hello' 4 times", "isCorrect": false },
      { "id": "option_2", "text": "Prints 'Hello' 5 times", "isCorrect": true },
      { "id": "option_3", "text": "Prints 'Hello' indefinitely", "isCorrect": false },
      { "id": "option_4", "text": "Throws an error", "isCorrect": false }
    ],
    "hint": "The `times` method runs the block the specified number of times.",
    "answerDescription": "`5.times` executes the block 5 times, printing 'Hello' each time."
  },  {
    "id": "ruby_331",
    "question": "Which keyword is used to exit a loop in Ruby?",
    "options": [
      { "id": "option_1", "text": "continue", "isCorrect": false },
      { "id": "option_2", "text": "break", "isCorrect": true },
      { "id": "option_3", "text": "redo", "isCorrect": false },
      { "id": "option_4", "text": "next", "isCorrect": false }
    ],
    "hint": "This keyword immediately stops loop execution.",
    "answerDescription": "The `break` keyword exits a loop before it completes all iterations."
  },
  {
    "id": "ruby_332",
    "question": "What does `for i in 1..3 do puts i end` output?",
    "options": [
      { "id": "option_1", "text": "Nothing", "isCorrect": false },
      { "id": "option_2", "text": "1 2 3", "isCorrect": true },
      { "id": "option_3", "text": "3 2 1", "isCorrect": false },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "The loop iterates over the range 1 to 3, printing values.",
    "answerDescription": "`for` loops iterate over ranges, printing each number in order."
  },
  {
    "id": "ruby_333",
    "question": "What does `while true do puts 'Hello'; break end` do?",
    "options": [
      { "id": "option_1", "text": "Loops indefinitely", "isCorrect": false },
      { "id": "option_2", "text": "Prints 'Hello' once", "isCorrect": true },
      { "id": "option_3", "text": "Throws an error", "isCorrect": false },
      { "id": "option_4", "text": "Prints 'Hello' twice", "isCorrect": false }
    ],
    "hint": "The `break` statement stops the loop immediately after first execution.",
    "answerDescription": "Since `break` is used, 'Hello' is printed only once."
  },
  {
    "id": "ruby_334",
    "question": "Which statement is used to skip the current iteration of a loop?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "next", "isCorrect": true },
      { "id": "option_3", "text": "redo", "isCorrect": false },
      { "id": "option_4", "text": "return", "isCorrect": false }
    ],
    "hint": "This keyword prevents execution of remaining code in the iteration and moves to the next.",
    "answerDescription": "The `next` keyword skips the current iteration and moves to the next one."
  },
  {
    "id": "ruby_335",
    "question": "What does `case 2 when 1 then 'One' when 2 then 'Two' else 'Other' end` return?",
    "options": [
      { "id": "option_1", "text": "'One'", "isCorrect": false },
      { "id": "option_2", "text": "'Two'", "isCorrect": true },
      { "id": "option_3", "text": "'Other'", "isCorrect": false },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "The `case` statement matches the given value to the corresponding `when` clause.",
    "answerDescription": "Since the value `2` matches `when 2`, the result is 'Two'."
  },
  {
    "id": "ruby_336",
    "question": "What is the main difference between `while` and `until` loops?",
    "options": [
      { "id": "option_1", "text": "`while` runs when the condition is false", "isCorrect": false },
      { "id": "option_2", "text": "`until` runs until the condition becomes true", "isCorrect": true },
      { "id": "option_3", "text": "Both behave the same way", "isCorrect": false },
      { "id": "option_4", "text": "`while` runs when the condition is true", "isCorrect": false }
    ],
    "hint": "`until` works as the inverse of `while`.",
    "answerDescription": "`while` runs when the condition is true, while `until` runs until the condition becomes true."
  },
  {
    "id": "ruby_337",
    "question": "How can you loop exactly 10 times in Ruby?",
    "options": [
      { "id": "option_1", "text": "`while i < 10`", "isCorrect": false },
      { "id": "option_2", "text": "`10.times do`", "isCorrect": true },
      { "id": "option_3", "text": "`for i in 0..9`", "isCorrect": false },
      { "id": "option_4", "text": "`loop do`", "isCorrect": false }
    ],
    "hint": "`times` is specifically designed for a fixed number of iterations.",
    "answerDescription": "`10.times` executes the block exactly 10 times."
  },
  {
    "id": "ruby_338",
    "question": "What will `i = 0; while i < 3 do puts i; i += 1 end` output?",
    "options": [
      { "id": "option_1", "text": "1 2 3", "isCorrect": false },
      { "id": "option_2", "text": "0 1 2", "isCorrect": true },
      { "id": "option_3", "text": "0 1 2 3", "isCorrect": false },
      { "id": "option_4", "text": "Nothing", "isCorrect": false }
    ],
    "hint": "The loop starts at 0 and stops when `i` reaches 3.",
    "answerDescription": "`while` runs as long as the condition is true, printing 0, 1, and 2."
  },
  {
    "id": "ruby_339",
    "question": "What will `array = [1, 2, 3]; array.each { |x| print x }` output?",
    "options": [
      { "id": "option_1", "text": "123 with spaces", "isCorrect": false },
      { "id": "option_2", "text": "123", "isCorrect": true },
      { "id": "option_3", "text": "1 2 3", "isCorrect": false },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "Each element is printed without spaces using `print`.",
    "answerDescription": "`each` iterates over the array, printing elements without spaces."
  },
  {
    "id": "ruby_340",
    "question": "What does `loop do puts 'Hello'; break end` do?",
    "options": [
      { "id": "option_1", "text": "Runs indefinitely", "isCorrect": false },
      { "id": "option_2", "text": "Prints 'Hello' once", "isCorrect": true },
      { "id": "option_3", "text": "Throws an error", "isCorrect": false },
      { "id": "option_4", "text": "Does nothing", "isCorrect": false }
    ],
    "hint": "`loop do` runs indefinitely unless `break` is encountered.",
    "answerDescription": "`loop do` starts an infinite loop, but `break` exits after one iteration."
  },  {
    "id": "ruby_341",
    "question": "Which looping construct executes at least once before checking the condition?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "for", "isCorrect": false },
      { "id": "option_3", "text": "do..while", "isCorrect": true },
      { "id": "option_4", "text": "until", "isCorrect": false }
    ],
    "hint": "This loop guarantees at least one execution.",
    "answerDescription": "The `do..while` loop runs once before checking the condition."
  },
  {
    "id": "ruby_342",
    "question": "Which keyword is used to define multiple conditions in an `if` statement?",
    "options": [
      { "id": "option_1", "text": "also", "isCorrect": false },
      { "id": "option_2", "text": "elif", "isCorrect": false },
      { "id": "option_3", "text": "elsif", "isCorrect": true },
      { "id": "option_4", "text": "elseif", "isCorrect": false }
    ],
    "hint": "Ruby uses a unique keyword instead of `elif` or `elseif`.",
    "answerDescription": "In Ruby, `elsif` is used to define additional conditions in an `if` statement."
  },
  {
    "id": "ruby_343",
    "question": "What is the output of `3.times { puts 'Hello' }`?",
    "options": [
      { "id": "option_1", "text": "An error", "isCorrect": false },
      { "id": "option_2", "text": "'Hello' once", "isCorrect": false },
      { "id": "option_3", "text": "'Hello' printed 3 times", "isCorrect": true },
      { "id": "option_4", "text": "'Hello' printed indefinitely", "isCorrect": false }
    ],
    "hint": "`times` executes the block a fixed number of times.",
    "answerDescription": "The `.times` method runs the block exactly 3 times, printing 'Hello' three times."
  },
  {
    "id": "ruby_344",
    "question": "Which keyword is used to provide a fallback case in a `case` statement?",
    "options": [
      { "id": "option_1", "text": "default", "isCorrect": false },
      { "id": "option_2", "text": "fallback", "isCorrect": false },
      { "id": "option_3", "text": "else", "isCorrect": true },
      { "id": "option_4", "text": "otherwise", "isCorrect": false }
    ],
    "hint": "This keyword is used when no `when` condition matches.",
    "answerDescription": "In Ruby's `case` statement, `else` provides the fallback when no other case matches."
  },
  {
    "id": "ruby_345",
    "question": "Which loop is best suited when the number of iterations is known?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "until", "isCorrect": false },
      { "id": "option_3", "text": "for", "isCorrect": true },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "This loop iterates over a specified range.",
    "answerDescription": "The `for` loop is best suited when the number of iterations is predetermined."
  },
  {
    "id": "ruby_346",
    "question": "Which loop will run indefinitely unless interrupted?",
    "options": [
      { "id": "option_1", "text": "while false", "isCorrect": false },
      { "id": "option_2", "text": "for i in 1..10", "isCorrect": false },
      { "id": "option_3", "text": "loop do", "isCorrect": true },
      { "id": "option_4", "text": "until true", "isCorrect": false }
    ],
    "hint": "This loop runs forever unless a `break` is used.",
    "answerDescription": "The `loop do` construct runs indefinitely unless explicitly stopped."
  },
  {
    "id": "ruby_347",
    "question": "What does `5.downto(1) { |i| print i }` output?",
    "options": [
      { "id": "option_1", "text": "1 2 3 4 5", "isCorrect": false },
      { "id": "option_2", "text": "Nothing", "isCorrect": false },
      { "id": "option_3", "text": "54321", "isCorrect": true },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "`downto` counts down from the starting number to the end value.",
    "answerDescription": "The `downto` method iterates from 5 down to 1, printing numbers in descending order."
  },
  {
    "id": "ruby_348",
    "question": "Which loop structure is preferred for iterating over an array?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "until", "isCorrect": false },
      { "id": "option_3", "text": "each", "isCorrect": true },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "This method directly accesses each element in the array.",
    "answerDescription": "The `each` method is best for iterating over an array since it loops through elements automatically."
  },
  {
    "id": "ruby_349",
    "question": "Which statement restarts a loop iteration from the beginning?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "next", "isCorrect": false },
      { "id": "option_3", "text": "redo", "isCorrect": true },
      { "id": "option_4", "text": "return", "isCorrect": false }
    ],
    "hint": "This keyword forces the iteration to restart without moving to the next one.",
    "answerDescription": "The `redo` keyword restarts the current iteration of a loop from the beginning."
  },
  {
    "id": "ruby_350",
    "question": "What does `x = 5; until x == 0 do print x; x -= 1 end` output?",
    "options": [
      { "id": "option_1", "text": "Nothing", "isCorrect": false },
      { "id": "option_2", "text": "0 1 2 3 4 5", "isCorrect": false },
      { "id": "option_3", "text": "54321", "isCorrect": true },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "`until` loops execute until the condition becomes true.",
    "answerDescription": "The `until` loop runs until `x == 0`, printing numbers from 5 to 1."
  },  {
    "id": "ruby_351",
    "question": "Which Ruby keyword is used to terminate a loop prematurely?",
    "options": [
      { "id": "option_1", "text": "next", "isCorrect": false },
      { "id": "option_2", "text": "redo", "isCorrect": false },
      { "id": "option_3", "text": "continue", "isCorrect": false },
      { "id": "option_4", "text": "break", "isCorrect": true }
    ],
    "hint": "This keyword stops the loop execution immediately.",
    "answerDescription": "The `break` keyword is used to exit a loop prematurely in Ruby."
  },
  {
    "id": "ruby_352",
    "question": "Which loop will execute its block until a given condition is false?",
    "options": [
      { "id": "option_1", "text": "for", "isCorrect": false },
      { "id": "option_2", "text": "loop", "isCorrect": false },
      { "id": "option_3", "text": "while", "isCorrect": false },
      { "id": "option_4", "text": "until", "isCorrect": true }
    ],
    "hint": "This loop runs as long as the condition is not met.",
    "answerDescription": "The `until` loop in Ruby executes until its condition becomes true."
  },
  {
    "id": "ruby_353",
    "question": "Which keyword is used to define alternative branches in a `case` statement?",
    "options": [
      { "id": "option_1", "text": "switch", "isCorrect": false },
      { "id": "option_2", "text": "if", "isCorrect": false },
      { "id": "option_3", "text": "when", "isCorrect": false },
      { "id": "option_4", "text": "else", "isCorrect": true }
    ],
    "hint": "This keyword handles cases not matched by any `when` condition.",
    "answerDescription": "In Ruby, the `else` clause in a `case` statement is executed when no `when` condition matches."
  },
  {
    "id": "ruby_354",
    "question": "What does `10.times { |i| print i }` output?",
    "options": [
      { "id": "option_1", "text": "Nothing", "isCorrect": false },
      { "id": "option_2", "text": "1010101010", "isCorrect": false },
      { "id": "option_3", "text": "1 to 10", "isCorrect": false },
      { "id": "option_4", "text": "0123456789", "isCorrect": true }
    ],
    "hint": "`times` starts counting from zero.",
    "answerDescription": "The `times` method starts from zero and prints numbers from 0 to 9."
  },
  {
    "id": "ruby_355",
    "question": "Which loop is considered an infinite loop by default?",
    "options": [
      { "id": "option_1", "text": "for", "isCorrect": false },
      { "id": "option_2", "text": "until false", "isCorrect": false },
      { "id": "option_3", "text": "while true", "isCorrect": false },
      { "id": "option_4", "text": "loop do", "isCorrect": true }
    ],
    "hint": "This loop runs indefinitely unless manually stopped.",
    "answerDescription": "The `loop do` construct is an infinite loop in Ruby unless explicitly broken."
  },
  {
    "id": "ruby_356",
    "question": "Which statement skips the current iteration and moves to the next one?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "redo", "isCorrect": false },
      { "id": "option_3", "text": "retry", "isCorrect": false },
      { "id": "option_4", "text": "next", "isCorrect": true }
    ],
    "hint": "This keyword allows skipping to the next loop iteration.",
    "answerDescription": "The `next` keyword in Ruby skips the current iteration and proceeds to the next."
  },
  {
    "id": "ruby_357",
    "question": "What is the output of `5.upto(8) { |i| print i }`?",
    "options": [
      { "id": "option_1", "text": "8 7 6 5", "isCorrect": false },
      { "id": "option_2", "text": "Error", "isCorrect": false },
      { "id": "option_3", "text": "5432", "isCorrect": false },
      { "id": "option_4", "text": "5678", "isCorrect": true }
    ],
    "hint": "`upto` counts in ascending order.",
    "answerDescription": "The `upto` method iterates from 5 to 8, printing numbers sequentially."
  },
  {
    "id": "ruby_358",
    "question": "Which control structure is most commonly used for handling multiple conditions?",
    "options": [
      { "id": "option_1", "text": "loop", "isCorrect": false },
      { "id": "option_2", "text": "for", "isCorrect": false },
      { "id": "option_3", "text": "if", "isCorrect": false },
      { "id": "option_4", "text": "case", "isCorrect": true }
    ],
    "hint": "This control structure is similar to a switch statement in other languages.",
    "answerDescription": "The `case` statement is ideal for handling multiple conditions in Ruby."
  },
  {
    "id": "ruby_359",
    "question": "Which keyword allows a loop to restart its current iteration?",
    "options": [
      { "id": "option_1", "text": "next", "isCorrect": false },
      { "id": "option_2", "text": "break", "isCorrect": false },
      { "id": "option_3", "text": "retry", "isCorrect": false },
      { "id": "option_4", "text": "redo", "isCorrect": true }
    ],
    "hint": "This keyword forces the iteration to begin again without moving to the next one.",
    "answerDescription": "The `redo` keyword restarts the current iteration of a loop."
  },
  {
    "id": "ruby_360",
    "question": "What is the output of `10.downto(7) { |i| print i }`?",
    "options": [
      { "id": "option_1", "text": "7 8 9 10", "isCorrect": false },
      { "id": "option_2", "text": "Error", "isCorrect": false },
      { "id": "option_3", "text": "101112", "isCorrect": false },
      { "id": "option_4", "text": "10987", "isCorrect": true }
    ],
    "hint": "`downto` counts in descending order.",
    "answerDescription": "The `downto` method iterates from 10 down to 7, printing numbers in decreasing order."
  },  {
    "id": "ruby_361",
    "question": "Which loop always executes at least once in Ruby?",
    "options": [
      { "id": "option_1", "text": "do-while", "isCorrect": true },
      { "id": "option_2", "text": "while", "isCorrect": false },
      { "id": "option_3", "text": "for", "isCorrect": false },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "This loop executes before checking the condition.",
    "answerDescription": "The `do-while` loop ensures that the block runs at least once before evaluating the condition."
  },
  {
    "id": "ruby_362",
    "question": "Which statement is used to exit a `case` block?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": true },
      { "id": "option_2", "text": "return", "isCorrect": false },
      { "id": "option_3", "text": "stop", "isCorrect": false },
      { "id": "option_4", "text": "exit", "isCorrect": false }
    ],
    "hint": "This keyword stops execution of a control structure.",
    "answerDescription": "In Ruby, `break` is used to exit a `case` statement or loop."
  },
  {
    "id": "ruby_363",
    "question": "Which Ruby keyword is used for multiple condition checking in a `case` statement?",
    "options": [
      { "id": "option_1", "text": "when", "isCorrect": true },
      { "id": "option_2", "text": "if", "isCorrect": false },
      { "id": "option_3", "text": "else", "isCorrect": false },
      { "id": "option_4", "text": "switch", "isCorrect": false }
    ],
    "hint": "This keyword is used to define different conditions in a `case` block.",
    "answerDescription": "The `when` keyword is used to specify different conditions within a `case` statement."
  },
  {
    "id": "ruby_364",
    "question": "Which loop will execute indefinitely unless explicitly stopped?",
    "options": [
      { "id": "option_1", "text": "loop do", "isCorrect": true },
      { "id": "option_2", "text": "for", "isCorrect": false },
      { "id": "option_3", "text": "until false", "isCorrect": false },
      { "id": "option_4", "text": "while true", "isCorrect": false }
    ],
    "hint": "This loop runs continuously unless manually broken.",
    "answerDescription": "The `loop do` construct in Ruby runs indefinitely unless explicitly stopped using `break`."
  },
  {
    "id": "ruby_365",
    "question": "What will `while false do puts 'Hello' end` output?",
    "options": [
      { "id": "option_1", "text": "Nothing", "isCorrect": true },
      { "id": "option_2", "text": "Hello", "isCorrect": false },
      { "id": "option_3", "text": "Infinite Hello", "isCorrect": false },
      { "id": "option_4", "text": "Syntax Error", "isCorrect": false }
    ],
    "hint": "The loop condition is never true.",
    "answerDescription": "Since the `while` condition is `false`, the loop does not execute, and nothing is printed."
  },
  {
    "id": "ruby_366",
    "question": "Which Ruby keyword is used to execute code repeatedly?",
    "options": [
      { "id": "option_1", "text": "loop", "isCorrect": true },
      { "id": "option_2", "text": "iterate", "isCorrect": false },
      { "id": "option_3", "text": "repeat", "isCorrect": false },
      { "id": "option_4", "text": "cycle", "isCorrect": false }
    ],
    "hint": "This keyword is often used to create infinite loops.",
    "answerDescription": "The `loop` keyword in Ruby is used to run a block of code repeatedly."
  },
  {
    "id": "ruby_367",
    "question": "What is the output of `3.times { print 'Ruby ' }`?",
    "options": [
      { "id": "option_1", "text": "Ruby Ruby Ruby ", "isCorrect": true },
      { "id": "option_2", "text": "Ruby Ruby ", "isCorrect": false },
      { "id": "option_3", "text": "Ruby", "isCorrect": false },
      { "id": "option_4", "text": "3 Ruby", "isCorrect": false }
    ],
    "hint": "The `times` method executes the block exactly the given number of times.",
    "answerDescription": "The `times` method executes the block 3 times, printing 'Ruby ' three times."
  },
  {
    "id": "ruby_368",
    "question": "Which control structure is best for checking a range of values?",
    "options": [
      { "id": "option_1", "text": "case", "isCorrect": true },
      { "id": "option_2", "text": "if", "isCorrect": false },
      { "id": "option_3", "text": "loop", "isCorrect": false },
      { "id": "option_4", "text": "until", "isCorrect": false }
    ],
    "hint": "This structure is commonly used instead of multiple `if` statements.",
    "answerDescription": "The `case` statement in Ruby is ideal for handling multiple possible values efficiently."
  },
  {
    "id": "ruby_369",
    "question": "What is the output of `4.downto(1) { |i| print i }`?",
    "options": [
      { "id": "option_1", "text": "4321", "isCorrect": true },
      { "id": "option_2", "text": "1234", "isCorrect": false },
      { "id": "option_3", "text": "Error", "isCorrect": false },
      { "id": "option_4", "text": "Nothing", "isCorrect": false }
    ],
    "hint": "`downto` counts downwards from the given number.",
    "answerDescription": "The `downto` method iterates from 4 down to 1, printing the numbers in descending order."
  },
  {
    "id": "ruby_370",
    "question": "Which statement immediately exits from a loop?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": true },
      { "id": "option_2", "text": "next", "isCorrect": false },
      { "id": "option_3", "text": "redo", "isCorrect": false },
      { "id": "option_4", "text": "exit", "isCorrect": false }
    ],
    "hint": "This statement stops loop execution instantly.",
    "answerDescription": "The `break` statement in Ruby is used to immediately exit a loop."
  },  {
    "id": "ruby_371",
    "question": "Which loop structure is best suited for iterating over an array?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "each", "isCorrect": true },
      { "id": "option_3", "text": "loop", "isCorrect": false },
      { "id": "option_4", "text": "until", "isCorrect": false }
    ],
    "hint": "This method is specifically designed for collections.",
    "answerDescription": "The `each` method in Ruby is commonly used to iterate over elements in an array."
  },
  {
    "id": "ruby_372",
    "question": "What is the result of `5.upto(7) { |i| print i }`?",
    "options": [
      { "id": "option_1", "text": "7 6 5", "isCorrect": false },
      { "id": "option_2", "text": "567", "isCorrect": true },
      { "id": "option_3", "text": "765", "isCorrect": false },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "`upto` counts upwards from the starting number.",
    "answerDescription": "The `upto` method starts from 5 and increments up to 7, printing `567`."
  },
  {
    "id": "ruby_373",
    "question": "Which keyword skips the current iteration and moves to the next?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "next", "isCorrect": true },
      { "id": "option_3", "text": "redo", "isCorrect": false },
      { "id": "option_4", "text": "exit", "isCorrect": false }
    ],
    "hint": "This keyword prevents further execution of the current iteration but continues the loop.",
    "answerDescription": "The `next` keyword in Ruby skips the current iteration and moves to the next one."
  },
  {
    "id": "ruby_374",
    "question": "Which loop executes while a condition is false?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "until", "isCorrect": true },
      { "id": "option_3", "text": "for", "isCorrect": false },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "Opposite of `while`, this loop runs until the condition becomes true.",
    "answerDescription": "The `until` loop in Ruby runs until its condition evaluates to true."
  },
  {
    "id": "ruby_375",
    "question": "What does `redo` do in a loop?",
    "options": [
      { "id": "option_1", "text": "Exits the loop", "isCorrect": false },
      { "id": "option_2", "text": "Repeats the current iteration", "isCorrect": true },
      { "id": "option_3", "text": "Skips the current iteration", "isCorrect": false },
      { "id": "option_4", "text": "Starts the loop over", "isCorrect": false }
    ],
    "hint": "This keyword does not re-evaluate the loop condition.",
    "answerDescription": "The `redo` keyword in Ruby repeats the current iteration without checking the loop condition again."
  },
  {
    "id": "ruby_376",
    "question": "Which statement is used to evaluate multiple conditions in Ruby?",
    "options": [
      { "id": "option_1", "text": "if-else", "isCorrect": false },
      { "id": "option_2", "text": "case-when", "isCorrect": true },
      { "id": "option_3", "text": "while", "isCorrect": false },
      { "id": "option_4", "text": "unless", "isCorrect": false }
    ],
    "hint": "This statement is used instead of multiple `if-else` statements.",
    "answerDescription": "The `case-when` statement in Ruby is used to evaluate multiple conditions efficiently."
  },
  {
    "id": "ruby_377",
    "question": "How many times will `3.times { puts 'Hi' }` execute?",
    "options": [
      { "id": "option_1", "text": "Infinite", "isCorrect": false },
      { "id": "option_2", "text": "3 times", "isCorrect": true },
      { "id": "option_3", "text": "2 times", "isCorrect": false },
      { "id": "option_4", "text": "4 times", "isCorrect": false }
    ],
    "hint": "The `times` method runs exactly the specified number of times.",
    "answerDescription": "The `times` method executes the block exactly 3 times."
  },
  {
    "id": "ruby_378",
    "question": "What is the result of `10.downto(8) { |i| print i }`?",
    "options": [
      { "id": "option_1", "text": "810", "isCorrect": false },
      { "id": "option_2", "text": "1098", "isCorrect": true },
      { "id": "option_3", "text": "8910", "isCorrect": false },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "`downto` decreases the value step by step.",
    "answerDescription": "The `downto` method counts from 10 down to 8, printing `1098`."
  },
  {
    "id": "ruby_379",
    "question": "What does `break` do inside a loop?",
    "options": [
      { "id": "option_1", "text": "Restarts the loop", "isCorrect": false },
      { "id": "option_2", "text": "Exits the loop immediately", "isCorrect": true },
      { "id": "option_3", "text": "Skips to the next iteration", "isCorrect": false },
      { "id": "option_4", "text": "Pauses the loop", "isCorrect": false }
    ],
    "hint": "This keyword stops loop execution immediately.",
    "answerDescription": "The `break` statement exits the loop immediately, skipping any remaining iterations."
  },
  {
    "id": "ruby_380",
    "question": "Which keyword is used to reverse loop execution order?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "downto", "isCorrect": true },
      { "id": "option_3", "text": "reverse", "isCorrect": false },
      { "id": "option_4", "text": "step", "isCorrect": false }
    ],
    "hint": "This method is the opposite of `upto`.",
    "answerDescription": "The `downto` method in Ruby iterates in reverse order, decrementing the value."
  },  {
    "id": "ruby_381",
    "question": "Which loop is best suited when the number of iterations is known?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "until", "isCorrect": false },
      { "id": "option_3", "text": "for", "isCorrect": true },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "This loop structure is often used with a defined range.",
    "answerDescription": "The `for` loop in Ruby is best used when the number of iterations is predetermined."
  },
  {
    "id": "ruby_382",
    "question": "What will `puts 'Hello' if false` print?",
    "options": [
      { "id": "option_1", "text": "Hello", "isCorrect": false },
      { "id": "option_2", "text": "nil", "isCorrect": false },
      { "id": "option_3", "text": "Nothing", "isCorrect": true },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "The condition evaluates to false, so the statement won't execute.",
    "answerDescription": "Since `if false` is never true, the statement does not print anything."
  },
  {
    "id": "ruby_383",
    "question": "Which keyword is used to exit a loop immediately?",
    "options": [
      { "id": "option_1", "text": "next", "isCorrect": false },
      { "id": "option_2", "text": "redo", "isCorrect": false },
      { "id": "option_3", "text": "break", "isCorrect": true },
      { "id": "option_4", "text": "retry", "isCorrect": false }
    ],
    "hint": "This keyword stops the loop execution completely.",
    "answerDescription": "The `break` statement in Ruby immediately terminates the loop execution."
  },
  {
    "id": "ruby_384",
    "question": "What will `5.times { |i| print i }` output?",
    "options": [
      { "id": "option_1", "text": "12345", "isCorrect": false },
      { "id": "option_2", "text": "54321", "isCorrect": false },
      { "id": "option_3", "text": "01234", "isCorrect": true },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "The block variable starts from 0 and increments up to 4.",
    "answerDescription": "The `times` method starts counting from 0, so the output is `01234`."
  },
  {
    "id": "ruby_385",
    "question": "Which keyword is used to restart a loop iteration?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "next", "isCorrect": false },
      { "id": "option_3", "text": "redo", "isCorrect": true },
      { "id": "option_4", "text": "exit", "isCorrect": false }
    ],
    "hint": "This keyword repeats the current iteration without re-evaluating the condition.",
    "answerDescription": "The `redo` keyword in Ruby restarts the current iteration of the loop."
  },
  {
    "id": "ruby_386",
    "question": "Which loop does not check its condition before the first iteration?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "until", "isCorrect": false },
      { "id": "option_3", "text": "loop", "isCorrect": true },
      { "id": "option_4", "text": "for", "isCorrect": false }
    ],
    "hint": "This loop executes at least once before any condition is checked.",
    "answerDescription": "The `loop` construct in Ruby runs indefinitely unless explicitly stopped."
  },
  {
    "id": "ruby_387",
    "question": "Which operator is used to execute a block based on a condition?",
    "options": [
      { "id": "option_1", "text": "case", "isCorrect": false },
      { "id": "option_2", "text": "unless", "isCorrect": false },
      { "id": "option_3", "text": "if", "isCorrect": true },
      { "id": "option_4", "text": "when", "isCorrect": false }
    ],
    "hint": "This is the most basic conditional statement in Ruby.",
    "answerDescription": "The `if` statement in Ruby is used to execute a block of code when a condition is met."
  },
  {
    "id": "ruby_388",
    "question": "What will `10.downto(7) { |i| print i }` output?",
    "options": [
      { "id": "option_1", "text": "Error", "isCorrect": false },
      { "id": "option_2", "text": "1087", "isCorrect": false },
      { "id": "option_3", "text": "10987", "isCorrect": true },
      { "id": "option_4", "text": "78910", "isCorrect": false }
    ],
    "hint": "The `downto` method counts backward from the starting number.",
    "answerDescription": "The `downto` method starts at 10 and decrements to 7, printing `10987`."
  },
  {
    "id": "ruby_389",
    "question": "Which statement provides multiple condition evaluation in Ruby?",
    "options": [
      { "id": "option_1", "text": "if-else", "isCorrect": false },
      { "id": "option_2", "text": "unless", "isCorrect": false },
      { "id": "option_3", "text": "case-when", "isCorrect": true },
      { "id": "option_4", "text": "while", "isCorrect": false }
    ],
    "hint": "This statement is an alternative to writing multiple `if-else` conditions.",
    "answerDescription": "The `case-when` statement in Ruby is used for evaluating multiple conditions efficiently."
  },
  {
    "id": "ruby_390",
    "question": "What is the output of `3.times { print 'X' }`?",
    "options": [
      { "id": "option_1", "text": "XXX3", "isCorrect": false },
      { "id": "option_2", "text": "3XXX", "isCorrect": false },
      { "id": "option_3", "text": "XXX", "isCorrect": true },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "The `times` method executes the block a specified number of times.",
    "answerDescription": "The `times` method executes the block 3 times, printing `XXX`."
  },  {
    "id": "ruby_391",
    "question": "What will be the output of the following Ruby code?\n\n```ruby\nx = 10\ny = 20\nif x > y\n  puts 'X is greater'\nelsif x < y\n  puts 'Y is greater'\nelse\n  puts 'Both are equal'\nend\n```",
    "options": [
      { "id": "option_1", "text": "X is greater", "isCorrect": false },
      { "id": "option_2", "text": "Both are equal", "isCorrect": false },
      { "id": "option_3", "text": "Syntax Error", "isCorrect": false },
      { "id": "option_4", "text": "Y is greater", "isCorrect": true }
    ],
    "hint": "Compare the values of x and y.",
    "answerDescription": "Since 10 is less than 20, the elsif condition executes, printing 'Y is greater'."
  },
  {
    "id": "ruby_392",
    "question": "Which of the following loops executes at least once regardless of the condition?",
    "options": [
      { "id": "option_1", "text": "while loop", "isCorrect": false },
      { "id": "option_2", "text": "for loop", "isCorrect": false },
      { "id": "option_3", "text": "times loop", "isCorrect": false },
      { "id": "option_4", "text": "do-while loop", "isCorrect": true }
    ],
    "hint": "Think about loops that execute first and check the condition later.",
    "answerDescription": "The do-while loop executes at least once before checking the condition."
  },
  {
    "id": "ruby_393",
    "question": "What is the purpose of the `break` statement in a loop?",
    "options": [
      { "id": "option_1", "text": "Skips an iteration", "isCorrect": false },
      { "id": "option_2", "text": "Repeats the loop indefinitely", "isCorrect": false },
      { "id": "option_3", "text": "Restarts the loop", "isCorrect": false },
      { "id": "option_4", "text": "Exits the loop immediately", "isCorrect": true }
    ],
    "hint": "It is used to stop the loop execution early.",
    "answerDescription": "The `break` statement exits the loop immediately, regardless of the loop condition."
  },
  {
    "id": "ruby_394",
    "question": "How many times will the following loop execute?\n\n```ruby\nx = 5\nwhile x > 0\ndo\n  puts x\n  x -= 1\nend\n```",
    "options": [
      { "id": "option_1", "text": "Infinite times", "isCorrect": false },
      { "id": "option_2", "text": "4 times", "isCorrect": false },
      { "id": "option_3", "text": "0 times", "isCorrect": false },
      { "id": "option_4", "text": "5 times", "isCorrect": true }
    ],
    "hint": "Consider how `x` decreases on each iteration.",
    "answerDescription": "The loop runs 5 times, printing `5, 4, 3, 2, 1` before `x` becomes 0 and exits."
  },
  {
    "id": "ruby_395",
    "question": "Which keyword is used to skip the current iteration and continue to the next in Ruby loops?",
    "options": [
      { "id": "option_1", "text": "exit", "isCorrect": false },
      { "id": "option_2", "text": "stop", "isCorrect": false },
      { "id": "option_3", "text": "break", "isCorrect": false },
      { "id": "option_4", "text": "next", "isCorrect": true }
    ],
    "hint": "It allows skipping an iteration without terminating the loop.",
    "answerDescription": "The `next` keyword skips the current iteration and moves to the next iteration of the loop."
  },
  {
    "id": "ruby_396",
    "question": "Which loop structure is best suited when the number of iterations is known in advance?",
    "options": [
      { "id": "option_1", "text": "while loop", "isCorrect": false },
      { "id": "option_2", "text": "do-while loop", "isCorrect": false },
      { "id": "option_3", "text": "until loop", "isCorrect": false },
      { "id": "option_4", "text": "for loop", "isCorrect": true }
    ],
    "hint": "Think about loops with a defined range or counter.",
    "answerDescription": "A `for` loop is used when the number of iterations is predetermined."
  },
  {
    "id": "ruby_397",
    "question": "What will be the output of the following case statement?\n\n```ruby\nage = 18\ncase age\nwhen 0..12\n  puts 'Child'\nwhen 13..19\n  puts 'Teenager'\nwhen 20..35\n  puts 'Young Adult'\nelse\n  puts 'Adult'\nend\n```",
    "options": [
      { "id": "option_1", "text": "Child", "isCorrect": false },
      { "id": "option_2", "text": "Young Adult", "isCorrect": false },
      { "id": "option_3", "text": "Adult", "isCorrect": false },
      { "id": "option_4", "text": "Teenager", "isCorrect": true }
    ],
    "hint": "Check which range includes 18.",
    "answerDescription": "Since 18 falls in the `13..19` range, it prints 'Teenager'."
  },
  {
    "id": "ruby_398",
    "question": "Which Ruby keyword is used to define a conditional statement?",
    "options": [
      { "id": "option_1", "text": "switch", "isCorrect": false },
      { "id": "option_2", "text": "choose", "isCorrect": false },
      { "id": "option_3", "text": "select", "isCorrect": false },
      { "id": "option_4", "text": "if", "isCorrect": true }
    ],
    "hint": "Ruby does not use 'switch', unlike some other languages.",
    "answerDescription": "The `if` keyword is used to define conditional statements in Ruby."
  },
  {
    "id": "ruby_399",
    "question": "What will be the final value of `count` in this loop?\n\n```ruby\ncount = 0\nloop do\n  count += 1\n  break if count == 3\nend\n```",
    "options": [
      { "id": "option_1", "text": "0", "isCorrect": false },
      { "id": "option_2", "text": "1", "isCorrect": false },
      { "id": "option_3", "text": "Infinite loop", "isCorrect": false },
      { "id": "option_4", "text": "3", "isCorrect": true }
    ],
    "hint": "The loop breaks when count reaches 3.",
    "answerDescription": "The loop increments `count` until it reaches 3, then exits."
  },
  {
    "id": "ruby_400",
    "question": "Which loop executes while the condition is false and stops when it becomes true?",
    "options": [
      { "id": "option_1", "text": "for loop", "isCorrect": false },
      { "id": "option_2", "text": "while loop", "isCorrect": false },
      { "id": "option_3", "text": "loop do", "isCorrect": false },
      { "id": "option_4", "text": "until loop", "isCorrect": true }
    ],
    "hint": "This loop is the opposite of `while`.",
    "answerDescription": "An `until` loop runs while the condition is false and stops when it becomes true."
  },
  {
    "id": "ruby_401",
    "question": "Which loop in Ruby is guaranteed to execute at least once?",
    "options": [
      { "id": "option_1", "text": "do-while loop", "isCorrect": true },
      { "id": "option_2", "text": "while loop", "isCorrect": false },
      { "id": "option_3", "text": "for loop", "isCorrect": false },
      { "id": "option_4", "text": "loop do", "isCorrect": false }
    ],
    "hint": "This loop executes the block before checking the condition.",
    "answerDescription": "The 'do-while' loop ensures the code inside runs at least once before evaluating the condition."
  },
  {
    "id": "ruby_402",
    "question": "Which Ruby keyword is used to exit a loop prematurely?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": true },
      { "id": "option_2", "text": "continue", "isCorrect": false },
      { "id": "option_3", "text": "exit", "isCorrect": false },
      { "id": "option_4", "text": "return", "isCorrect": false }
    ],
    "hint": "This keyword immediately stops loop execution.",
    "answerDescription": "The 'break' statement is used to exit a loop before the condition becomes false."
  },
  {
    "id": "ruby_403",
    "question": "What does the `next` keyword do in a loop?",
    "options": [
      { "id": "option_1", "text": "Skips the current iteration and moves to the next", "isCorrect": true },
      { "id": "option_2", "text": "Exits the loop", "isCorrect": false },
      { "id": "option_3", "text": "Repeats the current iteration", "isCorrect": false },
      { "id": "option_4", "text": "Restarts the entire loop", "isCorrect": false }
    ],
    "hint": "It prevents execution of remaining code in the current iteration.",
    "answerDescription": "The 'next' keyword allows skipping the current iteration and moving to the next loop cycle."
  },
  {
    "id": "ruby_404",
    "question": "Which loop type is ideal when the number of iterations is known beforehand?",
    "options": [
      { "id": "option_1", "text": "for loop", "isCorrect": true },
      { "id": "option_2", "text": "while loop", "isCorrect": false },
      { "id": "option_3", "text": "until loop", "isCorrect": false },
      { "id": "option_4", "text": "loop do", "isCorrect": false }
    ],
    "hint": "This loop iterates over a range or collection.",
    "answerDescription": "The 'for' loop is best when the number of iterations is predetermined, such as iterating over an array."
  },
  {
    "id": "ruby_405",
    "question": "What will `while false do puts 'Hello' end` output?",
    "options": [
      { "id": "option_1", "text": "Nothing", "isCorrect": true },
      { "id": "option_2", "text": "Hello", "isCorrect": false },
      { "id": "option_3", "text": "An infinite loop", "isCorrect": false },
      { "id": "option_4", "text": "Syntax error", "isCorrect": false }
    ],
    "hint": "A 'while' loop executes only if the condition is true.",
    "answerDescription": "Since the condition is 'false', the loop does not execute, resulting in no output."
  },
  {
    "id": "ruby_406",
    "question": "Which statement is used to execute code when a `case` condition is not met?",
    "options": [
      { "id": "option_1", "text": "else", "isCorrect": true },
      { "id": "option_2", "text": "default", "isCorrect": false },
      { "id": "option_3", "text": "otherwise", "isCorrect": false },
      { "id": "option_4", "text": "fallback", "isCorrect": false }
    ],
    "hint": "This is similar to the 'default' case in other languages.",
    "answerDescription": "The 'else' clause in a 'case' statement executes if no conditions match."
  },
  {
    "id": "ruby_407",
    "question": "What does `until` do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Repeats until a condition is true", "isCorrect": true },
      { "id": "option_2", "text": "Repeats while a condition is true", "isCorrect": false },
      { "id": "option_3", "text": "Runs exactly once", "isCorrect": false },
      { "id": "option_4", "text": "Performs recursion", "isCorrect": false }
    ],
    "hint": "It is the opposite of 'while'.",
    "answerDescription": "An 'until' loop runs until its condition evaluates to true, making it the inverse of 'while'."
  },
  {
    "id": "ruby_408",
    "question": "Which loop method is best suited for iterating over an array?",
    "options": [
      { "id": "option_1", "text": "each", "isCorrect": true },
      { "id": "option_2", "text": "while", "isCorrect": false },
      { "id": "option_3", "text": "for", "isCorrect": false },
      { "id": "option_4", "text": "loop do", "isCorrect": false }
    ],
    "hint": "This is a common Ruby iterator method.",
    "answerDescription": "The 'each' method is used to iterate over elements in a collection such as an array."
  },
  {
    "id": "ruby_409",
    "question": "Which loop should be used to run code indefinitely until explicitly stopped?",
    "options": [
      { "id": "option_1", "text": "loop do", "isCorrect": true },
      { "id": "option_2", "text": "for", "isCorrect": false },
      { "id": "option_3", "text": "while", "isCorrect": false },
      { "id": "option_4", "text": "until", "isCorrect": false }
    ],
    "hint": "This loop requires a 'break' statement to stop execution.",
    "answerDescription": "The 'loop do' construct creates an infinite loop unless explicitly stopped using 'break'."
  },
  {
    "id": "ruby_410",
    "question": "What does `redo` do inside a loop?",
    "options": [
      { "id": "option_1", "text": "Repeats the current iteration without evaluating the condition again", "isCorrect": true },
      { "id": "option_2", "text": "Restarts the entire loop", "isCorrect": false },
      { "id": "option_3", "text": "Exits the loop", "isCorrect": false },
      { "id": "option_4", "text": "Skips to the next iteration", "isCorrect": false }
    ],
    "hint": "It re-executes the same iteration.",
    "answerDescription": "The 'redo' keyword restarts the current iteration without checking the loop condition."
  },  {
    "id": "ruby_411",
    "question": "Which Ruby keyword is used to define a block of code that executes only if a certain condition is met?",
    "options": [
      { "id": "option_1", "text": "case", "isCorrect": false },
      { "id": "option_2", "text": "loop", "isCorrect": false },
      { "id": "option_3", "text": "unless", "isCorrect": false },
      { "id": "option_4", "text": "if", "isCorrect": true }
    ],
    "hint": "This keyword checks a condition before executing code.",
    "answerDescription": "The 'if' statement in Ruby allows conditional execution of code based on whether a condition evaluates to true."
  },
  {
    "id": "ruby_412",
    "question": "Which loop is best suited when the number of iterations is known beforehand?",
    "options": [
      { "id": "option_1", "text": "while loop", "isCorrect": false },
      { "id": "option_2", "text": "until loop", "isCorrect": false },
      { "id": "option_3", "text": "loop do", "isCorrect": false },
      { "id": "option_4", "text": "for loop", "isCorrect": true }
    ],
    "hint": "This loop is commonly used to iterate over a range of values.",
    "answerDescription": "The 'for' loop in Ruby is ideal when the number of iterations is predetermined, making it efficient for working with ranges and collections."
  },
  {
    "id": "ruby_413",
    "question": "Which statement is used to exit a loop prematurely in Ruby?",
    "options": [
      { "id": "option_1", "text": "continue", "isCorrect": false },
      { "id": "option_2", "text": "redo", "isCorrect": false },
      { "id": "option_3", "text": "retry", "isCorrect": false },
      { "id": "option_4", "text": "break", "isCorrect": true }
    ],
    "hint": "This statement immediately stops the loop execution.",
    "answerDescription": "The 'break' statement is used in Ruby to exit a loop before it naturally terminates."
  },
  {
    "id": "ruby_414",
    "question": "Which loop will execute at least once regardless of the condition?",
    "options": [
      { "id": "option_1", "text": "for loop", "isCorrect": false },
      { "id": "option_2", "text": "while loop", "isCorrect": false },
      { "id": "option_3", "text": "until loop", "isCorrect": false },
      { "id": "option_4", "text": "loop do", "isCorrect": true }
    ],
    "hint": "This loop runs continuously unless explicitly stopped.",
    "answerDescription": "The 'loop do' construct runs indefinitely until explicitly exited with a 'break' statement."
  },
  {
    "id": "ruby_415",
    "question": "What is the purpose of the 'next' statement in Ruby loops?",
    "options": [
      { "id": "option_1", "text": "Restarts the loop from the beginning", "isCorrect": false },
      { "id": "option_2", "text": "Exits the loop completely", "isCorrect": false },
      { "id": "option_3", "text": "Repeats the current iteration", "isCorrect": false },
      { "id": "option_4", "text": "Skips to the next iteration", "isCorrect": true }
    ],
    "hint": "It allows skipping over specific iterations without exiting the loop.",
    "answerDescription": "The 'next' statement in Ruby skips the remaining code in the current iteration and moves to the next loop cycle."
  },
  {
    "id": "ruby_416",
    "question": "Which Ruby construct allows handling multiple conditional branches efficiently?",
    "options": [
      { "id": "option_1", "text": "if-else", "isCorrect": false },
      { "id": "option_2", "text": "unless", "isCorrect": false },
      { "id": "option_3", "text": "while", "isCorrect": false },
      { "id": "option_4", "text": "case", "isCorrect": true }
    ],
    "hint": "This construct is useful for checking multiple possible values.",
    "answerDescription": "The 'case' statement in Ruby provides a clean way to handle multiple conditional branches."
  },
  {
    "id": "ruby_417",
    "question": "Which keyword is used to execute a block of code repeatedly as long as a condition is false?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "loop", "isCorrect": false },
      { "id": "option_3", "text": "case", "isCorrect": false },
      { "id": "option_4", "text": "until", "isCorrect": true }
    ],
    "hint": "This loop runs while the condition remains false.",
    "answerDescription": "The 'until' loop in Ruby continues executing until its condition evaluates to true."
  },
  {
    "id": "ruby_418",
    "question": "Which statement is used in Ruby to retry a loop iteration?",
    "options": [
      { "id": "option_1", "text": "redo", "isCorrect": false },
      { "id": "option_2", "text": "next", "isCorrect": false },
      { "id": "option_3", "text": "break", "isCorrect": false },
      { "id": "option_4", "text": "retry", "isCorrect": true }
    ],
    "hint": "This statement re-executes the current iteration from the beginning.",
    "answerDescription": "The 'retry' statement in Ruby restarts the current iteration of a loop from the beginning."
  },
  {
    "id": "ruby_419",
    "question": "What will happen if a 'while' loop condition is always true?",
    "options": [
      { "id": "option_1", "text": "The loop will execute once", "isCorrect": false },
      { "id": "option_2", "text": "The loop will not execute", "isCorrect": false },
      { "id": "option_3", "text": "The loop will exit after three iterations", "isCorrect": false },
      { "id": "option_4", "text": "The loop will run indefinitely", "isCorrect": true }
    ],
    "hint": "Without an exit condition, this loop continues forever.",
    "answerDescription": "If the 'while' loop condition is always true, the loop will run indefinitely unless explicitly broken using 'break'."
  },
  {
    "id": "ruby_420",
    "question": "Which loop does not require an explicit condition to run?",
    "options": [
      { "id": "option_1", "text": "for loop", "isCorrect": false },
      { "id": "option_2", "text": "while loop", "isCorrect": false },
      { "id": "option_3", "text": "until loop", "isCorrect": false },
      { "id": "option_4", "text": "loop do", "isCorrect": true }
    ],
    "hint": "This loop executes indefinitely unless stopped with 'break'.",
    "answerDescription": "The 'loop do' construct in Ruby runs continuously without requiring an explicit condition."
  },  {
    "id": "ruby_421",
    "question": "Which keyword is used to terminate a loop in Ruby prematurely?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": true },
      { "id": "option_2", "text": "exit", "isCorrect": false },
      { "id": "option_3", "text": "continue", "isCorrect": false },
      { "id": "option_4", "text": "return", "isCorrect": false }
    ],
    "hint": "It immediately stops execution of the loop.",
    "answerDescription": "The 'break' keyword in Ruby is used to exit a loop prematurely."
  },
  {
    "id": "ruby_422",
    "question": "What will be the output of the following Ruby code?\n\n```ruby\nx = 5\nif x > 3\n  puts 'Greater'\nelse\n  puts 'Smaller'\nend\n```",
    "options": [
      { "id": "option_1", "text": "Greater", "isCorrect": true },
      { "id": "option_2", "text": "Smaller", "isCorrect": false },
      { "id": "option_3", "text": "Nil", "isCorrect": false },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "The condition checks if 5 is greater than 3.",
    "answerDescription": "Since 5 is greater than 3, the 'if' condition is true, and 'Greater' is printed."
  },
  {
    "id": "ruby_423",
    "question": "Which looping structure is used when the number of iterations is known beforehand?",
    "options": [
      { "id": "option_1", "text": "for", "isCorrect": true },
      { "id": "option_2", "text": "while", "isCorrect": false },
      { "id": "option_3", "text": "until", "isCorrect": false },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "This loop is commonly used with ranges or arrays.",
    "answerDescription": "The 'for' loop in Ruby is used when the number of iterations is predetermined."
  },
  {
    "id": "ruby_424",
    "question": "What is the purpose of the 'next' keyword in a loop?",
    "options": [
      { "id": "option_1", "text": "Skips the current iteration and continues with the next", "isCorrect": true },
      { "id": "option_2", "text": "Terminates the loop immediately", "isCorrect": false },
      { "id": "option_3", "text": "Repeats the current iteration", "isCorrect": false },
      { "id": "option_4", "text": "Pauses the loop execution", "isCorrect": false }
    ],
    "hint": "It allows skipping a particular loop cycle.",
    "answerDescription": "The 'next' keyword in Ruby skips the current iteration and continues with the next one."
  },
  {
    "id": "ruby_425",
    "question": "Which Ruby construct is used to test multiple conditions in a cleaner way than using multiple if-elsif statements?",
    "options": [
      { "id": "option_1", "text": "case", "isCorrect": true },
      { "id": "option_2", "text": "switch", "isCorrect": false },
      { "id": "option_3", "text": "match", "isCorrect": false },
      { "id": "option_4", "text": "select", "isCorrect": false }
    ],
    "hint": "This construct is similar to switch statements in other languages.",
    "answerDescription": "The 'case' statement in Ruby is used for multi-way branching, making conditions cleaner than using multiple 'if-elsif' statements."
  },
  {
    "id": "ruby_426",
    "question": "How does the 'until' loop work in Ruby?",
    "options": [
      { "id": "option_1", "text": "Executes until the condition becomes true", "isCorrect": true },
      { "id": "option_2", "text": "Executes while the condition is true", "isCorrect": false },
      { "id": "option_3", "text": "Executes only once", "isCorrect": false },
      { "id": "option_4", "text": "Executes an infinite number of times", "isCorrect": false }
    ],
    "hint": "It is the opposite of a 'while' loop.",
    "answerDescription": "An 'until' loop executes as long as the given condition is false and stops once it becomes true."
  },
  {
    "id": "ruby_427",
    "question": "What does the following Ruby loop do?\n\n```ruby\ni = 0\nwhile i < 3\ni += 1\nputs i\nend\n```",
    "options": [
      { "id": "option_1", "text": "Prints 1, 2, 3", "isCorrect": true },
      { "id": "option_2", "text": "Prints 0, 1, 2", "isCorrect": false },
      { "id": "option_3", "text": "Prints 0, 1, 2, 3", "isCorrect": false },
      { "id": "option_4", "text": "Infinite loop", "isCorrect": false }
    ],
    "hint": "The loop increments 'i' and prints its value.",
    "answerDescription": "The 'while' loop runs while i is less than 3, incrementing and printing i each time."
  },
  {
    "id": "ruby_428",
    "question": "Which keyword is used in Ruby to define an infinite loop?",
    "options": [
      { "id": "option_1", "text": "loop", "isCorrect": true },
      { "id": "option_2", "text": "forever", "isCorrect": false },
      { "id": "option_3", "text": "repeat", "isCorrect": false },
      { "id": "option_4", "text": "cycle", "isCorrect": false }
    ],
    "hint": "This keyword is used to create loops without explicit conditions.",
    "answerDescription": "The 'loop' construct in Ruby runs indefinitely unless explicitly stopped using 'break'."
  },
  {
    "id": "ruby_429",
    "question": "What will the following Ruby 'case' statement return?\n\n```ruby\nvalue = 2\ncase value\nwhen 1\n  'One'\nwhen 2\n  'Two'\nelse\n  'Other'\nend\n```",
    "options": [
      { "id": "option_1", "text": "'Two'", "isCorrect": true },
      { "id": "option_2", "text": "'One'", "isCorrect": false },
      { "id": "option_3", "text": "'Other'", "isCorrect": false },
      { "id": "option_4", "text": "nil", "isCorrect": false }
    ],
    "hint": "The case statement matches against 'when' conditions.",
    "answerDescription": "Since value is 2, the case statement matches 'when 2', returning 'Two'."
  },
  {
    "id": "ruby_430",
    "question": "What happens if a Ruby 'while' loop's condition is initially false?",
    "options": [
      { "id": "option_1", "text": "The loop does not execute", "isCorrect": true },
      { "id": "option_2", "text": "The loop executes once", "isCorrect": false },
      { "id": "option_3", "text": "The loop runs indefinitely", "isCorrect": false },
      { "id": "option_4", "text": "The loop throws an error", "isCorrect": false }
    ],
    "hint": "A 'while' loop only runs if its condition is true.",
    "answerDescription": "If the condition in a 'while' loop is initially false, the loop body does not execute at all."
  },  {
    "id": "ruby_431",
    "question": "Which Ruby keyword is used to define a condition that executes only if the specified condition is false?",
    "options": [
      { "id": "option_1", "text": "if", "isCorrect": false },
      { "id": "option_2", "text": "unless", "isCorrect": true },
      { "id": "option_3", "text": "else", "isCorrect": false },
      { "id": "option_4", "text": "elsif", "isCorrect": false }
    ],
    "hint": "It's the opposite of 'if'.",
    "answerDescription": "The 'unless' statement executes code only if the given condition evaluates to false."
  },
  {
    "id": "ruby_432",
    "question": "What will the following Ruby code output?\n```ruby\nx = 5\nputs 'Hello' if x > 3\n```",
    "options": [
      { "id": "option_1", "text": "No output", "isCorrect": false },
      { "id": "option_2", "text": "Hello", "isCorrect": true },
      { "id": "option_3", "text": "Error", "isCorrect": false },
      { "id": "option_4", "text": "nil", "isCorrect": false }
    ],
    "hint": "Ruby allows single-line conditional execution with 'if'.",
    "answerDescription": "Since x is greater than 3, 'Hello' is printed."
  },
  {
    "id": "ruby_433",
    "question": "Which loop in Ruby will always execute at least once?",
    "options": [
      { "id": "option_1", "text": "for", "isCorrect": false },
      { "id": "option_2", "text": "do-while", "isCorrect": true },
      { "id": "option_3", "text": "while", "isCorrect": false },
      { "id": "option_4", "text": "each", "isCorrect": false }
    ],
    "hint": "It checks the condition after execution.",
    "answerDescription": "The 'do-while' loop ensures that the block executes at least once before checking the condition."
  },
  {
    "id": "ruby_434",
    "question": "Which of the following is a valid way to iterate over an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "array.iterate", "isCorrect": false },
      { "id": "option_2", "text": "array.each", "isCorrect": true },
      { "id": "option_3", "text": "array.loop", "isCorrect": false },
      { "id": "option_4", "text": "array.traverse", "isCorrect": false }
    ],
    "hint": "It's a common iterator method in Ruby.",
    "answerDescription": "The '.each' method is used to iterate over elements in an array."
  },
  {
    "id": "ruby_435",
    "question": "How can you break out of a loop in Ruby?",
    "options": [
      { "id": "option_1", "text": "stop", "isCorrect": false },
      { "id": "option_2", "text": "break", "isCorrect": true },
      { "id": "option_3", "text": "halt", "isCorrect": false },
      { "id": "option_4", "text": "exit_loop", "isCorrect": false }
    ],
    "hint": "This keyword immediately stops loop execution.",
    "answerDescription": "The 'break' keyword exits the loop prematurely."
  },
  {
    "id": "ruby_436",
    "question": "What does the 'next' keyword do in a loop?",
    "options": [
      { "id": "option_1", "text": "Exits the loop", "isCorrect": false },
      { "id": "option_2", "text": "Skips to the next iteration", "isCorrect": true },
      { "id": "option_3", "text": "Pauses the loop", "isCorrect": false },
      { "id": "option_4", "text": "Restarts the loop", "isCorrect": false }
    ],
    "hint": "It avoids execution of remaining code in the current iteration.",
    "answerDescription": "The 'next' keyword skips the rest of the code in the current iteration and moves to the next one."
  },
  {
    "id": "ruby_437",
    "question": "Which Ruby keyword is used for a switch-case-like structure?",
    "options": [
      { "id": "option_1", "text": "switch", "isCorrect": false },
      { "id": "option_2", "text": "case", "isCorrect": true },
      { "id": "option_3", "text": "select", "isCorrect": false },
      { "id": "option_4", "text": "match", "isCorrect": false }
    ],
    "hint": "It works with 'when' statements.",
    "answerDescription": "Ruby uses the 'case' keyword to create a switch-case structure."
  },
  {
    "id": "ruby_438",
    "question": "What will the following code print?\n```ruby\nx = 2\ncase x\nwhen 1 then puts 'One'\nwhen 2 then puts 'Two'\nelse puts 'Other'\nend\n```",
    "options": [
      { "id": "option_1", "text": "One", "isCorrect": false },
      { "id": "option_2", "text": "Two", "isCorrect": true },
      { "id": "option_3", "text": "Other", "isCorrect": false },
      { "id": "option_4", "text": "nil", "isCorrect": false }
    ],
    "hint": "It matches the 'when' condition with 'x'.",
    "answerDescription": "Since x is 2, it matches the 'when 2' case and prints 'Two'."
  },
  {
    "id": "ruby_439",
    "question": "What does the 'redo' keyword do in a loop?",
    "options": [
      { "id": "option_1", "text": "Breaks the loop", "isCorrect": false },
      { "id": "option_2", "text": "Repeats the current iteration", "isCorrect": true },
      { "id": "option_3", "text": "Skips to the next iteration", "isCorrect": false },
      { "id": "option_4", "text": "Exits the loop completely", "isCorrect": false }
    ],
    "hint": "It restarts the current iteration without checking conditions.",
    "answerDescription": "The 'redo' keyword re-executes the current iteration without re-evaluating the condition."
  },
  {
    "id": "ruby_440",
    "question": "Which loop type is most useful for iterating a fixed number of times?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "for", "isCorrect": true },
      { "id": "option_3", "text": "until", "isCorrect": false },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "It's commonly used with ranges or arrays.",
    "answerDescription": "The 'for' loop is used when the number of iterations is known beforehand."
  },
  {
    "id": "ruby_441",
    "question": "What does the 'if' statement do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Executes code in all cases", "isCorrect": false },
      { "id": "option_2", "text": "Ignores all conditions", "isCorrect": false },
      { "id": "option_3", "text": "Executes code only when the condition is true", "isCorrect": true },
      { "id": "option_4", "text": "Repeats code indefinitely", "isCorrect": false }
    ],
    "hint": "An 'if' statement runs code when a condition evaluates to true.",
    "answerDescription": "The 'if' statement in Ruby is used to execute a block of code only when a specified condition evaluates to true."
  },
  {
    "id": "ruby_442",
    "question": "Which keyword is used to provide an alternative condition to an 'if' statement?",
    "options": [
      { "id": "option_1", "text": "case", "isCorrect": false },
      { "id": "option_2", "text": "loop", "isCorrect": false },
      { "id": "option_3", "text": "elsif", "isCorrect": true },
      { "id": "option_4", "text": "repeat", "isCorrect": false }
    ],
    "hint": "It allows checking another condition if the first condition is false.",
    "answerDescription": "The 'elsif' keyword in Ruby allows checking another condition within an 'if' statement if the initial condition is false."
  },
  {
    "id": "ruby_443",
    "question": "What does the 'case' statement do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Runs only if the condition is false", "isCorrect": false },
      { "id": "option_2", "text": "Loops until manually stopped", "isCorrect": false },
      { "id": "option_3", "text": "Matches a value against multiple conditions", "isCorrect": true },
      { "id": "option_4", "text": "Defines a constant value", "isCorrect": false }
    ],
    "hint": "This statement allows matching one value with multiple conditions.",
    "answerDescription": "The 'case' statement in Ruby is a control structure used to match a variable or expression against multiple conditions."
  },
  {
    "id": "ruby_444",
    "question": "How do you write an infinite loop using 'while'?",
    "options": [
      { "id": "option_1", "text": "while false do ... end", "isCorrect": false },
      { "id": "option_2", "text": "while x > 10 do ... end", "isCorrect": false },
      { "id": "option_3", "text": "while true do ... end", "isCorrect": true },
      { "id": "option_4", "text": "while nil do ... end", "isCorrect": false }
    ],
    "hint": "A 'while' loop runs as long as the condition is true.",
    "answerDescription": "Using 'while true do ... end' creates an infinite loop in Ruby because the condition always evaluates to true."
  },
  {
    "id": "ruby_445",
    "question": "Which loop will always execute at least once in Ruby?",
    "options": [
      { "id": "option_1", "text": "while loop", "isCorrect": false },
      { "id": "option_2", "text": "each loop", "isCorrect": false },
      { "id": "option_3", "text": "begin...while loop", "isCorrect": true },
      { "id": "option_4", "text": "for loop", "isCorrect": false }
    ],
    "hint": "This loop executes its body before checking the condition.",
    "answerDescription": "The 'begin...while' loop in Ruby ensures that the loop body executes at least once before evaluating the condition."
  },
  {
    "id": "ruby_446",
    "question": "How do you stop a loop from executing in Ruby?",
    "options": [
      { "id": "option_1", "text": "skip", "isCorrect": false },
      { "id": "option_2", "text": "halt", "isCorrect": false },
      { "id": "option_3", "text": "break", "isCorrect": true },
      { "id": "option_4", "text": "continue", "isCorrect": false }
    ],
    "hint": "This keyword is used to exit a loop immediately.",
    "answerDescription": "The 'break' keyword in Ruby is used to exit a loop prematurely, stopping further execution."
  },
  {
    "id": "ruby_447",
    "question": "Which loop is specifically used to iterate over elements of an array?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "loop", "isCorrect": false },
      { "id": "option_3", "text": "each", "isCorrect": true },
      { "id": "option_4", "text": "do...while", "isCorrect": false }
    ],
    "hint": "This loop is commonly used with arrays and hashes.",
    "answerDescription": "The 'each' loop in Ruby is used to iterate over elements of an array or a collection, executing the block for each element."
  },
  {
    "id": "ruby_448",
    "question": "What is the purpose of the 'next' keyword in loops?",
    "options": [
      { "id": "option_1", "text": "Stops the loop immediately", "isCorrect": false },
      { "id": "option_2", "text": "Repeats the loop indefinitely", "isCorrect": false },
      { "id": "option_3", "text": "Skips the current iteration and moves to the next", "isCorrect": true },
      { "id": "option_4", "text": "Restarts the loop from the beginning", "isCorrect": false }
    ],
    "hint": "This keyword allows skipping the rest of the current iteration.",
    "answerDescription": "The 'next' keyword in Ruby skips the current iteration of a loop and proceeds to the next one."
  },
  {
    "id": "ruby_449",
    "question": "How can you execute a block of code a specific number of times?",
    "options": [
      { "id": "option_1", "text": "for x in [1..10]", "isCorrect": false },
      { "id": "option_2", "text": "while x", "isCorrect": false },
      { "id": "option_3", "text": "10.times do ... end", "isCorrect": true },
      { "id": "option_4", "text": "repeat 10 times ... end", "isCorrect": false }
    ],
    "hint": "This method is commonly used for executing code a fixed number of times.",
    "answerDescription": "The 'times' method in Ruby allows executing a block of code a specific number of times."
  },
  {
    "id": "ruby_450",
    "question": "What does the 'redo' keyword do in a loop?",
    "options": [
      { "id": "option_1", "text": "Skips to the next iteration", "isCorrect": false },
      { "id": "option_2", "text": "Breaks the loop", "isCorrect": false },
      { "id": "option_3", "text": "Repeats the current iteration without re-evaluating the condition", "isCorrect": true },
      { "id": "option_4", "text": "Restarts the loop from the beginning", "isCorrect": false }
    ],
    "hint": "This keyword allows re-executing an iteration without condition check.",
    "answerDescription": "The 'redo' keyword in Ruby forces the current iteration of a loop to repeat without checking the condition again."
  },  {
    "id": "ruby_451",
    "question": "Which keyword is used to define a case statement in Ruby?",
    "options": [
      { "id": "option_1", "text": "switch", "isCorrect": false },
      { "id": "option_2", "text": "choose", "isCorrect": false },
      { "id": "option_3", "text": "select", "isCorrect": false },
      { "id": "option_4", "text": "case", "isCorrect": true }
    ],
    "hint": "It is similar to switch in other languages but has a different keyword.",
    "answerDescription": "Ruby uses the 'case' keyword to define a case statement, allowing multiple conditions to be handled cleanly."
  },
  {
    "id": "ruby_452",
    "question": "What is the correct syntax for an infinite loop in Ruby?",
    "options": [
      { "id": "option_1", "text": "for(;;)", "isCorrect": false },
      { "id": "option_2", "text": "while(true)", "isCorrect": false },
      { "id": "option_3", "text": "loop forever", "isCorrect": false },
      { "id": "option_4", "text": "loop do ... end", "isCorrect": true }
    ],
    "hint": "Ruby provides a built-in method for infinite loops that uses a block.",
    "answerDescription": "The 'loop do ... end' construct in Ruby creates an infinite loop unless explicitly stopped with a break statement."
  },
  {
    "id": "ruby_453",
    "question": "Which statement immediately exits a loop in Ruby?",
    "options": [
      { "id": "option_1", "text": "stop", "isCorrect": false },
      { "id": "option_2", "text": "exit", "isCorrect": false },
      { "id": "option_3", "text": "next", "isCorrect": false },
      { "id": "option_4", "text": "break", "isCorrect": true }
    ],
    "hint": "It is used to terminate loops prematurely.",
    "answerDescription": "The 'break' statement in Ruby is used to immediately exit a loop."
  },
  {
    "id": "ruby_454",
    "question": "Which loop executes at least once, regardless of the condition?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "for", "isCorrect": false },
      { "id": "option_3", "text": "until", "isCorrect": false },
      { "id": "option_4", "text": "begin...end while", "isCorrect": true }
    ],
    "hint": "It ensures execution of the loop body before checking the condition.",
    "answerDescription": "The 'begin...end while' loop in Ruby executes the block once before checking the loop condition."
  },
  {
    "id": "ruby_455",
    "question": "Which keyword is used to skip the rest of the current iteration in Ruby?",
    "options": [
      { "id": "option_1", "text": "skip", "isCorrect": false },
      { "id": "option_2", "text": "continue", "isCorrect": false },
      { "id": "option_3", "text": "break", "isCorrect": false },
      { "id": "option_4", "text": "next", "isCorrect": true }
    ],
    "hint": "It moves to the next iteration without executing the remaining code in the loop.",
    "answerDescription": "The 'next' statement in Ruby skips the rest of the current loop iteration and proceeds to the next cycle."
  },
  {
    "id": "ruby_456",
    "question": "What will the following code output? `5.times { |i| puts i if i.even? }`",
    "options": [
      { "id": "option_1", "text": "1 3 5", "isCorrect": false },
      { "id": "option_2", "text": "0 1 2 3 4", "isCorrect": false },
      { "id": "option_3", "text": "5", "isCorrect": false },
      { "id": "option_4", "text": "0 2 4", "isCorrect": true }
    ],
    "hint": "The block prints only even numbers in the range 0 to 4.",
    "answerDescription": "The 'times' method iterates from 0 to 4, and the 'if i.even?' condition filters even numbers."
  },
  {
    "id": "ruby_457",
    "question": "What does the `until` loop do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Runs while the condition is true", "isCorrect": false },
      { "id": "option_2", "text": "Executes at least once before checking the condition", "isCorrect": false },
      { "id": "option_3", "text": "Creates an infinite loop", "isCorrect": false },
      { "id": "option_4", "text": "Runs while the condition is false", "isCorrect": true }
    ],
    "hint": "It is the opposite of a 'while' loop.",
    "answerDescription": "The 'until' loop in Ruby executes as long as its condition evaluates to false."
  },
  {
    "id": "ruby_458",
    "question": "Which Ruby construct is best for iterating over an array?",
    "options": [
      { "id": "option_1", "text": "while", "isCorrect": false },
      { "id": "option_2", "text": "for", "isCorrect": false },
      { "id": "option_3", "text": "switch", "isCorrect": false },
      { "id": "option_4", "text": "each", "isCorrect": true }
    ],
    "hint": "It is a method available on arrays that yields elements to a block.",
    "answerDescription": "The 'each' method is the most idiomatic way to iterate over an array in Ruby."
  },
  {
    "id": "ruby_459",
    "question": "Which statement is used to handle multiple conditions in Ruby?",
    "options": [
      { "id": "option_1", "text": "if-else", "isCorrect": false },
      { "id": "option_2", "text": "ternary operator", "isCorrect": false },
      { "id": "option_3", "text": "switch", "isCorrect": false },
      { "id": "option_4", "text": "case", "isCorrect": true }
    ],
    "hint": "It is an alternative to multiple 'if' statements.",
    "answerDescription": "The 'case' statement in Ruby is used to handle multiple conditions in a cleaner way."
  },
  {
    "id": "ruby_460",
    "question": "How can you iterate over a range of numbers in Ruby?",
    "options": [
      { "id": "option_1", "text": "for x in (1,5)", "isCorrect": false },
      { "id": "option_2", "text": "range(1,5)", "isCorrect": false },
      { "id": "option_3", "text": "[1..5].each", "isCorrect": false },
      { "id": "option_4", "text": "(1..5).each", "isCorrect": true }
    ],
    "hint": "Ranges in Ruby use '..' notation and support iteration.",
    "answerDescription": "Using '(1..5).each' iterates over numbers 1 to 5 in Ruby."
  },  {
    "id": "ruby_461",
    "question": "Which keyword is used to terminate a loop prematurely in Ruby?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": true },
      { "id": "option_2", "text": "continue", "isCorrect": false },
      { "id": "option_3", "text": "exit", "isCorrect": false },
      { "id": "option_4", "text": "redo", "isCorrect": false }
    ],
    "hint": "This keyword stops the execution of a loop immediately.",
    "answerDescription": "The 'break' keyword is used in Ruby to exit a loop before its normal termination."
  },
  {
    "id": "ruby_462",
    "question": "What will be the output of the following code?\n\n```ruby\nx = 1\nwhile x < 3\ndo\n  puts x\n  x += 1\nend\n```",
    "options": [
      { "id": "option_1", "text": "1 2", "isCorrect": true },
      { "id": "option_2", "text": "1 2 3", "isCorrect": false },
      { "id": "option_3", "text": "Infinite loop", "isCorrect": false },
      { "id": "option_4", "text": "No output", "isCorrect": false }
    ],
    "hint": "The loop runs while x is less than 3.",
    "answerDescription": "The loop prints '1' and '2' before x reaches 3, causing the loop to exit."
  },
  {
    "id": "ruby_463",
    "question": "Which Ruby control structure allows branching based on multiple conditions?",
    "options": [
      { "id": "option_1", "text": "case", "isCorrect": true },
      { "id": "option_2", "text": "if-else", "isCorrect": false },
      { "id": "option_3", "text": "loop", "isCorrect": false },
      { "id": "option_4", "text": "while", "isCorrect": false }
    ],
    "hint": "This structure is similar to 'switch' in other languages.",
    "answerDescription": "The 'case' statement allows selecting among multiple conditions efficiently."
  },
  {
    "id": "ruby_464",
    "question": "What does the 'next' keyword do in a Ruby loop?",
    "options": [
      { "id": "option_1", "text": "Skips the rest of the iteration and moves to the next one", "isCorrect": true },
      { "id": "option_2", "text": "Terminates the loop", "isCorrect": false },
      { "id": "option_3", "text": "Repeats the same iteration", "isCorrect": false },
      { "id": "option_4", "text": "Restarts the loop", "isCorrect": false }
    ],
    "hint": "It allows skipping specific iterations without breaking the loop.",
    "answerDescription": "The 'next' keyword is used to skip the remaining code in the loop for the current iteration and move to the next one."
  },
  {
    "id": "ruby_465",
    "question": "What is the difference between 'while' and 'until' loops in Ruby?",
    "options": [
      { "id": "option_1", "text": "'while' executes when the condition is true, 'until' executes when the condition is false", "isCorrect": true },
      { "id": "option_2", "text": "'while' checks the condition after execution, 'until' checks before execution", "isCorrect": false },
      { "id": "option_3", "text": "They are the same", "isCorrect": false },
      { "id": "option_4", "text": "'until' loops infinitely, 'while' does not", "isCorrect": false }
    ],
    "hint": "Think about the conditions under which they execute.",
    "answerDescription": "The 'while' loop runs while the condition is true, whereas the 'until' loop runs until the condition becomes true."
  },
  {
    "id": "ruby_466",
    "question": "Which loop executes at least once regardless of the condition?",
    "options": [
      { "id": "option_1", "text": "do-while", "isCorrect": true },
      { "id": "option_2", "text": "while", "isCorrect": false },
      { "id": "option_3", "text": "for", "isCorrect": false },
      { "id": "option_4", "text": "until", "isCorrect": false }
    ],
    "hint": "This type of loop first executes the block before checking the condition.",
    "answerDescription": "The 'do-while' loop executes the block of code at least once before evaluating the loop condition."
  },
  {
    "id": "ruby_467",
    "question": "Which of the following is an infinite loop?",
    "options": [
      { "id": "option_1", "text": "while true do puts 'Hello' end", "isCorrect": true },
      { "id": "option_2", "text": "for i in 1..5 do puts i end", "isCorrect": false },
      { "id": "option_3", "text": "loop { break }", "isCorrect": false },
      { "id": "option_4", "text": "until false do break end", "isCorrect": false }
    ],
    "hint": "This loop does not have a stopping condition.",
    "answerDescription": "The 'while true' loop runs indefinitely unless interrupted with 'break'."
  },
  {
    "id": "ruby_468",
    "question": "What will the following code output?\n\n```ruby\nx = 3\ncase x\nwhen 1\n  puts 'One'\nwhen 2\n  puts 'Two'\nelse\n  puts 'Other'\nend\n```",
    "options": [
      { "id": "option_1", "text": "Other", "isCorrect": true },
      { "id": "option_2", "text": "One", "isCorrect": false },
      { "id": "option_3", "text": "Two", "isCorrect": false },
      { "id": "option_4", "text": "No output", "isCorrect": false }
    ],
    "hint": "Check which 'when' condition matches the value of x.",
    "answerDescription": "Since x is 3 and does not match 1 or 2, the 'else' case executes."
  },
  {
    "id": "ruby_469",
    "question": "What will 'redo' do in a loop?",
    "options": [
      { "id": "option_1", "text": "Repeats the current iteration without checking the condition", "isCorrect": true },
      { "id": "option_2", "text": "Restarts the loop", "isCorrect": false },
      { "id": "option_3", "text": "Ends the loop", "isCorrect": false },
      { "id": "option_4", "text": "Skips to the next iteration", "isCorrect": false }
    ],
    "hint": "It does not check the loop condition again.",
    "answerDescription": "The 'redo' statement restarts the current iteration without reevaluating the loop condition."
  },
  {
    "id": "ruby_470",
    "question": "Which loop structure is used for iterating over a range?",
    "options": [
      { "id": "option_1", "text": "for", "isCorrect": true },
      { "id": "option_2", "text": "while", "isCorrect": false },
      { "id": "option_3", "text": "case", "isCorrect": false },
      { "id": "option_4", "text": "if", "isCorrect": false }
    ],
    "hint": "It is commonly used with a range (e.g., 1..10).",
    "answerDescription": "The 'for' loop iterates over a range or collection."
  },  {
    "id": "ruby_471",
    "question": "Which loop is used when the number of iterations is unknown?",
    "options": [
      { "id": "option_1", "text": "for loop", "isCorrect": false },
      { "id": "option_2", "text": "while loop", "isCorrect": true },
      { "id": "option_3", "text": "times loop", "isCorrect": false },
      { "id": "option_4", "text": "loop do", "isCorrect": false }
    ],
    "hint": "This loop continues until a condition is false.",
    "answerDescription": "The while loop runs as long as its condition remains true, making it useful when the number of iterations is not predetermined."
  },
  {
    "id": "ruby_472",
    "question": "What is the purpose of the 'break' statement in loops?",
    "options": [
      { "id": "option_1", "text": "To restart the loop", "isCorrect": false },
      { "id": "option_2", "text": "To exit the loop immediately", "isCorrect": true },
      { "id": "option_3", "text": "To skip the next iteration", "isCorrect": false },
      { "id": "option_4", "text": "To continue to the next iteration", "isCorrect": false }
    ],
    "hint": "This statement stops loop execution.",
    "answerDescription": "The 'break' statement terminates a loop immediately, regardless of the loop's condition."
  },
  {
    "id": "ruby_473",
    "question": "Which Ruby keyword is used to execute different code branches based on conditions?",
    "options": [
      { "id": "option_1", "text": "when", "isCorrect": false },
      { "id": "option_2", "text": "case", "isCorrect": true },
      { "id": "option_3", "text": "else", "isCorrect": false },
      { "id": "option_4", "text": "elsif", "isCorrect": false }
    ],
    "hint": "This keyword is commonly used for multi-way branching.",
    "answerDescription": "The 'case' statement allows for multiple conditional checks, simplifying complex 'if' statements."
  },
  {
    "id": "ruby_474",
    "question": "Which loop guarantees execution of its block at least once?",
    "options": [
      { "id": "option_1", "text": "while loop", "isCorrect": false },
      { "id": "option_2", "text": "loop do", "isCorrect": true },
      { "id": "option_3", "text": "until loop", "isCorrect": false },
      { "id": "option_4", "text": "for loop", "isCorrect": false }
    ],
    "hint": "This loop runs indefinitely unless explicitly stopped.",
    "answerDescription": "The 'loop do' construct ensures at least one execution of its block, as it runs indefinitely unless stopped by 'break'."
  },
  {
    "id": "ruby_475",
    "question": "Which keyword is used to skip the current iteration in a loop?",
    "options": [
      { "id": "option_1", "text": "redo", "isCorrect": false },
      { "id": "option_2", "text": "next", "isCorrect": true },
      { "id": "option_3", "text": "retry", "isCorrect": false },
      { "id": "option_4", "text": "continue", "isCorrect": false }
    ],
    "hint": "It skips the remaining code in the loop's iteration and moves to the next cycle.",
    "answerDescription": "The 'next' keyword is used to skip the current iteration of a loop and proceed to the next one."
  },
  {
    "id": "ruby_476",
    "question": "Which loop executes as long as the condition is false?",
    "options": [
      { "id": "option_1", "text": "while loop", "isCorrect": false },
      { "id": "option_2", "text": "until loop", "isCorrect": true },
      { "id": "option_3", "text": "for loop", "isCorrect": false },
      { "id": "option_4", "text": "loop do", "isCorrect": false }
    ],
    "hint": "This loop is the opposite of 'while'.",
    "answerDescription": "The 'until' loop continues executing until the given condition becomes true."
  },
  {
    "id": "ruby_477",
    "question": "What is the role of the 'else' clause in a Ruby loop?",
    "options": [
      { "id": "option_1", "text": "Executes if the loop runs successfully", "isCorrect": false },
      { "id": "option_2", "text": "Executes if the loop completes without a 'break'", "isCorrect": true },
      { "id": "option_3", "text": "Executes before the loop starts", "isCorrect": false },
      { "id": "option_4", "text": "Executes only if the loop contains an 'if' statement", "isCorrect": false }
    ],
    "hint": "This clause runs only if the loop exits normally.",
    "answerDescription": "In Ruby, an 'else' clause in a loop executes only if the loop completes without being interrupted by 'break'."
  },
  {
    "id": "ruby_478",
    "question": "What is the correct way to iterate over a range in Ruby?",
    "options": [
      { "id": "option_1", "text": "range.repeat { |i| puts i }", "isCorrect": false },
      { "id": "option_2", "text": "(1..5).each { |i| puts i }", "isCorrect": true },
      { "id": "option_3", "text": "range.traverse { |i| puts i }", "isCorrect": false },
      { "id": "option_4", "text": "(1 to 5).loop { |i| puts i }", "isCorrect": false }
    ],
    "hint": "Use '.each' for iteration over a range.",
    "answerDescription": "The correct way to iterate over a range in Ruby is by using '.each', as in '(1..5).each { |i| puts i }'."
  },
  {
    "id": "ruby_479",
    "question": "What will 'case' return if no 'when' condition matches?",
    "options": [
      { "id": "option_1", "text": "It throws an error", "isCorrect": false },
      { "id": "option_2", "text": "It returns nil", "isCorrect": true },
      { "id": "option_3", "text": "It executes the last statement", "isCorrect": false },
      { "id": "option_4", "text": "It executes all cases", "isCorrect": false }
    ],
    "hint": "If no match is found, the return value is empty.",
    "answerDescription": "In Ruby, if a 'case' statement does not match any 'when' condition and lacks an 'else' clause, it returns 'nil'."
  },
  {
    "id": "ruby_480",
    "question": "How does 'for' differ from '.each' in Ruby?",
    "options": [
      { "id": "option_1", "text": "for is faster than .each", "isCorrect": false },
      { "id": "option_2", "text": ".each provides better variable scoping", "isCorrect": true },
      { "id": "option_3", "text": "for modifies the original array", "isCorrect": false },
      { "id": "option_4", "text": ".each does not allow iteration over ranges", "isCorrect": false }
    ],
    "hint": ".each creates its own scope for block variables.",
    "answerDescription": "The '.each' method ensures that variables inside the block are scoped locally, unlike 'for', which leaks variables outside its loop."
  },
  {
    "id": "ruby_481",
    "question": "What is the purpose of the `break` statement in a loop?",
    "options": [
      { "id": "option_1", "text": "It skips the current iteration and moves to the next one", "isCorrect": false },
      { "id": "option_2", "text": "It restarts the loop from the beginning", "isCorrect": false },
      { "id": "option_3", "text": "It exits the loop immediately", "isCorrect": true },
      { "id": "option_4", "text": "It skips to the last iteration of the loop", "isCorrect": false }
    ],
    "hint": "The `break` statement is used to exit a loop before its natural completion.",
    "answerDescription": "Using `break` in Ruby will immediately terminate the loop execution."
  },
  {
    "id": "ruby_482",
    "question": "How does the `next` keyword affect loop execution in Ruby?",
    "options": [
      { "id": "option_1", "text": "It terminates the loop completely", "isCorrect": false },
      { "id": "option_2", "text": "It restarts the loop from the beginning", "isCorrect": false },
      { "id": "option_3", "text": "It skips the rest of the current iteration and proceeds to the next one", "isCorrect": true },
      { "id": "option_4", "text": "It repeats the current iteration without progressing", "isCorrect": false }
    ],
    "hint": "`next` is used to skip the remaining statements in the current iteration.",
    "answerDescription": "The `next` statement moves the loop to the next iteration, skipping any code below it in the current iteration."
  },
  {
    "id": "ruby_483",
    "question": "What will be the output of the following Ruby code?\n```ruby\n i = 1\n while i < 3\n   puts i\n   i += 1\n end\n```",
    "options": [
      { "id": "option_1", "text": "1 1 1", "isCorrect": false },
      { "id": "option_2", "text": "1 2 3", "isCorrect": false },
      { "id": "option_3", "text": "1 2", "isCorrect": true },
      { "id": "option_4", "text": "2 3", "isCorrect": false }
    ],
    "hint": "The `while` loop runs while the condition is true.",
    "answerDescription": "The loop prints `1` and `2` before `i` becomes 3 and exits the loop."
  },
  {
    "id": "ruby_484",
    "question": "What is the purpose of the `redo` statement in Ruby loops?",
    "options": [
      { "id": "option_1", "text": "It stops the loop completely", "isCorrect": false },
      { "id": "option_2", "text": "It skips to the next iteration", "isCorrect": false },
      { "id": "option_3", "text": "It repeats the current iteration without evaluating the loop condition again", "isCorrect": true },
      { "id": "option_4", "text": "It reverses the loop order", "isCorrect": false }
    ],
    "hint": "`redo` restarts the loop iteration without re-evaluating the condition.",
    "answerDescription": "Using `redo` inside a loop causes the current iteration to restart from the beginning."
  },
  {
    "id": "ruby_485",
    "question": "What will be the output of the following Ruby case statement?\n```ruby\ngrade = \"B\"\ncase grade\nwhen \"A\"\n  puts \"Excellent\"\nwhen \"B\"\n  puts \"Good\"\nwhen \"C\"\n  puts \"Average\"\nelse\n  puts \"Fail\"\nend\n```",
    "options": [
      { "id": "option_1", "text": "\"Excellent\"", "isCorrect": false },
      { "id": "option_2", "text": "\"Fail\"", "isCorrect": false },
      { "id": "option_3", "text": "\"Good\"", "isCorrect": true },
      { "id": "option_4", "text": "\"Average\"", "isCorrect": false }
    ],
    "hint": "The case statement matches the value of `grade` to the specified cases.",
    "answerDescription": "Since `grade` is `B`, it matches the `when \"B\"` case and outputs `Good`."
  },
  {
    "id": "ruby_486",
    "question": "How do you create an infinite loop in Ruby using a `while` loop?",
    "options": [
      { "id": "option_1", "text": "while false do puts \"Hello\" end", "isCorrect": false },
      { "id": "option_2", "text": "while i < 10 puts \"Hello\" end", "isCorrect": false },
      { "id": "option_3", "text": "while true do puts \"Hello\" end", "isCorrect": true },
      { "id": "option_4", "text": "while i == 0 do puts \"Hello\" end", "isCorrect": false }
    ],
    "hint": "An infinite loop runs indefinitely until explicitly stopped.",
    "answerDescription": "`while true` ensures that the loop condition never becomes false, causing it to run forever."
  },
  {
    "id": "ruby_487",
    "question": "What happens when you use `until` in Ruby?",
    "options": [
      { "id": "option_1", "text": "The loop runs while the condition is true", "isCorrect": false },
      { "id": "option_2", "text": "It behaves exactly like a while loop", "isCorrect": false },
      { "id": "option_3", "text": "The loop runs until the condition becomes true", "isCorrect": true },
      { "id": "option_4", "text": "It only works inside case statements", "isCorrect": false }
    ],
    "hint": "`until` loops execute as long as the condition is false.",
    "answerDescription": "The `until` loop continues executing until its condition evaluates to true."
  },
  {
    "id": "ruby_488",
    "question": "What is the output of the following Ruby code?\n```ruby\nfor i in 1..3\n  puts i\nend\n```",
    "options": [
      { "id": "option_1", "text": "1 1 1", "isCorrect": false },
      { "id": "option_2", "text": "1 2 3 4", "isCorrect": false },
      { "id": "option_3", "text": "1 2 3", "isCorrect": true },
      { "id": "option_4", "text": "2 3 4", "isCorrect": false }
    ],
    "hint": "A `for` loop iterates over a range of values.",
    "answerDescription": "The loop prints `1`, `2`, and `3` since the range is `1..3`."
  },
  {
    "id": "ruby_489",
    "question": "How can you iterate over an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using a switch statement", "isCorrect": false },
      { "id": "option_2", "text": "Using a for loop only", "isCorrect": false },
      { "id": "option_3", "text": "Using loops like for, while, or each", "isCorrect": true },
      { "id": "option_4", "text": "Only with the times method", "isCorrect": false }
    ],
    "hint": "Ruby provides multiple ways to iterate over arrays.",
    "answerDescription": "You can use `for`, `while`, or `.each` to iterate over an array."
  },
  { 
    "id": "ruby_490",
    "question": "Which statement is used to provide multiple possible matching conditions in Ruby?",
    "options": [
      { "id": "option_1", "text": "if-else", "isCorrect": false },
      { "id": "option_2", "text": "while", "isCorrect": false },
      { "id": "option_3", "text": "unless", "isCorrect": false },
      { "id": "option_4", "text": "case", "isCorrect": true }
    ],
    "hint": "It's a switch-like statement in Ruby.",
    "answerDescription": "The 'case' statement allows checking multiple conditions concisely compared to multiple 'if-elsif' statements."
  },
  { 
    "id": "ruby_491",
    "question": "Which loop is best suited for iterating a fixed number of times in Ruby?",
    "options": [
      { "id": "option_1", "text": "while loop", "isCorrect": false },
      { "id": "option_2", "text": "until loop", "isCorrect": false },
      { "id": "option_3", "text": "loop do", "isCorrect": false },
      { "id": "option_4", "text": "for loop", "isCorrect": true }
    ],
    "hint": "Think of a loop that works well with a predefined range.",
    "answerDescription": "The 'for' loop in Ruby is best suited for iterating a fixed number of times, especially when using ranges or collections."
  },
  { 
    "id": "ruby_492",
    "question": "What is the primary advantage of using 'case' over multiple 'if-elsif' statements?",
    "options": [
      { "id": "option_1", "text": "It allows multiple conditions to be checked simultaneously", "isCorrect": false },
      { "id": "option_2", "text": "It runs faster than if-elsif", "isCorrect": false },
      { "id": "option_3", "text": "It works only with numbers", "isCorrect": false },
      { "id": "option_4", "text": "It improves readability and maintainability", "isCorrect": true }
    ],
    "hint": "'case' structures make the code cleaner.",
    "answerDescription": "Using 'case' over multiple 'if-elsif' statements enhances readability, making it easier to manage conditional logic."
  },
  { 
    "id": "ruby_493",
    "question": "What does 'next' do in a Ruby loop?",
    "options": [
      { "id": "option_1", "text": "Terminates the loop", "isCorrect": false },
      { "id": "option_2", "text": "Repeats the current iteration", "isCorrect": false },
      { "id": "option_3", "text": "Skips the loop entirely", "isCorrect": false },
      { "id": "option_4", "text": "Skips the current iteration and moves to the next", "isCorrect": true }
    ],
    "hint": "'next' helps to skip specific iterations.",
    "answerDescription": "The 'next' keyword in Ruby skips the current iteration of a loop and proceeds to the next one."
  },
  { 
    "id": "ruby_494",
    "question": "Which statement is used to exit a loop prematurely in Ruby?",
    "options": [
      { "id": "option_1", "text": "skip", "isCorrect": false },
      { "id": "option_2", "text": "exit", "isCorrect": false },
      { "id": "option_3", "text": "redo", "isCorrect": false },
      { "id": "option_4", "text": "break", "isCorrect": true }
    ],
    "hint": "This keyword immediately stops loop execution.",
    "answerDescription": "The 'break' statement is used in Ruby to exit a loop before its natural termination."
  },
  { 
    "id": "ruby_495",
    "question": "How does 'until' work differently from 'while' in Ruby?",
    "options": [
      { "id": "option_1", "text": "It runs the loop an unlimited number of times", "isCorrect": false },
      { "id": "option_2", "text": "It only works with numbers", "isCorrect": false },
      { "id": "option_3", "text": "It runs at least once always", "isCorrect": false },
      { "id": "option_4", "text": "It executes the loop until the condition becomes true", "isCorrect": true }
    ],
    "hint": "'until' is the opposite of 'while'.",
    "answerDescription": "The 'until' loop in Ruby runs until its condition becomes true, making it opposite to the 'while' loop."
  },
  { 
    "id": "ruby_496",
    "question": "Which keyword allows you to retry a loop from the beginning in Ruby?",
    "options": [
      { "id": "option_1", "text": "next", "isCorrect": false },
      { "id": "option_2", "text": "break", "isCorrect": false },
      { "id": "option_3", "text": "exit", "isCorrect": false },
      { "id": "option_4", "text": "redo", "isCorrect": true }
    ],
    "hint": "This keyword forces the iteration to restart.",
    "answerDescription": "The 'redo' keyword in Ruby restarts the current iteration of a loop without evaluating the loop condition again."
  },
  { 
    "id": "ruby_497",
    "question": "Which loop structure in Ruby is considered an infinite loop unless manually terminated?",
    "options": [
      { "id": "option_1", "text": "for loop", "isCorrect": false },
      { "id": "option_2", "text": "until loop", "isCorrect": false },
      { "id": "option_3", "text": "while loop", "isCorrect": false },
      { "id": "option_4", "text": "loop do", "isCorrect": true }
    ],
    "hint": "'loop do' requires explicit termination.",
    "answerDescription": "The 'loop do' structure in Ruby runs indefinitely unless a 'break' statement is encountered."
  },
  { 
    "id": "ruby_498",
    "question": "What happens when you use 'return' inside a loop?",
    "options": [
      { "id": "option_1", "text": "Skips to the next iteration", "isCorrect": false },
      { "id": "option_2", "text": "Restarts the loop", "isCorrect": false },
      { "id": "option_3", "text": "Pauses the loop temporarily", "isCorrect": false },
      { "id": "option_4", "text": "Exits the method or function entirely", "isCorrect": true }
    ],
    "hint": "'return' is used in methods, but affects loops too.",
    "answerDescription": "Using 'return' inside a loop exits not only the loop but also the entire method in which the loop is running."
  },
  { 
    "id": "ruby_499",
    "question": "How do you iterate through an array efficiently in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using a 'for' loop", "isCorrect": false },
      { "id": "option_2", "text": "Using a 'while' loop", "isCorrect": false },
      { "id": "option_3", "text": "Using a 'case' statement", "isCorrect": false },
      { "id": "option_4", "text": "Using '.each' method", "isCorrect": true }
    ],
    "hint": "Ruby has a built-in method for collection iteration.",
    "answerDescription": "The '.each' method in Ruby is the preferred way to iterate through an array, as it provides better readability and avoids variable leakage."
  },
  {
    "id": "ruby_500",
    "question": "Which loop is best suited for executing a block a specific number of times?",
    "options": [
      { "id": "option_1", "text": "'while' loop", "isCorrect": false },
      { "id": "option_2", "text": "'until' loop", "isCorrect": false },
      { "id": "option_3", "text": "'loop do'", "isCorrect": false },
      { "id": "option_4", "text": "'.times' loop", "isCorrect": true }
    ],
    "hint": "It executes a fixed number of times based on a given value.",
    "answerDescription": "The '.times' method is ideal for repeating a block of code a specific number of times."
  },
  {
    "id": "ruby_501",
    "question": "What is the purpose of the 'break' statement in Ruby loops?",
    "options": [
      { "id": "option_1", "text": "It restarts the loop from the beginning", "isCorrect": false },
      { "id": "option_2", "text": "It skips the current iteration and moves to the next", "isCorrect": false },
      { "id": "option_3", "text": "It pauses the loop temporarily", "isCorrect": false },
      { "id": "option_4", "text": "It exits the loop immediately", "isCorrect": true }
    ],
    "hint": "It is used to stop the loop execution immediately.",
    "answerDescription": "The 'break' statement in Ruby is used to terminate a loop prematurely when a certain condition is met."
  },
  {
    "id": "ruby_502",
    "question": "Which loop in Ruby ensures that the block executes at least once?",
    "options": [
      { "id": "option_1", "text": "while loop", "isCorrect": false },
      { "id": "option_2", "text": "for loop", "isCorrect": false },
      { "id": "option_3", "text": "each loop", "isCorrect": false },
      { "id": "option_4", "text": "until loop with 'do' syntax", "isCorrect": true }
    ],
    "hint": "This loop executes at least once before checking the condition.",
    "answerDescription": "An 'until' loop with 'do' ensures execution at least once because the condition is checked after the first iteration."
  },
  {
    "id": "ruby_503",
    "question": "What does the 'next' keyword do inside a loop?",
    "options": [
      { "id": "option_1", "text": "Stops the loop execution completely", "isCorrect": false },
      { "id": "option_2", "text": "Repeats the current iteration", "isCorrect": false },
      { "id": "option_3", "text": "Exits the loop and moves to the next statement", "isCorrect": false },
      { "id": "option_4", "text": "Skips the current iteration and moves to the next", "isCorrect": true }
    ],
    "hint": "It allows the loop to skip an iteration when a condition is met.",
    "answerDescription": "The 'next' keyword in Ruby skips the current iteration of a loop and proceeds with the next one."
  },
  {
    "id": "ruby_504",
    "question": "Which keyword is used to restart an iteration in a Ruby loop?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "skip", "isCorrect": false },
      { "id": "option_3", "text": "redo", "isCorrect": false },
      { "id": "option_4", "text": "retry", "isCorrect": true }
    ],
    "hint": "It allows restarting the same iteration without moving forward.",
    "answerDescription": "The 'retry' keyword is used to restart a loop iteration from the beginning."
  },
  {
    "id": "ruby_505",
    "question": "How does a 'case' statement in Ruby compare values?",
    "options": [
      { "id": "option_1", "text": "Using the '==' operator", "isCorrect": false },
      { "id": "option_2", "text": "Using the '===' operator", "isCorrect": false },
      { "id": "option_3", "text": "Using the 'equal?' method", "isCorrect": false },
      { "id": "option_4", "text": "Using the '===' operator, which allows range and class comparisons", "isCorrect": true }
    ],
    "hint": "It can match ranges and classes in addition to values.",
    "answerDescription": "Ruby's 'case' statement uses the '===' operator, making it flexible for comparing ranges, classes, and other patterns."
  },
  {
    "id": "ruby_506",
    "question": "Which loop is best for iterating over an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "'while' loop", "isCorrect": false },
      { "id": "option_2", "text": "'until' loop", "isCorrect": false },
      { "id": "option_3", "text": "'for' loop", "isCorrect": false },
      { "id": "option_4", "text": "'.each' loop", "isCorrect": true }
    ],
    "hint": "It is a built-in method for iterating over collections.",
    "answerDescription": "The '.each' loop is the preferred way to iterate over arrays in Ruby since it provides better readability and scoping."
  },
  {
    "id": "ruby_507",
    "question": "What happens if a 'case' statement does not match any 'when' condition?",
    "options": [
      { "id": "option_1", "text": "An error is raised", "isCorrect": false },
      { "id": "option_2", "text": "The program stops execution", "isCorrect": false },
      { "id": "option_3", "text": "The last executed 'when' block runs again", "isCorrect": false },
      { "id": "option_4", "text": "Nothing happens unless an 'else' block is provided", "isCorrect": true }
    ],
    "hint": "Ruby will not execute anything unless an alternative is specified.",
    "answerDescription": "If a 'case' statement does not match any 'when' condition and lacks an 'else' block, it simply does nothing."
  },
  {
    "id": "ruby_508",
    "question": "Which loop type does not require an explicit condition in Ruby?",
    "options": [
      { "id": "option_1", "text": "'while' loop", "isCorrect": false },
      { "id": "option_2", "text": "'for' loop", "isCorrect": false },
      { "id": "option_3", "text": "'until' loop", "isCorrect": false },
      { "id": "option_4", "text": "'.times' loop", "isCorrect": true }
    ],
    "hint": "It repeats execution for a fixed number of times.",
    "answerDescription": "The '.times' loop runs a specified number of times without needing an explicit condition."
  },
  {
    "id": "ruby_509",
    "question": "How can you iterate through a hash in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using 'for' loop", "isCorrect": false },
      { "id": "option_2", "text": "Using 'while' loop", "isCorrect": false },
      { "id": "option_3", "text": "Using '.map'", "isCorrect": false },
      { "id": "option_4", "text": "Using '.each' with key-value pairs", "isCorrect": true }
    ],
    "hint": "The best method to loop over both keys and values in a hash.",
    "answerDescription": "Using '.each' with a block allows iterating over both keys and values in a Ruby hash."
  },
  { 
    "id": "ruby_510",
    "question": "What is the result of using 'loop' in Ruby?",
    "options": [
      { "id": "option_1", "text": "Executes once and stops", "isCorrect": false },
      { "id": "option_2", "text": "Runs a fixed number of times", "isCorrect": false },
      { "id": "option_3", "text": "Requires a condition to terminate", "isCorrect": false },
      { "id": "option_4", "text": "Runs indefinitely unless explicitly stopped", "isCorrect": true }
    ],
    "hint": "It's an infinite loop unless interrupted.",
    "answerDescription": "The 'loop' keyword in Ruby creates an infinite loop that must be exited manually using 'break'."
  },
  { 
    "id": "ruby_511",
    "question": "How does the 'while' loop function in Ruby?",
    "options": [
      { "id": "option_1", "text": "Runs at least once before checking the condition", "isCorrect": false },
      { "id": "option_2", "text": "Runs until the condition becomes false", "isCorrect": false },
      { "id": "option_3", "text": "Executes without evaluating any condition", "isCorrect": false },
      { "id": "option_4", "text": "Runs while the condition is true", "isCorrect": true }
    ],
    "hint": "It keeps running as long as the condition remains true.",
    "answerDescription": "A 'while' loop in Ruby executes as long as the condition evaluates to true."
  },
 {
    "id": "ruby_512",
    "question": "What does the 'next' statement do in a Ruby loop?",
    "options": [
      { "id": "option_1", "text": "Stops the loop execution entirely", "isCorrect": false },
      { "id": "option_2", "text": "Repeats the current iteration", "isCorrect": false },
      { "id": "option_3", "text": "Skips the entire loop block", "isCorrect": false },
      { "id": "option_4", "text": "Skips to the next iteration of the loop", "isCorrect": true }
    ],
    "hint": "It allows skipping an iteration while keeping the loop running.",
    "answerDescription": "The 'next' statement in Ruby skips the rest of the current iteration and moves to the next one."
  },
  { 
    "id": "ruby_513",
    "question": "Which loop in Ruby executes at least once before checking the condition?",
    "options": [
      { "id": "option_1", "text": "for loop", "isCorrect": false },
      { "id": "option_2", "text": "while loop", "isCorrect": false },
      { "id": "option_3", "text": "each loop", "isCorrect": false },
      { "id": "option_4", "text": "do-while loop", "isCorrect": true }
    ],
    "hint": "This loop checks the condition after executing the block once.",
    "answerDescription": "The 'do-while' loop executes its block of code at least once before evaluating the condition."
  },
  { 
    "id": "ruby_514",
    "question": "How does the 'redo' statement work in a loop?",
    "options": [
      { "id": "option_1", "text": "Exits the loop immediately", "isCorrect": false },
      { "id": "option_2", "text": "Skips the rest of the loop iteration", "isCorrect": false },
      { "id": "option_3", "text": "Repeats the entire loop from the start", "isCorrect": false },
      { "id": "option_4", "text": "Repeats the current iteration without re-evaluating the condition", "isCorrect": true }
    ],
    "hint": "This statement allows repeating the current iteration.",
    "answerDescription": "The 'redo' statement restarts the current iteration without checking the loop condition again."
  },
  { 
    "id": "ruby_515",
    "question": "What does the 'until' loop do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Executes as long as the condition is true", "isCorrect": false },
      { "id": "option_2", "text": "Runs only once before checking the condition", "isCorrect": false },
      { "id": "option_3", "text": "Checks the condition after execution", "isCorrect": false },
      { "id": "option_4", "text": "Executes until the condition becomes true", "isCorrect": true }
    ],
    "hint": "It's the opposite of a while loop.",
    "answerDescription": "An 'until' loop in Ruby runs until its condition evaluates to true."
  }, 
  { 
    "id": "ruby_516",
    "question": "What happens when none of the 'when' conditions match in a case statement?",
    "options": [
      { "id": "option_1", "text": "The case statement throws an error", "isCorrect": false },
      { "id": "option_2", "text": "The last condition is executed", "isCorrect": false },
      { "id": "option_3", "text": "The first condition is executed", "isCorrect": false },
      { "id": "option_4", "text": "The 'else' clause is executed if present", "isCorrect": true }
    ],
    "hint": "There's a default clause similar to 'default' in switch statements.",
    "answerDescription": "If none of the 'when' conditions in a case statement match, the 'else' clause (if present) is executed."
  },
  { 
    "id": "ruby_517",
    "question": "What keyword is used to define a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "function", "isCorrect": false },
      { "id": "option_2", "text": "procedure", "isCorrect": false },
      { "id": "option_3", "text": "lambda", "isCorrect": false },
      { "id": "option_4", "text": "def", "isCorrect": true }
    ],
    "hint": "Ruby uses a simple keyword to define methods.",
    "answerDescription": "The 'def' keyword is used to define methods in Ruby, followed by the method name."
  },
  { 
    "id": "ruby_518",
    "question": "How do you return a value explicitly from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "use 'output'", "isCorrect": false },
      { "id": "option_2", "text": "use 'send'", "isCorrect": false },
      { "id": "option_3", "text": "use 'return_value'", "isCorrect": false },
      { "id": "option_4", "text": "use 'return'", "isCorrect": true }
    ],
    "hint": "A keyword is used to send back a result from a method.",
    "answerDescription": "The 'return' keyword explicitly returns a value from a method, though Ruby implicitly returns the last evaluated expression."
  },
  { 
    "id": "ruby_519",
    "question": "What will 'puts my_method' output if my_method has no explicit return value?",
    "options": [
      { "id": "option_1", "text": "Error", "isCorrect": false },
      { "id": "option_2", "text": "undefined", "isCorrect": false },
      { "id": "option_3", "text": "0", "isCorrect": false },
      { "id": "option_4", "text": "nil", "isCorrect": true }
    ],
    "hint": "Methods return a default value if nothing is explicitly returned.",
    "answerDescription": "If a method does not return a value explicitly, it returns 'nil' by default in Ruby."
  },
  { 
    "id": "ruby_520",
    "question": "What is the purpose of the 'yield' keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "To define a new method", "isCorrect": false },
      { "id": "option_2", "text": "To return a value", "isCorrect": false },
      { "id": "option_3", "text": "To create a class", "isCorrect": false },
      { "id": "option_4", "text": "To execute a block of code", "isCorrect": true }
    ],
    "hint": "'yield' allows passing execution to a block.",
    "answerDescription": "The 'yield' keyword allows a method to call a block of code passed to it."
  },
  { 
    "id": "ruby_521",
    "question": "What does the '&' symbol before a parameter in a method definition do?",
    "options": [
      { "id": "option_1", "text": "Creates an array", "isCorrect": false },
      { "id": "option_2", "text": "Specifies an integer", "isCorrect": false },
      { "id": "option_3", "text": "Defines a global variable", "isCorrect": false },
      { "id": "option_4", "text": "Captures a block as a Proc", "isCorrect": true }
    ],
    "hint": "It helps in handling blocks inside methods.",
    "answerDescription": "The '&' symbol converts a block into a Proc object, allowing it to be stored and executed later."
  },
  { 
    "id": "ruby_522",
    "question": "How do you define a method that accepts a variable number of arguments?",
    "options": [
      { "id": "option_1", "text": "Use parentheses", "isCorrect": false },
      { "id": "option_2", "text": "Use an array", "isCorrect": false },
      { "id": "option_3", "text": "Use a hash", "isCorrect": false },
      { "id": "option_4", "text": "Use the splat operator '*'", "isCorrect": true }
    ],
    "hint": "A special operator is used to collect multiple arguments.",
    "answerDescription": "The splat operator '*' gathers multiple arguments into an array, allowing flexible method definitions."
  },
  { 
    "id": "ruby_523",
    "question": "What does defining a method with 'self.method_name' do?",
    "options": [
      { "id": "option_1", "text": "Creates an instance method", "isCorrect": false },
      { "id": "option_2", "text": "Creates a private method", "isCorrect": false },
      { "id": "option_3", "text": "Creates an alias for a method", "isCorrect": false },
      { "id": "option_4", "text": "Creates a class method", "isCorrect": true }
    ],
    "hint": "It binds the method to the class itself, not an instance.",
    "answerDescription": "Using 'self.method_name' inside a class defines a class method rather than an instance method."
  },
  { 
    "id": "ruby_524",
    "question": "What is the default return value of a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "false", "isCorrect": false },
      { "id": "option_2", "text": "0", "isCorrect": false },
      { "id": "option_3", "text": "nil", "isCorrect": false },
      { "id": "option_4", "text": "The last evaluated expression", "isCorrect": true }
    ],
    "hint": "Ruby methods return something even if 'return' isn't used.",
    "answerDescription": "In Ruby, a method returns the value of the last evaluated expression if 'return' isn't explicitly used."
  },
  { 
    "id": "ruby_525",
    "question": "What happens if you define two methods with the same name in Ruby?",
    "options": [
      { "id": "option_1", "text": "An error is raised", "isCorrect": false },
      { "id": "option_2", "text": "Both methods are available", "isCorrect": false },
      { "id": "option_3", "text": "Ruby merges their behavior", "isCorrect": false },
      { "id": "option_4", "text": "The second method overrides the first", "isCorrect": true }
    ],
    "hint": "Only the last definition remains valid.",
    "answerDescription": "In Ruby, if two methods share the same name, the second one replaces the first."
  },
  { 
    "id": "ruby_526",
    "question": "What is the purpose of 'alias' in Ruby methods?",
    "options": [
      { "id": "option_1", "text": "To remove a method", "isCorrect": false },
      { "id": "option_2", "text": "To make a method private", "isCorrect": false },
      { "id": "option_3", "text": "To define an argument", "isCorrect": false },
      { "id": "option_4", "text": "To create an alternative name for a method", "isCorrect": true }
    ],
    "hint": "It provides a different name for the same method.",
    "answerDescription": "The 'alias' keyword allows you to create a new name for an existing method, which can be useful for maintaining backward compatibility."
  },  {
    "id": "ruby_527",
    "question": "What is the primary purpose of methods in Ruby?",
    "options": [
      { "id": "option_1", "text": "To encapsulate reusable blocks of code", "isCorrect": true },
      { "id": "option_2", "text": "To store constant values", "isCorrect": false },
      { "id": "option_3", "text": "To define global variables", "isCorrect": false },
      { "id": "option_4", "text": "To replace control structures", "isCorrect": false }
    ],
    "hint": "Methods help avoid code repetition by grouping logic.",
    "answerDescription": "Methods in Ruby encapsulate reusable blocks of code, making programs more modular and maintainable."
  },
  {
    "id": "ruby_528",
    "question": "How do you define a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the 'def' keyword", "isCorrect": true },
      { "id": "option_2", "text": "Using the 'method' keyword", "isCorrect": false },
      { "id": "option_3", "text": "Using square brackets", "isCorrect": false },
      { "id": "option_4", "text": "Using curly braces", "isCorrect": false }
    ],
    "hint": "The keyword starts with 'd' and ends with 'f'.",
    "answerDescription": "In Ruby, methods are defined using the 'def' keyword followed by the method name and optional parameters."
  },
  {
    "id": "ruby_529",
    "question": "What does a Ruby method return by default?",
    "options": [
      { "id": "option_1", "text": "The last evaluated expression", "isCorrect": true },
      { "id": "option_2", "text": "nil", "isCorrect": false },
      { "id": "option_3", "text": "An empty string", "isCorrect": false },
      { "id": "option_4", "text": "An error if no return statement is provided", "isCorrect": false }
    ],
    "hint": "Ruby methods implicitly return a value.",
    "answerDescription": "In Ruby, methods return the value of the last evaluated expression unless an explicit return statement is used."
  },
  {
    "id": "ruby_530",
    "question": "What is the purpose of the 'return' keyword in Ruby methods?",
    "options": [
      { "id": "option_1", "text": "To explicitly specify the return value", "isCorrect": true },
      { "id": "option_2", "text": "To exit a program immediately", "isCorrect": false },
      { "id": "option_3", "text": "To print output to the console", "isCorrect": false },
      { "id": "option_4", "text": "To declare a new variable", "isCorrect": false }
    ],
    "hint": "It helps override implicit return behavior.",
    "answerDescription": "The 'return' keyword in Ruby allows explicitly specifying a method's return value, overriding the default behavior."
  },
  {
    "id": "ruby_531",
    "question": "How do you pass arguments to a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "By listing them in parentheses after the method name", "isCorrect": true },
      { "id": "option_2", "text": "By using an 'args' keyword", "isCorrect": false },
      { "id": "option_3", "text": "By assigning them to a global variable", "isCorrect": false },
      { "id": "option_4", "text": "By using square brackets", "isCorrect": false }
    ],
    "hint": "Method arguments are enclosed in parentheses.",
    "answerDescription": "In Ruby, arguments are passed to methods by listing them within parentheses following the method name."
  },
  {
    "id": "ruby_532",
    "question": "What is a default parameter in Ruby?",
    "options": [
      { "id": "option_1", "text": "A parameter with a predefined value if not provided", "isCorrect": true },
      { "id": "option_2", "text": "A required parameter in every method", "isCorrect": false },
      { "id": "option_3", "text": "A global variable accessible inside methods", "isCorrect": false },
      { "id": "option_4", "text": "A parameter that cannot be modified", "isCorrect": false }
    ],
    "hint": "It provides a fallback value when no argument is given.",
    "answerDescription": "A default parameter in Ruby assigns a predefined value to an argument if no value is provided when calling the method."
  },
  {
    "id": "ruby_533",
    "question": "What does the splat operator (*) do in Ruby methods?",
    "options": [
      { "id": "option_1", "text": "It allows a method to accept a variable number of arguments", "isCorrect": true },
      { "id": "option_2", "text": "It multiplies numeric values", "isCorrect": false },
      { "id": "option_3", "text": "It defines a constant", "isCorrect": false },
      { "id": "option_4", "text": "It creates an array from a string", "isCorrect": false }
    ],
    "hint": "It helps handle multiple arguments flexibly.",
    "answerDescription": "The splat operator (*) allows a Ruby method to accept an arbitrary number of arguments as an array."
  },
  {
    "id": "ruby_534",
    "question": "How do you define an anonymous function in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the 'lambda' keyword", "isCorrect": true },
      { "id": "option_2", "text": "Using the 'def' keyword", "isCorrect": false },
      { "id": "option_3", "text": "Using the 'func' keyword", "isCorrect": false },
      { "id": "option_4", "text": "Using the 'method' keyword", "isCorrect": false }
    ],
    "hint": "It's a one-word keyword for creating small, reusable functions.",
    "answerDescription": "In Ruby, anonymous functions are defined using the 'lambda' keyword, allowing function-like behavior without method names."
  },
  {
    "id": "ruby_535",
    "question": "What is the difference between 'proc' and 'lambda' in Ruby?",
    "options": [
      { "id": "option_1", "text": "Lambdas enforce argument count, while procs do not", "isCorrect": true },
      { "id": "option_2", "text": "Procs can only be used inside loops", "isCorrect": false },
      { "id": "option_3", "text": "Lambdas always return nil", "isCorrect": false },
      { "id": "option_4", "text": "Procs cannot be assigned to variables", "isCorrect": false }
    ],
    "hint": "One of them checks arguments strictly.",
    "answerDescription": "Lambdas enforce strict argument count, while procs allow flexible argument handling, making them behave differently."
  },
  {
    "id": "ruby_536",
    "question": "What does the 'yield' keyword do in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Terminates the method execution", "isCorrect": false },
      { "id": "option_2", "text": "Declares a new block", "isCorrect": false },
      { "id": "option_3", "text": "Defines a new method dynamically", "isCorrect": false },
      { "id": "option_4", "text": "Calls the block passed to the method", "isCorrect": true }
    ],
    "hint": "Think about how Ruby methods interact with blocks.",
    "answerDescription": "The 'yield' keyword is used to invoke a block of code passed to a method, allowing dynamic execution."
  },
  {
    "id": "ruby_537",
    "question": "How do you define a method with variable-length arguments in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using square brackets []", "isCorrect": false },
      { "id": "option_2", "text": "Using the double colon ::", "isCorrect": false },
      { "id": "option_3", "text": "Using the ampersand &", "isCorrect": false },
      { "id": "option_4", "text": "Using an asterisk * before the parameter name", "isCorrect": true }
    ],
    "hint": "A special character is used to capture multiple arguments.",
    "answerDescription": "In Ruby, an asterisk (*) before a parameter name allows the method to accept a variable number of arguments."
  },
  {
    "id": "ruby_538",
    "question": "Which method is used to check if a method is defined in a Ruby object?",
    "options": [
      { "id": "option_1", "text": "has_method?", "isCorrect": false },
      { "id": "option_2", "text": "method_exists?", "isCorrect": false },
      { "id": "option_3", "text": "check_method?", "isCorrect": false },
      { "id": "option_4", "text": "defined?", "isCorrect": true }
    ],
    "hint": "The method name is a Ruby keyword used in various contexts.",
    "answerDescription": "The 'defined?' method in Ruby checks if a method, variable, or constant is defined."
  },
  {
    "id": "ruby_539",
    "question": "How do you specify default values for method parameters?",
    "options": [
      { "id": "option_1", "text": "Using 'default: value'", "isCorrect": false },
      { "id": "option_2", "text": "Passing nil as the parameter", "isCorrect": false },
      { "id": "option_3", "text": "Assigning a value in the method definition", "isCorrect": true },
      { "id": "option_4", "text": "Using a case statement inside the method", "isCorrect": false }
    ],
    "hint": "You set the default directly in the method signature.",
    "answerDescription": "In Ruby, default values are assigned in the method definition."
  },
  {
    "id": "ruby_540",
    "question": "What is the purpose of the 'super' keyword in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Calls another method in the same class", "isCorrect": false },
      { "id": "option_2", "text": "Declares a method as a superclass method", "isCorrect": false },
      { "id": "option_3", "text": "Automatically generates a parent class", "isCorrect": false },
      { "id": "option_4", "text": "Calls the method of the same name from the superclass", "isCorrect": true }
    ],
    "hint": "It helps in inheritance and method overriding.",
    "answerDescription": "The 'super' keyword in Ruby is used to call the method with the same name from the superclass, useful in method overriding."
  },
  {
    "id": "ruby_541",
    "question": "Which Ruby keyword is used to define an alias for a method?",
    "options": [
      { "id": "option_1", "text": "rename", "isCorrect": false },
      { "id": "option_2", "text": "method_alias", "isCorrect": false },
      { "id": "option_3", "text": "set_alias", "isCorrect": false },
      { "id": "option_4", "text": "alias", "isCorrect": true }
    ],
    "hint": "The keyword is short and simple.",
    "answerDescription": "In Ruby, the 'alias' keyword is used to create a different name for an existing method."
  },
  {
    "id": "ruby_542",
    "question": "How can you convert a block into a Proc object in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the 'proc' keyword", "isCorrect": false },
      { "id": "option_2", "text": "Using square brackets []", "isCorrect": false },
      { "id": "option_3", "text": "By calling .block on an object", "isCorrect": false },
      { "id": "option_4", "text": "By using '&' before a block parameter", "isCorrect": true }
    ],
    "hint": "A special character is used in method parameters.",
    "answerDescription": "The '&' symbol before a block parameter in a method converts the block into a Proc object."
  },
  {
    "id": "ruby_543",
    "question": "What will happen if a method is defined with the same name as an existing method in Ruby?",
    "options": [
      { "id": "option_1", "text": "An error will be raised", "isCorrect": false },
      { "id": "option_2", "text": "Ruby will automatically rename the new method", "isCorrect": false },
      { "id": "option_3", "text": "Both methods will coexist", "isCorrect": false },
      { "id": "option_4", "text": "The new method will override the existing one", "isCorrect": true }
    ],
    "hint": "Ruby follows a last-defined-wins rule.",
    "answerDescription": "When a method is redefined in Ruby, the new method replaces the existing one, as Ruby does not support method overloading."
  },
  {
    "id": "ruby_544",
    "question": "What is the purpose of the 'method_missing' method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Handles method calls that are private", "isCorrect": false },
      { "id": "option_2", "text": "Automatically defines missing methods", "isCorrect": false },
      { "id": "option_3", "text": "Checks if a method exists before calling it", "isCorrect": false },
      { "id": "option_4", "text": "Catches calls to undefined methods", "isCorrect": true }
    ],
    "hint": "It intercepts method calls that don't exist.",
    "answerDescription": "The 'method_missing' method in Ruby is triggered when an undefined method is called, allowing custom handling."
  },
  {
    "id": "ruby_545",
    "question": "Which method is used to retrieve a list of methods available for an object?",
    "options": [
      { "id": "option_1", "text": "get_methods", "isCorrect": false },
      { "id": "option_2", "text": "object_methods", "isCorrect": false },
      { "id": "option_3", "text": "fetch_methods", "isCorrect": false },
      { "id": "option_4", "text": "methods", "isCorrect": true }
    ],
    "hint": "This method is commonly used for introspection.",
    "answerDescription": "In Ruby, the 'methods' method returns an array of all available methods for an object."
  },
  {
    "id": "ruby_546",
    "question": "How do you return multiple values from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "By separating values with commas", "isCorrect": true },
      { "id": "option_2", "text": "By using an array only", "isCorrect": false },
      { "id": "option_3", "text": "By defining multiple return statements", "isCorrect": false },
      { "id": "option_4", "text": "By using 'return_all' keyword", "isCorrect": false }
    ],
    "hint": "Ruby supports multiple assignments from method returns.",
    "answerDescription": "In Ruby, you can return multiple values by separating them with commas, which are then captured as an array or assigned to multiple variables."
  },
  {
    "id": "ruby_547",
    "question": "What does the `Object#send` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Calls a method dynamically using its name as a symbol or string", "isCorrect": true },
      { "id": "option_2", "text": "Sends an HTTP request", "isCorrect": false },
      { "id": "option_3", "text": "Transfers an object to another class", "isCorrect": false },
      { "id": "option_4", "text": "Creates a new thread for execution", "isCorrect": false }
    ],
    "hint": "It allows calling private methods as well.",
    "answerDescription": "The `send` method in Ruby is used to invoke methods dynamically using a string or symbol representation of their name."
  },
  {
    "id": "ruby_548",
    "question": "How do you define a method that accepts a block in Ruby?",
    "options": [
      { "id": "option_1", "text": "By using `yield` inside the method", "isCorrect": true },
      { "id": "option_2", "text": "By passing a parameter with an ampersand (&)", "isCorrect": false },
      { "id": "option_3", "text": "By enclosing the block in curly braces `{}`", "isCorrect": false },
      { "id": "option_4", "text": "By using `do...end` syntax inside the method definition", "isCorrect": false }
    ],
    "hint": "The method must call the block within its execution.",
    "answerDescription": "Using `yield` inside a method allows you to execute a block passed to that method."
  },
  {
    "id": "ruby_549",
    "question": "What will happen if you call `return` inside a block given to a method?",
    "options": [
      { "id": "option_1", "text": "It will cause a `LocalJumpError` unless used inside a lambda", "isCorrect": true },
      { "id": "option_2", "text": "It will exit the program entirely", "isCorrect": false },
      { "id": "option_3", "text": "It will return `nil` and continue execution", "isCorrect": false },
      { "id": "option_4", "text": "It will only exit the block but not the surrounding method", "isCorrect": false }
    ],
    "hint": "Regular blocks don’t handle `return` like methods do.",
    "answerDescription": "Using `return` inside a block (except for lambdas) results in a `LocalJumpError` since blocks do not create their own execution context."
  },
  {
    "id": "ruby_550",
    "question": "What is the purpose of the `define_method` in Ruby?",
    "options": [
      { "id": "option_1", "text": "To dynamically create a method at runtime", "isCorrect": true },
      { "id": "option_2", "text": "To alias an existing method", "isCorrect": false },
      { "id": "option_3", "text": "To check if a method is defined", "isCorrect": false },
      { "id": "option_4", "text": "To remove a method from a class", "isCorrect": false }
    ],
    "hint": "It’s used in metaprogramming to generate methods dynamically.",
    "answerDescription": "The `define_method` function is used to define a method dynamically inside a class or module."
  },
  {
    "id": "ruby_551",
    "question": "How do you pass a block explicitly to a method as a Proc?",
    "options": [
      { "id": "option_1", "text": "By using an ampersand (&) before a parameter", "isCorrect": true },
      { "id": "option_2", "text": "By wrapping it in curly braces `{}`", "isCorrect": false },
      { "id": "option_3", "text": "By using `proc` inside the method", "isCorrect": false },
      { "id": "option_4", "text": "By calling `block.call` directly", "isCorrect": false }
    ],
    "hint": "The ampersand converts a block to a Proc object.",
    "answerDescription": "By prefixing a method parameter with `&`, you can capture an implicit block as a Proc object."
  },
  {
    "id": "ruby_552",
    "question": "What will happen if you call `super()` without arguments inside a method?",
    "options": [
      { "id": "option_1", "text": "It will call the superclass method with no arguments", "isCorrect": true },
      { "id": "option_2", "text": "It will call the superclass method with the same arguments as the current method", "isCorrect": false },
      { "id": "option_3", "text": "It will raise an error because arguments are missing", "isCorrect": false },
      { "id": "option_4", "text": "It will redefine the superclass method", "isCorrect": false }
    ],
    "hint": "The parentheses ensure no arguments are passed.",
    "answerDescription": "Calling `super()` explicitly with parentheses sends no arguments to the superclass method."
  },
  {
    "id": "ruby_553",
    "question": "How can you make an instance method private in Ruby?",
    "options": [
      { "id": "option_1", "text": "By using `private` before defining the method", "isCorrect": true },
      { "id": "option_2", "text": "By prefixing the method name with `_`", "isCorrect": false },
      { "id": "option_3", "text": "By declaring it inside a `private_class_method` block", "isCorrect": false },
      { "id": "option_4", "text": "By placing the method inside a module", "isCorrect": false }
    ],
    "hint": "Private methods cannot be called with an explicit receiver.",
    "answerDescription": "In Ruby, placing `private` before a method definition makes it private to the instance."
  },
  {
    "id": "ruby_554",
    "question": "What is the main difference between `Proc` and `lambda` in Ruby?",
    "options": [
      { "id": "option_1", "text": "Lambdas enforce argument count strictly, but Procs do not", "isCorrect": true },
      { "id": "option_2", "text": "Procs enforce argument count strictly, but lambdas do not", "isCorrect": false },
      { "id": "option_3", "text": "Lambdas can modify variables outside their scope", "isCorrect": false },
      { "id": "option_4", "text": "Procs cannot be stored in variables", "isCorrect": false }
    ],
    "hint": "Think about strictness in argument handling.",
    "answerDescription": "Lambdas in Ruby behave like strict methods, enforcing the exact number of arguments, while Procs do not."
  },  {
    "id": "ruby_555",
    "question": "What does the 'define_method' function do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates a new class", "isCorrect": false },
      { "id": "option_2", "text": "Defines a method dynamically", "isCorrect": true },
      { "id": "option_3", "text": "Removes an existing method", "isCorrect": false },
      { "id": "option_4", "text": "Checks if a method exists", "isCorrect": false }
    ],
    "hint": "It allows defining methods at runtime.",
    "answerDescription": "The 'define_method' function in Ruby dynamically defines a method within a class or module."
  },
  {
    "id": "ruby_556",
    "question": "Which keyword is used to return a value from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "return", "isCorrect": true },
      { "id": "option_3", "text": "exit", "isCorrect": false },
      { "id": "option_4", "text": "yield", "isCorrect": false }
    ],
    "hint": "It explicitly exits a method and provides a result.",
    "answerDescription": "The 'return' keyword in Ruby is used to exit a method and return a specified value."
  },
  {
    "id": "ruby_557",
    "question": "How do you pass a block to a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using brackets {}", "isCorrect": false },
      { "id": "option_2", "text": "Using an ampersand & before the parameter", "isCorrect": true },
      { "id": "option_3", "text": "Using parentheses ()", "isCorrect": false },
      { "id": "option_4", "text": "Using a colon :", "isCorrect": false }
    ],
    "hint": "A special character is needed before the parameter.",
    "answerDescription": "In Ruby, using '&' before a parameter allows passing a block to a method as a Proc object."
  },
  {
    "id": "ruby_558",
    "question": "What will 'method(:name)' return in Ruby?",
    "options": [
      { "id": "option_1", "text": "A symbol representing the method", "isCorrect": false },
      { "id": "option_2", "text": "A Method object", "isCorrect": true },
      { "id": "option_3", "text": "The method's return value", "isCorrect": false },
      { "id": "option_4", "text": "An error if the method is not defined", "isCorrect": false }
    ],
    "hint": "It returns an object that allows invoking the method later.",
    "answerDescription": "The 'method' function in Ruby returns a Method object, which can be called dynamically."
  },
  {
    "id": "ruby_559",
    "question": "What does the 'send' method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Sends an email", "isCorrect": false },
      { "id": "option_2", "text": "Invokes a method dynamically", "isCorrect": true },
      { "id": "option_3", "text": "Transfers data between objects", "isCorrect": false },
      { "id": "option_4", "text": "Creates a new thread", "isCorrect": false }
    ],
    "hint": "It allows calling methods dynamically by name.",
    "answerDescription": "The 'send' method in Ruby is used to invoke a method dynamically by passing its name as a symbol or string."
  },
  {
    "id": "ruby_560",
    "question": "How do you check if an object responds to a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "has_method?", "isCorrect": false },
      { "id": "option_2", "text": "respond_to?", "isCorrect": true },
      { "id": "option_3", "text": "method_exists?", "isCorrect": false },
      { "id": "option_4", "text": "check_method?", "isCorrect": false }
    ],
    "hint": "It's a built-in method that checks for method availability.",
    "answerDescription": "The 'respond_to?' method in Ruby checks if an object can respond to a given method."
  },
  {
    "id": "ruby_561",
    "question": "Which method is used to remove a method from a class in Ruby?",
    "options": [
      { "id": "option_1", "text": "delete_method", "isCorrect": false },
      { "id": "option_2", "text": "remove_method", "isCorrect": true },
      { "id": "option_3", "text": "undef_method", "isCorrect": false },
      { "id": "option_4", "text": "clear_method", "isCorrect": false }
    ],
    "hint": "The method name starts with 'remove'.",
    "answerDescription": "The 'remove_method' function in Ruby removes a method from a class but allows it to be inherited."
  },
  {
    "id": "ruby_562",
    "question": "What is the difference between 'remove_method' and 'undef_method' in Ruby?",
    "options": [
      { "id": "option_1", "text": "They perform the same function", "isCorrect": false },
      { "id": "option_2", "text": "'undef_method' completely removes the method, even from subclasses", "isCorrect": true },
      { "id": "option_3", "text": "'remove_method' permanently deletes the method", "isCorrect": false },
      { "id": "option_4", "text": "'undef_method' allows overriding, but 'remove_method' does not", "isCorrect": false }
    ],
    "hint": "One affects inheritance while the other does not.",
    "answerDescription": "'undef_method' removes a method completely, making it inaccessible even to subclasses, whereas 'remove_method' only removes it from the current class."
  },
  {
    "id": "ruby_563",
    "question": "What is the purpose of the 'Object#method_missing' method in Ruby?",
    "options": [
      { "id": "option_1", "text": "To handle private method calls", "isCorrect": false },
      { "id": "option_2", "text": "To catch calls to undefined methods", "isCorrect": true },
      { "id": "option_3", "text": "To check if a method exists before calling it", "isCorrect": false },
      { "id": "option_4", "text": "To define new methods dynamically", "isCorrect": false }
    ],
    "hint": "It helps in handling method calls that do not exist.",
    "answerDescription": "The 'method_missing' method in Ruby is used to catch and handle calls to undefined methods."
  },
  {
    "id": "ruby_564",
    "question": "How do you make a method private in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using 'hide'", "isCorrect": false },
      { "id": "option_2", "text": "Using 'private'", "isCorrect": true },
      { "id": "option_3", "text": "Using 'secure'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'restrict'", "isCorrect": false }
    ],
    "hint": "It is a keyword that specifies restricted access.",
    "answerDescription": "In Ruby, the 'private' keyword is used to define methods that can only be called within the defining class."
  },
  {
    "id": "ruby_565",
    "question": "Which method allows you to call a block within a method?",
    "options": [
      { "id": "option_1", "text": "call", "isCorrect": false },
      { "id": "option_2", "text": "execute", "isCorrect": false },
      { "id": "option_3", "text": "yield", "isCorrect": true },
      { "id": "option_4", "text": "run", "isCorrect": false }
    ],
    "hint": "This keyword transfers control to the passed block.",
    "answerDescription": "The 'yield' keyword is used in Ruby to call a block passed to a method."
  },
  {
    "id": "ruby_566",
    "question": "How do you define a method that takes a variable number of arguments in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using brackets []", "isCorrect": false },
      { "id": "option_2", "text": "Using parentheses ()", "isCorrect": false },
      { "id": "option_3", "text": "Using an asterisk * before the parameter", "isCorrect": true },
      { "id": "option_4", "text": "Using double asterisks **", "isCorrect": false }
    ],
    "hint": "This symbol allows collecting multiple arguments as an array.",
    "answerDescription": "In Ruby, an asterisk (*) before a parameter collects all remaining arguments into an array."
  },
  {
    "id": "ruby_567",
    "question": "Which method converts a symbol to a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_sym", "isCorrect": false },
      { "id": "option_2", "text": "symbol_to_string", "isCorrect": false },
      { "id": "option_3", "text": "to_s", "isCorrect": true },
      { "id": "option_4", "text": "convert", "isCorrect": false }
    ],
    "hint": "It is a common method used to convert data types in Ruby.",
    "answerDescription": "The 'to_s' method in Ruby converts a symbol into a string."
  },
  {
    "id": "ruby_568",
    "question": "Which of these is NOT a valid way to define a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using 'def' keyword", "isCorrect": false },
      { "id": "option_2", "text": "Using 'define_method'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'new_method'", "isCorrect": true },
      { "id": "option_4", "text": "Using singleton methods", "isCorrect": false }
    ],
    "hint": "This option is not a valid Ruby method definition.",
    "answerDescription": "Ruby does not provide a built-in 'new_method' function for defining methods."
  },
  {
    "id": "ruby_569",
    "question": "What does 'super' do in a method definition?",
    "options": [
      { "id": "option_1", "text": "Calls the method in the parent class with the same name", "isCorrect": false },
      { "id": "option_2", "text": "Creates a new method", "isCorrect": false },
      { "id": "option_3", "text": "Calls the overridden method from the superclass", "isCorrect": true },
      { "id": "option_4", "text": "Declares a method as superior", "isCorrect": false }
    ],
    "hint": "It is used in inheritance to refer to the parent class.",
    "answerDescription": "The 'super' keyword calls a method with the same name from the superclass."
  },
  {
    "id": "ruby_570",
    "question": "Which method can be used to execute a string as Ruby code?",
    "options": [
      { "id": "option_1", "text": "run", "isCorrect": false },
      { "id": "option_2", "text": "execute", "isCorrect": false },
      { "id": "option_3", "text": "eval", "isCorrect": true },
      { "id": "option_4", "text": "interpret", "isCorrect": false }
    ],
    "hint": "It evaluates a string as Ruby code.",
    "answerDescription": "The 'eval' method in Ruby executes a string as Ruby code at runtime."
  },
  {
    "id": "ruby_571",
    "question": "How do you get the number of arguments passed to a method?",
    "options": [
      { "id": "option_1", "text": "arg_count", "isCorrect": false },
      { "id": "option_2", "text": "num_args", "isCorrect": false },
      { "id": "option_3", "text": "arity", "isCorrect": true },
      { "id": "option_4", "text": "arg_length", "isCorrect": false }
    ],
    "hint": "This method returns the expected number of arguments for a method.",
    "answerDescription": "The 'arity' method in Ruby returns the number of arguments a method expects."
  },
  {
    "id": "ruby_572",
    "question": "Which method is used to check if an object is an instance of a specific class?",
    "options": [
      { "id": "option_1", "text": "check_class?", "isCorrect": false },
      { "id": "option_2", "text": "typeof", "isCorrect": false },
      { "id": "option_3", "text": "is_a?", "isCorrect": true },
      { "id": "option_4", "text": "class?", "isCorrect": false }
    ],
    "hint": "It checks an object's class hierarchy.",
    "answerDescription": "The 'is_a?' method in Ruby determines if an object is an instance of a specific class or its subclass."
  },
  {
    "id": "ruby_573",
    "question": "How do you create an alias for a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "duplicate", "isCorrect": false },
      { "id": "option_2", "text": "rename_method", "isCorrect": false },
      { "id": "option_3", "text": "alias", "isCorrect": true },
      { "id": "option_4", "text": "copy_method", "isCorrect": false }
    ],
    "hint": "It is a built-in keyword for defining alternate names for methods.",
    "answerDescription": "The 'alias' keyword in Ruby allows creating an alternate name for an existing method."
  },
  {
    "id": "ruby_574",
    "question": "Which method is used to freeze an object to prevent modifications?",
    "options": [
      { "id": "option_1", "text": "lock", "isCorrect": false },
      { "id": "option_2", "text": "protect", "isCorrect": false },
      { "id": "option_3", "text": "freeze", "isCorrect": true },
      { "id": "option_4", "text": "secure", "isCorrect": false }
    ],
    "hint": "It prevents any further modifications to an object.",
    "answerDescription": "The 'freeze' method in Ruby makes an object immutable by preventing changes to its state."
  },  {
    "id": "ruby_575",
    "question": "Which keyword is used to return a value from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "end", "isCorrect": false },
      { "id": "option_2", "text": "yield", "isCorrect": false },
      { "id": "option_3", "text": "break", "isCorrect": false },
      { "id": "option_4", "text": "return", "isCorrect": true }
    ],
    "hint": "This keyword explicitly specifies the output of a method.",
    "answerDescription": "The 'return' keyword in Ruby is used to send a value back from a method."
  },
  {
    "id": "ruby_576",
    "question": "Which method is used to check if an object responds to a specific method?",
    "options": [
      { "id": "option_1", "text": "has_method?", "isCorrect": false },
      { "id": "option_2", "text": "supports?", "isCorrect": false },
      { "id": "option_3", "text": "responds_to?", "isCorrect": false },
      { "id": "option_4", "text": "respond_to?", "isCorrect": true }
    ],
    "hint": "This method helps in checking method availability before calling it.",
    "answerDescription": "The 'respond_to?' method in Ruby checks whether an object can respond to a given method."
  },
  {
    "id": "ruby_577",
    "question": "What does the `define_method` method do?",
    "options": [
      { "id": "option_1", "text": "Deletes a method", "isCorrect": false },
      { "id": "option_2", "text": "Lists all defined methods", "isCorrect": false },
      { "id": "option_3", "text": "Checks if a method exists", "isCorrect": false },
      { "id": "option_4", "text": "Defines a method dynamically", "isCorrect": true }
    ],
    "hint": "This method is commonly used in metaprogramming.",
    "answerDescription": "The 'define_method' method in Ruby allows dynamic creation of methods at runtime."
  },
  {
    "id": "ruby_578",
    "question": "Which method is used to convert an object into an array?",
    "options": [
      { "id": "option_1", "text": "to_h", "isCorrect": false },
      { "id": "option_2", "text": "convert_array", "isCorrect": false },
      { "id": "option_3", "text": "arrayify", "isCorrect": false },
      { "id": "option_4", "text": "to_a", "isCorrect": true }
    ],
    "hint": "It is commonly used to transform objects into an array format.",
    "answerDescription": "The 'to_a' method in Ruby converts an object into an array."
  },
  {
    "id": "ruby_579",
    "question": "Which method is used to execute a block of code within an instance of a class?",
    "options": [
      { "id": "option_1", "text": "execute", "isCorrect": false },
      { "id": "option_2", "text": "call", "isCorrect": false },
      { "id": "option_3", "text": "process", "isCorrect": false },
      { "id": "option_4", "text": "instance_eval", "isCorrect": true }
    ],
    "hint": "This method allows modifying an instance within a block.",
    "answerDescription": "The 'instance_eval' method in Ruby evaluates a block of code in the context of a specific object."
  },
  {
    "id": "ruby_580",
    "question": "Which of the following can be used to invoke a private method?",
    "options": [
      { "id": "option_1", "text": "send_message", "isCorrect": false },
      { "id": "option_2", "text": "invoke", "isCorrect": false },
      { "id": "option_3", "text": "execute_method", "isCorrect": false },
      { "id": "option_4", "text": "send", "isCorrect": true }
    ],
    "hint": "This method can bypass Ruby's private method restrictions.",
    "answerDescription": "The 'send' method allows calling private methods by sending the method name as a symbol."
  },
  {
    "id": "ruby_581",
    "question": "What is the purpose of `method_missing` in Ruby?",
    "options": [
      { "id": "option_1", "text": "Prevents errors when a method is missing", "isCorrect": false },
      { "id": "option_2", "text": "Automatically defines missing methods", "isCorrect": false },
      { "id": "option_3", "text": "Calls another method when a method is missing", "isCorrect": false },
      { "id": "option_4", "text": "Handles calls to undefined methods dynamically", "isCorrect": true }
    ],
    "hint": "This method provides a way to handle calls to nonexistent methods.",
    "answerDescription": "The 'method_missing' method in Ruby is triggered when an undefined method is called, allowing custom behavior."
  },
  {
    "id": "ruby_582",
    "question": "Which method is used to get a list of instance variables of an object?",
    "options": [
      { "id": "option_1", "text": "var_list", "isCorrect": false },
      { "id": "option_2", "text": "get_variables", "isCorrect": false },
      { "id": "option_3", "text": "all_vars", "isCorrect": false },
      { "id": "option_4", "text": "instance_variables", "isCorrect": true }
    ],
    "hint": "This method returns an array of instance variable names.",
    "answerDescription": "The 'instance_variables' method in Ruby returns a list of instance variables for an object."
  },
  {
    "id": "ruby_583",
    "question": "What is the purpose of `self` inside an instance method?",
    "options": [
      { "id": "option_1", "text": "Refers to the class", "isCorrect": false },
      { "id": "option_2", "text": "Refers to the superclass", "isCorrect": false },
      { "id": "option_3", "text": "Refers to a global variable", "isCorrect": false },
      { "id": "option_4", "text": "Refers to the current instance", "isCorrect": true }
    ],
    "hint": "This keyword is used to access the instance within a method.",
    "answerDescription": "In an instance method, 'self' refers to the current instance of the class."
  },
  {
    "id": "ruby_584",
    "question": "Which method is used to remove an instance variable from an object?",
    "options": [
      { "id": "option_1", "text": "delete_instance_variable", "isCorrect": false },
      { "id": "option_2", "text": "clear_variable", "isCorrect": false },
      { "id": "option_3", "text": "remove_var", "isCorrect": false },
      { "id": "option_4", "text": "remove_instance_variable", "isCorrect": true }
    ],
    "hint": "This method is specifically for instance variables.",
    "answerDescription": "The 'remove_instance_variable' method removes an instance variable from an object."
  },
  {
    "id": "ruby_585",
    "question": "What is the difference between `public`, `private`, and `protected` methods?",
    "options": [
      { "id": "option_1", "text": "They are used for file access", "isCorrect": false },
      { "id": "option_2", "text": "They define how variables are stored", "isCorrect": false },
      { "id": "option_3", "text": "They determine how methods are executed", "isCorrect": false },
      { "id": "option_4", "text": "They control method visibility and accessibility", "isCorrect": true }
    ],
    "hint": "They define method access control levels.",
    "answerDescription": "In Ruby, `public`, `private`, and `protected` control method visibility and accessibility."
  },
  {
    "id": "ruby_586",
    "question": "How do you define a method with default parameters in Ruby?",
    "options": [
      { "id": "option_1", "text": "def greet(name='Guest')", "isCorrect": true },
      { "id": "option_2", "text": "def greet(name: 'Guest')", "isCorrect": false },
      { "id": "option_3", "text": "def greet(name => 'Guest')", "isCorrect": false },
      { "id": "option_4", "text": "def greet(name = Guest)", "isCorrect": false }
    ],
    "hint": "Default values are assigned using '=' within the method definition.",
    "answerDescription": "In Ruby, default parameters are set using '=' inside the method definition."
  },
  {
    "id": "ruby_587",
    "question": "Which method returns the number of arguments passed to a method?",
    "options": [
      { "id": "option_1", "text": "arity", "isCorrect": true },
      { "id": "option_2", "text": "count_args", "isCorrect": false },
      { "id": "option_3", "text": "num_args", "isCorrect": false },
      { "id": "option_4", "text": "size", "isCorrect": false }
    ],
    "hint": "This method name is related to the concept of function parameters.",
    "answerDescription": "The 'arity' method in Ruby returns the number of arguments a method expects."
  },
  {
    "id": "ruby_588",
    "question": "What is the correct way to return multiple values from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using an array or a comma-separated return", "isCorrect": true },
      { "id": "option_2", "text": "Using the return keyword multiple times", "isCorrect": false },
      { "id": "option_3", "text": "Using the 'multi_return' keyword", "isCorrect": false },
      { "id": "option_4", "text": "Returning a single string with concatenation", "isCorrect": false }
    ],
    "hint": "Ruby allows returning multiple values using a common data structure.",
    "answerDescription": "In Ruby, multiple values can be returned using an array or by separating them with a comma."
  },
  {
    "id": "ruby_589",
    "question": "What does the splat operator (*) do in method parameters?",
    "options": [
      { "id": "option_1", "text": "It collects multiple arguments into an array", "isCorrect": true },
      { "id": "option_2", "text": "It doubles the argument value", "isCorrect": false },
      { "id": "option_3", "text": "It converts the argument into a string", "isCorrect": false },
      { "id": "option_4", "text": "It acts as a wildcard character", "isCorrect": false }
    ],
    "hint": "This operator is useful when dealing with variable-length arguments.",
    "answerDescription": "The splat operator (*) collects multiple arguments into an array when passed to a method."
  },
  {
    "id": "ruby_590",
    "question": "Which method checks if an object responds to a given method name?",
    "options": [
      { "id": "option_1", "text": "respond_to?", "isCorrect": true },
      { "id": "option_2", "text": "method_exists?", "isCorrect": false },
      { "id": "option_3", "text": "can_call?", "isCorrect": false },
      { "id": "option_4", "text": "has_method?", "isCorrect": false }
    ],
    "hint": "This method name suggests that an object can handle a certain message.",
    "answerDescription": "The 'respond_to?' method checks if an object can respond to a specific method call."
  },
  {
    "id": "ruby_591",
    "question": "How do you make a method private in Ruby?",
    "options": [
      { "id": "option_1", "text": "By using the 'private' keyword before method definition", "isCorrect": true },
      { "id": "option_2", "text": "By defining the method inside a 'do' block", "isCorrect": false },
      { "id": "option_3", "text": "By prefixing the method name with an underscore", "isCorrect": false },
      { "id": "option_4", "text": "By using the 'hidden' keyword", "isCorrect": false }
    ],
    "hint": "Ruby provides a specific keyword for restricting method access.",
    "answerDescription": "In Ruby, the 'private' keyword makes a method accessible only within the defining class."
  },
  {
    "id": "ruby_592",
    "question": "Which method is used to call a block inside a method?",
    "options": [
      { "id": "option_1", "text": "yield", "isCorrect": true },
      { "id": "option_2", "text": "call_block", "isCorrect": false },
      { "id": "option_3", "text": "execute", "isCorrect": false },
      { "id": "option_4", "text": "invoke", "isCorrect": false }
    ],
    "hint": "This keyword suggests handing over control to another piece of code.",
    "answerDescription": "The 'yield' keyword in Ruby calls a block passed to the method."
  },
  {
    "id": "ruby_593",
    "question": "What is the difference between 'return' and implicit return in Ruby methods?",
    "options": [
      { "id": "option_1", "text": "Methods return the last evaluated expression unless 'return' is used", "isCorrect": true },
      { "id": "option_2", "text": "Both return values, but 'return' is faster", "isCorrect": false },
      { "id": "option_3", "text": "'return' is required for returning values", "isCorrect": false },
      { "id": "option_4", "text": "'return' is used only in lambdas", "isCorrect": false }
    ],
    "hint": "Ruby methods automatically return the last expression evaluated.",
    "answerDescription": "In Ruby, methods return the last evaluated expression implicitly unless 'return' is used explicitly."
  },
  {
    "id": "ruby_594",
    "question": "What does the double splat (**) operator do in method parameters?",
    "options": [
      { "id": "option_1", "text": "It collects keyword arguments into a hash", "isCorrect": true },
      { "id": "option_2", "text": "It raises a number to a power", "isCorrect": false },
      { "id": "option_3", "text": "It multiplies all arguments", "isCorrect": false },
      { "id": "option_4", "text": "It spreads an array into multiple arguments", "isCorrect": false }
    ],
    "hint": "This operator is useful for working with named parameters dynamically.",
    "answerDescription": "The double splat (**) collects keyword arguments into a hash when passed to a method."
  },  {
    "id": "ruby_595",
    "question": "Which keyword is used to define a class in Ruby?",
    "options": [
      { "id": "option_1", "text": "struct", "isCorrect": false },
      { "id": "option_2", "text": "class", "isCorrect": true },
      { "id": "option_3", "text": "module", "isCorrect": false },
      { "id": "option_4", "text": "defclass", "isCorrect": false }
    ],
    "hint": "This keyword is used to define object templates in Ruby.",
    "answerDescription": "The 'class' keyword is used to define a class in Ruby."
  },
  {
    "id": "ruby_596",
    "question": "How do you create an instance of a class in Ruby?",
    "options": [
      { "id": "option_1", "text": "MyClass.create()", "isCorrect": false },
      { "id": "option_2", "text": "MyClass.new", "isCorrect": true },
      { "id": "option_3", "text": "MyClass()", "isCorrect": false },
      { "id": "option_4", "text": "new MyClass", "isCorrect": false }
    ],
    "hint": "The method used is a constructor method.",
    "answerDescription": "In Ruby, the '.new' method is used to create an instance of a class."
  },
  {
    "id": "ruby_597",
    "question": "Which method is called automatically when an object is instantiated?",
    "options": [
      { "id": "option_1", "text": "initialize_new", "isCorrect": false },
      { "id": "option_2", "text": "initialize", "isCorrect": true },
      { "id": "option_3", "text": "constructor", "isCorrect": false },
      { "id": "option_4", "text": "setup", "isCorrect": false }
    ],
    "hint": "This method initializes instance variables when an object is created.",
    "answerDescription": "The 'initialize' method is automatically called when an object is created in Ruby."
  },
  {
    "id": "ruby_598",
    "question": "What is the correct way to define a getter method in Ruby?",
    "options": [
      { "id": "option_1", "text": "get :attribute", "isCorrect": false },
      { "id": "option_2", "text": "attr_reader :attribute", "isCorrect": true },
      { "id": "option_3", "text": "read :attribute", "isCorrect": false },
      { "id": "option_4", "text": "getter :attribute", "isCorrect": false }
    ],
    "hint": "This method allows reading an instance variable without explicitly defining a method.",
    "answerDescription": "The 'attr_reader' method in Ruby creates a getter method for an instance variable."
  },
  {
    "id": "ruby_599",
    "question": "Which method is used to check if an object is an instance of a specific class?",
    "options": [
      { "id": "option_1", "text": "is_type?", "isCorrect": false },
      { "id": "option_2", "text": "is_a?", "isCorrect": true },
      { "id": "option_3", "text": "typeof?", "isCorrect": false },
      { "id": "option_4", "text": "instance_type?", "isCorrect": false }
    ],
    "hint": "This method checks the object's ancestry.",
    "answerDescription": "The 'is_a?' method checks if an object is an instance of a specific class or subclass."
  },
  {
    "id": "ruby_600",
    "question": "Which method is used to check if an object responds to a method?",
    "options": [
      { "id": "option_1", "text": "has_method?", "isCorrect": false },
      { "id": "option_2", "text": "method_exists?", "isCorrect": false },
      { "id": "option_3", "text": "respond_to?", "isCorrect": true },
      { "id": "option_4", "text": "can_invoke?", "isCorrect": false }
    ],
    "hint": "This method checks if an object can handle a given method call.",
    "answerDescription": "The 'respond_to?' method in Ruby determines whether an object can respond to a specific method."
  },
  {
    "id": "ruby_601",
    "question": "Which keyword is used to define inheritance in Ruby?",
    "options": [
      { "id": "option_1", "text": "inherits", "isCorrect": false },
      { "id": "option_2", "text": "<", "isCorrect": true },
      { "id": "option_3", "text": "extends", "isCorrect": false },
      { "id": "option_4", "text": "super", "isCorrect": false }
    ],
    "hint": "This operator is placed between two class names to establish inheritance.",
    "answerDescription": "In Ruby, inheritance is defined using the '<' symbol between the subclass and superclass."
  },
  {
    "id": "ruby_602",
    "question": "What does the 'super' keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Calls a method from the parent class", "isCorrect": false },
      { "id": "option_2", "text": "Calls the superclass method with the same name", "isCorrect": true },
      { "id": "option_3", "text": "Creates a new class instance", "isCorrect": false },
      { "id": "option_4", "text": "Refers to the top-level class", "isCorrect": false }
    ],
    "hint": "This keyword allows accessing overridden methods in a parent class.",
    "answerDescription": "The 'super' keyword calls the method of the same name from the parent class."
  },
  {
    "id": "ruby_603",
    "question": "Which module provides mixin functionality in Ruby?",
    "options": [
      { "id": "option_1", "text": "IncludeModule", "isCorrect": false },
      { "id": "option_2", "text": "Module", "isCorrect": true },
      { "id": "option_3", "text": "MixinModule", "isCorrect": false },
      { "id": "option_4", "text": "ExtendModule", "isCorrect": false }
    ],
    "hint": "Mixins allow classes to share behaviors without inheritance.",
    "answerDescription": "In Ruby, modules provide mixin functionality, allowing methods to be included in classes."
  },
  {
    "id": "ruby_604",
    "question": "What is the purpose of the 'extend' method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Includes instance methods from a module", "isCorrect": false },
      { "id": "option_2", "text": "Adds module methods to a single object", "isCorrect": true },
      { "id": "option_3", "text": "Creates a subclass", "isCorrect": false },
      { "id": "option_4", "text": "Modifies an existing class", "isCorrect": false }
    ],
    "hint": "This method makes module methods available on a single instance.",
    "answerDescription": "The 'extend' method in Ruby adds module methods to a specific object instead of a class."
  },
  {
    "id": "ruby_605",
    "question": "What does `Object#send` do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Sends data to a server", "isCorrect": false },
      { "id": "option_2", "text": "Creates a new process", "isCorrect": false },
      { "id": "option_3", "text": "Raises an exception", "isCorrect": false },
      { "id": "option_4", "text": "Invokes a method dynamically by name", "isCorrect": true }
    ],
    "hint": "It is used to call a method using its name as a string or symbol.",
    "answerDescription": "`Object#send` dynamically invokes a method by its name."
  },
  {
    "id": "ruby_606",
    "question": "What will be the return value of a method if there is no explicit return statement?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": false },
      { "id": "option_2", "text": "0", "isCorrect": false },
      { "id": "option_3", "text": "The last evaluated expression", "isCorrect": true },
      { "id": "option_4", "text": "An error", "isCorrect": false }
    ],
    "hint": "Ruby implicitly returns the result of the last executed expression.",
    "answerDescription": "In Ruby, if there is no explicit return statement, the method returns the last evaluated expression."
  },
  {
    "id": "ruby_607",
    "question": "How do you specify default values for method parameters in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using square brackets", "isCorrect": false },
      { "id": "option_2", "text": "Using curly braces", "isCorrect": false },
      { "id": "option_3", "text": "Using the equals sign", "isCorrect": true },
      { "id": "option_4", "text": "Using a colon", "isCorrect": false }
    ],
    "hint": "The syntax is similar to assigning a variable a default value.",
    "answerDescription": "In Ruby, default values for parameters are set using the equals sign (e.g., `def my_method(param = 10)`)."
  },
  {
    "id": "ruby_608",
    "question": "Which method is used to determine the number of parameters a method accepts?",
    "options": [
      { "id": "option_1", "text": "num_params", "isCorrect": false },
      { "id": "option_2", "text": "args_count", "isCorrect": false },
      { "id": "option_3", "text": "arity", "isCorrect": true },
      { "id": "option_4", "text": "param_length", "isCorrect": false }
    ],
    "hint": "This method name is derived from a mathematical term related to functions.",
    "answerDescription": "The 'arity' method in Ruby returns the number of arguments a method accepts."
  },
  {
    "id": "ruby_609",
    "question": "What is the correct way to call a method dynamically using a symbol in Ruby?",
    "options": [
      { "id": "option_1", "text": "call_method(:method_name)", "isCorrect": false },
      { "id": "option_2", "text": "invoke(:method_name)", "isCorrect": false },
      { "id": "option_3", "text": "send(:method_name)", "isCorrect": true },
      { "id": "option_4", "text": "execute(:method_name)", "isCorrect": false }
    ],
    "hint": "This method allows you to call a method by passing its name as a symbol.",
    "answerDescription": "The 'send' method in Ruby is used to call a method dynamically using a symbol."
  },
  {
    "id": "ruby_610",
    "question": "Which keyword is used to exit a method early in Ruby?",
    "options": [
      { "id": "option_1", "text": "stop", "isCorrect": false },
      { "id": "option_2", "text": "break", "isCorrect": false },
      { "id": "option_3", "text": "return", "isCorrect": true },
      { "id": "option_4", "text": "exit", "isCorrect": false }
    ],
    "hint": "This keyword is commonly used to specify an explicit output of a method.",
    "answerDescription": "In Ruby, the 'return' keyword is used to exit a method early and provide a return value."
  },
  {
    "id": "ruby_611",
    "question": "Which method can be used to check if an object responds to a specific method?",
    "options": [
      { "id": "option_1", "text": "can_call?", "isCorrect": false },
      { "id": "option_2", "text": "has_method?", "isCorrect": false },
      { "id": "option_3", "text": "respond_to?", "isCorrect": true },
      { "id": "option_4", "text": "method_exists?", "isCorrect": false }
    ],
    "hint": "This method checks if an object can respond to a given method.",
    "answerDescription": "The 'respond_to?' method in Ruby checks if an object has a method with a given name."
  },
  {
    "id": "ruby_612",
    "question": "What does the `yield` keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Stops execution of a method", "isCorrect": false },
      { "id": "option_2", "text": "Returns a value from a method", "isCorrect": false },
      { "id": "option_3", "text": "Passes control to a block", "isCorrect": true },
      { "id": "option_4", "text": "Creates a lambda function", "isCorrect": false }
    ],
    "hint": "This keyword is used to pass execution to a block within a method.",
    "answerDescription": "In Ruby, the 'yield' keyword is used to execute a block passed to a method."
  },
  {
    "id": "ruby_613",
    "question": "How can you define an anonymous function in Ruby?",
    "options": [
      { "id": "option_1", "text": "def anonymous()", "isCorrect": false },
      { "id": "option_2", "text": "lambda { }", "isCorrect": false },
      { "id": "option_3", "text": "-> {}", "isCorrect": true },
      { "id": "option_4", "text": "func() {}", "isCorrect": false }
    ],
    "hint": "This syntax uses an arrow (->) to define an anonymous function.",
    "answerDescription": "In Ruby, anonymous functions can be defined using the '-> {}' lambda syntax."
  },
  {
    "id": "ruby_614",
    "question": "Which method is used to retrieve a list of methods available for an object?",
    "options": [
      { "id": "option_1", "text": "get_methods", "isCorrect": false },
      { "id": "option_2", "text": "object_methods", "isCorrect": false },
      { "id": "option_3", "text": "methods", "isCorrect": true },
      { "id": "option_4", "text": "fetch_methods", "isCorrect": false }
    ],
    "hint": "This method is commonly used for introspection.",
    "answerDescription": "In Ruby, the 'methods' method returns an array of all available methods for an object."
  },  {
    "id": "ruby_615",
    "question": "Which keyword is used to define a block parameter in a method?",
    "options": [
      { "id": "option_1", "text": "yield", "isCorrect": false },
      { "id": "option_2", "text": "call", "isCorrect": false },
      { "id": "option_3", "text": "return", "isCorrect": false },
      { "id": "option_4", "text": "&block", "isCorrect": true }
    ],
    "hint": "A special symbol is used before the parameter name to indicate a block.",
    "answerDescription": "In Ruby, the '&block' parameter is used to define a block parameter in a method."
  },
  {
    "id": "ruby_616",
    "question": "How can you return multiple values from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using an array", "isCorrect": false },
      { "id": "option_2", "text": "Using a hash", "isCorrect": false },
      { "id": "option_3", "text": "Using a string", "isCorrect": false },
      { "id": "option_4", "text": "Using comma-separated values", "isCorrect": true }
    ],
    "hint": "Ruby methods can return multiple values without needing an array.",
    "answerDescription": "In Ruby, multiple values can be returned using comma-separated values, which are returned as an array."
  },
  {
    "id": "ruby_617",
    "question": "What is the purpose of the `super` keyword in a method?",
    "options": [
      { "id": "option_1", "text": "To define a superclass", "isCorrect": false },
      { "id": "option_2", "text": "To create a new method", "isCorrect": false },
      { "id": "option_3", "text": "To call a block", "isCorrect": false },
      { "id": "option_4", "text": "To call the parent class method", "isCorrect": true }
    ],
    "hint": "This keyword is used to invoke a method from a parent class.",
    "answerDescription": "The 'super' keyword in Ruby is used to call a method of the same name from the parent class."
  },
  {
    "id": "ruby_618",
    "question": "Which method converts a symbol to a string in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_sym", "isCorrect": false },
      { "id": "option_2", "text": "symbolize", "isCorrect": false },
      { "id": "option_3", "text": "to_char", "isCorrect": false },
      { "id": "option_4", "text": "to_s", "isCorrect": true }
    ],
    "hint": "The method name starts with 'to_' and is commonly used for conversion.",
    "answerDescription": "The 'to_s' method in Ruby converts a symbol to a string."
  },
  {
    "id": "ruby_619",
    "question": "How can you make a method private in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `hide` keyword", "isCorrect": false },
      { "id": "option_2", "text": "Using `restrict` keyword", "isCorrect": false },
      { "id": "option_3", "text": "Using `secure` keyword", "isCorrect": false },
      { "id": "option_4", "text": "Using `private` keyword", "isCorrect": true }
    ],
    "hint": "This keyword is the opposite of 'public'.",
    "answerDescription": "The 'private' keyword in Ruby is used to define private methods that cannot be called outside the class."
  },
  {
    "id": "ruby_620",
    "question": "Which method is used to find the class of an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "typeof", "isCorrect": false },
      { "id": "option_2", "text": "object_type", "isCorrect": false },
      { "id": "option_3", "text": "instanceof", "isCorrect": false },
      { "id": "option_4", "text": "class", "isCorrect": true }
    ],
    "hint": "The method name is the same as a fundamental Ruby construct.",
    "answerDescription": "In Ruby, the 'class' method returns the class of an object."
  },
  {
    "id": "ruby_621",
    "question": "Which method allows a string to be converted to a symbol?",
    "options": [
      { "id": "option_1", "text": "to_string", "isCorrect": false },
      { "id": "option_2", "text": "convert", "isCorrect": false },
      { "id": "option_3", "text": "to_s", "isCorrect": false },
      { "id": "option_4", "text": "to_sym", "isCorrect": true }
    ],
    "hint": "This method starts with 'to_' and converts data types.",
    "answerDescription": "The 'to_sym' method converts a string into a symbol in Ruby."
  },
  {
    "id": "ruby_622",
    "question": "What is the purpose of the `method_missing` method in Ruby?",
    "options": [
      { "id": "option_1", "text": "To define missing parameters", "isCorrect": false },
      { "id": "option_2", "text": "To throw an error on missing methods", "isCorrect": false },
      { "id": "option_3", "text": "To automatically define methods", "isCorrect": false },
      { "id": "option_4", "text": "To handle calls to undefined methods", "isCorrect": true }
    ],
    "hint": "This method is called automatically when an undefined method is invoked.",
    "answerDescription": "In Ruby, 'method_missing' is used to handle calls to undefined methods dynamically."
  },
  {
    "id": "ruby_623",
    "question": "What does the `define_method` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates an instance variable", "isCorrect": false },
      { "id": "option_2", "text": "Deletes a method", "isCorrect": false },
      { "id": "option_3", "text": "Checks if a method is defined", "isCorrect": false },
      { "id": "option_4", "text": "Dynamically defines a method", "isCorrect": true }
    ],
    "hint": "This method allows defining methods programmatically at runtime.",
    "answerDescription": "In Ruby, 'define_method' is used to define methods dynamically within a class or module."
  },
  {
    "id": "ruby_624",
    "question": "How can you check if a method is defined on an object?",
    "options": [
      { "id": "option_1", "text": "has_method?", "isCorrect": false },
      { "id": "option_2", "text": "method_exists?", "isCorrect": false },
      { "id": "option_3", "text": "can_call?", "isCorrect": false },
      { "id": "option_4", "text": "defined?", "isCorrect": true }
    ],
    "hint": "This method's name implies it checks for existence.",
    "answerDescription": "In Ruby, the 'defined?' method checks if a given method or variable exists."
  },  {
    "id": "ruby_625",
    "question": "What is the default return value of a Ruby method if no explicit return is specified?",
    "options": [
      { "id": "option_1", "text": "The last evaluated expression", "isCorrect": true },
      { "id": "option_2", "text": "nil", "isCorrect": false },
      { "id": "option_3", "text": "0", "isCorrect": false },
      { "id": "option_4", "text": "An empty string", "isCorrect": false }
    ],
    "hint": "Ruby methods automatically return the value of the final evaluated statement.",
    "answerDescription": "In Ruby, a method returns the last evaluated expression by default if no explicit return is given."
  },
  {
    "id": "ruby_626",
    "question": "What does the `Proc` class in Ruby represent?",
    "options": [
      { "id": "option_1", "text": "A saved block of code", "isCorrect": true },
      { "id": "option_2", "text": "A module", "isCorrect": false },
      { "id": "option_3", "text": "A method call", "isCorrect": false },
      { "id": "option_4", "text": "An exception handler", "isCorrect": false }
    ],
    "hint": "It stores blocks for later execution.",
    "answerDescription": "A `Proc` in Ruby is a saved block of code that can be called later."
  },
  {
    "id": "ruby_627",
    "question": "How do you define a method that accepts variable arguments in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using *args", "isCorrect": true },
      { "id": "option_2", "text": "Using varargs", "isCorrect": false },
      { "id": "option_3", "text": "Using dynamic_parameters", "isCorrect": false },
      { "id": "option_4", "text": "Using params[]", "isCorrect": false }
    ],
    "hint": "Ruby uses a special symbol before the parameter name to collect multiple arguments.",
    "answerDescription": "In Ruby, '*args' allows a method to accept a variable number of arguments."
  },
  {
    "id": "ruby_628",
    "question": "Which method checks if an object responds to a specific method?",
    "options": [
      { "id": "option_1", "text": "respond_to?", "isCorrect": true },
      { "id": "option_2", "text": "can_invoke?", "isCorrect": false },
      { "id": "option_3", "text": "is_callable?", "isCorrect": false },
      { "id": "option_4", "text": "supports_method?", "isCorrect": false }
    ],
    "hint": "This method asks whether an object is capable of handling a method call.",
    "answerDescription": "The 'respond_to?' method in Ruby checks if an object can respond to a given method."
  },
  {
    "id": "ruby_629",
    "question": "Which Ruby keyword is used to return a value from a method explicitly?",
    "options": [
      { "id": "option_1", "text": "return", "isCorrect": true },
      { "id": "option_2", "text": "exit", "isCorrect": false },
      { "id": "option_3", "text": "yield", "isCorrect": false },
      { "id": "option_4", "text": "break", "isCorrect": false }
    ],
    "hint": "This keyword forces a method to end and send back a value.",
    "answerDescription": "In Ruby, the 'return' keyword explicitly specifies the value a method should return."
  },
  {
    "id": "ruby_630",
    "question": "Which method is used to get a list of an object's methods?",
    "options": [
      { "id": "option_1", "text": "methods", "isCorrect": true },
      { "id": "option_2", "text": "all_methods", "isCorrect": false },
      { "id": "option_3", "text": "get_methods", "isCorrect": false },
      { "id": "option_4", "text": "list_methods", "isCorrect": false }
    ],
    "hint": "The method name is self-explanatory and exists on all objects.",
    "answerDescription": "In Ruby, the 'methods' method returns an array of all methods available to an object."
  },
  {
    "id": "ruby_631",
    "question": "How do you define a method inside a class in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the 'def' keyword inside the class body", "isCorrect": true },
      { "id": "option_2", "text": "Using the 'class' keyword inside the method", "isCorrect": false },
      { "id": "option_3", "text": "Using 'method' keyword", "isCorrect": false },
      { "id": "option_4", "text": "Using 'define'", "isCorrect": false }
    ],
    "hint": "Ruby method definitions use a specific keyword starting with 'd'.",
    "answerDescription": "In Ruby, you define a method inside a class using the 'def' keyword."
  },
  {
    "id": "ruby_632",
    "question": "What is the purpose of the `yield` keyword in a method?",
    "options": [
      { "id": "option_1", "text": "To call a block passed to the method", "isCorrect": true },
      { "id": "option_2", "text": "To stop method execution", "isCorrect": false },
      { "id": "option_3", "text": "To return a value", "isCorrect": false },
      { "id": "option_4", "text": "To define a method", "isCorrect": false }
    ],
    "hint": "This keyword helps execute code blocks passed to methods.",
    "answerDescription": "The 'yield' keyword in Ruby is used to call a block that is passed to the method."
  },
  {
    "id": "ruby_633",
    "question": "How can you call a private method from within the same class?",
    "options": [
      { "id": "option_1", "text": "By calling it directly without an explicit receiver", "isCorrect": true },
      { "id": "option_2", "text": "By using the 'self' keyword", "isCorrect": false },
      { "id": "option_3", "text": "By prefixing the method with '::'", "isCorrect": false },
      { "id": "option_4", "text": "By using 'call_method'", "isCorrect": false }
    ],
    "hint": "Private methods can only be called without an explicit object receiver.",
    "answerDescription": "In Ruby, private methods must be called without an explicit receiver within the same class."
  },
  {
    "id": "ruby_634",
    "question": "Which method allows you to remove a method from an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "remove_method", "isCorrect": true },
      { "id": "option_2", "text": "delete_method", "isCorrect": false },
      { "id": "option_3", "text": "undef_method", "isCorrect": false },
      { "id": "option_4", "text": "clear_method", "isCorrect": false }
    ],
    "hint": "This method is part of Ruby's metaprogramming capabilities.",
    "answerDescription": "The 'remove_method' method in Ruby removes a method from an object's method list."
  },  {
    "id": "ruby_635",
    "question": "What is the purpose of the `super` keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "To call a private method", "isCorrect": false },
      { "id": "option_2", "text": "To invoke the parent class method", "isCorrect": true },
      { "id": "option_3", "text": "To define a method", "isCorrect": false },
      { "id": "option_4", "text": "To override an existing method", "isCorrect": false }
    ],
    "hint": "This keyword is used to call a method from a superclass.",
    "answerDescription": "The 'super' keyword in Ruby is used to invoke a method from the parent class."
  },
  {
    "id": "ruby_636",
    "question": "How do you define a singleton method on an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `singleton_method` keyword", "isCorrect": false },
      { "id": "option_2", "text": "By defining a method on a specific instance", "isCorrect": true },
      { "id": "option_3", "text": "By using `self.method_name`", "isCorrect": false },
      { "id": "option_4", "text": "By calling `define_singleton_method`", "isCorrect": false }
    ],
    "hint": "A singleton method is defined directly on an instance rather than the class.",
    "answerDescription": "In Ruby, a singleton method is defined directly on an instance of an object, making it unique to that instance."
  },
  {
    "id": "ruby_637",
    "question": "Which method is used to remove a method definition from a class?",
    "options": [
      { "id": "option_1", "text": "delete_method", "isCorrect": false },
      { "id": "option_2", "text": "undef_method", "isCorrect": true },
      { "id": "option_3", "text": "remove_method", "isCorrect": false },
      { "id": "option_4", "text": "clear_method", "isCorrect": false }
    ],
    "hint": "This method makes it impossible to call the method in the class hierarchy.",
    "answerDescription": "In Ruby, the 'undef_method' method removes a method definition completely from a class."
  },
  {
    "id": "ruby_638",
    "question": "Which Ruby method is used to execute a block in a method?",
    "options": [
      { "id": "option_1", "text": "call", "isCorrect": false },
      { "id": "option_2", "text": "yield", "isCorrect": true },
      { "id": "option_3", "text": "execute", "isCorrect": false },
      { "id": "option_4", "text": "invoke", "isCorrect": false }
    ],
    "hint": "This keyword allows executing a block passed to a method.",
    "answerDescription": "The 'yield' keyword in Ruby is used to execute a block passed to a method."
  },
  {
    "id": "ruby_639",
    "question": "Which keyword is used to define class-level methods in Ruby?",
    "options": [
      { "id": "option_1", "text": "def_class", "isCorrect": false },
      { "id": "option_2", "text": "self", "isCorrect": true },
      { "id": "option_3", "text": "static", "isCorrect": false },
      { "id": "option_4", "text": "class_method", "isCorrect": false }
    ],
    "hint": "This keyword refers to the class itself when defining methods.",
    "answerDescription": "In Ruby, class-level methods are defined using 'self.method_name' inside the class definition."
  },
  {
    "id": "ruby_640",
    "question": "What does the `method_missing` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Automatically defines missing methods", "isCorrect": false },
      { "id": "option_2", "text": "Handles calls to undefined methods", "isCorrect": true },
      { "id": "option_3", "text": "Raises an error for missing methods", "isCorrect": false },
      { "id": "option_4", "text": "Creates new methods dynamically", "isCorrect": false }
    ],
    "hint": "This method is used in metaprogramming to respond dynamically to missing method calls.",
    "answerDescription": "The 'method_missing' method in Ruby is triggered when an undefined method is called on an object."
  },
  {
    "id": "ruby_641",
    "question": "How do you explicitly specify a block argument in a method definition?",
    "options": [
      { "id": "option_1", "text": "Using *block", "isCorrect": false },
      { "id": "option_2", "text": "Using &block", "isCorrect": true },
      { "id": "option_3", "text": "Using #block", "isCorrect": false },
      { "id": "option_4", "text": "Using => block", "isCorrect": false }
    ],
    "hint": "This symbol is used to indicate a block parameter in method definitions.",
    "answerDescription": "In Ruby, '&block' is used to explicitly specify a block parameter in a method."
  },
  {
    "id": "ruby_642",
    "question": "Which method can be used to dynamically define a new method in Ruby?",
    "options": [
      { "id": "option_1", "text": "add_method", "isCorrect": false },
      { "id": "option_2", "text": "define_method", "isCorrect": true },
      { "id": "option_3", "text": "set_method", "isCorrect": false },
      { "id": "option_4", "text": "create_method", "isCorrect": false }
    ],
    "hint": "This method allows you to define methods dynamically within a class or module.",
    "answerDescription": "The 'define_method' method in Ruby is used to dynamically define a new method."
  },
  {
    "id": "ruby_643",
    "question": "Which method is used to determine if an object has a specific method?",
    "options": [
      { "id": "option_1", "text": "method_exists?", "isCorrect": false },
      { "id": "option_2", "text": "respond_to?", "isCorrect": true },
      { "id": "option_3", "text": "can_call?", "isCorrect": false },
      { "id": "option_4", "text": "has_method?", "isCorrect": false }
    ],
    "hint": "This method checks if an object responds to a particular method.",
    "answerDescription": "The 'respond_to?' method checks if an object has a specific method before calling it."
  },
  {
    "id": "ruby_644",
    "question": "How can you call a method dynamically using its name as a string or symbol?",
    "options": [
      { "id": "option_1", "text": "call_method", "isCorrect": false },
      { "id": "option_2", "text": "send", "isCorrect": true },
      { "id": "option_3", "text": "invoke", "isCorrect": false },
      { "id": "option_4", "text": "execute", "isCorrect": false }
    ],
    "hint": "This method allows invoking a method by passing its name as a string or symbol.",
    "answerDescription": "The 'send' method in Ruby is used to call a method dynamically using its name."
  },  {
    "id": "ruby_645",
    "question": "What does the `define_method` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Removes a method from a class", "isCorrect": false },
      { "id": "option_2", "text": "Calls a method dynamically", "isCorrect": false },
      { "id": "option_3", "text": "Defines a method dynamically", "isCorrect": true },
      { "id": "option_4", "text": "Checks if a method exists in a class", "isCorrect": false }
    ],
    "hint": "This method is useful in metaprogramming for dynamically creating methods.",
    "answerDescription": "The `define_method` method in Ruby allows dynamically defining a method within a class or module."
  },
  {
    "id": "ruby_646",
    "question": "Which of the following is a way to pass a block to a method explicitly?",
    "options": [
      { "id": "option_1", "text": "Using `*block`", "isCorrect": false },
      { "id": "option_2", "text": "Using `#block`", "isCorrect": false },
      { "id": "option_3", "text": "Using `&block`", "isCorrect": true },
      { "id": "option_4", "text": "Using `=> block`", "isCorrect": false }
    ],
    "hint": "This symbol allows converting a block into a Proc object.",
    "answerDescription": "In Ruby, `&block` is used to explicitly pass a block as an argument to a method."
  },
  {
    "id": "ruby_647",
    "question": "What will `method(:foo)` return if `foo` is a defined method?",
    "options": [
      { "id": "option_1", "text": "The method's name as a string", "isCorrect": false },
      { "id": "option_2", "text": "An error if `foo` is undefined", "isCorrect": false },
      { "id": "option_3", "text": "A Method object representing `foo`", "isCorrect": true },
      { "id": "option_4", "text": "The method’s body as a string", "isCorrect": false }
    ],
    "hint": "This method returns an object that allows calling the method dynamically.",
    "answerDescription": "`method(:foo)` returns a Method object that represents the `foo` method and can be called dynamically."
  },
  {
    "id": "ruby_648",
    "question": "Which method is used to invoke a block inside a method?",
    "options": [
      { "id": "option_1", "text": "invoke", "isCorrect": false },
      { "id": "option_2", "text": "call", "isCorrect": false },
      { "id": "option_3", "text": "yield", "isCorrect": true },
      { "id": "option_4", "text": "execute", "isCorrect": false }
    ],
    "hint": "This keyword allows executing a block that was passed to a method.",
    "answerDescription": "The `yield` keyword in Ruby is used to invoke a block passed to a method."
  },
  {
    "id": "ruby_649",
    "question": "Which method is used to check if an object responds to a specific method?",
    "options": [
      { "id": "option_1", "text": "method?", "isCorrect": false },
      { "id": "option_2", "text": "has_method?", "isCorrect": false },
      { "id": "option_3", "text": "respond_to?", "isCorrect": true },
      { "id": "option_4", "text": "method_exists?", "isCorrect": false }
    ],
    "hint": "This method is useful for checking method availability before calling it.",
    "answerDescription": "The `respond_to?` method checks whether an object can respond to a given method before calling it."
  },
  {
    "id": "ruby_650",
    "question": "What is the purpose of `method_missing` in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates a missing method automatically", "isCorrect": false },
      { "id": "option_2", "text": "Removes undefined methods from a class", "isCorrect": false },
      { "id": "option_3", "text": "Handles calls to undefined methods", "isCorrect": true },
      { "id": "option_4", "text": "Finds missing methods in parent classes", "isCorrect": false }
    ],
    "hint": "This method is often used in metaprogramming to handle dynamic method calls.",
    "answerDescription": "The `method_missing` method in Ruby allows handling calls to methods that are not explicitly defined."
  },
  {
    "id": "ruby_651",
    "question": "How can you call a method dynamically using its name?",
    "options": [
      { "id": "option_1", "text": "invoke_method", "isCorrect": false },
      { "id": "option_2", "text": "method_call", "isCorrect": false },
      { "id": "option_3", "text": "send", "isCorrect": true },
      { "id": "option_4", "text": "execute_method", "isCorrect": false }
    ],
    "hint": "This method allows invoking a method by passing its name as a string or symbol.",
    "answerDescription": "The `send` method in Ruby is used to call a method dynamically using its name."
  },
  {
    "id": "ruby_652",
    "question": "Which keyword is used to call a method from the superclass?",
    "options": [
      { "id": "option_1", "text": "parent", "isCorrect": false },
      { "id": "option_2", "text": "inherit", "isCorrect": false },
      { "id": "option_3", "text": "super", "isCorrect": true },
      { "id": "option_4", "text": "base", "isCorrect": false }
    ],
    "hint": "This keyword is used when overriding a method to call its original implementation.",
    "answerDescription": "The `super` keyword in Ruby is used to invoke the parent class’s method."
  },
  {
    "id": "ruby_653",
    "question": "What is the difference between 'include' and 'extend' in Ruby?",
    "options": [
      { "id": "option_1", "text": "'include' adds methods to a class, 'extend' adds instance variables", "isCorrect": false },
      { "id": "option_2", "text": "'include' adds methods at runtime, 'extend' does not", "isCorrect": false },
      { "id": "option_3", "text": "'include' adds instance methods, 'extend' adds class methods", "isCorrect": true },
      { "id": "option_4", "text": "'include' is used for inheritance, 'extend' is for modules", "isCorrect": false }
    ],
    "hint": "One affects instances, the other affects the class itself.",
    "answerDescription": "In Ruby, 'include' adds module methods as instance methods, while 'extend' adds them as class methods."
  },
  {
    "id": "ruby_654",
    "question": "Which Ruby method allows executing code stored in a string?",
    "options": [
      { "id": "option_1", "text": "run", "isCorrect": false },
      { "id": "option_2", "text": "execute", "isCorrect": false },
      { "id": "option_3", "text": "eval", "isCorrect": true },
      { "id": "option_4", "text": "process", "isCorrect": false }
    ],
    "hint": "This method takes a string as input and evaluates it as Ruby code.",
    "answerDescription": "The `eval` method in Ruby executes code stored in a string."
  },  {
    "id": "ruby_655",
    "question": "What is the default return value of a method in Ruby if no explicit return is used?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": false },
      { "id": "option_2", "text": "true", "isCorrect": false },
      { "id": "option_3", "text": "false", "isCorrect": false },
      { "id": "option_4", "text": "The last evaluated expression", "isCorrect": true }
    ],
    "hint": "Ruby methods return the last evaluated expression automatically.",
    "answerDescription": "In Ruby, methods return the last evaluated expression if there is no explicit `return` statement."
  },
  {
    "id": "ruby_656",
    "question": "How do you define a method with variable arguments in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `@args`", "isCorrect": false },
      { "id": "option_2", "text": "Using `#args`", "isCorrect": false },
      { "id": "option_3", "text": "Using `-> args`", "isCorrect": false },
      { "id": "option_4", "text": "Using `*args`", "isCorrect": true }
    ],
    "hint": "This special symbol allows collecting multiple arguments into an array.",
    "answerDescription": "In Ruby, `*args` allows a method to accept a variable number of arguments."
  },
  {
    "id": "ruby_657",
    "question": "Which of these is NOT a valid way to define a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `def method_name`", "isCorrect": false },
      { "id": "option_2", "text": "Using `define_method`", "isCorrect": false },
      { "id": "option_3", "text": "Using `lambda`", "isCorrect": false },
      { "id": "option_4", "text": "Using `method :=`", "isCorrect": true }
    ],
    "hint": "Ruby does not use `:=` for method definitions.",
    "answerDescription": "Ruby does not support `:=` for defining methods; methods are typically defined using `def` or `define_method`."
  },
  {
    "id": "ruby_658",
    "question": "How do you explicitly specify a return value in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Using `exit`", "isCorrect": false },
      { "id": "option_2", "text": "Using `stop`", "isCorrect": false },
      { "id": "option_3", "text": "Using `end`", "isCorrect": false },
      { "id": "option_4", "text": "Using `return`", "isCorrect": true }
    ],
    "hint": "This keyword is used to exit a method and return a value.",
    "answerDescription": "The `return` keyword is used in Ruby to explicitly return a value from a method."
  },
  {
    "id": "ruby_659",
    "question": "What is the purpose of the `proc` method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines a method dynamically", "isCorrect": false },
      { "id": "option_2", "text": "Creates a class dynamically", "isCorrect": false },
      { "id": "option_3", "text": "Checks if a block is given", "isCorrect": false },
      { "id": "option_4", "text": "Creates a Proc object", "isCorrect": true }
    ],
    "hint": "This method is used to create callable objects in Ruby.",
    "answerDescription": "The `proc` method in Ruby is used to create a `Proc` object, which encapsulates a block of code that can be executed later."
  },
  {
    "id": "ruby_660",
    "question": "What happens if a method is called with more arguments than defined parameters?",
    "options": [
      { "id": "option_1", "text": "The extra arguments are ignored", "isCorrect": false },
      { "id": "option_2", "text": "The method executes with default values", "isCorrect": false },
      { "id": "option_3", "text": "The method executes normally", "isCorrect": false },
      { "id": "option_4", "text": "An ArgumentError is raised", "isCorrect": true }
    ],
    "hint": "Ruby enforces argument count matching unless flexible arguments are used.",
    "answerDescription": "If a method receives more arguments than expected, an `ArgumentError` is raised in Ruby."
  },
  {
    "id": "ruby_661",
    "question": "What does the `lambda` keyword create in Ruby?",
    "options": [
      { "id": "option_1", "text": "A method", "isCorrect": false },
      { "id": "option_2", "text": "A symbol", "isCorrect": false },
      { "id": "option_3", "text": "A class", "isCorrect": false },
      { "id": "option_4", "text": "A Proc-like object with strict argument checking", "isCorrect": true }
    ],
    "hint": "This is similar to a `Proc`, but enforces argument checking.",
    "answerDescription": "In Ruby, `lambda` creates a `Proc`-like object but with stricter argument validation."
  },
  {
    "id": "ruby_662",
    "question": "Which method is used to convert a Proc object to a block?",
    "options": [
      { "id": "option_1", "text": "to_proc", "isCorrect": false },
      { "id": "option_2", "text": "call_proc", "isCorrect": false },
      { "id": "option_3", "text": "proc_to_block", "isCorrect": false },
      { "id": "option_4", "text": "& operator", "isCorrect": true }
    ],
    "hint": "A special operator is used to convert a Proc into a block.",
    "answerDescription": "In Ruby, the `&` operator is used to convert a `Proc` object into a block when passing it to a method."
  },
  {
    "id": "ruby_663",
    "question": "Which keyword is used to ensure a method receives a block?",
    "options": [
      { "id": "option_1", "text": "block_required", "isCorrect": false },
      { "id": "option_2", "text": "mandatory_block", "isCorrect": false },
      { "id": "option_3", "text": "has_block?", "isCorrect": false },
      { "id": "option_4", "text": "block_given?", "isCorrect": true }
    ],
    "hint": "This method checks if a block was provided to a method.",
    "answerDescription": "The `block_given?` method in Ruby checks if a block was passed to a method."
  },
  {
    "id": "ruby_664",
    "question": "What is a key difference between a Proc and a Lambda in Ruby?",
    "options": [
      { "id": "option_1", "text": "A Proc enforces argument count strictly", "isCorrect": false },
      { "id": "option_2", "text": "A Lambda does not enforce argument count", "isCorrect": false },
      { "id": "option_3", "text": "A Proc returns like a method call", "isCorrect": false },
      { "id": "option_4", "text": "A Lambda enforces argument count and returns differently", "isCorrect": true }
    ],
    "hint": "One enforces argument count and has a different return behavior.",
    "answerDescription": "Lambdas enforce argument count and return control to the caller, while Procs do not enforce argument count and return from the calling method."
  },
  {
    "id": "ruby_665",
    "question": "How do you return multiple values from a method?",
    "options": [
      { "id": "option_1", "text": "By separating values with commas", "isCorrect": true },
      { "id": "option_2", "text": "Using an array", "isCorrect": false },
      { "id": "option_3", "text": "Returning a string", "isCorrect": false },
      { "id": "option_4", "text": "Using a hash", "isCorrect": false }
    ],
    "hint": "Ruby allows implicit array return when separating values with commas.",
    "answerDescription": "In Ruby, you can return multiple values by separating them with commas, which returns them as an array."
  },
  {
    "id": "ruby_666",
    "question": "What does the `return` keyword do in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Exits the method and returns a value", "isCorrect": true },
      { "id": "option_2", "text": "Ends the script", "isCorrect": false },
      { "id": "option_3", "text": "Skips to the next iteration", "isCorrect": false },
      { "id": "option_4", "text": "Outputs text to the console", "isCorrect": false }
    ],
    "hint": "This keyword is used to exit a method and provide an output.",
    "answerDescription": "The `return` keyword in Ruby is used to exit a method and return a value."
  },
  {
    "id": "ruby_667",
    "question": "How do you define a method with default parameters in Ruby?",
    "options": [
      { "id": "option_1", "text": "def my_method(param = 10)", "isCorrect": true },
      { "id": "option_2", "text": "def my_method(default: 10)", "isCorrect": false },
      { "id": "option_3", "text": "def my_method(param => 10)", "isCorrect": false },
      { "id": "option_4", "text": "def my_method(param <- 10)", "isCorrect": false }
    ],
    "hint": "Use the `=` operator to assign a default value.",
    "answerDescription": "In Ruby, you can set default parameter values using the `=` operator inside method definitions."
  },
  {
    "id": "ruby_668",
    "question": "Which method checks if a block is given to a method?",
    "options": [
      { "id": "option_1", "text": "block_given?", "isCorrect": true },
      { "id": "option_2", "text": "has_block?", "isCorrect": false },
      { "id": "option_3", "text": "block?", "isCorrect": false },
      { "id": "option_4", "text": "check_block", "isCorrect": false }
    ],
    "hint": "This method returns `true` if a block is provided.",
    "answerDescription": "The `block_given?` method in Ruby checks if a block was passed to a method."
  },
  {
    "id": "ruby_669",
    "question": "How can you call a method stored in a variable?",
    "options": [
      { "id": "option_1", "text": "method_variable.call", "isCorrect": true },
      { "id": "option_2", "text": "method_variable.invoke", "isCorrect": false },
      { "id": "option_3", "text": "method_variable.run", "isCorrect": false },
      { "id": "option_4", "text": "method_variable.execute", "isCorrect": false }
    ],
    "hint": "A `Proc` or method object can be executed using a specific method.",
    "answerDescription": "In Ruby, methods stored in variables (like Procs or lambdas) can be called using `.call`."
  },
  {
    "id": "ruby_670",
    "question": "What will `my_method(&block)` do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Convert `block` into a Proc", "isCorrect": true },
      { "id": "option_2", "text": "Execute the block immediately", "isCorrect": false },
      { "id": "option_3", "text": "Check if a block was passed", "isCorrect": false },
      { "id": "option_4", "text": "Return a lambda", "isCorrect": false }
    ],
    "hint": "The `&` operator is used to convert between blocks and Procs.",
    "answerDescription": "Using `&block` in method arguments converts the given block into a `Proc` object."
  },
  {
    "id": "ruby_671",
    "question": "What is the purpose of `define_method` in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates a method dynamically", "isCorrect": true },
      { "id": "option_2", "text": "Checks if a method exists", "isCorrect": false },
      { "id": "option_3", "text": "Deletes a method", "isCorrect": false },
      { "id": "option_4", "text": "Lists all methods", "isCorrect": false }
    ],
    "hint": "This is a metaprogramming feature used to create methods dynamically.",
    "answerDescription": "The `define_method` method allows you to dynamically define methods in Ruby."
  },
  {
    "id": "ruby_672",
    "question": "How do you pass a block explicitly to a method?",
    "options": [
      { "id": "option_1", "text": "Using `&block` in method arguments", "isCorrect": true },
      { "id": "option_2", "text": "Using `#block`", "isCorrect": false },
      { "id": "option_3", "text": "Using `proc` keyword", "isCorrect": false },
      { "id": "option_4", "text": "Using `lambda` keyword", "isCorrect": false }
    ],
    "hint": "The `&` symbol is used to handle blocks in method arguments.",
    "answerDescription": "In Ruby, you use `&block` in method arguments to explicitly pass and handle a block."
  },
  {
    "id": "ruby_673",
    "question": "What happens when you use `return` inside a lambda?",
    "options": [
      { "id": "option_1", "text": "It returns from the lambda only", "isCorrect": true },
      { "id": "option_2", "text": "It returns from the enclosing method", "isCorrect": false },
      { "id": "option_3", "text": "It throws an error", "isCorrect": false },
      { "id": "option_4", "text": "It does nothing", "isCorrect": false }
    ],
    "hint": "Lambdas handle return differently than Procs.",
    "answerDescription": "In Ruby, a `return` inside a lambda only exits the lambda, not the enclosing method."
  },
  {
    "id": "ruby_674",
    "question": "How do you define a one-line method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `def method; code; end`", "isCorrect": true },
      { "id": "option_2", "text": "Using `def method: code`", "isCorrect": false },
      { "id": "option_3", "text": "Using `method { code }`", "isCorrect": false },
      { "id": "option_4", "text": "Using `method do code end`", "isCorrect": false }
    ],
    "hint": "You can define methods in a single line using a semicolon.",
    "answerDescription": "In Ruby, a method can be written in a single line using `def method_name; code; end`."
  },
  {
    "id": "ruby_675",
    "question": "What does the `yield` keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines a new method", "isCorrect": false },
      { "id": "option_2", "text": "Calls a block passed to the method", "isCorrect": true },
      { "id": "option_3", "text": "Stops method execution", "isCorrect": false },
      { "id": "option_4", "text": "Returns nil", "isCorrect": false }
    ],
    "hint": "This keyword executes the block given to a method.",
    "answerDescription": "The `yield` keyword in Ruby executes a block passed to a method."
  },
  {
    "id": "ruby_676",
    "question": "How can you return multiple values from a method?",
    "options": [
      { "id": "option_1", "text": "Using an array", "isCorrect": false },
      { "id": "option_2", "text": "By separating values with commas", "isCorrect": true },
      { "id": "option_3", "text": "By using the `return` keyword multiple times", "isCorrect": false },
      { "id": "option_4", "text": "By calling `return_values` method", "isCorrect": false }
    ],
    "hint": "Ruby methods can return multiple values without explicitly using arrays.",
    "answerDescription": "In Ruby, you can return multiple values from a method by separating them with commas."
  },
  {
    "id": "ruby_677",
    "question": "What is the purpose of the `super` keyword?",
    "options": [
      { "id": "option_1", "text": "It defines a superclass", "isCorrect": false },
      { "id": "option_2", "text": "It calls the parent method", "isCorrect": true },
      { "id": "option_3", "text": "It creates an alias for a method", "isCorrect": false },
      { "id": "option_4", "text": "It generates a new method dynamically", "isCorrect": false }
    ],
    "hint": "This keyword is used in inheritance to call the parent class method.",
    "answerDescription": "The `super` keyword calls a method of the same name from the parent class."
  },
  {
    "id": "ruby_678",
    "question": "How can you create an anonymous function in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `def` without a name", "isCorrect": false },
      { "id": "option_2", "text": "Using `lambda` or `Proc.new`", "isCorrect": true },
      { "id": "option_3", "text": "Using `anon` keyword", "isCorrect": false },
      { "id": "option_4", "text": "Using `function()` syntax", "isCorrect": false }
    ],
    "hint": "Ruby has special constructs for creating functions without names.",
    "answerDescription": "You can create anonymous functions using `lambda` or `Proc.new` in Ruby."
  },
  {
    "id": "ruby_679",
    "question": "What is the difference between a `Proc` and a `lambda`?",
    "options": [
      { "id": "option_1", "text": "Procs are faster", "isCorrect": false },
      { "id": "option_2", "text": "Lambdas check arguments, Procs don’t", "isCorrect": true },
      { "id": "option_3", "text": "Lambdas are objects, Procs are not", "isCorrect": false },
      { "id": "option_4", "text": "Procs are immutable, Lambdas are not", "isCorrect": false }
    ],
    "hint": "One of them enforces argument checking, the other does not.",
    "answerDescription": "Lambdas enforce strict argument checking, while Procs allow flexible arguments."
  },
  {
    "id": "ruby_680",
    "question": "Which method allows you to define a singleton method?",
    "options": [
      { "id": "option_1", "text": "singleton", "isCorrect": false },
      { "id": "option_2", "text": "define_singleton_method", "isCorrect": true },
      { "id": "option_3", "text": "self_method", "isCorrect": false },
      { "id": "option_4", "text": "unique_method", "isCorrect": false }
    ],
    "hint": "This method allows you to add methods to a single instance of an object.",
    "answerDescription": "The `define_singleton_method` method in Ruby allows you to define a method on a single instance of an object."
  },
  {
    "id": "ruby_681",
    "question": "How do you make a method private in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `hide` keyword", "isCorrect": false },
      { "id": "option_2", "text": "Using `private` keyword", "isCorrect": true },
      { "id": "option_3", "text": "Using `method_private` function", "isCorrect": false },
      { "id": "option_4", "text": "Using `restricted` keyword", "isCorrect": false }
    ],
    "hint": "Ruby provides a simple keyword to restrict access to methods.",
    "answerDescription": "In Ruby, you use the `private` keyword to restrict method access to within the class."
  },
  {
    "id": "ruby_682",
    "question": "What is the return value of a method that doesn’t use `return` explicitly?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": false },
      { "id": "option_2", "text": "The last evaluated expression", "isCorrect": true },
      { "id": "option_3", "text": "An empty string", "isCorrect": false },
      { "id": "option_4", "text": "An error occurs", "isCorrect": false }
    ],
    "hint": "Ruby automatically returns the result of the last evaluated statement.",
    "answerDescription": "If no `return` statement is used, a Ruby method returns the last evaluated expression."
  },
  {
    "id": "ruby_683",
    "question": "How can you capture all method arguments into a single variable?",
    "options": [
      { "id": "option_1", "text": "Using brackets `[]`", "isCorrect": false },
      { "id": "option_2", "text": "Using splat operator `*args`", "isCorrect": true },
      { "id": "option_3", "text": "Using `args.capture`", "isCorrect": false },
      { "id": "option_4", "text": "Using `list()` function", "isCorrect": false }
    ],
    "hint": "A special symbol in Ruby can be used to collect multiple arguments.",
    "answerDescription": "In Ruby, the splat operator (`*args`) captures all arguments into a single array."
  },
  {
    "id": "ruby_684",
    "question": "What does the `method_missing` method do?",
    "options": [
      { "id": "option_1", "text": "Handles runtime exceptions", "isCorrect": false },
      { "id": "option_2", "text": "Intercepts calls to undefined methods", "isCorrect": true },
      { "id": "option_3", "text": "Lists all missing methods in a class", "isCorrect": false },
      { "id": "option_4", "text": "Prevents method deletion", "isCorrect": false }
    ],
    "hint": "This method is triggered when calling a method that does not exist.",
    "answerDescription": "The `method_missing` method is used in Ruby to intercept and handle calls to undefined methods dynamically."
  },  {
    "id": "ruby_685",
    "question": "What does the `alias` keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Deletes a method", "isCorrect": false },
      { "id": "option_2", "text": "Creates a private method", "isCorrect": false },
      { "id": "option_3", "text": "Creates an alternative name for a method", "isCorrect": true },
      { "id": "option_4", "text": "Checks if a method exists", "isCorrect": false }
    ],
    "hint": "This keyword allows a method to be called using a different name.",
    "answerDescription": "The `alias` keyword creates an alternative name for an existing method in Ruby."
  },
  {
    "id": "ruby_686",
    "question": "Which method can be used to determine if an object responds to a given method?",
    "options": [
      { "id": "option_1", "text": "method_exists?", "isCorrect": false },
      { "id": "option_2", "text": "check_method", "isCorrect": false },
      { "id": "option_3", "text": "respond_to?", "isCorrect": true },
      { "id": "option_4", "text": "has_method?", "isCorrect": false }
    ],
    "hint": "This method is commonly used before calling a method dynamically.",
    "answerDescription": "The `respond_to?` method checks if an object can respond to a particular method."
  },
  {
    "id": "ruby_687",
    "question": "What happens if you call `super` without parentheses?",
    "options": [
      { "id": "option_1", "text": "It raises an error", "isCorrect": false },
      { "id": "option_2", "text": "It calls the parent method without arguments", "isCorrect": false },
      { "id": "option_3", "text": "It calls the parent method with the same arguments", "isCorrect": true },
      { "id": "option_4", "text": "It calls the child method instead", "isCorrect": false }
    ],
    "hint": "This behavior ensures that method arguments are preserved.",
    "answerDescription": "Calling `super` without parentheses passes the current method’s arguments to the parent method."
  },
  {
    "id": "ruby_688",
    "question": "Which keyword is used to define a block explicitly as a method parameter?",
    "options": [
      { "id": "option_1", "text": "block", "isCorrect": false },
      { "id": "option_2", "text": "proc", "isCorrect": false },
      { "id": "option_3", "text": "&block", "isCorrect": true },
      { "id": "option_4", "text": "@block", "isCorrect": false }
    ],
    "hint": "The ampersand (`&`) is used in Ruby for this purpose.",
    "answerDescription": "Using `&block` in method parameters allows a method to explicitly accept a block."
  },
  {
    "id": "ruby_689",
    "question": "What does the `define_method` function do?",
    "options": [
      { "id": "option_1", "text": "Creates a global method", "isCorrect": false },
      { "id": "option_2", "text": "Deletes a method dynamically", "isCorrect": false },
      { "id": "option_3", "text": "Dynamically defines a method in a class", "isCorrect": true },
      { "id": "option_4", "text": "Overrides a method permanently", "isCorrect": false }
    ],
    "hint": "This method is useful for metaprogramming in Ruby.",
    "answerDescription": "The `define_method` function dynamically creates methods inside a class at runtime."
  },
  {
    "id": "ruby_690",
    "question": "Which method is used to check if an array is empty?",
    "options": [
      { "id": "option_1", "text": "null?", "isCorrect": false },
      { "id": "option_2", "text": "size==0", "isCorrect": false },
      { "id": "option_3", "text": "zero?", "isCorrect": false },
      { "id": "option_4", "text": "empty?", "isCorrect": true }
    ],
    "hint": "This method returns true if an array has no elements.",
    "answerDescription": "The `empty?` method checks if an array has zero elements."
},
{
    "id": "ruby_691",
    "question": "How can you execute a block inside a method?",
    "options": [
      { "id": "option_1", "text": "By calling `call_block`", "isCorrect": false },
      { "id": "option_2", "text": "Using `execute {}`", "isCorrect": false },
      { "id": "option_3", "text": "By using `yield`", "isCorrect": true },
      { "id": "option_4", "text": "By appending `do-end`", "isCorrect": false }
    ],
    "hint": "This keyword allows passing execution control to a block.",
    "answerDescription": "The `yield` keyword executes a block passed to a method."
  },
  {
    "id": "ruby_692",
    "question": "What does the `return` keyword do inside a block?",
    "options": [
      { "id": "option_1", "text": "Exits the block only", "isCorrect": false },
      { "id": "option_2", "text": "Restarts the block", "isCorrect": false },
      { "id": "option_3", "text": "Exits the entire method", "isCorrect": true },
      { "id": "option_4", "text": "Throws an exception", "isCorrect": false }
    ],
    "hint": "This keyword affects the outer method, not just the block.",
    "answerDescription": "Using `return` inside a block exits the enclosing method entirely."
  },
  {
    "id": "ruby_693",
    "question": "Which Ruby method allows converting a symbol to a method call?",
    "options": [
      { "id": "option_1", "text": "call_symbol", "isCorrect": false },
      { "id": "option_2", "text": "symbol_to_method", "isCorrect": false },
      { "id": "option_3", "text": "send", "isCorrect": true },
      { "id": "option_4", "text": "convert_method", "isCorrect": false }
    ],
    "hint": "This method is often used to invoke dynamically named methods.",
    "answerDescription": "The `send` method in Ruby allows calling a method using a symbol or string."
  },
  {
    "id": "ruby_694",
    "question": "How can you make a method return an enumerator?",
    "options": [
      { "id": "option_1", "text": "By using `enumerator_method`", "isCorrect": false },
      { "id": "option_2", "text": "Using `return :enumerate`", "isCorrect": false },
      { "id": "option_3", "text": "By calling `to_enum` or `enum_for`", "isCorrect": true },
      { "id": "option_4", "text": "By defining the method inside `Enumerable` module", "isCorrect": false }
    ],
    "hint": "There are built-in Ruby methods to convert iterators into enumerators.",
    "answerDescription": "Using `to_enum` or `enum_for` allows a method to return an enumerator instead of executing immediately."
  },  {
    "id": "ruby_695",
    "question": "What is the purpose of the `lambda` keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines a block of code with optional parameters", "isCorrect": false },
      { "id": "option_2", "text": "Creates an instance of a class", "isCorrect": false },
      { "id": "option_3", "text": "Executes a block immediately", "isCorrect": false },
      { "id": "option_4", "text": "Defines an anonymous function", "isCorrect": true }
    ],
    "hint": "This keyword allows defining short functions inline.",
    "answerDescription": "The `lambda` keyword in Ruby is used to define an anonymous function."
  },
  {
    "id": "ruby_696",
    "question": "Which method is used to convert a block into a Proc object?",
    "options": [
      { "id": "option_1", "text": "block_to_proc", "isCorrect": false },
      { "id": "option_2", "text": "convert_block", "isCorrect": false },
      { "id": "option_3", "text": "capture_block", "isCorrect": false },
      { "id": "option_4", "text": "Proc.new", "isCorrect": true }
    ],
    "hint": "This method is commonly used to create a Proc from a block.",
    "answerDescription": "Using `Proc.new` allows capturing a block and converting it into a Proc object."
  },
  {
    "id": "ruby_697",
    "question": "How do you explicitly return a value from a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Using the `exit` keyword", "isCorrect": false },
      { "id": "option_2", "text": "Assigning the value to `@return`", "isCorrect": false },
      { "id": "option_3", "text": "Calling `break`", "isCorrect": false },
      { "id": "option_4", "text": "Using the `return` keyword", "isCorrect": true }
    ],
    "hint": "This keyword is optional in Ruby but can be used for clarity.",
    "answerDescription": "The `return` keyword is used in Ruby to explicitly return a value from a method."
  },
  {
    "id": "ruby_698",
    "question": "What does the `method_missing` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Forces a method to be redefined", "isCorrect": false },
      { "id": "option_2", "text": "Lists all undefined methods", "isCorrect": false },
      { "id": "option_3", "text": "Generates method documentation dynamically", "isCorrect": false },
      { "id": "option_4", "text": "Handles calls to undefined methods", "isCorrect": true }
    ],
    "hint": "This method is useful for handling undefined method calls dynamically.",
    "answerDescription": "The `method_missing` method intercepts calls to undefined methods and allows custom handling."
  },
  {
    "id": "ruby_699",
    "question": "Which method is used to check if a method is defined in an object?",
    "options": [
      { "id": "option_1", "text": "has_method?", "isCorrect": false },
      { "id": "option_2", "text": "method_exists?", "isCorrect": false },
      { "id": "option_3", "text": "can_invoke?", "isCorrect": false },
      { "id": "option_4", "text": "defined?", "isCorrect": true }
    ],
    "hint": "This method is commonly used for checking variable and method existence.",
    "answerDescription": "The `defined?` method checks whether a method, variable, or constant exists in the current context."
  },
  {
    "id": "ruby_700",
    "question": "How do you create a method that accepts a variable number of arguments?",
    "options": [
      { "id": "option_1", "text": "Using the `varargs` keyword", "isCorrect": false },
      { "id": "option_2", "text": "Declaring parameters with brackets", "isCorrect": false },
      { "id": "option_3", "text": "By defining an array parameter", "isCorrect": false },
      { "id": "option_4", "text": "Using the splat operator `*`", "isCorrect": true }
    ],
    "hint": "This operator is used to collect multiple arguments into an array.",
    "answerDescription": "The splat operator `*` allows a method to accept a variable number of arguments."
  },
  {
    "id": "ruby_701",
    "question": "Which method allows you to call a method dynamically using its name?",
    "options": [
      { "id": "option_1", "text": "dynamic_call", "isCorrect": false },
      { "id": "option_2", "text": "invoke_method", "isCorrect": false },
      { "id": "option_3", "text": "method_call", "isCorrect": false },
      { "id": "option_4", "text": "send", "isCorrect": true }
    ],
    "hint": "This method allows calling methods based on strings or symbols.",
    "answerDescription": "The `send` method allows dynamically invoking a method by passing its name as a symbol or string."
  },
  {
    "id": "ruby_702",
    "question": "What happens when a method is defined with `private` visibility?",
    "options": [
      { "id": "option_1", "text": "It cannot be called", "isCorrect": false },
      { "id": "option_2", "text": "It is only accessible to subclasses", "isCorrect": false },
      { "id": "option_3", "text": "It can only be called with `self`", "isCorrect": false },
      { "id": "option_4", "text": "It can only be called within the class", "isCorrect": true }
    ],
    "hint": "Private methods cannot be called with an explicit receiver.",
    "answerDescription": "A `private` method can only be called within the class and not on an instance explicitly."
  },
  {
    "id": "ruby_703",
    "question": "Which method is used to define a singleton method for a specific object?",
    "options": [
      { "id": "option_1", "text": "define_singleton_method", "isCorrect": false },
      { "id": "option_2", "text": "single_method", "isCorrect": false },
      { "id": "option_3", "text": "unique_method", "isCorrect": false },
      { "id": "option_4", "text": "define_method", "isCorrect": true }
    ],
    "hint": "This method dynamically defines methods for a single object.",
    "answerDescription": "The `define_method` function allows defining singleton methods on a specific object."
  },
  {
    "id": "ruby_704",
    "question": "What is the difference between `lambda` and `Proc.new` in Ruby?",
    "options": [
      { "id": "option_1", "text": "They are identical in functionality", "isCorrect": false },
      { "id": "option_2", "text": "Lambda allows only one argument type", "isCorrect": false },
      { "id": "option_3", "text": "Proc.new checks arity strictly", "isCorrect": false },
      { "id": "option_4", "text": "Lambda enforces argument count, while Proc.new does not", "isCorrect": true }
    ],
    "hint": "One of these enforces strict argument count.",
    "answerDescription": "A `lambda` enforces the number of arguments passed, while `Proc.new` does not."
  }, 
  {
    "id": "ruby_1924",
    "question": "How do you call a method dynamically using a string?",
    "options": [
      { "id": "option_1", "text": "Using `send`", "isCorrect": true },
      { "id": "option_2", "text": "With `call_method`", "isCorrect": false },
      { "id": "option_3", "text": "Using `invoke`", "isCorrect": false },
      { "id": "option_4", "text": "With `method_name`", "isCorrect": false }
    ],
    "hint": "This method allows calling a method by name dynamically.",
    "answerDescription": "The `send` method in Ruby allows calling a method dynamically using a string or symbol."
  },
  {
    "id": "ruby_706",
    "question": "Which method is used to find the name of a method as a symbol?",
    "options": [
      { "id": "option_1", "text": "method", "isCorrect": true },
      { "id": "option_2", "text": "get_method", "isCorrect": false },
      { "id": "option_3", "text": "find_method", "isCorrect": false },
      { "id": "option_4", "text": "method_name", "isCorrect": false }
    ],
    "hint": "This method returns a Method object for a given name.",
    "answerDescription": "The `method` method returns a Method object representing the method with the given name."
  },
  {
    "id": "ruby_707",
    "question": "What does the `super` keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Calls the method of the same name in the parent class", "isCorrect": true },
      { "id": "option_2", "text": "Calls the superclass constructor", "isCorrect": false },
      { "id": "option_3", "text": "Creates a new instance of the superclass", "isCorrect": false },
      { "id": "option_4", "text": "Defines a superclass", "isCorrect": false }
    ],
    "hint": "This keyword is used in subclass methods.",
    "answerDescription": "The `super` keyword invokes the method of the same name in the superclass."
  },
  {
    "id": "ruby_708",
    "question": "What is returned if a Ruby method does not use an explicit `return` statement?",
    "options": [
      { "id": "option_1", "text": "The value of the last executed expression", "isCorrect": true },
      { "id": "option_2", "text": "Always nil", "isCorrect": false },
      { "id": "option_3", "text": "A method object", "isCorrect": false },
      { "id": "option_4", "text": "An empty string", "isCorrect": false }
    ],
    "hint": "Ruby methods implicitly return something if no `return` is given.",
    "answerDescription": "Ruby methods return the result of the last executed expression if `return` is not used."
  },
  {
    "id": "ruby_709",
    "question": "How do you define a singleton method for an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `def object.method_name`", "isCorrect": true },
      { "id": "option_2", "text": "Using `def_singleton`", "isCorrect": false },
      { "id": "option_3", "text": "Using `define_method`", "isCorrect": false },
      { "id": "option_4", "text": "Using `singleton_method`", "isCorrect": false }
    ],
    "hint": "This method is defined directly on an instance.",
    "answerDescription": "Singleton methods are defined using `def object.method_name` syntax."
  },
  {
    "id": "ruby_710",
    "question": "Which operator is used to define an alias for a method?",
    "options": [
      { "id": "option_1", "text": "alias", "isCorrect": true },
      { "id": "option_2", "text": "method_alias", "isCorrect": false },
      { "id": "option_3", "text": "rename", "isCorrect": false },
      { "id": "option_4", "text": "alias_method", "isCorrect": false }
    ],
    "hint": "Ruby has a built-in keyword for method aliases.",
    "answerDescription": "The `alias` keyword creates a new name for an existing method."
  }, 
  {
    "id": "ruby_711",
    "question": "What does the `alias_method` function do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates a new name for an existing method", "isCorrect": true },
      { "id": "option_2", "text": "Copies the method implementation to another name", "isCorrect": false },
      { "id": "option_3", "text": "Deletes a method", "isCorrect": false },
      { "id": "option_4", "text": "Overwrites the original method", "isCorrect": false }
    ],
    "hint": "This function allows renaming a method without modifying its implementation.",
    "answerDescription": "The `alias_method` function creates a new alias for an existing method without modifying its behavior."
  },
  {
    "id": "ruby_712",
    "question": "Which method allows dynamically defining a new method at runtime?",
    "options": [
      { "id": "option_1", "text": "define_method", "isCorrect": true },
      { "id": "option_2", "text": "dynamic_method", "isCorrect": false },
      { "id": "option_3", "text": "set_method", "isCorrect": false },
      { "id": "option_4", "text": "method_add", "isCorrect": false }
    ],
    "hint": "This method is often used in metaprogramming to create flexible code.",
    "answerDescription": "The `define_method` method allows creating a method dynamically at runtime."
  },
  {
    "id": "ruby_713",
    "question": "What does the `method_missing` function do?",
    "options": [
      { "id": "option_1", "text": "Handles calls to undefined methods", "isCorrect": true },
      { "id": "option_2", "text": "Raises an error when a method is missing", "isCorrect": false },
      { "id": "option_3", "text": "Returns nil for undefined methods", "isCorrect": false },
      { "id": "option_4", "text": "Creates a new method dynamically", "isCorrect": false }
    ],
    "hint": "This method is used in metaprogramming to catch undefined method calls.",
    "answerDescription": "The `method_missing` method intercepts calls to undefined methods and allows custom handling."
  },
  {
    "id": "ruby_714",
    "question": "Which method allows a method to be called without creating an object?",
    "options": [
      { "id": "option_1", "text": "self.method_name", "isCorrect": true },
      { "id": "option_2", "text": "call_static", "isCorrect": false },
      { "id": "option_3", "text": "global_method", "isCorrect": false },
      { "id": "option_4", "text": "class_method", "isCorrect": false }
    ],
    "hint": "This method is defined at the class level.",
    "answerDescription": "Class methods are called on a class using `self.method_name` inside the class definition."
  },
  {
    "id": "ruby_715",
    "question": "What does the `define_method` function do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates a method dynamically", "isCorrect": true },
      { "id": "option_2", "text": "Defines a constant", "isCorrect": false },
      { "id": "option_3", "text": "Declares a class method", "isCorrect": false },
      { "id": "option_4", "text": "Creates a method alias", "isCorrect": false }
    ],
    "hint": "This method is often used in metaprogramming.",
    "answerDescription": "The `define_method` function creates a method dynamically inside a class or module."
  },
  {
    "id": "ruby_716",
    "question": "Which method checks if an object responds to a given method?",
    "options": [
      { "id": "option_1", "text": "respond_to?", "isCorrect": true },
      { "id": "option_2", "text": "has_method?", "isCorrect": false },
      { "id": "option_3", "text": "method_defined?", "isCorrect": false },
      { "id": "option_4", "text": "include_method?", "isCorrect": false }
    ],
    "hint": "This method returns true or false depending on method availability.",
    "answerDescription": "The `respond_to?` method checks if an object has a specific method available."
  },
  {
    "id": "ruby_717",
    "question": "What does the `prepend` keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Adds a module before the superclass in the method lookup chain", "isCorrect": true },
      { "id": "option_2", "text": "Defines a method at the beginning of a class", "isCorrect": false },
      { "id": "option_3", "text": "Adds a method to the start of an array", "isCorrect": false },
      { "id": "option_4", "text": "Overrides a method permanently", "isCorrect": false }
    ],
    "hint": "This affects the method lookup order.",
    "answerDescription": "The `prepend` keyword includes a module before the class itself in the method lookup hierarchy."
  },
  {
    "id": "ruby_718",
    "question": "Which method is used to retrieve all instance methods of a class?",
    "options": [
      { "id": "option_1", "text": "instance_methods", "isCorrect": true },
      { "id": "option_2", "text": "get_methods", "isCorrect": false },
      { "id": "option_3", "text": "methods_list", "isCorrect": false },
      { "id": "option_4", "text": "fetch_methods", "isCorrect": false }
    ],
    "hint": "It returns an array of method names.",
    "answerDescription": "The `instance_methods` method returns a list of all instance methods available in a class."
  },
  {
    "id": "ruby_719",
    "question": "What happens if a method is defined with the same name as an existing method?",
    "options": [
      { "id": "option_1", "text": "The new method overrides the existing one", "isCorrect": true },
      { "id": "option_2", "text": "An error occurs", "isCorrect": false },
      { "id": "option_3", "text": "Ruby creates an alias", "isCorrect": false },
      { "id": "option_4", "text": "The new method is ignored", "isCorrect": false }
    ],
    "hint": "Ruby allows method redefinition.",
    "answerDescription": "In Ruby, defining a method with an existing name overrides the previous method definition."
  },
  {
    "id": "ruby_720",
    "question": "How do you define a private method in Ruby?",
    "options": [
      { "id": "option_1", "text": "By using the `private` keyword before method definition", "isCorrect": true },
      { "id": "option_2", "text": "By prefixing method name with an underscore", "isCorrect": false },
      { "id": "option_3", "text": "By using `hide_method`", "isCorrect": false },
      { "id": "option_4", "text": "By using `protected`", "isCorrect": false }
    ],
    "hint": "This keyword restricts method access within a class.",
    "answerDescription": "The `private` keyword makes methods callable only within the defining class."
  },
  {
    "id": "ruby_721",
    "question": "What is the purpose of the `tap` method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Executes a block and returns nil", "isCorrect": false },
      { "id": "option_2", "text": "Executes a block and returns the object itself", "isCorrect": true },
      { "id": "option_3", "text": "Calls a method within a class", "isCorrect": false },
      { "id": "option_4", "text": "Transforms an object", "isCorrect": false }
    ],
    "hint": "It is useful for debugging and chaining methods.",
    "answerDescription": "The `tap` method executes a block and then returns the object itself, making it useful for method chaining."
  },
  {
    "id": "ruby_722",
    "question": "Which method can be used to alias an existing method in Ruby?",
    "options": [
      { "id": "option_1", "text": "method_alias", "isCorrect": false },
      { "id": "option_2", "text": "alias", "isCorrect": true },
      { "id": "option_3", "text": "copy_method", "isCorrect": false },
      { "id": "option_4", "text": "rename_method", "isCorrect": false }
    ],
    "hint": "This keyword creates a new name for an existing method.",
    "answerDescription": "The `alias` keyword in Ruby allows creating an alternative name for an existing method."
  },
  {
    "id": "ruby_723",
    "question": "What is the main difference between `proc` and `lambda` in Ruby?",
    "options": [
      { "id": "option_1", "text": "They are exactly the same", "isCorrect": false },
      { "id": "option_2", "text": "Lambda enforces argument count, while proc does not", "isCorrect": true },
      { "id": "option_3", "text": "Proc is faster than lambda", "isCorrect": false },
      { "id": "option_4", "text": "Lambda modifies its calling scope", "isCorrect": false }
    ],
    "hint": "One of them strictly checks the number of arguments.",
    "answerDescription": "A `lambda` enforces argument count, whereas a `proc` does not."
  },
  {
    "id": "ruby_724",
    "question": "How do you call a private method within the same class?",
    "options": [
      { "id": "option_1", "text": "object.private_method", "isCorrect": false },
      { "id": "option_2", "text": "By calling it without a receiver", "isCorrect": true },
      { "id": "option_3", "text": "Using `self.private_method`", "isCorrect": false },
      { "id": "option_4", "text": "It cannot be called", "isCorrect": false }
    ],
    "hint": "Private methods can only be called within the class scope.",
    "answerDescription": "In Ruby, private methods must be called without an explicit receiver."
  },
  {
    "id": "ruby_725",
    "question": "Which method can be used to return both the block and the method's result?",
    "options": [
      { "id": "option_1", "text": "return_block", "isCorrect": false },
      { "id": "option_2", "text": "yield_self", "isCorrect": true },
      { "id": "option_3", "text": "return_self", "isCorrect": false },
      { "id": "option_4", "text": "block_return", "isCorrect": false }
    ],
    "hint": "This method applies the block and returns the object.",
    "answerDescription": "The `yield_self` method allows chaining by applying a block to an object and returning the result."
  },
  {
    "id": "ruby_726",
    "question": "Which method converts a symbol to a proc?",
    "options": [
      { "id": "option_1", "text": "to_proc", "isCorrect": false },
      { "id": "option_2", "text": "&:symbol", "isCorrect": true },
      { "id": "option_3", "text": "symbol_to_proc", "isCorrect": false },
      { "id": "option_4", "text": "convert_proc", "isCorrect": false }
    ],
    "hint": "This is commonly used in method chaining with `map`.",
    "answerDescription": "The `&:symbol` syntax converts a symbol into a proc, making it useful for methods like `map`."
  },
  {
    "id": "ruby_727",
    "question": "What does `super` do inside a method?",
    "options": [
      { "id": "option_1", "text": "Calls a method from another class", "isCorrect": false },
      { "id": "option_2", "text": "Calls the same method from the parent class", "isCorrect": true },
      { "id": "option_3", "text": "Creates a new instance of the superclass", "isCorrect": false },
      { "id": "option_4", "text": "Deletes the method from the class", "isCorrect": false }
    ],
    "hint": "This is used for method inheritance.",
    "answerDescription": "The `super` keyword calls the same method from the parent class, useful in inheritance."
  },
  {
    "id": "ruby_728",
    "question": "Which method can be used to get the list of methods available in an object?",
    "options": [
      { "id": "option_1", "text": "object_methods", "isCorrect": false },
      { "id": "option_2", "text": "methods", "isCorrect": true },
      { "id": "option_3", "text": "list_methods", "isCorrect": false },
      { "id": "option_4", "text": "available_methods", "isCorrect": false }
    ],
    "hint": "It returns an array of method names.",
    "answerDescription": "The `methods` method returns a list of all methods available in an object."
  },
  {
    "id": "ruby_729",
    "question": "What is the purpose of `method_defined?` in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines a method", "isCorrect": false },
      { "id": "option_2", "text": "Checks if a method exists in a class", "isCorrect": true },
      { "id": "option_3", "text": "Lists all methods", "isCorrect": false },
      { "id": "option_4", "text": "Checks if a method is private", "isCorrect": false }
    ],
    "hint": "It returns true or false based on method availability.",
    "answerDescription": "The `method_defined?` method checks if a class contains a specific method."
  },
  {
    "id": "ruby_730",
    "question": "Which method is used to convert a block into a proc?",
    "options": [
      { "id": "option_1", "text": "procify", "isCorrect": false },
      { "id": "option_2", "text": "Proc.new", "isCorrect": true },
      { "id": "option_3", "text": "block_to_proc", "isCorrect": false },
      { "id": "option_4", "text": "convert_block", "isCorrect": false }
    ],
    "hint": "This method converts a given block into an object.",
    "answerDescription": "The `Proc.new` method converts a block into a Proc object, making it reusable."
  },  {
    "id": "ruby_731",
    "question": "Which keyword is used to return a value from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "stop", "isCorrect": false },
      { "id": "option_2", "text": "end", "isCorrect": false },
      { "id": "option_3", "text": "return", "isCorrect": true },
      { "id": "option_4", "text": "break", "isCorrect": false }
    ],
    "hint": "This keyword is optional in Ruby but can be used explicitly.",
    "answerDescription": "The `return` keyword is used to exit a method and provide a value."
  },
  {
    "id": "ruby_732",
    "question": "What will happen if a method does not have a return statement?",
    "options": [
      { "id": "option_1", "text": "It returns nil by default", "isCorrect": false },
      { "id": "option_2", "text": "It raises an error", "isCorrect": false },
      { "id": "option_3", "text": "It returns the value of the last evaluated expression", "isCorrect": true },
      { "id": "option_4", "text": "It returns the method name", "isCorrect": false }
    ],
    "hint": "Ruby methods automatically return something.",
    "answerDescription": "If there is no explicit `return`, a Ruby method returns the result of the last executed expression."
  },
  {
    "id": "ruby_733",
    "question": "How can you define a method that accepts a variable number of arguments?",
    "options": [
      { "id": "option_1", "text": "Using brackets `[]`", "isCorrect": false },
      { "id": "option_2", "text": "By defining multiple parameters", "isCorrect": false },
      { "id": "option_3", "text": "Using `*args`", "isCorrect": true },
      { "id": "option_4", "text": "Using `args[]`", "isCorrect": false }
    ],
    "hint": "This symbol is used for splatting multiple values.",
    "answerDescription": "The `*args` syntax allows a method to accept a variable number of arguments as an array."
  },
  {
    "id": "ruby_734",
    "question": "Which method is used to check if an object responds to a specific method?",
    "options": [
      { "id": "option_1", "text": "has_method?", "isCorrect": false },
      { "id": "option_2", "text": "method_check", "isCorrect": false },
      { "id": "option_3", "text": "respond_to?", "isCorrect": true },
      { "id": "option_4", "text": "check_method", "isCorrect": false }
    ],
    "hint": "This method returns true or false depending on method availability.",
    "answerDescription": "The `respond_to?` method checks if an object has a specific method."
  },
  {
    "id": "ruby_735",
    "question": "What is the purpose of the `define_method` function in Ruby?",
    "options": [
      { "id": "option_1", "text": "It is used to define a constant", "isCorrect": false },
      { "id": "option_2", "text": "It removes a method", "isCorrect": false },
      { "id": "option_3", "text": "It dynamically defines a method", "isCorrect": true },
      { "id": "option_4", "text": "It creates an alias for a method", "isCorrect": false }
    ],
    "hint": "This method allows dynamic method creation.",
    "answerDescription": "The `define_method` function is used to define methods dynamically inside a class or module."
  },
  {
    "id": "ruby_736",
    "question": "What does `method_missing` do in Ruby?",
    "options": [
      { "id": "option_1", "text": "It raises an error", "isCorrect": false },
      { "id": "option_2", "text": "It stops method execution", "isCorrect": false },
      { "id": "option_3", "text": "It intercepts calls to undefined methods", "isCorrect": true },
      { "id": "option_4", "text": "It creates new methods", "isCorrect": false }
    ],
    "hint": "This method is useful for handling unknown method calls.",
    "answerDescription": "The `method_missing` method allows handling calls to methods that do not exist on an object."
  },
  {
    "id": "ruby_737",
    "question": "How can you pass a block explicitly as a parameter?",
    "options": [
      { "id": "option_1", "text": "Using `proc`", "isCorrect": false },
      { "id": "option_2", "text": "By using `*block`", "isCorrect": false },
      { "id": "option_3", "text": "Using `&block`", "isCorrect": true },
      { "id": "option_4", "text": "Using `{}`", "isCorrect": false }
    ],
    "hint": "This symbol is commonly used for converting blocks to procs.",
    "answerDescription": "The `&block` syntax is used to explicitly pass a block to a method."
  },
  {
    "id": "ruby_738",
    "question": "Which method allows chaining operations by returning the modified object?",
    "options": [
      { "id": "option_1", "text": "yield", "isCorrect": false },
      { "id": "option_2", "text": "tap", "isCorrect": false },
      { "id": "option_3", "text": "yield_self", "isCorrect": true },
      { "id": "option_4", "text": "modify_self", "isCorrect": false }
    ],
    "hint": "This method applies a block and returns the object itself.",
    "answerDescription": "The `yield_self` method allows chaining by applying a block to an object and returning the modified value."
  },
  {
    "id": "ruby_739",
    "question": "What is the purpose of `caller` in Ruby?",
    "options": [
      { "id": "option_1", "text": "It calls a method", "isCorrect": false },
      { "id": "option_2", "text": "It lists all available methods", "isCorrect": false },
      { "id": "option_3", "text": "It returns the current call stack", "isCorrect": true },
      { "id": "option_4", "text": "It defines a caller method", "isCorrect": false }
    ],
    "hint": "This method helps in debugging and tracking execution.",
    "answerDescription": "The `caller` method returns an array representing the current call stack."
  },
  {
    "id": "ruby_740",
    "question": "How do you define a method that takes keyword arguments?",
    "options": [
      { "id": "option_1", "text": "Using square brackets", "isCorrect": false },
      { "id": "option_2", "text": "By separating with commas", "isCorrect": false },
      { "id": "option_3", "text": "Using named parameters with colons", "isCorrect": true },
      { "id": "option_4", "text": "Using `**kwargs`", "isCorrect": false }
    ],
    "hint": "Ruby allows naming arguments with a special syntax.",
    "answerDescription": "Keyword arguments in Ruby are defined using named parameters with colons (e.g., `def my_method(name:, age:)`)."
  },  {
    "id": "ruby_741",
    "question": "What does the `lambda` keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines a class", "isCorrect": false },
      { "id": "option_2", "text": "Creates a symbol", "isCorrect": false },
      { "id": "option_3", "text": "Declares a constant", "isCorrect": false },
      { "id": "option_4", "text": "Defines an anonymous function", "isCorrect": true }
    ],
    "hint": "This keyword is used to define a Proc-like function.",
    "answerDescription": "The `lambda` keyword is used to create an anonymous function in Ruby."
  },
  {
    "id": "ruby_742",
    "question": "What is the difference between `Proc.new` and `lambda` in Ruby?",
    "options": [
      { "id": "option_1", "text": "No difference", "isCorrect": false },
      { "id": "option_2", "text": "`Proc.new` requires arguments to be explicitly passed", "isCorrect": false },
      { "id": "option_3", "text": "Lambdas return from within the lambda, while procs return from the method", "isCorrect": false },
      { "id": "option_4", "text": "Lambdas enforce argument count, while procs do not", "isCorrect": true }
    ],
    "hint": "One enforces argument count, and the other does not.",
    "answerDescription": "A `lambda` enforces argument count and has different return behavior compared to `Proc.new`."
  },
  {
    "id": "ruby_743",
    "question": "How do you define a method that accepts both a block and arguments?",
    "options": [
      { "id": "option_1", "text": "Using only `*args`", "isCorrect": false },
      { "id": "option_2", "text": "By writing an explicit `yield` statement", "isCorrect": false },
      { "id": "option_3", "text": "By defining parameters normally", "isCorrect": false },
      { "id": "option_4", "text": "Using both `*args` and `&block`", "isCorrect": true }
    ],
    "hint": "You need to handle both arguments and a block.",
    "answerDescription": "A method can accept both regular arguments and a block by using `*args` for arguments and `&block` for the block."
  },
  {
    "id": "ruby_744",
    "question": "Which method is used to convert a block into a Proc?",
    "options": [
      { "id": "option_1", "text": "convert_block", "isCorrect": false },
      { "id": "option_2", "text": "procify", "isCorrect": false },
      { "id": "option_3", "text": "block_to_proc", "isCorrect": false },
      { "id": "option_4", "text": "Proc.new", "isCorrect": true }
    ],
    "hint": "This method is commonly used when converting blocks.",
    "answerDescription": "The `Proc.new` method can be used to convert a block into a Proc."
  },
  {
    "id": "ruby_745",
    "question": "What does the `super` keyword do in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Calls the parent class constructor", "isCorrect": false },
      { "id": "option_2", "text": "Defines a method as superior", "isCorrect": false },
      { "id": "option_3", "text": "Creates an alias for a method", "isCorrect": false },
      { "id": "option_4", "text": "Calls the same method from the superclass", "isCorrect": true }
    ],
    "hint": "It is used to invoke a method from a parent class.",
    "answerDescription": "The `super` keyword is used to call a method of the same name from the superclass."
  },
  {
    "id": "ruby_746",
    "question": "How do you create a method alias in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `set_alias`", "isCorrect": false },
      { "id": "option_2", "text": "Using `method_alias`", "isCorrect": false },
      { "id": "option_3", "text": "Using `def alias_name = original_name`", "isCorrect": false },
      { "id": "option_4", "text": "Using `alias new_name old_name`", "isCorrect": true }
    ],
    "hint": "Ruby has a simple keyword for this purpose.",
    "answerDescription": "The `alias` keyword is used to create a method alias in Ruby."
  },
  {
    "id": "ruby_747",
    "question": "What is the purpose of `yield` in Ruby?",
    "options": [
      { "id": "option_1", "text": "It stops method execution", "isCorrect": false },
      { "id": "option_2", "text": "It defines a new method", "isCorrect": false },
      { "id": "option_3", "text": "It returns from a method", "isCorrect": false },
      { "id": "option_4", "text": "It executes a block passed to a method", "isCorrect": true }
    ],
    "hint": "It is used to invoke blocks inside a method.",
    "answerDescription": "The `yield` keyword is used to execute a block of code passed to a method."
  },
  {
    "id": "ruby_748",
    "question": "Which method allows you to check the parameters required by a method?",
    "options": [
      { "id": "option_1", "text": "check_args", "isCorrect": false },
      { "id": "option_2", "text": "param_info", "isCorrect": false },
      { "id": "option_3", "text": "method_params", "isCorrect": false },
      { "id": "option_4", "text": "method(:method_name).parameters", "isCorrect": true }
    ],
    "hint": "This method is called on a method object.",
    "answerDescription": "The `method(:method_name).parameters` syntax is used to inspect method parameters."
  },
  {
    "id": "ruby_749",
    "question": "What happens when you pass a block to a method without using `yield`?",
    "options": [
      { "id": "option_1", "text": "The method will execute the block automatically", "isCorrect": false },
      { "id": "option_2", "text": "An error will be raised", "isCorrect": false },
      { "id": "option_3", "text": "The block is ignored", "isCorrect": false },
      { "id": "option_4", "text": "The method does not execute the block unless explicitly called", "isCorrect": true }
    ],
    "hint": "Blocks are not executed unless triggered explicitly.",
    "answerDescription": "If a block is passed to a method without `yield`, it is ignored unless explicitly called."
  },
  {
    "id": "ruby_750",
    "question": "Which method is used to get a list of methods available to an object?",
    "options": [
      { "id": "option_1", "text": "list_methods", "isCorrect": false },
      { "id": "option_2", "text": "methods_available", "isCorrect": false },
      { "id": "option_3", "text": "get_methods", "isCorrect": false },
      { "id": "option_4", "text": "methods", "isCorrect": true }
    ],
    "hint": "Ruby provides a built-in method to list all available methods.",
    "answerDescription": "The `methods` method returns an array of all available methods for an object."
  },  {
    "id": "ruby_751",
    "question": "What does the `define_method` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Dynamically defines a method at runtime", "isCorrect": true },
      { "id": "option_2", "text": "Deletes a method", "isCorrect": false },
      { "id": "option_3", "text": "Checks if a method is defined", "isCorrect": false },
      { "id": "option_4", "text": "Creates a class method", "isCorrect": false }
    ],
    "hint": "This method allows method creation dynamically.",
    "answerDescription": "`define_method` is used to create methods dynamically at runtime."
  },
  {
    "id": "ruby_752",
    "question": "How do you pass a block explicitly to another method?",
    "options": [
      { "id": "option_1", "text": "Using `&block`", "isCorrect": true },
      { "id": "option_2", "text": "Using `*block`", "isCorrect": false },
      { "id": "option_3", "text": "Using `->block`", "isCorrect": false },
      { "id": "option_4", "text": "Using `proc { block }`", "isCorrect": false }
    ],
    "hint": "A special prefix is used to convert blocks into procs.",
    "answerDescription": "The `&block` syntax is used to explicitly pass a block to another method."
  },
  {
    "id": "ruby_753",
    "question": "How can you pass a block to a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `&block` in the method definition", "isCorrect": true },
      { "id": "option_2", "text": "Using `yield_block`", "isCorrect": false },
      { "id": "option_3", "text": "Using `-> block`", "isCorrect": false },
      { "id": "option_4", "text": "Using `block_call`", "isCorrect": false }
    ],
    "hint": "A special symbol is used before the block parameter in the method signature.",
    "answerDescription": "The `&block` parameter allows a method to accept a block as an argument."
  },
  {
    "id": "ruby_754",
    "question": "Which keyword is used to return a value from a method?",
    "options": [
      { "id": "option_1", "text": "`return`", "isCorrect": true },
      { "id": "option_2", "text": "`exit`", "isCorrect": false },
      { "id": "option_3", "text": "`break`", "isCorrect": false },
      { "id": "option_4", "text": "`stop`", "isCorrect": false }
    ],
    "hint": "It explicitly exits the method and returns a value.",
    "answerDescription": "The `return` keyword is used to return a value from a method."
  },
  {
    "id": "ruby_755",
    "question": "What is the purpose of `respond_to?` in Ruby?",
    "options": [
      { "id": "option_1", "text": "Checks if an object can respond to a method", "isCorrect": true },
      { "id": "option_2", "text": "Defines a new method", "isCorrect": false },
      { "id": "option_3", "text": "Calls a method dynamically", "isCorrect": false },
      { "id": "option_4", "text": "Removes a method", "isCorrect": false }
    ],
    "hint": "It is used to check method availability.",
    "answerDescription": "The `respond_to?` method checks if an object can respond to a given method."
  },
  {
    "id": "ruby_756",
    "question": "What does the `Object#method` method do?",
    "options": [
      { "id": "option_1", "text": "Returns a Method object for the given method name", "isCorrect": true },
      { "id": "option_2", "text": "Executes a method", "isCorrect": false },
      { "id": "option_3", "text": "Checks if a method is private", "isCorrect": false },
      { "id": "option_4", "text": "Removes a method", "isCorrect": false }
    ],
    "hint": "It returns an object that represents a method.",
    "answerDescription": "The `Object#method` method returns a Method object for the specified method."
  },
  {
    "id": "ruby_757",
    "question": "What is the default return value of a method in Ruby if no `return` statement is used?",
    "options": [
      { "id": "option_1", "text": "The last evaluated expression", "isCorrect": true },
      { "id": "option_2", "text": "`nil`", "isCorrect": false },
      { "id": "option_3", "text": "`self`", "isCorrect": false },
      { "id": "option_4", "text": "An empty string", "isCorrect": false }
    ],
    "hint": "Ruby implicitly returns the result of the last executed statement.",
    "answerDescription": "In Ruby, if no `return` is used, the last evaluated expression is returned by default."
  },
  {
    "id": "ruby_758",
    "question": "Which operator is used to define keyword arguments in a method?",
    "options": [
      { "id": "option_1", "text": "`:` (colon)", "isCorrect": true },
      { "id": "option_2", "text": "`=>` (hash rocket)", "isCorrect": false },
      { "id": "option_3", "text": "`@` (at sign)", "isCorrect": false },
      { "id": "option_4", "text": "`#` (pound sign)", "isCorrect": false }
    ],
    "hint": "This operator is commonly used in hashes and keyword arguments.",
    "answerDescription": "Keyword arguments in Ruby are defined using a colon (`:`)."
  },
  {
    "id": "ruby_759",
    "question": "How do you make a method private in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the `private` keyword", "isCorrect": true },
      { "id": "option_2", "text": "By using `_method_name` naming convention", "isCorrect": false },
      { "id": "option_3", "text": "Using `@private` annotation", "isCorrect": false },
      { "id": "option_4", "text": "Adding `:private` before the method name", "isCorrect": false }
    ],
    "hint": "Ruby has a specific keyword to define access control for methods.",
    "answerDescription": "The `private` keyword is used to make a method private in Ruby."
  },
  {
    "id": "ruby_760",
    "question": "What does the `singleton_method` method do?",
    "options": [
      { "id": "option_1", "text": "Returns a singleton method of an object", "isCorrect": true },
      { "id": "option_2", "text": "Creates a new singleton class", "isCorrect": false },
      { "id": "option_3", "text": "Checks if an object has a singleton", "isCorrect": false },
      { "id": "option_4", "text": "Copies methods from one object to another", "isCorrect": false }
    ],
    "hint": "It is used to access methods defined only on a specific object.",
    "answerDescription": "The `singleton_method` method returns a singleton method from an object."
  },
  {
    "id": "ruby_761",
    "question": "Which of the following creates an anonymous function in Ruby?",
    "options": [
      { "id": "option_1", "text": "lambda", "isCorrect": true },
      { "id": "option_2", "text": "proc", "isCorrect": false },
      { "id": "option_3", "text": "function", "isCorrect": false },
      { "id": "option_4", "text": "block", "isCorrect": false }
    ],
    "hint": "It returns a callable object similar to a method.",
    "answerDescription": "The `lambda` keyword is used to create anonymous functions in Ruby."
  },
  {
    "id": "ruby_762",
    "question": "How do you define a class method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `def self.method_name`", "isCorrect": false },
      { "id": "option_2", "text": "Using `def self.method_name` or `def ClassName.method_name`", "isCorrect": true },
      { "id": "option_3", "text": "Using `@def method_name`", "isCorrect": false },
      { "id": "option_4", "text": "Using `private_class_method`", "isCorrect": false }
    ],
    "hint": "A class method is defined using `self` or the class name.",
    "answerDescription": "Class methods are defined with `def self.method_name` or `def ClassName.method_name`."
  },
  {
    "id": "ruby_763",
    "question": "What does the `yield` keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Returns a value from a method", "isCorrect": false },
      { "id": "option_2", "text": "Pauses execution and passes control to a block", "isCorrect": true },
      { "id": "option_3", "text": "Raises an exception", "isCorrect": false },
      { "id": "option_4", "text": "Creates a new thread", "isCorrect": false }
    ],
    "hint": "It allows passing execution to a block within a method.",
    "answerDescription": "The `yield` keyword transfers control from a method to a block passed to it."
  },
  {
    "id": "ruby_764",
    "question": "What is the purpose of `super` in Ruby?",
    "options": [
      { "id": "option_1", "text": "Calls the parent class constructor", "isCorrect": false },
      { "id": "option_2", "text": "Calls the method of the same name from the parent class", "isCorrect": true },
      { "id": "option_3", "text": "Defines a method in a subclass", "isCorrect": false },
      { "id": "option_4", "text": "Creates an alias for a method", "isCorrect": false }
    ],
    "hint": "It is used to invoke a method from the superclass.",
    "answerDescription": "`super` calls the method of the same name from the superclass."
  },
  {
    "id": "ruby_765",
    "question": "Which method is used to convert a block into a Proc?",
    "options": [
      { "id": "option_1", "text": "block.to_proc", "isCorrect": false },
      { "id": "option_2", "text": "`Proc.new` or `&block`", "isCorrect": true },
      { "id": "option_3", "text": "lambda(&block)", "isCorrect": false },
      { "id": "option_4", "text": "block.to_lambda", "isCorrect": false }
    ],
    "hint": "A special Ruby class is used to convert blocks.",
    "answerDescription": "A block can be converted to a Proc using `Proc.new` or `&block`."
  },
  {
    "id": "ruby_766",
    "question": "What does `private_class_method` do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Makes all instance methods private", "isCorrect": false },
      { "id": "option_2", "text": "Restricts access to a class method", "isCorrect": true },
      { "id": "option_3", "text": "Hides methods from subclasses", "isCorrect": false },
      { "id": "option_4", "text": "Makes instance variables private", "isCorrect": false }
    ],
    "hint": "It limits access to a method at the class level.",
    "answerDescription": "`private_class_method` ensures that a class method can only be called from within the class."
  },
  {
    "id": "ruby_767",
    "question": "What happens if a method is called with too many arguments?",
    "options": [
      { "id": "option_1", "text": "Ruby ignores the extra arguments", "isCorrect": false },
      { "id": "option_2", "text": "Ruby raises an ArgumentError", "isCorrect": true },
      { "id": "option_3", "text": "Ruby returns nil", "isCorrect": false },
      { "id": "option_4", "text": "Ruby automatically assigns extra arguments to an array", "isCorrect": false }
    ],
    "hint": "Ruby is strict about the number of expected arguments.",
    "answerDescription": "If too many arguments are provided, Ruby raises an `ArgumentError`."
  },
  {
    "id": "ruby_768",
    "question": "What is the difference between `Proc.new` and `lambda`?",
    "options": [
      { "id": "option_1", "text": "They behave identically", "isCorrect": false },
      { "id": "option_2", "text": "Lambdas check the number of arguments, but Procs do not", "isCorrect": true },
      { "id": "option_3", "text": "Procs return from the calling method, lambdas do not", "isCorrect": false },
      { "id": "option_4", "text": "Lambdas can only be defined inside methods", "isCorrect": false }
    ],
    "hint": "Lambdas enforce argument rules more strictly than Procs.",
    "answerDescription": "Lambdas enforce the correct number of arguments, while Procs do not."
  },
  {
    "id": "ruby_769",
    "question": "What is the main benefit of keyword arguments in Ruby?",
    "options": [
      { "id": "option_1", "text": "They allow passing multiple values in an array", "isCorrect": false },
      { "id": "option_2", "text": "They improve code readability and prevent argument order mistakes", "isCorrect": true },
      { "id": "option_3", "text": "They automatically convert arguments to symbols", "isCorrect": false },
      { "id": "option_4", "text": "They enable method overloading", "isCorrect": false }
    ],
    "hint": "They make method calls clearer and reduce errors.",
    "answerDescription": "Keyword arguments improve code clarity and prevent confusion about argument order."
  },
  {
    "id": "ruby_770",
    "question": "What does `define_singleton_method` do?",
    "options": [
      { "id": "option_1", "text": "Creates a class method", "isCorrect": false },
      { "id": "option_2", "text": "Defines a method on a specific object", "isCorrect": true },
      { "id": "option_3", "text": "Creates an instance method", "isCorrect": false },
      { "id": "option_4", "text": "Deletes a singleton method", "isCorrect": false }
    ],
    "hint": "It defines a method for only one object, not the class.",
    "answerDescription": "The `define_singleton_method` method creates a method on a single object."
  },  {
    "id": "ruby_771",
    "question": "What does the `method_missing` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Raises an error when a missing method is called", "isCorrect": false },
      { "id": "option_2", "text": "Ignores undefined method calls", "isCorrect": false },
      { "id": "option_3", "text": "Intercepts calls to undefined methods", "isCorrect": true },
      { "id": "option_4", "text": "Automatically defines missing methods", "isCorrect": false }
    ],
    "hint": "It is a special method that catches calls to undefined methods.",
    "answerDescription": "The `method_missing` method is triggered when an undefined method is called."
  },
  {
    "id": "ruby_772",
    "question": "What is the difference between `public`, `protected`, and `private` methods in Ruby?",
    "options": [
      { "id": "option_1", "text": "Public and private methods can be accessed anywhere, protected cannot", "isCorrect": false },
      { "id": "option_2", "text": "Protected methods can be called only within a subclass", "isCorrect": false },
      { "id": "option_3", "text": "Public methods are accessible anywhere, protected within the class and subclasses, private only within the defining class", "isCorrect": true },
      { "id": "option_4", "text": "Private methods can be accessed outside a class using `send`", "isCorrect": false }
    ],
    "hint": "The main difference is in accessibility across objects and subclasses.",
    "answerDescription": "Public methods are accessible anywhere, protected within the class and subclasses, and private only within the defining class."
  },
  {
    "id": "ruby_773",
    "question": "How do you create an anonymous function in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `def anonymous`", "isCorrect": false },
      { "id": "option_2", "text": "Using `proc {}` only", "isCorrect": false },
      { "id": "option_3", "text": "Using `lambda` or `Proc.new`", "isCorrect": true },
      { "id": "option_4", "text": "Using `anonymous {}`", "isCorrect": false }
    ],
    "hint": "Two common ways exist to create an anonymous function in Ruby.",
    "answerDescription": "Anonymous functions in Ruby can be created using `lambda` or `Proc.new`."
  },
  {
    "id": "ruby_774",
    "question": "What does `respond_to?` do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Checks if an object is valid", "isCorrect": false },
      { "id": "option_2", "text": "Returns all methods of an object", "isCorrect": false },
      { "id": "option_3", "text": "Checks if an object responds to a method", "isCorrect": true },
      { "id": "option_4", "text": "Triggers a method call dynamically", "isCorrect": false }
    ],
    "hint": "It helps check if a method exists before calling it.",
    "answerDescription": "The `respond_to?` method checks whether an object can respond to a specific method."
  },
  {
    "id": "ruby_775",
    "question": "Which symbol is used to pass a block to a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "@" , "isCorrect": false },
      { "id": "option_2", "text": "->", "isCorrect": false },
      { "id": "option_3", "text": "&", "isCorrect": true },
      { "id": "option_4", "text": "%", "isCorrect": false }
    ],
    "hint": "This symbol is used in method parameters to accept blocks.",
    "answerDescription": "The `&` symbol is used to pass a block to a method in Ruby."
  },
  {
    "id": "ruby_776",
    "question": "What does `define_method` do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines a class method dynamically", "isCorrect": false },
      { "id": "option_2", "text": "Creates an alias for a method", "isCorrect": false },
      { "id": "option_3", "text": "Defines an instance method dynamically", "isCorrect": true },
      { "id": "option_4", "text": "Removes an instance method", "isCorrect": false }
    ],
    "hint": "It allows defining methods dynamically inside a class.",
    "answerDescription": "`define_method` allows defining instance methods dynamically."
  },
  {
    "id": "ruby_777",
    "question": "What does the `arity` method return for a Proc or Lambda?",
    "options": [
      { "id": "option_1", "text": "The return type of the Proc/Lambda", "isCorrect": false },
      { "id": "option_2", "text": "The number of times it has been called", "isCorrect": false },
      { "id": "option_3", "text": "The number of arguments it expects", "isCorrect": true },
      { "id": "option_4", "text": "The number of blocks it accepts", "isCorrect": false }
    ],
    "hint": "It is related to the function signature.",
    "answerDescription": "The `arity` method returns the number of arguments a Proc or Lambda expects."
  },
  {
    "id": "ruby_778",
    "question": "How do you explicitly convert a block to a Proc?",
    "options": [
      { "id": "option_1", "text": "Using `proc &block`", "isCorrect": false },
      { "id": "option_2", "text": "Using `to_proc(block)`", "isCorrect": false },
      { "id": "option_3", "text": "Using `&block` inside a method", "isCorrect": true },
      { "id": "option_4", "text": "Using `Proc.convert(block)`", "isCorrect": false }
    ],
    "hint": "A special operator is used inside method parameters.",
    "answerDescription": "Using `&block` inside a method converts a block to a Proc."
  },
  {
    "id": "ruby_779",
    "question": "Which method is used to invoke a method by name dynamically?",
    "options": [
      { "id": "option_1", "text": "run_method", "isCorrect": false },
      { "id": "option_2", "text": "method_call", "isCorrect": false },
      { "id": "option_3", "text": "send", "isCorrect": true },
      { "id": "option_4", "text": "invoke", "isCorrect": false }
    ],
    "hint": "This method allows calling a method by name as a string or symbol.",
    "answerDescription": "The `send` method is used to invoke a method dynamically by its name."
  },
  {
    "id": "ruby_780",
    "question": "What is the main advantage of using lambdas over Procs?",
    "options": [
      { "id": "option_1", "text": "Lambdas always return `nil`", "isCorrect": false },
      { "id": "option_2", "text": "Lambdas do not allow parameters", "isCorrect": false },
      { "id": "option_3", "text": "Lambdas enforce argument count and return to the caller", "isCorrect": true },
      { "id": "option_4", "text": "Lambdas cannot be assigned to variables", "isCorrect": false }
    ],
    "hint": "Lambdas are stricter about argument count and return behavior.",
    "answerDescription": "Lambdas enforce correct argument count and return control to the caller."
  },  {
    "id": "ruby_781",
    "question": "What keyword is used to return a value from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "stop", "isCorrect": false },
      { "id": "option_2", "text": "end", "isCorrect": false },
      { "id": "option_3", "text": "break", "isCorrect": false },
      { "id": "option_4", "text": "return", "isCorrect": true }
    ],
    "hint": "It is a keyword that explicitly gives back a value from a method.",
    "answerDescription": "The `return` keyword is used to return a value from a method."
  },
  {
    "id": "ruby_782",
    "question": "What is the purpose of the `super` keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "Calls a private method", "isCorrect": false },
      { "id": "option_2", "text": "Defines a superclass", "isCorrect": false },
      { "id": "option_3", "text": "Creates a new class", "isCorrect": false },
      { "id": "option_4", "text": "Calls the parent class method", "isCorrect": true }
    ],
    "hint": "It is used to invoke methods from a superclass.",
    "answerDescription": "The `super` keyword calls a method of the same name from the parent class."
  },
  {
    "id": "ruby_783",
    "question": "How can you check if a method exists for an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "object.respond_to?(:method_name)", "isCorrect": true },
      { "id": "option_2", "text": "object.has_method?(:method_name)", "isCorrect": false },
      { "id": "option_3", "text": "object.method_exists?(:method_name)", "isCorrect": false },
      { "id": "option_4", "text": "object.check_method?(:method_name)", "isCorrect": false }
    ],
    "hint": "There's a built-in method that checks if an object can respond to a method call.",
    "answerDescription": "The `respond_to?` method checks if an object has a specific method defined."
  },
  {
    "id": "ruby_784",
    "question": "Which method is used to get a list of methods available for an object?",
    "options": [
      { "id": "option_1", "text": "`available_methods`", "isCorrect": false },
      { "id": "option_2", "text": "`get_methods`", "isCorrect": false },
      { "id": "option_3", "text": "`list_methods`", "isCorrect": false },
      { "id": "option_4", "text": "`methods`", "isCorrect": true }
    ],
    "hint": "It returns an array of method names available to an object.",
    "answerDescription": "The `methods` method lists all methods available for an object."
  },
  {
    "id": "ruby_785",
    "question": "What is the default return value of a method in Ruby if no explicit `return` is used?",
    "options": [
      { "id": "option_1", "text": "`nil`", "isCorrect": false },
      { "id": "option_2", "text": "`undefined`", "isCorrect": false },
      { "id": "option_3", "text": "`self`", "isCorrect": false },
      { "id": "option_4", "text": "The last evaluated expression", "isCorrect": true }
    ],
    "hint": "Ruby methods automatically return the result of their last expression.",
    "answerDescription": "If no `return` is used, Ruby returns the last evaluated expression in a method."
  },
  {
    "id": "ruby_786",
    "question": "What is the use of `alias` keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates an object reference", "isCorrect": false },
      { "id": "option_2", "text": "Copies a method to a new class", "isCorrect": false },
      { "id": "option_3", "text": "Renames a class", "isCorrect": false },
      { "id": "option_4", "text": "Creates an alternative name for a method", "isCorrect": true }
    ],
    "hint": "It allows calling a method by another name.",
    "answerDescription": "The `alias` keyword creates an alternative name for a method."
  },
  {
    "id": "ruby_787",
    "question": "What is the difference between a `Proc` and a `Lambda` in Ruby?",
    "options": [
      { "id": "option_1", "text": "A Proc cannot accept arguments", "isCorrect": false },
      { "id": "option_2", "text": "A Lambda does not enforce argument count", "isCorrect": false },
      { "id": "option_3", "text": "A Lambda always returns `nil`", "isCorrect": false },
      { "id": "option_4", "text": "A Lambda enforces argument count and has a different return behavior", "isCorrect": true }
    ],
    "hint": "A key difference is in argument validation and return behavior.",
    "answerDescription": "A Lambda enforces argument count and returns control to the caller, unlike a Proc."
  },
  {
    "id": "ruby_788",
    "question": "How do you define a method that takes a block?",
    "options": [
      { "id": "option_1", "text": "Using `block {}`", "isCorrect": false },
      { "id": "option_2", "text": "Using `proc {}`", "isCorrect": false },
      { "id": "option_3", "text": "Using `yield`", "isCorrect": false },
      { "id": "option_4", "text": "Using `&block` in method parameters", "isCorrect": true }
    ],
    "hint": "A special parameter is used to accept blocks in methods.",
    "answerDescription": "Using `&block` in method parameters allows accepting blocks in a method."
  },
  {
    "id": "ruby_789",
    "question": "Which method is used to check if a method is defined on an object?",
    "options": [
      { "id": "option_1", "text": "`has_method?`", "isCorrect": false },
      { "id": "option_2", "text": "`method_present?`", "isCorrect": false },
      { "id": "option_3", "text": "`defined?`", "isCorrect": false },
      { "id": "option_4", "text": "`respond_to?`", "isCorrect": true }
    ],
    "hint": "It checks whether an object can respond to a method call.",
    "answerDescription": "The `respond_to?` method checks if an object has a method defined."
  },
  {
    "id": "ruby_790",
    "question": "What does the `block_given?` method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Executes a block", "isCorrect": false },
      { "id": "option_2", "text": "Creates a new block", "isCorrect": false },
      { "id": "option_3", "text": "Converts a block to a Proc", "isCorrect": false },
      { "id": "option_4", "text": "Checks if a block was passed to a method", "isCorrect": true }
    ],
    "hint": "It helps determine if a block is available in the method.",
    "answerDescription": "The `block_given?` method returns `true` if a block is passed to a method."
  },
  {
    "id": "ruby_791",
    "question": "What does `block_given?` check in Ruby?",
    "options": [
      { "id": "option_1", "text": "Whether a block was passed to a method", "isCorrect": true },
      { "id": "option_2", "text": "If a variable exists", "isCorrect": false },
      { "id": "option_3", "text": "Whether an argument is nil", "isCorrect": false },
      { "id": "option_4", "text": "If an exception is raised", "isCorrect": false }
    ],
    "hint": "It is used within methods that accept blocks.",
    "answerDescription": "The `block_given?` method checks if a block was provided when calling a method."
  },
  {
    "id": "ruby_792",
    "question": "How do you call a method with a block in Ruby?",
    "options": [
      { "id": "option_1", "text": "method_name { }", "isCorrect": true },
      { "id": "option_2", "text": "method_name[]", "isCorrect": false },
      { "id": "option_3", "text": "method_name() do", "isCorrect": false },
      { "id": "option_4", "text": "method_name -> {}", "isCorrect": false }
    ],
    "hint": "A block is enclosed in curly braces `{}` or `do..end`.",
    "answerDescription": "A method with a block is called using `method_name { }` or `method_name do ... end`."
  },
  {
    "id": "ruby_793",
    "question": "What does the `yield` keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Calls the block passed to the method", "isCorrect": true },
      { "id": "option_2", "text": "Returns from the method", "isCorrect": false },
      { "id": "option_3", "text": "Stops the program execution", "isCorrect": false },
      { "id": "option_4", "text": "Creates a new block", "isCorrect": false }
    ],
    "hint": "It allows execution to jump into a given block of code.",
    "answerDescription": "The `yield` keyword is used to call the block given to a method."
  },
  {
    "id": "ruby_794",
    "question": "What is the purpose of the `return` keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "Explicitly returns a value from a method", "isCorrect": true },
      { "id": "option_2", "text": "Stops program execution", "isCorrect": false },
      { "id": "option_3", "text": "Creates a new instance of a class", "isCorrect": false },
      { "id": "option_4", "text": "Breaks out of a loop", "isCorrect": false }
    ],
    "hint": "It allows specifying the value to be returned from a method.",
    "answerDescription": "The `return` keyword explicitly returns a value from a method."
  },  {
    "id": "ruby_795",
    "question": "What keyword is used to define a class in Ruby?",
    "options": [
      { "id": "option_1", "text": "class", "isCorrect": true },
      { "id": "option_2", "text": "define", "isCorrect": false },
      { "id": "option_3", "text": "object", "isCorrect": false },
      { "id": "option_4", "text": "new", "isCorrect": false }
    ],
    "hint": "This keyword is used to declare a blueprint for objects.",
    "answerDescription": "In Ruby, the 'class' keyword is used to define a class, which serves as a template for creating objects."
  },
  {
    "id": "ruby_796",
    "question": "How do you create an instance of a class in Ruby?",
    "options": [
      { "id": "option_1", "text": "ClassName.new", "isCorrect": true },
      { "id": "option_2", "text": "new ClassName", "isCorrect": false },
      { "id": "option_3", "text": "ClassName()", "isCorrect": false },
      { "id": "option_4", "text": "create(ClassName)", "isCorrect": false }
    ],
    "hint": "It involves calling a method on the class name.",
    "answerDescription": "In Ruby, an instance of a class is created using 'ClassName.new', which invokes the 'initialize' method if defined."
  },
  {
    "id": "ruby_797",
    "question": "What is the purpose of the initialize method in Ruby classes?",
    "options": [
      { "id": "option_1", "text": "To set up instance variables", "isCorrect": true },
      { "id": "option_2", "text": "To delete an object", "isCorrect": false },
      { "id": "option_3", "text": "To create class variables", "isCorrect": false },
      { "id": "option_4", "text": "To define static methods", "isCorrect": false }
    ],
    "hint": "This method is automatically called when an object is instantiated.",
    "answerDescription": "The 'initialize' method is a special method in Ruby that runs when a new instance of a class is created, often used to set up instance variables."
  },
  {
    "id": "ruby_798",
    "question": "Which symbol is used to define an instance variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "@", "isCorrect": true },
      { "id": "option_2", "text": "$", "isCorrect": false },
      { "id": "option_3", "text": "#", "isCorrect": false },
      { "id": "option_4", "text": "!", "isCorrect": false }
    ],
    "hint": "It is placed before variable names inside class instances.",
    "answerDescription": "Instance variables in Ruby are prefixed with '@', making them accessible throughout an instance of a class."
  },
  {
    "id": "ruby_799",
    "question": "What is the superclass of all Ruby classes?",
    "options": [
      { "id": "option_1", "text": "ObjectBase", "isCorrect": false },
      { "id": "option_2", "text": "RubyClass", "isCorrect": false },
      { "id": "option_3", "text": "Object", "isCorrect": true },
      { "id": "option_4", "text": "BaseClass", "isCorrect": false }
    ],
    "hint": "All Ruby classes inherit from this fundamental class.",
    "answerDescription": "In Ruby, the 'Object' class is the root class from which all classes inherit."
  },
  {
    "id": "ruby_800",
    "question": "What is the difference between instance variables and class variables?",
    "options": [
      { "id": "option_1", "text": "Instance variables belong to objects, class variables belong to the class", "isCorrect": true },
      { "id": "option_2", "text": "Both are the same in Ruby", "isCorrect": false },
      { "id": "option_3", "text": "Instance variables are constants", "isCorrect": false },
      { "id": "option_4", "text": "Class variables belong to instances", "isCorrect": false }
    ],
    "hint": "One type belongs to instances, while the other is shared among all instances.",
    "answerDescription": "Instance variables (prefixed with '@') belong to specific objects, while class variables (prefixed with '@@') are shared across all instances of a class."
  },
  {
    "id": "ruby_801",
    "question": "How do you define a getter method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using 'attr_reader'", "isCorrect": true },
      { "id": "option_2", "text": "Using 'get()'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'self.get'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'def @variable'", "isCorrect": false }
    ],
    "hint": "Ruby provides a shortcut for defining attribute access methods.",
    "answerDescription": "'attr_reader' is used in Ruby to create a getter method for an instance variable, allowing it to be accessed outside the class."
  },
  {
    "id": "ruby_802",
    "question": "What is the purpose of the 'super' keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "To call a method from the parent class", "isCorrect": true },
      { "id": "option_2", "text": "To define a superclass", "isCorrect": false },
      { "id": "option_3", "text": "To reference an instance variable", "isCorrect": false },
      { "id": "option_4", "text": "To create a class method", "isCorrect": false }
    ],
    "hint": "It is useful for method overriding in inheritance.",
    "answerDescription": "The 'super' keyword in Ruby calls a method with the same name from the parent class, allowing inheritance-based method extension."
  },
  {
    "id": "ruby_803",
    "question": "How do you check the class of an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using 'object.class'", "isCorrect": true },
      { "id": "option_2", "text": "Using 'typeof(object)'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'object.type'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'check_class(object)'", "isCorrect": false }
    ],
    "hint": "It's a method that returns the object's blueprint.",
    "answerDescription": "In Ruby, calling '.class' on an object returns the class that the object belongs to."
  },
  {
    "id": "ruby_804",
    "question": "Which method is used to convert an object to a string representation?",
    "options": [
      { "id": "option_1", "text": "to_s", "isCorrect": true },
      { "id": "option_2", "text": "stringify", "isCorrect": false },
      { "id": "option_3", "text": "convert_to_string", "isCorrect": false },
      { "id": "option_4", "text": "to_string", "isCorrect": false }
    ],
    "hint": "This method is frequently used for debugging purposes.",
    "answerDescription": "The 'to_s' method in Ruby converts an object into its string representation."
  },  {
    "id": "ruby_805",
    "question": "What is an instance of a class called in Ruby?",
    "options": [
      { "id": "option_1", "text": "A blueprint", "isCorrect": false },
      { "id": "option_2", "text": "An object", "isCorrect": true },
      { "id": "option_3", "text": "A method", "isCorrect": false },
      { "id": "option_4", "text": "A module", "isCorrect": false }
    ],
    "hint": "It is a specific realization of a class.",
    "answerDescription": "An instance of a class in Ruby is called an 'object', which is created using 'ClassName.new'."
  },
  {
    "id": "ruby_806",
    "question": "How do you define a setter method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using 'attr_reader'", "isCorrect": false },
      { "id": "option_2", "text": "Using 'attr_writer'", "isCorrect": true },
      { "id": "option_3", "text": "Using 'set()'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'self.variable'", "isCorrect": false }
    ],
    "hint": "Ruby provides a built-in way to define writable attributes.",
    "answerDescription": "The 'attr_writer' method is used to define a setter method for an instance variable in Ruby."
  },
  {
    "id": "ruby_807",
    "question": "Which keyword is used to create a subclass in Ruby?",
    "options": [
      { "id": "option_1", "text": "include", "isCorrect": false },
      { "id": "option_2", "text": "<", "isCorrect": true },
      { "id": "option_3", "text": "extend", "isCorrect": false },
      { "id": "option_4", "text": "inherit", "isCorrect": false }
    ],
    "hint": "This symbol is used to indicate that a class inherits from another class.",
    "answerDescription": "In Ruby, subclasses are created using '<', e.g., 'class ChildClass < ParentClass'."
  },
  {
    "id": "ruby_808",
    "question": "Which method is automatically called when an object is printed?",
    "options": [
      { "id": "option_1", "text": "print", "isCorrect": false },
      { "id": "option_2", "text": "to_s", "isCorrect": true },
      { "id": "option_3", "text": "display", "isCorrect": false },
      { "id": "option_4", "text": "puts", "isCorrect": false }
    ],
    "hint": "This method returns the string representation of an object.",
    "answerDescription": "In Ruby, the 'to_s' method is automatically called when an object is printed using 'puts' or 'print'."
  },
  {
    "id": "ruby_809",
    "question": "Which method checks if an object is an instance of a specific class?",
    "options": [
      { "id": "option_1", "text": "class?", "isCorrect": false },
      { "id": "option_2", "text": "is_a?", "isCorrect": true },
      { "id": "option_3", "text": "instance?", "isCorrect": false },
      { "id": "option_4", "text": "typeof", "isCorrect": false }
    ],
    "hint": "This method verifies if an object belongs to a certain class or its subclasses.",
    "answerDescription": "The 'is_a?' method checks whether an object is an instance of a specified class or one of its ancestors."
  },
  {
    "id": "ruby_810",
    "question": "How do you access an instance variable inside an instance method?",
    "options": [
      { "id": "option_1", "text": "self.variable", "isCorrect": false },
      { "id": "option_2", "text": "@variable", "isCorrect": true },
      { "id": "option_3", "text": "this.variable", "isCorrect": false },
      { "id": "option_4", "text": "instance.variable", "isCorrect": false }
    ],
    "hint": "Instance variables are prefixed with a special character in Ruby.",
    "answerDescription": "Instance variables in Ruby are accessed using '@', for example, '@name' inside an instance method."
  },
  {
    "id": "ruby_811",
    "question": "What does the 'attr_accessor' method do?",
    "options": [
      { "id": "option_1", "text": "Defines only a getter method", "isCorrect": false },
      { "id": "option_2", "text": "Defines both getter and setter methods", "isCorrect": true },
      { "id": "option_3", "text": "Defines only a setter method", "isCorrect": false },
      { "id": "option_4", "text": "Defines a constructor method", "isCorrect": false }
    ],
    "hint": "It is a shortcut for defining both attribute readers and writers.",
    "answerDescription": "The 'attr_accessor' method in Ruby creates both getter and setter methods for an instance variable."
  },
  {
    "id": "ruby_812",
    "question": "Which method is used to get the class of an object?",
    "options": [
      { "id": "option_1", "text": "typeof", "isCorrect": false },
      { "id": "option_2", "text": "class", "isCorrect": true },
      { "id": "option_3", "text": "object_class", "isCorrect": false },
      { "id": "option_4", "text": "get_class", "isCorrect": false }
    ],
    "hint": "It's a built-in Ruby method that returns the class of an object.",
    "answerDescription": "The '.class' method in Ruby returns the class of a given object, for example, '5.class' returns 'Integer'."
  },
  {
    "id": "ruby_813",
    "question": "What is the purpose of 'self' inside a class in Ruby?",
    "options": [
      { "id": "option_1", "text": "It refers to the superclass", "isCorrect": false },
      { "id": "option_2", "text": "It refers to the current instance", "isCorrect": true },
      { "id": "option_3", "text": "It refers to a class variable", "isCorrect": false },
      { "id": "option_4", "text": "It refers to a local variable", "isCorrect": false }
    ],
    "hint": "It helps distinguish between instance and class methods.",
    "answerDescription": "In Ruby, 'self' refers to the current object, allowing access to instance variables and methods."
  },
  {
    "id": "ruby_814",
    "question": "How do you call a parent class method from a child class?",
    "options": [
      { "id": "option_1", "text": "parent.method_name", "isCorrect": false },
      { "id": "option_2", "text": "super", "isCorrect": true },
      { "id": "option_3", "text": "base.method_name", "isCorrect": false },
      { "id": "option_4", "text": "inherit.method_name", "isCorrect": false }
    ],
    "hint": "It allows calling overridden methods from the superclass.",
    "answerDescription": "The 'super' keyword in Ruby is used to call a method with the same name from the parent class."
  },  {
    "id": "ruby_815",
    "question": "Which method is used to initialize an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "create", "isCorrect": false },
      { "id": "option_2", "text": "setup", "isCorrect": false },
      { "id": "option_3", "text": "initialize", "isCorrect": true },
      { "id": "option_4", "text": "construct", "isCorrect": false }
    ],
    "hint": "This method is automatically called when a new object is created.",
    "answerDescription": "The 'initialize' method is a special constructor method in Ruby that runs when a new object is instantiated."
  },
  {
    "id": "ruby_816",
    "question": "What is an instance variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "A variable shared across all instances of a class", "isCorrect": false },
      { "id": "option_2", "text": "A local variable inside a method", "isCorrect": false },
      { "id": "option_3", "text": "A variable that belongs to a specific object", "isCorrect": true },
      { "id": "option_4", "text": "A constant defined inside a class", "isCorrect": false }
    ],
    "hint": "It starts with '@' and is unique to each object instance.",
    "answerDescription": "Instance variables in Ruby, prefixed with '@', are specific to an instance of a class and store object state."
  },
  {
    "id": "ruby_817",
    "question": "Which method returns a boolean indicating whether all elements in an array meet a condition?",
    "options": [
      { "id": "option_1", "text": "each?", "isCorrect": false },
      { "id": "option_2", "text": "filter?", "isCorrect": false },
      { "id": "option_3", "text": "all_true?", "isCorrect": false },
      { "id": "option_4", "text": "all?", "isCorrect": true }
    ],
    "hint": "This method checks if all elements satisfy a given condition.",
    "answerDescription": "The `all?` method returns true if all elements in an array meet a given condition."
  },
  {
    "id": "ruby_818",
    "question": "What does 'attr_reader' do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines a setter method", "isCorrect": false },
      { "id": "option_2", "text": "Defines both getter and setter methods", "isCorrect": false },
      { "id": "option_3", "text": "Defines a getter method", "isCorrect": true },
      { "id": "option_4", "text": "Defines a constructor", "isCorrect": false }
    ],
    "hint": "It allows reading a variable without manually defining a method.",
    "answerDescription": "'attr_reader' in Ruby creates a getter method for an instance variable without defining it explicitly."
  },
  {
    "id": "ruby_819",
    "question": "Which method can be overridden to provide a custom string representation of an object?",
    "options": [
      { "id": "option_1", "text": "inspect", "isCorrect": false },
      { "id": "option_2", "text": "to_str", "isCorrect": false },
      { "id": "option_3", "text": "to_s", "isCorrect": true },
      { "id": "option_4", "text": "describe", "isCorrect": false }
    ],
    "hint": "This method is called when an object is converted to a string.",
    "answerDescription": "Overriding 'to_s' in Ruby allows custom string representations of objects when printed."
  },
  {
    "id": "ruby_820",
    "question": "What is a class variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "A variable defined within a method", "isCorrect": false },
      { "id": "option_2", "text": "A constant value inside a class", "isCorrect": false },
      { "id": "option_3", "text": "A variable shared among all instances of a class", "isCorrect": true },
      { "id": "option_4", "text": "A global variable used within a class", "isCorrect": false }
    ],
    "hint": "It starts with '@@' and belongs to the class itself rather than instances.",
    "answerDescription": "Class variables in Ruby, prefixed with '@@', are shared across all instances of a class."
  },
  {
    "id": "ruby_821",
    "question": "What does the 'freeze' method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates a deep copy of an object", "isCorrect": false },
      { "id": "option_2", "text": "Removes all instance variables", "isCorrect": false },
      { "id": "option_3", "text": "Deletes an object from memory", "isCorrect": false },
      { "id": "option_4", "text": "Makes an object immutable", "isCorrect": true }
    ],
    "hint": "This method prevents any modifications to an object.",
    "answerDescription": "The 'freeze' method in Ruby makes an object immutable, preventing any further modifications."
  },
  {
    "id": "ruby_822",
    "question": "Which keyword is used to define a subclass in Ruby?",
    "options": [
      { "id": "option_1", "text": "inherits", "isCorrect": false },
      { "id": "option_2", "text": "extends", "isCorrect": false },
      { "id": "option_3", "text": "parent", "isCorrect": false },
      { "id": "option_4", "text": "<", "isCorrect": true }
    ],
    "hint": "Ruby uses a symbol instead of a keyword for inheritance.",
    "answerDescription": "In Ruby, the '<' symbol is used to define a subclass, meaning the class inherits from another class."
  },
  {
    "id": "ruby_823",
    "question": "What does 'dup' do when called on an object?",
    "options": [
      { "id": "option_1", "text": "Deletes the object", "isCorrect": false },
      { "id": "option_2", "text": "Creates a shallow copy of the object", "isCorrect": false },
      { "id": "option_3", "text": "Returns a reference to the original object", "isCorrect": false },
      { "id": "option_4", "text": "Creates a duplicate of the object without freezing", "isCorrect": true }
    ],
    "hint": "This method makes a copy but does not retain frozen status.",
    "answerDescription": "The 'dup' method in Ruby creates a shallow copy of an object but does not duplicate the frozen state."
  },
  {
    "id": "ruby_824",
    "question": "Which method in Ruby is used to create a copy of an object including frozen state?",
    "options": [
      { "id": "option_1", "text": "clone_copy", "isCorrect": false },
      { "id": "option_2", "text": "copy", "isCorrect": false },
      { "id": "option_3", "text": "duplicate", "isCorrect": false },
      { "id": "option_4", "text": "clone", "isCorrect": true }
    ],
    "hint": "This method duplicates the object along with its frozen state.",
    "answerDescription": "The 'clone' method in Ruby creates a copy of an object and retains the frozen state if applicable."
  },
  {
    "id": "ruby_825",
    "question": "What does 'super' do in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Calls another method in the same class", "isCorrect": false },
      { "id": "option_2", "text": "Defines a superclass method", "isCorrect": false },
      { "id": "option_3", "text": "Creates a new method dynamically", "isCorrect": false },
      { "id": "option_4", "text": "Calls the same method in the superclass", "isCorrect": true }
    ],
    "hint": "This keyword is used for method overriding in subclasses.",
    "answerDescription": "In Ruby, 'super' is used to call the same method from the superclass, often with or without arguments."
  },
  {
    "id": "ruby_826",
    "question": "What does 'self' refer to inside an instance method?",
    "options": [
      { "id": "option_1", "text": "The superclass of the object", "isCorrect": false },
      { "id": "option_2", "text": "The class itself", "isCorrect": false },
      { "id": "option_3", "text": "A new instance of the class", "isCorrect": false },
      { "id": "option_4", "text": "The current instance of the class", "isCorrect": true }
    ],
    "hint": "It represents the object that the method is called on.",
    "answerDescription": "In Ruby, 'self' inside an instance method refers to the instance of the class on which the method is invoked."
  },
  {
    "id": "ruby_827",
    "question": "Which method is called automatically when an object is garbage collected?",
    "options": [
      { "id": "option_1", "text": "delete", "isCorrect": false },
      { "id": "option_2", "text": "remove", "isCorrect": false },
      { "id": "option_3", "text": "destroy", "isCorrect": false },
      { "id": "option_4", "text": "finalize", "isCorrect": true }
    ],
    "hint": "This method is rarely used but can be overridden for cleanup.",
    "answerDescription": "In Ruby, 'finalize' is called just before an object is destroyed by the garbage collector."
  },
  {
    "id": "ruby_828",
    "question": "What does 'method_missing' do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines a new method dynamically", "isCorrect": false },
      { "id": "option_2", "text": "Throws an error for undefined methods", "isCorrect": false },
      { "id": "option_3", "text": "Ignores calls to non-existent methods", "isCorrect": false },
      { "id": "option_4", "text": "Handles calls to undefined methods", "isCorrect": true }
    ],
    "hint": "This method is useful for dynamic method handling.",
    "answerDescription": "The 'method_missing' method in Ruby intercepts calls to undefined methods and allows custom handling."
  },
  {
    "id": "ruby_829",
    "question": "How can you list all instance methods of a Ruby class?",
    "options": [
      { "id": "option_1", "text": "methods_list", "isCorrect": false },
      { "id": "option_2", "text": "all_methods", "isCorrect": false },
      { "id": "option_3", "text": "list_methods", "isCorrect": false },
      { "id": "option_4", "text": "instance_methods", "isCorrect": true }
    ],
    "hint": "This method is available on class objects and lists defined instance methods.",
    "answerDescription": "The 'instance_methods' method in Ruby returns an array of all instance methods defined in a class."
  },
  {
    "id": "ruby_830",
    "question": "Which method returns the object's unique identifier?",
    "options": [
      { "id": "option_1", "text": "get_id", "isCorrect": false },
      { "id": "option_2", "text": "uuid", "isCorrect": false },
      { "id": "option_3", "text": "unique_id", "isCorrect": false },
      { "id": "option_4", "text": "object_id", "isCorrect": true }
    ],
    "hint": "This method gives a unique numerical representation of an object.",
    "answerDescription": "The 'object_id' method in Ruby returns a unique identifier for an object in memory."
  },  {
    "id": "ruby_831",
    "question": "What is the purpose of the 'attr_accessor' method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates both getter and setter methods for an instance variable", "isCorrect": true },
      { "id": "option_2", "text": "Creates only a getter method for an instance variable", "isCorrect": false },
      { "id": "option_3", "text": "Creates only a setter method for an instance variable", "isCorrect": false },
      { "id": "option_4", "text": "Defines a class variable", "isCorrect": false }
    ],
    "hint": "This method provides a shortcut for creating getter and setter methods.",
    "answerDescription": "The 'attr_accessor' method in Ruby creates both getter and setter methods for an instance variable, allowing it to be read and modified."
  },
  {
    "id": "ruby_832",
    "question": "Which method is automatically invoked when a new object is created in Ruby?",
    "options": [
      { "id": "option_1", "text": "initialize", "isCorrect": true },
      { "id": "option_2", "text": "new", "isCorrect": false },
      { "id": "option_3", "text": "setup", "isCorrect": false },
      { "id": "option_4", "text": "create", "isCorrect": false }
    ],
    "hint": "This method is similar to a constructor in other languages.",
    "answerDescription": "The 'initialize' method in Ruby is automatically invoked when a new object is instantiated, allowing initialization of instance variables."
  },
  {
    "id": "ruby_833",
    "question": "Which keyword is used to prevent a method from being overridden in Ruby?",
    "options": [
      { "id": "option_1", "text": "freeze", "isCorrect": true },
      { "id": "option_2", "text": "final", "isCorrect": false },
      { "id": "option_3", "text": "sealed", "isCorrect": false },
      { "id": "option_4", "text": "private", "isCorrect": false }
    ],
    "hint": "This keyword is commonly used to make objects immutable as well.",
    "answerDescription": "The 'freeze' method in Ruby prevents further modifications to an object, including overriding its methods."
  },
  {
    "id": "ruby_834",
    "question": "Which keyword is used to refer to the current class in Ruby?",
    "options": [
      { "id": "option_1", "text": "self", "isCorrect": true },
      { "id": "option_2", "text": "this", "isCorrect": false },
      { "id": "option_3", "text": "current", "isCorrect": false },
      { "id": "option_4", "text": "instance", "isCorrect": false }
    ],
    "hint": "This keyword is used both in instance and class methods.",
    "answerDescription": "The 'self' keyword in Ruby refers to the current instance of the class within an instance method."
  },
  {
    "id": "ruby_835",
    "question": "What will happen if you call a private method outside the class in Ruby?",
    "options": [
      { "id": "option_1", "text": "It will raise a NoMethodError", "isCorrect": true },
      { "id": "option_2", "text": "It will execute successfully", "isCorrect": false },
      { "id": "option_3", "text": "It will return nil", "isCorrect": false },
      { "id": "option_4", "text": "It will create a new instance of the class", "isCorrect": false }
    ],
    "hint": "Private methods can only be accessed inside the class where they are defined.",
    "answerDescription": "Calling a private method outside of its class in Ruby results in a NoMethodError because private methods cannot be accessed from outside their defining class."
  },
  {
    "id": "ruby_836",
    "question": "What is the difference between 'public' and 'private' methods in Ruby?",
    "options": [
      { "id": "option_1", "text": "Public methods can be accessed anywhere, private methods only within the class", "isCorrect": true },
      { "id": "option_2", "text": "Private methods can be accessed outside the class", "isCorrect": false },
      { "id": "option_3", "text": "There is no difference", "isCorrect": false },
      { "id": "option_4", "text": "Private methods can be called on an instance, but public methods cannot", "isCorrect": false }
    ],
    "hint": "Public methods are accessible anywhere, but private methods are restricted.",
    "answerDescription": "In Ruby, public methods can be accessed anywhere, while private methods can only be called within the class without an explicit receiver."
  },
  {
    "id": "ruby_837",
    "question": "What is the purpose of 'attr_reader' in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates a getter method for an instance variable", "isCorrect": true },
      { "id": "option_2", "text": "Creates both getter and setter methods", "isCorrect": false },
      { "id": "option_3", "text": "Creates only a setter method", "isCorrect": false },
      { "id": "option_4", "text": "Creates a class variable", "isCorrect": false }
    ],
    "hint": "This method allows reading the value of an instance variable but not modifying it.",
    "answerDescription": "The 'attr_reader' method in Ruby creates a getter method, allowing an instance variable's value to be read but not changed."
  },
  {
    "id": "ruby_838",
    "question": "How can you check if an object is an instance of a specific class in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the 'is_a?' method", "isCorrect": true },
      { "id": "option_2", "text": "Using the 'typeof' method", "isCorrect": false },
      { "id": "option_3", "text": "Using the 'class_of' method", "isCorrect": false },
      { "id": "option_4", "text": "Using the 'instanceof' method", "isCorrect": false }
    ],
    "hint": "This method checks the class hierarchy of an object.",
    "answerDescription": "The 'is_a?' method in Ruby checks if an object is an instance of a specific class or its subclass."
  },
  {
    "id": "ruby_839",
    "question": "Which method is used to determine an object's class in Ruby?",
    "options": [
      { "id": "option_1", "text": "class", "isCorrect": true },
      { "id": "option_2", "text": "type", "isCorrect": false },
      { "id": "option_3", "text": "typeof", "isCorrect": false },
      { "id": "option_4", "text": "object_type", "isCorrect": false }
    ],
    "hint": "This method is directly called on an object to get its class.",
    "answerDescription": "In Ruby, the 'class' method is used to determine the class of an object."
  },
  {
    "id": "ruby_840",
    "question": "Which method is used to check if an object responds to a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "respond_to?", "isCorrect": true },
      { "id": "option_2", "text": "method_exists?", "isCorrect": false },
      { "id": "option_3", "text": "has_method?", "isCorrect": false },
      { "id": "option_4", "text": "method_defined?", "isCorrect": false }
    ],
    "hint": "This method checks whether an object has a given method.",
    "answerDescription": "The 'respond_to?' method in Ruby checks if an object can respond to a specific method."
  },
  {
    "id": "ruby_841",
    "question": "What is the primary benefit of using instance variables in a Ruby class?",
    "options": [
      { "id": "option_1", "text": "They allow direct modification of class variables", "isCorrect": false },
      { "id": "option_2", "text": "They store object-specific data", "isCorrect": true },
      { "id": "option_3", "text": "They create global variables accessible from anywhere", "isCorrect": false },
      { "id": "option_4", "text": "They define constant values", "isCorrect": false }
    ],
    "hint": "Instance variables store data that belongs to a particular object.",
    "answerDescription": "Instance variables in Ruby store object-specific data and are different for each instance of the class."
  },
  {
    "id": "ruby_842",
    "question": "Which method is used to define a class method in Ruby?",
    "options": [
      { "id": "option_1", "text": "self.new", "isCorrect": false },
      { "id": "option_2", "text": "self.method_name", "isCorrect": true },
      { "id": "option_3", "text": "class_method", "isCorrect": false },
      { "id": "option_4", "text": "define_class", "isCorrect": false }
    ],
    "hint": "This method uses 'self' to specify that it belongs to the class, not an instance.",
    "answerDescription": "A class method in Ruby is defined using 'self.method_name', making it callable on the class itself rather than an instance."
  },
  {
    "id": "ruby_843",
    "question": "How do you create a new instance of a class in Ruby?",
    "options": [
      { "id": "option_1", "text": "Class.create()", "isCorrect": false },
      { "id": "option_2", "text": "Class.new", "isCorrect": true },
      { "id": "option_3", "text": "new Class()", "isCorrect": false },
      { "id": "option_4", "text": "Class.initialize()", "isCorrect": false }
    ],
    "hint": "This method triggers the 'initialize' method when called on a class.",
    "answerDescription": "In Ruby, a new instance of a class is created using 'Class.new', which calls the 'initialize' method."
  },
  {
    "id": "ruby_844",
    "question": "What is the purpose of the 'super' keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "It defines a superclass", "isCorrect": false },
      { "id": "option_2", "text": "It calls the parent class's method", "isCorrect": true },
      { "id": "option_3", "text": "It makes a method private", "isCorrect": false },
      { "id": "option_4", "text": "It prevents method overriding", "isCorrect": false }
    ],
    "hint": "This keyword is used to invoke the method from the superclass.",
    "answerDescription": "The 'super' keyword in Ruby calls the method with the same name from the parent class, allowing method inheritance."
  },
  {
    "id": "ruby_845",
    "question": "What is the difference between 'attr_writer' and 'attr_accessor' in Ruby?",
    "options": [
      { "id": "option_1", "text": "'attr_writer' creates only a getter method", "isCorrect": false },
      { "id": "option_2", "text": "'attr_writer' creates a setter, while 'attr_accessor' creates both getter and setter", "isCorrect": true },
      { "id": "option_3", "text": "'attr_accessor' creates only a setter method", "isCorrect": false },
      { "id": "option_4", "text": "'attr_writer' allows access to constants", "isCorrect": false }
    ],
    "hint": "'attr_writer' allows modification, but 'attr_accessor' allows both reading and writing.",
    "answerDescription": "'attr_writer' defines a setter method only, while 'attr_accessor' defines both getter and setter methods."
  },
  {
    "id": "ruby_846",
    "question": "Which keyword is used to define a subclass in Ruby?",
    "options": [
      { "id": "option_1", "text": "inherits", "isCorrect": false },
      { "id": "option_2", "text": "<", "isCorrect": true },
      { "id": "option_3", "text": "extends", "isCorrect": false },
      { "id": "option_4", "text": "superclass", "isCorrect": false }
    ],
    "hint": "This symbol is placed after the class name to indicate inheritance.",
    "answerDescription": "In Ruby, a subclass is defined using '<', meaning it inherits from the specified superclass."
  },
  {
    "id": "ruby_847",
    "question": "Which method is used to check if an object is from a particular class?",
    "options": [
      { "id": "option_1", "text": "class?", "isCorrect": false },
      { "id": "option_2", "text": "instance_of?", "isCorrect": true },
      { "id": "option_3", "text": "is_instance?", "isCorrect": false },
      { "id": "option_4", "text": "typeof?", "isCorrect": false }
    ],
    "hint": "This method returns true only if the object is an instance of the exact class.",
    "answerDescription": "The 'instance_of?' method checks whether an object is an instance of a specific class."
  },
  {
    "id": "ruby_848",
    "question": "How do you prevent a class from being subclassed in Ruby?",
    "options": [
      { "id": "option_1", "text": "By using 'final' keyword", "isCorrect": false },
      { "id": "option_2", "text": "By making all methods private", "isCorrect": true },
      { "id": "option_3", "text": "By using 'sealed'", "isCorrect": false },
      { "id": "option_4", "text": "By overriding the superclass", "isCorrect": false }
    ],
    "hint": "Ruby does not have a built-in keyword for this, but methods can be restricted.",
    "answerDescription": "In Ruby, preventing subclassing can be done by making all the methods private or using metaprogramming techniques."
  },
  {
    "id": "ruby_849",
    "question": "What does the 'dup' method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates a deep copy of an object", "isCorrect": false },
      { "id": "option_2", "text": "Creates a shallow copy of an object", "isCorrect": true },
      { "id": "option_3", "text": "Returns the object's class", "isCorrect": false },
      { "id": "option_4", "text": "Deletes an object", "isCorrect": false }
    ],
    "hint": "This method copies an object but does not copy singleton methods.",
    "answerDescription": "The 'dup' method in Ruby creates a shallow copy of an object, meaning it duplicates the object's instance variables but not its singleton methods."
  },
  {
    "id": "ruby_850",
    "question": "Which of the following is a correct way to define a constructor in Ruby?",
    "options": [
      { "id": "option_1", "text": "def constructor", "isCorrect": false },
      { "id": "option_2", "text": "def initialize", "isCorrect": true },
      { "id": "option_3", "text": "def new", "isCorrect": false },
      { "id": "option_4", "text": "def create", "isCorrect": false }
    ],
    "hint": "This method is automatically called when an object is instantiated.",
    "answerDescription": "In Ruby, the 'initialize' method is used as a constructor and is automatically called when a new object is created."
  },  {
    "id": "ruby_851",
    "question": "What is the default visibility of methods in a Ruby class?",
    "options": [
      { "id": "option_1", "text": "Protected", "isCorrect": false },
      { "id": "option_2", "text": "Private", "isCorrect": false },
      { "id": "option_3", "text": "Public", "isCorrect": true },
      { "id": "option_4", "text": "Internal", "isCorrect": false }
    ],
    "hint": "In Ruby, methods can be called from anywhere unless explicitly restricted.",
    "answerDescription": "By default, methods in a Ruby class are public unless explicitly declared as private or protected."
  },
  {
    "id": "ruby_852",
    "question": "Which method is automatically called when an object is created in Ruby?",
    "options": [
      { "id": "option_1", "text": "new_instance", "isCorrect": false },
      { "id": "option_2", "text": "constructor", "isCorrect": false },
      { "id": "option_3", "text": "initialize", "isCorrect": true },
      { "id": "option_4", "text": "setup", "isCorrect": false }
    ],
    "hint": "This method is defined inside a class and is invoked upon object creation.",
    "answerDescription": "The 'initialize' method in Ruby acts as a constructor and is automatically called when a new object is instantiated."
  },
  {
    "id": "ruby_853",
    "question": "Which keyword is used to access instance variables inside a Ruby class?",
    "options": [
      { "id": "option_1", "text": "this", "isCorrect": false },
      { "id": "option_2", "text": "self", "isCorrect": false },
      { "id": "option_3", "text": "@", "isCorrect": true },
      { "id": "option_4", "text": "var", "isCorrect": false }
    ],
    "hint": "Instance variables in Ruby are prefixed with a special symbol.",
    "answerDescription": "Instance variables in Ruby are denoted with '@', such as '@variable', and store object-specific data."
  },
  {
    "id": "ruby_854",
    "question": "What is the difference between '==', 'eql?', and 'equal?' in Ruby?",
    "options": [
      { "id": "option_1", "text": "'==' compares memory addresses", "isCorrect": false },
      { "id": "option_2", "text": "'equal?' checks only values", "isCorrect": false },
      { "id": "option_3", "text": "'==' checks value equality, 'eql?' checks type and value, 'equal?' checks object identity", "isCorrect": true },
      { "id": "option_4", "text": "There is no difference", "isCorrect": false }
    ],
    "hint": "One checks values, another checks type + value, and the last checks identity.",
    "answerDescription": "'==' compares values, 'eql?' checks both value and type, and 'equal?' checks whether two objects have the same memory address."
  },
  {
    "id": "ruby_855",
    "question": "How do you prevent an instance variable from being modified outside a Ruby class?",
    "options": [
      { "id": "option_1", "text": "Using 'attr_reader'", "isCorrect": false },
      { "id": "option_2", "text": "Using 'attr_accessor'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'attr_writer'", "isCorrect": true },
      { "id": "option_4", "text": "Using 'public'", "isCorrect": false }
    ],
    "hint": "'attr_writer' only allows setting a value but not reading it.",
    "answerDescription": "'attr_writer' allows modification of an instance variable but does not provide a getter method to read its value."
  },
  {
    "id": "ruby_856",
    "question": "Which of the following is true about Ruby's method lookup path?",
    "options": [
      { "id": "option_1", "text": "Ruby first checks private methods before public ones", "isCorrect": false },
      { "id": "option_2", "text": "Instance methods are checked before class methods", "isCorrect": false },
      { "id": "option_3", "text": "Ruby checks the object's class, then included modules, then its superclass", "isCorrect": true },
      { "id": "option_4", "text": "Modules take priority over the object's class", "isCorrect": false }
    ],
    "hint": "Ruby first checks the class, then included modules, then the superclass.",
    "answerDescription": "Ruby follows a method lookup path: first checking the object's class, then included modules, and finally its superclass."
  },
  {
    "id": "ruby_857",
    "question": "Which of the following statements about mixins in Ruby is correct?",
    "options": [
      { "id": "option_1", "text": "Mixins are classes that inherit from multiple superclasses", "isCorrect": false },
      { "id": "option_2", "text": "Mixins are used to extend class functionality without inheritance", "isCorrect": false },
      { "id": "option_3", "text": "Mixins are implemented using Ruby modules", "isCorrect": true },
      { "id": "option_4", "text": "Mixins require the 'extend' keyword", "isCorrect": false }
    ],
    "hint": "Mixins in Ruby use modules to add functionality to classes.",
    "answerDescription": "Mixins in Ruby are implemented using modules, which allow code reuse without using traditional class inheritance."
  },
  {
    "id": "ruby_858",
    "question": "What does the 'freeze' method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Deletes an object", "isCorrect": false },
      { "id": "option_2", "text": "Prevents an object from being referenced", "isCorrect": false },
      { "id": "option_3", "text": "Prevents an object from being modified", "isCorrect": true },
      { "id": "option_4", "text": "Makes an object immutable for 10 seconds", "isCorrect": false }
    ],
    "hint": "Once applied, this method makes the object immutable.",
    "answerDescription": "The 'freeze' method prevents an object from being modified, making it immutable."
  },
  {
    "id": "ruby_859",
    "question": "Which of the following is the correct way to define a singleton method in Ruby?",
    "options": [
      { "id": "option_1", "text": "def self.method_name", "isCorrect": false },
      { "id": "option_2", "text": "def singleton_method", "isCorrect": false },
      { "id": "option_3", "text": "def object.method_name", "isCorrect": true },
      { "id": "option_4", "text": "def instance.method_name", "isCorrect": false }
    ],
    "hint": "Singleton methods are defined on a specific object, not a class.",
    "answerDescription": "A singleton method is defined on a single object using 'def object.method_name'."
  },
  {
    "id": "ruby_860",
    "question": "How can you override the 'to_s' method in Ruby?",
    "options": [
      { "id": "option_1", "text": "def override_to_s", "isCorrect": false },
      { "id": "option_2", "text": "def new_to_s", "isCorrect": false },
      { "id": "option_3", "text": "def to_s", "isCorrect": true },
      { "id": "option_4", "text": "def change_to_s", "isCorrect": false }
    ],
    "hint": "This method returns a string representation of an object.",
    "answerDescription": "In Ruby, you can override 'to_s' by defining 'def to_s' inside a class to customize how an object is represented as a string."
  },  {
    "id": "ruby_861",
    "question": "Which of the following is true about instance variables in Ruby?",
    "options": [
      { "id": "option_1", "text": "They are accessible from any class" , "isCorrect": false },
      { "id": "option_2", "text": "They must be declared before use", "isCorrect": false },
      { "id": "option_3", "text": "They are automatically garbage collected", "isCorrect": false },
      { "id": "option_4", "text": "They begin with '@' and are unique to each object", "isCorrect": true }
    ],
    "hint": "These variables start with a special character and belong to a specific instance.",
    "answerDescription": "Instance variables in Ruby start with '@' and are specific to an object instance."
  },
  {
    "id": "ruby_862",
    "question": "What is the purpose of 'attr_accessor' in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines only getter methods", "isCorrect": false },
      { "id": "option_2", "text": "Defines only setter methods", "isCorrect": false },
      { "id": "option_3", "text": "Creates a constant variable", "isCorrect": false },
      { "id": "option_4", "text": "Defines both getter and setter methods", "isCorrect": true }
    ],
    "hint": "This keyword creates methods that allow both reading and writing of an instance variable.",
    "answerDescription": "'attr_accessor' defines both getter and setter methods for an instance variable in Ruby."
  },
  {
    "id": "ruby_863",
    "question": "How can you define a class method in Ruby?",
    "options": [
      { "id": "option_1", "text": "By prefixing the method name with '@@'", "isCorrect": false },
      { "id": "option_2", "text": "By using the 'def' keyword inside a module", "isCorrect": false },
      { "id": "option_3", "text": "By using 'private' before the method", "isCorrect": false },
      { "id": "option_4", "text": "By prefixing the method name with 'self.'", "isCorrect": true }
    ],
    "hint": "Class methods are called on the class itself, not instances.",
    "answerDescription": "Class methods in Ruby are defined using 'def self.method_name', making them callable on the class."
  },
  {
    "id": "ruby_864",
    "question": "Which Ruby keyword is used to inherit from a parent class?",
    "options": [
      { "id": "option_1", "text": "extend", "isCorrect": false },
      { "id": "option_2", "text": "include", "isCorrect": false },
      { "id": "option_3", "text": "inherit", "isCorrect": false },
      { "id": "option_4", "text": "<", "isCorrect": true }
    ],
    "hint": "Inheritance in Ruby is represented using a special symbol.",
    "answerDescription": "In Ruby, inheritance is denoted using the '<' symbol (e.g., 'class Child < Parent')."
  },
  {
    "id": "ruby_865",
    "question": "What does 'super' do in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Calls a method with the same name from the current class", "isCorrect": false },
      { "id": "option_2", "text": "Creates a superclass dynamically", "isCorrect": false },
      { "id": "option_3", "text": "Defines a new method within a module", "isCorrect": false },
      { "id": "option_4", "text": "Calls the same method from the superclass", "isCorrect": true }
    ],
    "hint": "It allows a method to reuse functionality from its parent class.",
    "answerDescription": "'super' calls a method of the same name from the superclass, passing arguments implicitly."
  },
  {
    "id": "ruby_866",
    "question": "What does the 'dup' method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Deletes an object", "isCorrect": false },
      { "id": "option_2", "text": "Copies an object but keeps its frozen state", "isCorrect": false },
      { "id": "option_3", "text": "Creates a reference to the original object", "isCorrect": false },
      { "id": "option_4", "text": "Creates a shallow copy of an object", "isCorrect": true }
    ],
    "hint": "This method creates a copy of an object but does not copy singleton methods.",
    "answerDescription": "'dup' creates a shallow copy of an object but does not copy its singleton methods."
  },
  {
    "id": "ruby_867",
    "question": "What is an instance method in Ruby?",
    "options": [
      { "id": "option_1", "text": "A method that is only available to class methods", "isCorrect": false },
      { "id": "option_2", "text": "A method that must be prefixed with 'self.'", "isCorrect": false },
      { "id": "option_3", "text": "A method that is available only to the superclass", "isCorrect": false },
      { "id": "option_4", "text": "A method that can be called on an instance of a class", "isCorrect": true }
    ],
    "hint": "These methods belong to specific objects, not the class itself.",
    "answerDescription": "Instance methods are defined within a class and can be called on an instance of that class."
  },
  {
    "id": "ruby_868",
    "question": "Which of the following statements is true about method overloading in Ruby?",
    "options": [
      { "id": "option_1", "text": "Ruby supports method overloading like Java", "isCorrect": false },
      { "id": "option_2", "text": "Ruby requires method names to be unique within a class", "isCorrect": false },
      { "id": "option_3", "text": "You can overload methods by defining multiple methods with the same name", "isCorrect": false },
      { "id": "option_4", "text": "Ruby does not support traditional method overloading", "isCorrect": true }
    ],
    "hint": "Ruby does not allow multiple methods with the same name but different parameters.",
    "answerDescription": "Ruby does not support traditional method overloading. Instead, default arguments and variable arguments are used to handle different cases."
  },
  {
    "id": "ruby_869",
    "question": "How can you prevent a method from being overridden in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using 'protected'", "isCorrect": false },
      { "id": "option_2", "text": "Using 'attr_reader'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'self.' before method name", "isCorrect": false },
      { "id": "option_4", "text": "Using 'freeze' or 'finalize' is not possible in Ruby", "isCorrect": true }
    ],
    "hint": "Ruby does not provide a built-in 'final' keyword like Java.",
    "answerDescription": "Ruby does not have a direct way to prevent method overriding. However, design patterns can be used to limit method modification."
  },
  {
    "id": "ruby_870",
    "question": "What happens if you call an undefined method on an object?",
    "options": [
      { "id": "option_1", "text": "Ruby automatically defines the method", "isCorrect": false },
      { "id": "option_2", "text": "Ruby ignores the method call", "isCorrect": false },
      { "id": "option_3", "text": "Ruby raises a syntax error", "isCorrect": false },
      { "id": "option_4", "text": "Ruby raises a NoMethodError", "isCorrect": true }
    ],
    "hint": "An error occurs when an undefined method is called on an object.",
    "answerDescription": "Ruby raises a 'NoMethodError' when a method that is not defined on an object is called."
  },
  {
    "id": "ruby_871",
    "question": "Which method checks if a string is empty in Ruby?",
    "options": [
      { "id": "option_1", "text": "empty?", "isCorrect": true },
      { "id": "option_2", "text": "null?", "isCorrect": false },
      { "id": "option_3", "text": "size == 0", "isCorrect": false },
      { "id": "option_4", "text": "length == 0", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the string has no characters.",
    "answerDescription": "The `empty?` method checks if a string is empty."
  },
  {
    "id": "ruby_872",
    "question": "What does the 'initialize' method do in a Ruby class?",
    "options": [
      { "id": "option_1", "text": "Acts as a constructor for initializing objects", "isCorrect": true },
      { "id": "option_2", "text": "Defines a new class", "isCorrect": false },
      { "id": "option_3", "text": "Creates a singleton method", "isCorrect": false },
      { "id": "option_4", "text": "Loads an external file", "isCorrect": false }
    ],
    "hint": "This method is automatically called when a new object is created.",
    "answerDescription": "In Ruby, the 'initialize' method acts as a constructor and runs automatically when an object is instantiated."
  },
  {
    "id": "ruby_873",
    "question": "Which symbol is used to indicate an instance variable in Ruby?",
    "options": [
      { "id": "option_1", "text": "@", "isCorrect": true },
      { "id": "option_2", "text": "#", "isCorrect": false },
      { "id": "option_3", "text": "$", "isCorrect": false },
      { "id": "option_4", "text": "!", "isCorrect": false }
    ],
    "hint": "Instance variables in Ruby begin with a special character.",
    "answerDescription": "Instance variables in Ruby start with '@', distinguishing them from local variables."
  },
  {
    "id": "ruby_874",
    "question": "How do you create an object of a class in Ruby?",
    "options": [
      { "id": "option_1", "text": "By calling 'new' on the class", "isCorrect": true },
      { "id": "option_2", "text": "By using 'create'", "isCorrect": false },
      { "id": "option_3", "text": "By calling 'initialize' manually", "isCorrect": false },
      { "id": "option_4", "text": "By using 'instantiate'", "isCorrect": false }
    ],
    "hint": "A method is used to instantiate an object from a class.",
    "answerDescription": "In Ruby, objects are created by calling the 'new' method on a class (e.g., 'obj = ClassName.new')."
  },
  {
    "id": "ruby_875",
    "question": "What is the purpose of 'attr_reader' in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates a getter method for an instance variable", "isCorrect": true },
      { "id": "option_2", "text": "Creates both getter and setter methods", "isCorrect": false },
      { "id": "option_3", "text": "Creates only a setter method", "isCorrect": false },
      { "id": "option_4", "text": "Declares a constant", "isCorrect": false }
    ],
    "hint": "This keyword allows reading an instance variable without defining an explicit method.",
    "answerDescription": "'attr_reader' automatically defines a getter method for an instance variable, making it readable."
  },
  {
    "id": "ruby_876",
    "question": "What is the superclass of all classes in Ruby?",
    "options": [
      { "id": "option_1", "text": "Object", "isCorrect": true },
      { "id": "option_2", "text": "Base", "isCorrect": false },
      { "id": "option_3", "text": "SuperClass", "isCorrect": false },
      { "id": "option_4", "text": "Kernel", "isCorrect": false }
    ],
    "hint": "This class is at the top of the Ruby class hierarchy.",
    "answerDescription": "In Ruby, all classes inherit from 'Object', which provides core functionalities."
  },
  {
    "id": "ruby_877",
    "question": "What does 'self' refer to inside an instance method?",
    "options": [
      { "id": "option_1", "text": "The current instance of the class", "isCorrect": true },
      { "id": "option_2", "text": "The parent class", "isCorrect": false },
      { "id": "option_3", "text": "The global scope", "isCorrect": false },
      { "id": "option_4", "text": "A singleton method", "isCorrect": false }
    ],
    "hint": "Inside an instance method, 'self' represents the current object.",
    "answerDescription": "Within an instance method, 'self' refers to the current instance of the class, allowing access to instance variables and methods."
  },
  {
    "id": "ruby_878",
    "question": "Which method can be used to check if an object is an instance of a specific class?",
    "options": [
      { "id": "option_1", "text": "is_a?", "isCorrect": true },
      { "id": "option_2", "text": "instance_of?", "isCorrect": false },
      { "id": "option_3", "text": "type?", "isCorrect": false },
      { "id": "option_4", "text": "object_class?", "isCorrect": false }
    ],
    "hint": "This method checks an object's inheritance hierarchy.",
    "answerDescription": "'is_a?' returns true if an object is an instance of the given class or its subclass."
  },
  {
    "id": "ruby_879",
    "question": "Which method is called when an undefined method is invoked on an object?",
    "options": [
      { "id": "option_1", "text": "method_missing", "isCorrect": true },
      { "id": "option_2", "text": "undefined_method", "isCorrect": false },
      { "id": "option_3", "text": "no_method", "isCorrect": false },
      { "id": "option_4", "text": "method_error", "isCorrect": false }
    ],
    "hint": "This method handles missing methods dynamically.",
    "answerDescription": "'method_missing' allows custom behavior when an undefined method is called on an object."
  },
  {
    "id": "ruby_880",
    "question": "How can you access a constant inside a class?",
    "options": [
      { "id": "option_1", "text": "By using the class name followed by '::'", "isCorrect": true },
      { "id": "option_2", "text": "By using '@@'", "isCorrect": false },
      { "id": "option_3", "text": "By using '$'", "isCorrect": false },
      { "id": "option_4", "text": "By using 'self.'", "isCorrect": false }
    ],
    "hint": "Constants are accessed using the class name and a special operator.",
    "answerDescription": "In Ruby, constants inside a class are accessed using 'ClassName::CONSTANT_NAME'."
  }, 
  {
    "id": "ruby_881",
    "question": "Which keyword is used to handle exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "begin", "isCorrect": true },
      { "id": "option_2", "text": "catch", "isCorrect": false },
      { "id": "option_3", "text": "handle", "isCorrect": false },
      { "id": "option_4", "text": "exception", "isCorrect": false }
    ],
    "hint": "This keyword starts the block where an exception might occur.",
    "answerDescription": "In Ruby, exceptions are handled using the 'begin' keyword, which starts a block where errors can be rescued."
  },
  {
    "id": "ruby_882",
    "question": "Which keyword is used to define code that should run regardless of whether an exception occurs?",
    "options": [
      { "id": "option_1", "text": "ensure", "isCorrect": true },
      { "id": "option_2", "text": "rescue", "isCorrect": false },
      { "id": "option_3", "text": "finally", "isCorrect": false },
      { "id": "option_4", "text": "except", "isCorrect": false }
    ],
    "hint": "This keyword ensures that the block of code always executes.",
    "answerDescription": "The 'ensure' block in Ruby is always executed, whether an exception is raised or not."
  },
  {
    "id": "ruby_883",
    "question": "How do you raise an exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the 'raise' keyword", "isCorrect": true },
      { "id": "option_2", "text": "Using the 'throw' keyword", "isCorrect": false },
      { "id": "option_3", "text": "Using the 'rescue' keyword", "isCorrect": false },
      { "id": "option_4", "text": "Using the 'error' keyword", "isCorrect": false }
    ],
    "hint": "This keyword explicitly triggers an exception.",
    "answerDescription": "In Ruby, the 'raise' keyword is used to raise exceptions explicitly."
  },
  {
    "id": "ruby_884",
    "question": "Which keyword is used to handle a specific exception type in Ruby?",
    "options": [
      { "id": "option_1", "text": "rescue", "isCorrect": true },
      { "id": "option_2", "text": "catch", "isCorrect": false },
      { "id": "option_3", "text": "handle", "isCorrect": false },
      { "id": "option_4", "text": "trap", "isCorrect": false }
    ],
    "hint": "This keyword is used inside a 'begin' block to handle exceptions.",
    "answerDescription": "The 'rescue' keyword in Ruby is used to catch and handle specific exceptions within a 'begin' block."
  },
  {
    "id": "ruby_885",
    "question": "What is the superclass of all exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "Exception", "isCorrect": true },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "This class is the root of Ruby's exception hierarchy.",
    "answerDescription": "In Ruby, all exceptions inherit from the 'Exception' class, which is the top-level exception class."
  },
  {
    "id": "ruby_886",
    "question": "Which exception is raised when you try to divide by zero in Ruby?",
    "options": [
      { "id": "option_1", "text": "ZeroDivisionError", "isCorrect": true },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "MathError", "isCorrect": false }
    ],
    "hint": "The name of this exception describes the arithmetic error it represents.",
    "answerDescription": "Ruby raises a 'ZeroDivisionError' when an attempt is made to divide a number by zero."
  },
  {
    "id": "ruby_887",
    "question": "Which keyword is used to define a custom exception class in Ruby?",
    "options": [
      { "id": "option_1", "text": "class", "isCorrect": true },
      { "id": "option_2", "text": "exception", "isCorrect": false },
      { "id": "option_3", "text": "raise", "isCorrect": false },
      { "id": "option_4", "text": "rescue", "isCorrect": false }
    ],
    "hint": "In Ruby, exceptions are just classes that inherit from 'StandardError' or 'Exception'.",
    "answerDescription": "To define a custom exception, create a new class that inherits from 'StandardError' using the 'class' keyword."
  },
  {
    "id": "ruby_888",
    "question": "What happens if an exception is not rescued in Ruby?",
    "options": [
      { "id": "option_1", "text": "The program terminates with an error message", "isCorrect": true },
      { "id": "option_2", "text": "The program automatically retries the operation", "isCorrect": false },
      { "id": "option_3", "text": "Ruby ignores the exception and continues execution", "isCorrect": false },
      { "id": "option_4", "text": "A default error handler is invoked", "isCorrect": false }
    ],
    "hint": "Unhandled exceptions cause the program to stop execution.",
    "answerDescription": "If an exception is not rescued, Ruby terminates the program and displays an error message."
  },
  {
    "id": "ruby_889",
    "question": "Which exception class is used as the default for the 'raise' keyword?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": true },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "Exception", "isCorrect": false },
      { "id": "option_4", "text": "SyntaxError", "isCorrect": false }
    ],
    "hint": "When you use 'raise' without specifying an exception class, this is the default.",
    "answerDescription": "By default, 'raise' generates a 'RuntimeError' unless a different exception class is provided."
  },
  {
    "id": "ruby_890",
    "question": "Which method provides the full backtrace of an exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "backtrace", "isCorrect": true },
      { "id": "option_2", "text": "trace", "isCorrect": false },
      { "id": "option_3", "text": "stack", "isCorrect": false },
      { "id": "option_4", "text": "error_log", "isCorrect": false }
    ],
    "hint": "This method returns an array of strings representing the call stack at the time of the exception.",
    "answerDescription": "The 'backtrace' method in Ruby returns the call stack details when an exception occurs."
  }, 
   {
    "id": "ruby_891",
    "question": "What is the purpose of the 'rescue' clause in Ruby?",
    "options": [
      { "id": "option_1", "text": "To terminate the program when an exception occurs", "isCorrect": false },
      { "id": "option_2", "text": "To retry the failed operation", "isCorrect": false },
      { "id": "option_3", "text": "To handle exceptions and continue execution", "isCorrect": true },
      { "id": "option_4", "text": "To raise a new exception", "isCorrect": false }
    ],
    "hint": "This clause is used to handle exceptions gracefully.",
    "answerDescription": "The 'rescue' clause in Ruby is used to catch and handle exceptions, allowing the program to continue running."
  },
  {
    "id": "ruby_892",
    "question": "Which class does 'StandardError' inherit from in Ruby?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "Exception", "isCorrect": false },
      { "id": "option_3", "text": "Exception", "isCorrect": true },
      { "id": "option_4", "text": "SyntaxError", "isCorrect": false }
    ],
    "hint": "'StandardError' is a subclass of a general exception class.",
    "answerDescription": "In Ruby, 'StandardError' inherits from 'Exception', making it a common base class for most exceptions."
  },
  {
    "id": "ruby_893",
    "question": "What does 'retry' do inside a rescue block?",
    "options": [
      { "id": "option_1", "text": "Ignores the exception and continues execution", "isCorrect": false },
      { "id": "option_2", "text": "Exits the program immediately", "isCorrect": false },
      { "id": "option_3", "text": "Restarts the begin block", "isCorrect": true },
      { "id": "option_4", "text": "Logs the exception to a file", "isCorrect": false }
    ],
    "hint": "This keyword restarts the block where the exception occurred.",
    "answerDescription": "The 'retry' keyword inside a rescue block causes Ruby to restart execution from the beginning of the 'begin' block."
  },
  {
    "id": "ruby_894",
    "question": "Which error is raised when attempting to open a non-existent file?",
    "options": [
      { "id": "option_1", "text": "IOError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "Errno::ENOENT", "isCorrect": true },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "The error name includes 'ENOENT', meaning 'Error No Entry'.",
    "answerDescription": "When trying to open a non-existent file in Ruby, 'Errno::ENOENT' is raised."
  },
  {
    "id": "ruby_895",
    "question": "What does 'rescue nil' do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Ignores all exceptions and continues execution", "isCorrect": false },
      { "id": "option_2", "text": "Raises an error", "isCorrect": false },
      { "id": "option_3", "text": "Suppresses the exception and returns nil", "isCorrect": true },
      { "id": "option_4", "text": "Stops execution immediately", "isCorrect": false }
    ],
    "hint": "This approach is used to silently ignore errors.",
    "answerDescription": "In Ruby, 'rescue nil' catches exceptions and prevents them from affecting execution, returning nil instead."
  },
  {
    "id": "ruby_896",
    "question": "Which method returns the exception message in Ruby?",
    "options": [
      { "id": "option_1", "text": "exception_message", "isCorrect": false },
      { "id": "option_2", "text": "get_message", "isCorrect": false },
      { "id": "option_3", "text": "message", "isCorrect": true },
      { "id": "option_4", "text": "error_text", "isCorrect": false }
    ],
    "hint": "This method is called on an exception object to retrieve its details.",
    "answerDescription": "The 'message' method in Ruby returns the error message associated with an exception."
  },
  {
    "id": "ruby_897",
    "question": "Which exception class should be used for handling incorrect arguments in a method?",
    "options": [
      { "id": "option_1", "text": "TypeError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": true },
      { "id": "option_4", "text": "SyntaxError", "isCorrect": false }
    ],
    "hint": "This exception is specifically for wrong method parameters.",
    "answerDescription": "Ruby raises an 'ArgumentError' when a method receives incorrect arguments."
  },
  {
    "id": "ruby_898",
    "question": "Which of the following is NOT an exception class in Ruby?",
    "options": [
      { "id": "option_1", "text": "TypeError", "isCorrect": false },
      { "id": "option_2", "text": "NoMethodError", "isCorrect": false },
      { "id": "option_3", "text": "InvalidError", "isCorrect": true },
      { "id": "option_4", "text": "LoadError", "isCorrect": false }
    ],
    "hint": "This class does not exist in Ruby's standard exception hierarchy.",
    "answerDescription": "'InvalidError' is not a predefined exception class in Ruby, whereas 'TypeError', 'NoMethodError', and 'LoadError' are valid exception classes."
  },
  {
    "id": "ruby_899",
    "question": "How can you create a custom exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using 'raise :CustomError'", "isCorrect": false },
      { "id": "option_2", "text": "Using 'exception CustomError'", "isCorrect": false },
      { "id": "option_3", "text": "By creating a class that inherits from 'StandardError'", "isCorrect": true },
      { "id": "option_4", "text": "Using 'throw CustomError'", "isCorrect": false }
    ],
    "hint": "Custom exceptions should extend a built-in exception class.",
    "answerDescription": "To define a custom exception in Ruby, create a class that inherits from 'StandardError'."
  },
  {
    "id": "ruby_900",
    "question": "Which exception is raised for undefined method calls?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "MethodError", "isCorrect": false },
      { "id": "option_3", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_4", "text": "NameError", "isCorrect": false }
    ],
    "hint": "This exception occurs when calling a method that doesn't exist on an object.",
    "answerDescription": "Ruby raises a 'NoMethodError' when an undefined method is called on an object."
  },  {
    "id": "ruby_901",
    "question": "What is the default exception class in Ruby when 'raise' is called without arguments?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "Exception", "isCorrect": false },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": true }
    ],
    "hint": "Ruby assumes a default exception if none is specified.",
    "answerDescription": "When 'raise' is called without arguments, Ruby raises a 'RuntimeError' by default."
  },
  {
    "id": "ruby_902",
    "question": "Which keyword is used to ensure a block of code runs whether an exception occurs or not?",
    "options": [
      { "id": "option_1", "text": "rescue", "isCorrect": false },
      { "id": "option_2", "text": "retry", "isCorrect": false },
      { "id": "option_3", "text": "raise", "isCorrect": false },
      { "id": "option_4", "text": "ensure", "isCorrect": true }
    ],
    "hint": "This keyword guarantees execution of a block regardless of an exception.",
    "answerDescription": "The 'ensure' block in Ruby is always executed, whether an exception occurs or not."
  },
  {
    "id": "ruby_903",
    "question": "What happens if no 'rescue' clause matches an exception?",
    "options": [
      { "id": "option_1", "text": "The program continues execution", "isCorrect": false },
      { "id": "option_2", "text": "The exception is ignored", "isCorrect": false },
      { "id": "option_3", "text": "Ruby logs the exception and proceeds", "isCorrect": false },
      { "id": "option_4", "text": "The program terminates with an error", "isCorrect": true }
    ],
    "hint": "If an exception is not rescued, Ruby stops execution.",
    "answerDescription": "If an exception is not caught by any 'rescue' clause, the program will terminate with an error message."
  },
  {
    "id": "ruby_904",
    "question": "How can you define multiple rescue clauses for different exception types?",
    "options": [
      { "id": "option_1", "text": "Using multiple 'begin' blocks", "isCorrect": false },
      { "id": "option_2", "text": "By using 'else'", "isCorrect": false },
      { "id": "option_3", "text": "By nesting 'rescue' within another 'rescue'", "isCorrect": false },
      { "id": "option_4", "text": "By specifying multiple 'rescue' clauses", "isCorrect": true }
    ],
    "hint": "Each 'rescue' can catch a different exception type.",
    "answerDescription": "Ruby allows multiple 'rescue' clauses to handle different exceptions in the same 'begin' block."
  },
  {
    "id": "ruby_905",
    "question": "What is the superclass of all exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "StandardError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "SystemExit", "isCorrect": false },
      { "id": "option_4", "text": "Exception", "isCorrect": true }
    ],
    "hint": "All exceptions inherit from this base class.",
    "answerDescription": "In Ruby, all exceptions are derived from the 'Exception' class."
  },
  {
    "id": "ruby_906",
    "question": "Which method can be used to retrieve the backtrace of an exception?",
    "options": [
      { "id": "option_1", "text": "trace_log", "isCorrect": false },
      { "id": "option_2", "text": "exception_trace", "isCorrect": false },
      { "id": "option_3", "text": "get_backtrace", "isCorrect": false },
      { "id": "option_4", "text": "backtrace", "isCorrect": true }
    ],
    "hint": "This method returns an array of execution stack frames.",
    "answerDescription": "The 'backtrace' method in Ruby provides an array of the stack trace where the exception occurred."
  },
  {
    "id": "ruby_907",
    "question": "How can you rescue multiple exception types in a single rescue clause?",
    "options": [
      { "id": "option_1", "text": "By separating them with a semicolon", "isCorrect": false },
      { "id": "option_2", "text": "Using 'or' between exception names", "isCorrect": false },
      { "id": "option_3", "text": "By specifying each on a new 'rescue' line", "isCorrect": false },
      { "id": "option_4", "text": "By listing them inside square brackets", "isCorrect": true }
    ],
    "hint": "Multiple exceptions can be enclosed in an array.",
    "answerDescription": "In Ruby, multiple exception types can be rescued using 'rescue [ExceptionType1, ExceptionType2]'."
  },
  {
    "id": "ruby_908",
    "question": "Which of the following is NOT a valid Ruby exception?",
    "options": [
      { "id": "option_1", "text": "NoMemoryError", "isCorrect": false },
      { "id": "option_2", "text": "IOError", "isCorrect": false },
      { "id": "option_3", "text": "FileError", "isCorrect": false },
      { "id": "option_4", "text": "InvalidError", "isCorrect": true }
    ],
    "hint": "This exception class does not exist in Ruby.",
    "answerDescription": "'InvalidError' is not a predefined exception class in Ruby, whereas 'NoMemoryError', 'IOError', and 'FileError' are valid exceptions."
  },
  {
    "id": "ruby_909",
    "question": "Which method is used to manually raise an exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "throw", "isCorrect": false },
      { "id": "option_2", "text": "rescue", "isCorrect": false },
      { "id": "option_3", "text": "fail", "isCorrect": false },
      { "id": "option_4", "text": "raise", "isCorrect": true }
    ],
    "hint": "This method is commonly used to trigger an exception.",
    "answerDescription": "In Ruby, 'raise' is used to manually generate an exception."
  },
  {
    "id": "ruby_910",
    "question": "What happens when an exception is raised inside an 'ensure' block?",
    "options": [
      { "id": "option_1", "text": "The exception is ignored", "isCorrect": false },
      { "id": "option_2", "text": "The program continues execution normally", "isCorrect": false },
      { "id": "option_3", "text": "The original exception is overwritten", "isCorrect": false },
      { "id": "option_4", "text": "The new exception replaces any previous one", "isCorrect": true }
    ],
    "hint": "An exception in 'ensure' will override a previous one.",
    "answerDescription": "If an exception is raised inside an 'ensure' block, it will replace any existing exception that was being handled."
  },  
  {
    "id": "ruby_911",
    "question": "Which method is used to add an element at the end of an array?",
    "options": [
      { "id": "option_1", "text": "insert", "isCorrect": false },
      { "id": "option_2", "text": "push", "isCorrect": true },
      { "id": "option_3", "text": "append", "isCorrect": false },
      { "id": "option_4", "text": "add", "isCorrect": false }
    ],
    "hint": "This method modifies the original array by adding an element to the end.",
    "answerDescription": "The `push` method adds an element at the end of an array."
  },
  {
    "id": "ruby_912",
    "question": "Which class is the parent of all standard Ruby exceptions?",
    "options": [
      { "id": "option_1", "text": "Exception", "isCorrect": true },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "All exception classes in Ruby inherit from this base class.",
    "answerDescription": "'Exception' is the superclass of all exceptions in Ruby."
  },
  {
    "id": "ruby_913",
    "question": "What is the purpose of the 'retry' keyword in Ruby exception handling?",
    "options": [
      { "id": "option_1", "text": "Restarts the 'begin' block", "isCorrect": true },
      { "id": "option_2", "text": "Skips the rescue block", "isCorrect": false },
      { "id": "option_3", "text": "Suppresses the exception", "isCorrect": false },
      { "id": "option_4", "text": "Exits the program", "isCorrect": false }
    ],
    "hint": "It allows re-execution of the code that raised the exception.",
    "answerDescription": "The 'retry' keyword restarts the 'begin' block when used inside a 'rescue' clause."
  },
  {
    "id": "ruby_914",
    "question": "What does the 'raise' keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Raises an exception", "isCorrect": true },
      { "id": "option_2", "text": "Rescues an exception", "isCorrect": false },
      { "id": "option_3", "text": "Ignores an exception", "isCorrect": false },
      { "id": "option_4", "text": "Terminates a method", "isCorrect": false }
    ],
    "hint": "This keyword is used to trigger an exception manually.",
    "answerDescription": "In Ruby, 'raise' is used to explicitly raise an exception."
  },
  {
    "id": "ruby_915",
    "question": "Which method provides information about an exception’s stack trace?",
    "options": [
      { "id": "option_1", "text": "backtrace", "isCorrect": true },
      { "id": "option_2", "text": "stack_info", "isCorrect": false },
      { "id": "option_3", "text": "trace_log", "isCorrect": false },
      { "id": "option_4", "text": "error_trace", "isCorrect": false }
    ],
    "hint": "This method returns an array of execution stack frames.",
    "answerDescription": "The 'backtrace' method provides details of where an exception occurred."
  },
  {
    "id": "ruby_916",
    "question": "What is the purpose of the 'begin' block in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines a block of code for exception handling", "isCorrect": true },
      { "id": "option_2", "text": "Marks the start of a method", "isCorrect": false },
      { "id": "option_3", "text": "Loops over an array", "isCorrect": false },
      { "id": "option_4", "text": "Declares a constant", "isCorrect": false }
    ],
    "hint": "This block is used to wrap code that might raise exceptions.",
    "answerDescription": "The 'begin' block in Ruby is used to handle exceptions with 'rescue'."
  },
  {
    "id": "ruby_917",
    "question": "What does the 'else' clause in a 'begin-rescue' block do?",
    "options": [
      { "id": "option_1", "text": "Executes if no exception occurs", "isCorrect": true },
      { "id": "option_2", "text": "Executes only if an exception occurs", "isCorrect": false },
      { "id": "option_3", "text": "Rescues all exceptions", "isCorrect": false },
      { "id": "option_4", "text": "Ignores exceptions", "isCorrect": false }
    ],
    "hint": "This clause runs when no exceptions are raised in the 'begin' block.",
    "answerDescription": "The 'else' clause in Ruby executes if no exception is raised inside the 'begin' block."
  },
  {
    "id": "ruby_918",
    "question": "Which exception is raised when an invalid argument is given to a method?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": true },
      { "id": "option_2", "text": "TypeError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "NameError", "isCorrect": false }
    ],
    "hint": "This error occurs when a method is called with incorrect arguments.",
    "answerDescription": "'ArgumentError' is raised when a method receives incorrect arguments."
  },
  {
    "id": "ruby_919",
    "question": "Which keyword is used to define a custom exception class?",
    "options": [
      { "id": "option_1", "text": "class", "isCorrect": true },
      { "id": "option_2", "text": "exception", "isCorrect": false },
      { "id": "option_3", "text": "raise", "isCorrect": false },
      { "id": "option_4", "text": "rescue", "isCorrect": false }
    ],
    "hint": "Custom exceptions are defined using the object-oriented principle.",
    "answerDescription": "In Ruby, custom exception classes are defined using the 'class' keyword and inheriting from 'StandardError' or 'Exception'."
  },
  {
    "id": "ruby_920",
    "question": "What does the 'ensure' clause do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Runs code regardless of an exception occurring", "isCorrect": true },
      { "id": "option_2", "text": "Skips the rescue block", "isCorrect": false },
      { "id": "option_3", "text": "Prevents exceptions from being raised", "isCorrect": false },
      { "id": "option_4", "text": "Handles multiple exceptions", "isCorrect": false }
    ],
    "hint": "This clause is always executed, even if an exception is raised.",
    "answerDescription": "The 'ensure' clause ensures that a block of code runs no matter what."
  },  {
    "id": "ruby_921",
    "question": "Which keyword is used to raise an exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "throw", "isCorrect": false },
      { "id": "option_2", "text": "raise", "isCorrect": true },
      { "id": "option_3", "text": "rescue", "isCorrect": false },
      { "id": "option_4", "text": "catch", "isCorrect": false }
    ],
    "hint": "This keyword is used to generate exceptions manually.",
    "answerDescription": "The 'raise' keyword is used to raise an exception in Ruby."
  },
  {
    "id": "ruby_922",
    "question": "Which exception is raised when trying to divide by zero in Ruby?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_2", "text": "ZeroDivisionError", "isCorrect": true },
      { "id": "option_3", "text": "MathError", "isCorrect": false },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": false }
    ],
    "hint": "This error occurs when dividing a number by zero.",
    "answerDescription": "'ZeroDivisionError' is raised when an attempt is made to divide by zero."
  },
  {
    "id": "ruby_923",
    "question": "What does the 'rescue' keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Terminates the program", "isCorrect": false },
      { "id": "option_2", "text": "Handles exceptions", "isCorrect": true },
      { "id": "option_3", "text": "Ignores errors", "isCorrect": false },
      { "id": "option_4", "text": "Restarts the program", "isCorrect": false }
    ],
    "hint": "This keyword is used to catch exceptions in a 'begin' block.",
    "answerDescription": "The 'rescue' keyword is used to handle exceptions in Ruby."
  },
  {
    "id": "ruby_924",
    "question": "Which keyword is used to retry a block of code after handling an exception?",
    "options": [
      { "id": "option_1", "text": "restart", "isCorrect": false },
      { "id": "option_2", "text": "retry", "isCorrect": true },
      { "id": "option_3", "text": "redo", "isCorrect": false },
      { "id": "option_4", "text": "catch", "isCorrect": false }
    ],
    "hint": "This keyword can be used inside a 'rescue' block to reattempt execution.",
    "answerDescription": "'retry' is used to restart a 'begin' block after an exception."
  },
  {
    "id": "ruby_925",
    "question": "Which class is the base class for all exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "StandardError", "isCorrect": false },
      { "id": "option_2", "text": "Exception", "isCorrect": true },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "BaseError", "isCorrect": false }
    ],
    "hint": "All exceptions in Ruby are derived from this class.",
    "answerDescription": "'Exception' is the base class for all exceptions in Ruby."
  },
  {
    "id": "ruby_926",
    "question": "Which method can be used to obtain the error message from an exception object?",
    "options": [
      { "id": "option_1", "text": "info", "isCorrect": false },
      { "id": "option_2", "text": "message", "isCorrect": true },
      { "id": "option_3", "text": "description", "isCorrect": false },
      { "id": "option_4", "text": "error_text", "isCorrect": false }
    ],
    "hint": "This method returns a string describing the error.",
    "answerDescription": "The 'message' method returns the error message from an exception object."
  },
  {
    "id": "ruby_927",
    "question": "What is the purpose of the 'ensure' clause in Ruby exception handling?",
    "options": [
      { "id": "option_1", "text": "To ignore exceptions", "isCorrect": false },
      { "id": "option_2", "text": "To execute code regardless of an exception occurring", "isCorrect": true },
      { "id": "option_3", "text": "To rescue exceptions", "isCorrect": false },
      { "id": "option_4", "text": "To terminate the program", "isCorrect": false }
    ],
    "hint": "This clause ensures that a block of code always runs.",
    "answerDescription": "The 'ensure' clause executes code regardless of whether an exception occurs."
  },
  {
    "id": "ruby_928",
    "question": "Which exception is raised when calling an undefined method?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_2", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "NameError", "isCorrect": false }
    ],
    "hint": "This error occurs when a method does not exist for an object.",
    "answerDescription": "'NoMethodError' is raised when an undefined method is called on an object."
  },
  {
    "id": "ruby_929",
    "question": "Which block ensures that code runs regardless of whether an exception occurs?",
    "options": [
      { "id": "option_1", "text": "rescue", "isCorrect": false },
      { "id": "option_2", "text": "raise", "isCorrect": false },
      { "id": "option_3", "text": "ensure", "isCorrect": true },
      { "id": "option_4", "text": "catch", "isCorrect": false }
    ],
    "hint": "This block is executed after the 'begin' block, no matter what.",
    "answerDescription": "The 'ensure' block is executed whether an exception is raised or not."
  },
  {
    "id": "ruby_930",
    "question": "What does the 'begin' keyword do in Ruby exception handling?",
    "options": [
      { "id": "option_1", "text": "Defines a new method", "isCorrect": false },
      { "id": "option_2", "text": "Starts a block of code that can handle exceptions", "isCorrect": true },
      { "id": "option_3", "text": "Catches an error", "isCorrect": false },
      { "id": "option_4", "text": "Terminates a program", "isCorrect": false }
    ],
    "hint": "This keyword is used to wrap code that might raise exceptions.",
    "answerDescription": "The 'begin' keyword starts a block of code that can contain exception handling."
  },  {
    "id": "ruby_931",
    "question": "What happens when an exception is not handled in Ruby?",
    "options": [
      { "id": "option_1", "text": "The program continues executing", "isCorrect": false },
      { "id": "option_2", "text": "The program enters an infinite loop", "isCorrect": false },
      { "id": "option_3", "text": "The program terminates with an error message", "isCorrect": true },
      { "id": "option_4", "text": "Ruby ignores the exception", "isCorrect": false }
    ],
    "hint": "An unhandled exception stops execution and prints an error message.",
    "answerDescription": "If an exception is not handled in Ruby, the program terminates and displays an error message."
  },
  {
    "id": "ruby_932",
    "question": "Which keyword is used to define a block that may raise an exception?",
    "options": [
      { "id": "option_1", "text": "catch", "isCorrect": false },
      { "id": "option_2", "text": "trap", "isCorrect": false },
      { "id": "option_3", "text": "begin", "isCorrect": true },
      { "id": "option_4", "text": "retry", "isCorrect": false }
    ],
    "hint": "This keyword starts a block that includes exception handling.",
    "answerDescription": "The 'begin' keyword is used to define a block that may raise an exception."
  },
  {
    "id": "ruby_933",
    "question": "Which of the following exceptions is raised when accessing an undefined variable?",
    "options": [
      { "id": "option_1", "text": "NoMethodError", "isCorrect": false },
      { "id": "option_2", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_3", "text": "NameError", "isCorrect": true },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "This exception occurs when a variable or constant is not defined.",
    "answerDescription": "'NameError' is raised when trying to access an undefined variable in Ruby."
  },
  {
    "id": "ruby_934",
    "question": "Which method can be used to catch all exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "raise", "isCorrect": false },
      { "id": "option_2", "text": "throw", "isCorrect": false },
      { "id": "option_3", "text": "rescue", "isCorrect": true },
      { "id": "option_4", "text": "catch", "isCorrect": false }
    ],
    "hint": "This method is used inside a 'begin' block to handle errors.",
    "answerDescription": "The 'rescue' keyword is used to catch and handle exceptions in Ruby."
  },
  {
    "id": "ruby_935",
    "question": "What does the 'ensure' block do in Ruby exception handling?",
    "options": [
      { "id": "option_1", "text": "Executes only if an exception occurs", "isCorrect": false },
      { "id": "option_2", "text": "Ignores exceptions", "isCorrect": false },
      { "id": "option_3", "text": "Runs code regardless of an exception occurring", "isCorrect": true },
      { "id": "option_4", "text": "Stops exception handling", "isCorrect": false }
    ],
    "hint": "This block is executed whether an error occurs or not.",
    "answerDescription": "The 'ensure' block executes code regardless of whether an exception is raised."
  },
  {
    "id": "ruby_936",
    "question": "Which of the following is the parent class of StandardError in Ruby?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "BaseException", "isCorrect": false },
      { "id": "option_3", "text": "Exception", "isCorrect": true },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "All Ruby exceptions ultimately inherit from this class.",
    "answerDescription": "'Exception' is the parent class of 'StandardError' and other exception classes."
  },
  {
    "id": "ruby_937",
    "question": "What is the default exception class if 'raise' is used without arguments?",
    "options": [
      { "id": "option_1", "text": "Exception", "isCorrect": false },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": true },
      { "id": "option_4", "text": "StandardError", "isCorrect": false }
    ],
    "hint": "If no arguments are provided, 'raise' defaults to this exception.",
    "answerDescription": "'raise' without arguments defaults to raising a 'RuntimeError' exception."
  },
  {
    "id": "ruby_938",
    "question": "How can you provide a custom error message when raising an exception?",
    "options": [
      { "id": "option_1", "text": "Using 'throw' with a message", "isCorrect": false },
      { "id": "option_2", "text": "Using 'raise' with a string argument", "isCorrect": false },
      { "id": "option_3", "text": "Using 'raise' with a message parameter", "isCorrect": true },
      { "id": "option_4", "text": "Using 'rescue' with a message", "isCorrect": false }
    ],
    "hint": "The 'raise' method allows passing a string as an error message.",
    "answerDescription": "'raise' can take a message parameter to specify a custom error message."
  },
  {
    "id": "ruby_939",
    "question": "Which of the following is NOT a built-in Ruby exception class?",
    "options": [
      { "id": "option_1", "text": "NoMethodError", "isCorrect": false },
      { "id": "option_2", "text": "ZeroDivisionError", "isCorrect": false },
      { "id": "option_3", "text": "MemoryLeakError", "isCorrect": true },
      { "id": "option_4", "text": "LoadError", "isCorrect": false }
    ],
    "hint": "This is not a standard Ruby exception class.",
    "answerDescription": "'MemoryLeakError' does not exist in Ruby’s built-in exceptions."
  },
  {
    "id": "ruby_940",
    "question": "Which method can be used to handle an exception inline in Ruby?",
    "options": [
      { "id": "option_1", "text": "trap", "isCorrect": false },
      { "id": "option_2", "text": "catch", "isCorrect": false },
      { "id": "option_3", "text": "rescue", "isCorrect": true },
      { "id": "option_4", "text": "protect", "isCorrect": false }
    ],
    "hint": "This keyword can be used inline with method calls to handle exceptions.",
    "answerDescription": "Ruby allows inline exception handling using the 'rescue' keyword."
  },  {
    "id": "ruby_941",
    "question": "Which keyword is used to raise an exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "throw", "isCorrect": false },
      { "id": "option_2", "text": "catch", "isCorrect": false },
      { "id": "option_3", "text": "fail", "isCorrect": false },
      { "id": "option_4", "text": "raise", "isCorrect": true }
    ],
    "hint": "This keyword explicitly triggers an exception.",
    "answerDescription": "In Ruby, 'raise' is used to raise an exception."
  },
  {
    "id": "ruby_942",
    "question": "Which exception is raised when trying to call a method on nil?",
    "options": [
      { "id": "option_1", "text": "NameError", "isCorrect": false },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_4", "text": "NoMethodError", "isCorrect": true }
    ],
    "hint": "This error occurs when calling an undefined method on nil.",
    "answerDescription": "'NoMethodError' is raised when a method is called on nil or an undefined object."
  },
  {
    "id": "ruby_943",
    "question": "What will the following code output?\n\n```ruby\nbegin\n  10 / 0\nrescue ZeroDivisionError\n  puts 'Cannot divide by zero!'\nend\n```",
    "options": [
      { "id": "option_1", "text": "An error message and program termination", "isCorrect": false },
      { "id": "option_2", "text": "Nil is returned", "isCorrect": false },
      { "id": "option_3", "text": "Infinity is returned", "isCorrect": false },
      { "id": "option_4", "text": "'Cannot divide by zero!'", "isCorrect": true }
    ],
    "hint": "The rescue block handles the ZeroDivisionError and prints a message.",
    "answerDescription": "The rescue block catches the ZeroDivisionError and outputs 'Cannot divide by zero!'."
  },
  {
    "id": "ruby_944",
    "question": "Which class do all Ruby exceptions inherit from?",
    "options": [
      { "id": "option_1", "text": "StandardError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "Error", "isCorrect": false },
      { "id": "option_4", "text": "Exception", "isCorrect": true }
    ],
    "hint": "This is the root class for all exception types in Ruby.",
    "answerDescription": "All exceptions in Ruby inherit from the 'Exception' class."
  },
  {
    "id": "ruby_945",
    "question": "How do you define a custom exception class in Ruby?",
    "options": [
      { "id": "option_1", "text": "class MyError < RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "class MyError < ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "class MyError < NoMethodError", "isCorrect": false },
      { "id": "option_4", "text": "class MyError < StandardError", "isCorrect": true }
    ],
    "hint": "Custom exceptions should inherit from StandardError for better handling.",
    "answerDescription": "Defining a custom exception in Ruby usually involves inheriting from 'StandardError'."
  },
  {
    "id": "ruby_946",
    "question": "What does 'rescue Exception' do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Catches only StandardError exceptions", "isCorrect": false },
      { "id": "option_2", "text": "Ignores all exceptions", "isCorrect": false },
      { "id": "option_3", "text": "Only rescues fatal errors", "isCorrect": false },
      { "id": "option_4", "text": "Catches all exceptions including system errors", "isCorrect": true }
    ],
    "hint": "This approach is discouraged as it catches even system-level exceptions.",
    "answerDescription": "'rescue Exception' catches all exceptions, even those that should not be caught, like system exit errors."
  },
  {
    "id": "ruby_947",
    "question": "What does 'retry' do inside a rescue block?",
    "options": [
      { "id": "option_1", "text": "Skips the error and continues execution", "isCorrect": false },
      { "id": "option_2", "text": "Stops exception handling", "isCorrect": false },
      { "id": "option_3", "text": "Exits the program", "isCorrect": false },
      { "id": "option_4", "text": "Restarts the begin block", "isCorrect": true }
    ],
    "hint": "It allows retrying the code inside the begin block after an exception occurs.",
    "answerDescription": "Using 'retry' inside a rescue block re-executes the begin block."
  },
  {
    "id": "ruby_948",
    "question": "Which method allows capturing an exception without immediately handling it?",
    "options": [
      { "id": "option_1", "text": "catch", "isCorrect": false },
      { "id": "option_2", "text": "throw", "isCorrect": false },
      { "id": "option_3", "text": "retry", "isCorrect": false },
      { "id": "option_4", "text": "rescue => e", "isCorrect": true }
    ],
    "hint": "This method allows storing the exception in a variable for further handling.",
    "answerDescription": "Using 'rescue => e' captures an exception without immediately handling it."
  },
  {
    "id": "ruby_949",
    "question": "What is the best practice when rescuing exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "Always rescue Exception", "isCorrect": false },
      { "id": "option_2", "text": "Use ensure without rescue", "isCorrect": false },
      { "id": "option_3", "text": "Use multiple rescue blocks for specific exceptions", "isCorrect": false },
      { "id": "option_4", "text": "Rescue specific error classes instead of generic ones", "isCorrect": true }
    ],
    "hint": "Avoid catching all exceptions, and handle only those that are expected.",
    "answerDescription": "Best practice is to rescue only specific exceptions instead of using a broad 'rescue Exception'."
  },
  {
    "id": "ruby_950",
    "question": "What is the purpose of the 'throw' and 'catch' mechanism in Ruby?",
    "options": [
      { "id": "option_1", "text": "Handling exceptions", "isCorrect": false },
      { "id": "option_2", "text": "Exiting loops early", "isCorrect": false },
      { "id": "option_3", "text": "Skipping error handling", "isCorrect": false },
      { "id": "option_4", "text": "Implementing non-local flow control", "isCorrect": true }
    ],
    "hint": "These are used for non-exception control flow rather than error handling.",
    "answerDescription": "'throw' and 'catch' provide non-local flow control in Ruby."
  },  {
    "id": "ruby_951",
    "question": "Which method in Ruby is used to handle exceptions?",
    "options": [
      { "id": "option_1", "text": "try", "isCorrect": false },
      { "id": "option_2", "text": "catch", "isCorrect": false },
      { "id": "option_3", "text": "finally", "isCorrect": false },
      { "id": "option_4", "text": "rescue", "isCorrect": true }
    ],
    "hint": "This keyword is used inside a 'begin' block to handle exceptions.",
    "answerDescription": "In Ruby, 'rescue' is used to handle exceptions within a 'begin' block."
  },
  {
    "id": "ruby_952",
    "question": "Which method is used to get user input from the console in Ruby?",
    "options": [
      { "id": "option_1", "text": "gets.chomp", "isCorrect": false },
      { "id": "option_2", "text": "gets", "isCorrect": true },
      { "id": "option_3", "text": "input", "isCorrect": false },
      { "id": "option_4", "text": "readline", "isCorrect": false }
    ],
    "hint": "This method reads user input and includes a newline character.",
    "answerDescription": "The `gets` method is used to receive input from the user in Ruby."
  },
  {
    "id": "ruby_953",
    "question": "Which exception class is the default if 'raise' is used without arguments?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_2", "text": "NoMethodError", "isCorrect": false },
      { "id": "option_3", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": true }
    ],
    "hint": "This is the default error type when 'raise' is used without an argument.",
    "answerDescription": "In Ruby, 'raise' without arguments raises a 'RuntimeError' by default."
  },
  {
    "id": "ruby_954",
    "question": "Which statement ensures that a block of code runs whether an exception occurs or not?",
    "options": [
      { "id": "option_1", "text": "retry", "isCorrect": false },
      { "id": "option_2", "text": "throw", "isCorrect": false },
      { "id": "option_3", "text": "raise", "isCorrect": false },
      { "id": "option_4", "text": "ensure", "isCorrect": true }
    ],
    "hint": "This block always runs, even if an error is raised.",
    "answerDescription": "The 'ensure' block ensures that code runs regardless of whether an exception occurs."
  },
  {
    "id": "ruby_955",
    "question": "Which Ruby exception is raised when an undefined constant is accessed?",
    "options": [
      { "id": "option_1", "text": "NoMethodError", "isCorrect": false },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_4", "text": "NameError", "isCorrect": true }
    ],
    "hint": "This exception occurs when a constant is not found in the current scope.",
    "answerDescription": "'NameError' is raised when Ruby encounters an undefined constant."
  },
  {
    "id": "ruby_956",
    "question": "What does the 'rescue nil' statement do?",
    "options": [
      { "id": "option_1", "text": "Ignores the exception and continues execution", "isCorrect": false },
      { "id": "option_2", "text": "Raises an exception", "isCorrect": false },
      { "id": "option_3", "text": "Stops program execution", "isCorrect": false },
      { "id": "option_4", "text": "Suppresses the error and returns nil", "isCorrect": true }
    ],
    "hint": "It prevents errors from stopping execution but may hide issues.",
    "answerDescription": "Using 'rescue nil' suppresses the error and returns nil instead of raising an exception."
  },
  {
    "id": "ruby_957",
    "question": "Which method provides information about an exception's backtrace?",
    "options": [
      { "id": "option_1", "text": "trace", "isCorrect": false },
      { "id": "option_2", "text": "log", "isCorrect": false },
      { "id": "option_3", "text": "debug", "isCorrect": false },
      { "id": "option_4", "text": "backtrace", "isCorrect": true }
    ],
    "hint": "This method provides details about where the error occurred.",
    "answerDescription": "The 'backtrace' method returns an array of strings representing the call stack when the exception was raised."
  },
  {
    "id": "ruby_958",
    "question": "Which error is raised when an array index is accessed out of bounds?",
    "options": [
      { "id": "option_1", "text": "NameError", "isCorrect": false },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_4", "text": "IndexError", "isCorrect": true }
    ],
    "hint": "This error occurs when attempting to access an array index that doesn't exist.",
    "answerDescription": "'IndexError' is raised when trying to access an array element outside its bounds."
  },
  {
    "id": "ruby_959",
    "question": "Which statement is used to specify multiple exception types in a rescue block?",
    "options": [
      { "id": "option_1", "text": "rescue [Exception1, Exception2]", "isCorrect": false },
      { "id": "option_2", "text": "rescue {Exception1, Exception2}", "isCorrect": false },
      { "id": "option_3", "text": "rescue (Exception1, Exception2)", "isCorrect": false },
      { "id": "option_4", "text": "rescue Exception1, Exception2", "isCorrect": true }
    ],
    "hint": "Multiple exceptions are separated by a comma.",
    "answerDescription": "In Ruby, multiple exceptions can be rescued using 'rescue Exception1, Exception2'."
  },
  {
    "id": "ruby_960",
    "question": "What happens if 'raise' is used inside a rescue block without arguments?",
    "options": [
      { "id": "option_1", "text": "It raises a SyntaxError", "isCorrect": false },
      { "id": "option_2", "text": "It does nothing", "isCorrect": false },
      { "id": "option_3", "text": "It prints an error message", "isCorrect": false },
      { "id": "option_4", "text": "It re-raises the rescued exception", "isCorrect": true }
    ],
    "hint": "This allows exceptions to be propagated after handling them.",
    "answerDescription": "Using 'raise' inside a rescue block without arguments re-raises the most recently rescued exception."
  }, 
  {
    "id": "ruby_961",
    "question": "Which method returns an array with duplicate elements removed?",
    "options": [
      { "id": "option_1", "text": "remove_duplicates", "isCorrect": false },
      { "id": "option_2", "text": "unique", "isCorrect": false },
      { "id": "option_3", "text": "distinct", "isCorrect": false },
      { "id": "option_4", "text": "uniq", "isCorrect": true }
    ],
    "hint": "This method removes duplicate elements from an array.",
    "answerDescription": "The `uniq` method returns a new array with duplicate values removed."
  },
  {
    "id": "ruby_962",
    "question": "What does 'raise' do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Raises an exception", "isCorrect": true },
      { "id": "option_2", "text": "Catches an exception", "isCorrect": false },
      { "id": "option_3", "text": "Suppresses an error", "isCorrect": false },
      { "id": "option_4", "text": "Logs a warning", "isCorrect": false }
    ],
    "hint": "It is used to generate an exception explicitly.",
    "answerDescription": "The 'raise' keyword in Ruby is used to raise an exception."
  },
  {
    "id": "ruby_963",
    "question": "Which block always executes regardless of an exception occurring?",
    "options": [
      { "id": "option_1", "text": "ensure", "isCorrect": true },
      { "id": "option_2", "text": "rescue", "isCorrect": false },
      { "id": "option_3", "text": "finally", "isCorrect": false },
      { "id": "option_4", "text": "catch", "isCorrect": false }
    ],
    "hint": "This block runs whether or not an exception is raised.",
    "answerDescription": "The 'ensure' block always executes, even if an exception occurs."
  },
  {
    "id": "ruby_964",
    "question": "What is the default exception type if 'raise' is called without arguments?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": true },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "NoMethodError", "isCorrect": false }
    ],
    "hint": "This is the default error type unless specified otherwise.",
    "answerDescription": "Calling 'raise' without an argument defaults to raising a 'RuntimeError'."
  },
  {
    "id": "ruby_965",
    "question": "Which exception is raised when a method is called on an object that doesn't support it?",
    "options": [
      { "id": "option_1", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_2", "text": "TypeError", "isCorrect": false },
      { "id": "option_3", "text": "NameError", "isCorrect": false },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "This happens when a method is not defined for a specific object.",
    "answerDescription": "A 'NoMethodError' is raised when an undefined method is called on an object."
  },
  {
    "id": "ruby_966",
    "question": "Which error is raised when an undefined variable or constant is accessed?",
    "options": [
      { "id": "option_1", "text": "NameError", "isCorrect": true },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_4", "text": "LoadError", "isCorrect": false }
    ],
    "hint": "This exception occurs when Ruby cannot find a variable or constant.",
    "answerDescription": "'NameError' is raised when an undefined variable or constant is referenced."
  },
  {
    "id": "ruby_967",
    "question": "Which method returns the backtrace of an exception?",
    "options": [
      { "id": "option_1", "text": "backtrace", "isCorrect": true },
      { "id": "option_2", "text": "trace", "isCorrect": false },
      { "id": "option_3", "text": "log", "isCorrect": false },
      { "id": "option_4", "text": "exception_trace", "isCorrect": false }
    ],
    "hint": "This method provides a list of method calls that led to the error.",
    "answerDescription": "The 'backtrace' method provides details about where an exception occurred."
  },
  {
    "id": "ruby_968",
    "question": "Which error is raised when attempting to divide by zero?",
    "options": [
      { "id": "option_1", "text": "ZeroDivisionError", "isCorrect": true },
      { "id": "option_2", "text": "MathError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "TypeError", "isCorrect": false }
    ],
    "hint": "This error occurs when attempting to divide by zero.",
    "answerDescription": "A 'ZeroDivisionError' is raised when division by zero is attempted."
  },
  {
    "id": "ruby_969",
    "question": "Which statement is used to re-raise an exception inside a rescue block?",
    "options": [
      { "id": "option_1", "text": "raise", "isCorrect": true },
      { "id": "option_2", "text": "retry", "isCorrect": false },
      { "id": "option_3", "text": "throw", "isCorrect": false },
      { "id": "option_4", "text": "catch", "isCorrect": false }
    ],
    "hint": "It is the same keyword used to create an exception in the first place.",
    "answerDescription": "Using 'raise' inside a rescue block without arguments re-raises the rescued exception."
  },
  {
    "id": "ruby_970",
    "question": "Which method can be used to define a custom error class?",
    "options": [
      { "id": "option_1", "text": "class CustomError < StandardError", "isCorrect": true },
      { "id": "option_2", "text": "class CustomError < Exception", "isCorrect": false },
      { "id": "option_3", "text": "def CustomError", "isCorrect": false },
      { "id": "option_4", "text": "raise CustomError", "isCorrect": false }
    ],
    "hint": "Custom exceptions should inherit from StandardError.",
    "answerDescription": "In Ruby, custom exceptions should be created by inheriting from 'StandardError'."
  },  {
    "id": "ruby_971",
    "question": "Which keyword is used to define an exception handler in Ruby?",
    "options": [
      { "id": "option_1", "text": "try", "isCorrect": false },
      { "id": "option_2", "text": "rescue", "isCorrect": true },
      { "id": "option_3", "text": "throw", "isCorrect": false },
      { "id": "option_4", "text": "catch", "isCorrect": false }
    ],
    "hint": "This keyword is used inside a 'begin' block to handle exceptions.",
    "answerDescription": "In Ruby, 'rescue' is used to handle exceptions and prevent program crashes."
  },
  {
    "id": "ruby_972",
    "question": "What happens if an exception is raised and not handled?",
    "options": [
      { "id": "option_1", "text": "It is ignored", "isCorrect": false },
      { "id": "option_2", "text": "The program terminates", "isCorrect": true },
      { "id": "option_3", "text": "The program continues execution", "isCorrect": false },
      { "id": "option_4", "text": "Ruby logs the error but proceeds", "isCorrect": false }
    ],
    "hint": "Unhandled exceptions cause Ruby programs to stop execution.",
    "answerDescription": "If an exception is not rescued, the Ruby program terminates with an error message."
  },
  {
    "id": "ruby_973",
    "question": "Which keyword is used to explicitly generate an exception?",
    "options": [
      { "id": "option_1", "text": "throw", "isCorrect": false },
      { "id": "option_2", "text": "raise", "isCorrect": true },
      { "id": "option_3", "text": "catch", "isCorrect": false },
      { "id": "option_4", "text": "abort", "isCorrect": false }
    ],
    "hint": "This keyword is used to manually trigger an exception in Ruby.",
    "answerDescription": "The 'raise' keyword in Ruby is used to raise an exception."
  },
  {
    "id": "ruby_974",
    "question": "Which error is raised when calling a method that is not defined for an object?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_2", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "SyntaxError", "isCorrect": false }
    ],
    "hint": "This error occurs when you call a method that does not exist.",
    "answerDescription": "'NoMethodError' is raised when an undefined method is called on an object."
  },
  {
    "id": "ruby_975",
    "question": "Which error type is raised when attempting to divide by zero?",
    "options": [
      { "id": "option_1", "text": "TypeError", "isCorrect": false },
      { "id": "option_2", "text": "ZeroDivisionError", "isCorrect": true },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": false }
    ],
    "hint": "Dividing by zero causes an exception in most programming languages.",
    "answerDescription": "'ZeroDivisionError' is raised when an attempt is made to divide by zero."
  },
  {
    "id": "ruby_976",
    "question": "Which block ensures that a certain piece of code always executes, regardless of exceptions?",
    "options": [
      { "id": "option_1", "text": "rescue", "isCorrect": false },
      { "id": "option_2", "text": "ensure", "isCorrect": true },
      { "id": "option_3", "text": "catch", "isCorrect": false },
      { "id": "option_4", "text": "finally", "isCorrect": false }
    ],
    "hint": "This block always runs, even if an exception occurs.",
    "answerDescription": "The 'ensure' block in Ruby is executed regardless of whether an exception is raised or not."
  },
  {
    "id": "ruby_977",
    "question": "What exception is raised when trying to access an undefined constant or variable?",
    "options": [
      { "id": "option_1", "text": "TypeError", "isCorrect": false },
      { "id": "option_2", "text": "NameError", "isCorrect": true },
      { "id": "option_3", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "This error occurs when Ruby can't find a variable or constant.",
    "answerDescription": "'NameError' is raised when an undefined variable or constant is referenced."
  },
  {
    "id": "ruby_978",
    "question": "What does 'retry' do in a rescue block?",
    "options": [
      { "id": "option_1", "text": "Suppress the error", "isCorrect": false },
      { "id": "option_2", "text": "Restart the begin block", "isCorrect": true },
      { "id": "option_3", "text": "Ignore the error and continue", "isCorrect": false },
      { "id": "option_4", "text": "Exit the rescue block", "isCorrect": false }
    ],
    "hint": "It allows the code to attempt execution again.",
    "answerDescription": "Using 'retry' inside a rescue block restarts the begin block."
  },
  {
    "id": "ruby_979",
    "question": "Which method provides information about the location of an exception?",
    "options": [
      { "id": "option_1", "text": "trace", "isCorrect": false },
      { "id": "option_2", "text": "backtrace", "isCorrect": true },
      { "id": "option_3", "text": "log", "isCorrect": false },
      { "id": "option_4", "text": "exception_trace", "isCorrect": false }
    ],
    "hint": "This method helps in debugging by showing the sequence of method calls.",
    "answerDescription": "The 'backtrace' method provides details about where an exception occurred."
  },
  {
    "id": "ruby_980",
    "question": "How can you define a custom exception class in Ruby?",
    "options": [
      { "id": "option_1", "text": "class CustomError < Exception", "isCorrect": false },
      { "id": "option_2", "text": "class CustomError < StandardError", "isCorrect": true },
      { "id": "option_3", "text": "def CustomError", "isCorrect": false },
      { "id": "option_4", "text": "raise CustomError", "isCorrect": false }
    ],
    "hint": "Custom exceptions should inherit from StandardError.",
    "answerDescription": "In Ruby, custom exceptions should be created by inheriting from 'StandardError'."
  },
  {
    "id": "ruby_981",
    "question": "Which method is used to convert a number to a string?",
    "options": [
      { "id": "option_1", "text": "stringify", "isCorrect": false },
      { "id": "option_2", "text": "convert", "isCorrect": false },
      { "id": "option_3", "text": "to_s", "isCorrect": true },
      { "id": "option_4", "text": "num_to_str", "isCorrect": false }
    ],
    "hint": "This method is commonly used to change an object's type.",
    "answerDescription": "The `to_s` method converts a number to a string."
  },
  {
    "id": "ruby_982",
    "question": "What is the default exception class in Ruby?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "Exception", "isCorrect": true },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "All exceptions in Ruby inherit from this class.",
    "answerDescription": "The 'Exception' class is the root of Ruby's exception hierarchy."
  },
  {
    "id": "ruby_983",
    "question": "Which error is raised when an invalid argument is provided to a method?",
    "options": [
      { "id": "option_1", "text": "TypeError", "isCorrect": false },
      { "id": "option_2", "text": "NoMethodError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": true },
      { "id": "option_4", "text": "SyntaxError", "isCorrect": false }
    ],
    "hint": "This error occurs when the number or type of arguments is incorrect.",
    "answerDescription": "'ArgumentError' is raised when a method receives an incorrect number of arguments."
  },
  {
    "id": "ruby_984",
    "question": "Which keyword ensures a block of code runs regardless of an exception?",
    "options": [
      { "id": "option_1", "text": "rescue", "isCorrect": false },
      { "id": "option_2", "text": "retry", "isCorrect": false },
      { "id": "option_3", "text": "ensure", "isCorrect": true },
      { "id": "option_4", "text": "catch", "isCorrect": false }
    ],
    "hint": "This block always executes, even if an error occurs.",
    "answerDescription": "The 'ensure' block in Ruby always runs, whether an exception is raised or not."
  },
  {
    "id": "ruby_985",
    "question": "Which method returns a string representation of an exception?",
    "options": [
      { "id": "option_1", "text": "message", "isCorrect": false },
      { "id": "option_2", "text": "backtrace", "isCorrect": false },
      { "id": "option_3", "text": "to_s", "isCorrect": true },
      { "id": "option_4", "text": "trace", "isCorrect": false }
    ],
    "hint": "This method is commonly used to convert objects into readable text.",
    "answerDescription": "Calling 'to_s' on an exception returns its message as a string."
  },
  {
    "id": "ruby_986",
    "question": "Which error is raised when an invalid operation is performed on a nil object?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_2", "text": "TypeError", "isCorrect": false },
      { "id": "option_3", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": false }
    ],
    "hint": "This error is raised when calling a method on 'nil'.",
    "answerDescription": "'NoMethodError' occurs when calling an undefined method on an object, including 'nil'."
  },
  {
    "id": "ruby_987",
    "question": "What happens if you use 'raise' without specifying an exception?",
    "options": [
      { "id": "option_1", "text": "It does nothing", "isCorrect": false },
      { "id": "option_2", "text": "It raises a SyntaxError", "isCorrect": false },
      { "id": "option_3", "text": "It raises a RuntimeError", "isCorrect": true },
      { "id": "option_4", "text": "It logs an error message", "isCorrect": false }
    ],
    "hint": "By default, Ruby raises a common error type if none is provided.",
    "answerDescription": "Using 'raise' without arguments raises a 'RuntimeError' by default."
  },
  {
    "id": "ruby_988",
    "question": "Which keyword allows you to reattempt code execution in a rescue block?",
    "options": [
      { "id": "option_1", "text": "retry", "isCorrect": false },
      { "id": "option_2", "text": "rescue", "isCorrect": false },
      { "id": "option_3", "text": "redo", "isCorrect": true },
      { "id": "option_4", "text": "restart", "isCorrect": false }
    ],
    "hint": "This keyword is used to re-run the block.",
    "answerDescription": "The 'redo' keyword allows retrying a loop or block execution."
  },
  {
    "id": "ruby_989",
    "question": "How do you create a custom exception class in Ruby?",
    "options": [
      { "id": "option_1", "text": "def CustomError", "isCorrect": false },
      { "id": "option_2", "text": "raise CustomError", "isCorrect": false },
      { "id": "option_3", "text": "class CustomError < StandardError", "isCorrect": true },
      { "id": "option_4", "text": "catch CustomError", "isCorrect": false }
    ],
    "hint": "Custom exceptions should inherit from StandardError.",
    "answerDescription": "In Ruby, exception classes should inherit from 'StandardError'."
  },
  {
    "id": "ruby_990",
    "question": "Which method provides details about where an exception occurred?",
    "options": [
      { "id": "option_1", "text": "trace", "isCorrect": false },
      { "id": "option_2", "text": "log", "isCorrect": false },
      { "id": "option_3", "text": "backtrace", "isCorrect": true },
      { "id": "option_4", "text": "details", "isCorrect": false }
    ],
    "hint": "This method is useful for debugging errors.",
    "answerDescription": "The 'backtrace' method returns an array of strings describing the call stack leading to the exception."
  },  {
    "id": "ruby_991",
    "question": "Which keyword is used to define an exception handling block in Ruby?",
    "options": [
      { "id": "option_1", "text": "catch", "isCorrect": false },
      { "id": "option_2", "text": "throw", "isCorrect": false },
      { "id": "option_3", "text": "retry", "isCorrect": false },
      { "id": "option_4", "text": "begin", "isCorrect": true }
    ],
    "hint": "This keyword starts an exception handling block.",
    "answerDescription": "In Ruby, 'begin' is used to start an exception handling block."
  },
  {
    "id": "ruby_992",
    "question": "Which is the super most class of all exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "StandardError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "ErrorBase", "isCorrect": false },
      { "id": "option_4", "text": "Exception", "isCorrect": true }
    ],
    "hint": "All errors inherit from this class.",
    "answerDescription": "All exception classes in Ruby inherit from the 'Exception' class."
  },
  {
    "id": "ruby_993",
    "question": "Which error occurs when a method is called on an undefined object?",
    "options": [
      { "id": "option_1", "text": "NameError", "isCorrect": false },
      { "id": "option_2", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "NoMethodError", "isCorrect": true }
    ],
    "hint": "This error happens when calling a method on nil or an unknown object.",
    "answerDescription": "'NoMethodError' is raised when a method is called on an object that does not define it."
  },
  {
    "id": "ruby_994",
    "question": "Which method provides information about an exception's call stack?",
    "options": [
      { "id": "option_1", "text": "trace", "isCorrect": false },
      { "id": "option_2", "text": "details", "isCorrect": false },
      { "id": "option_3", "text": "stack_info", "isCorrect": false },
      { "id": "option_4", "text": "backtrace", "isCorrect": true }
    ],
    "hint": "This method helps in debugging by showing where an error occurred.",
    "answerDescription": "The 'backtrace' method returns an array of strings representing the call stack when an exception is raised."
  },
  {
    "id": "ruby_995",
    "question": "What keyword is used to explicitly generate an exception?",
    "options": [
      { "id": "option_1", "text": "throw", "isCorrect": false },
      { "id": "option_2", "text": "fail", "isCorrect": false },
      { "id": "option_3", "text": "break", "isCorrect": false },
      { "id": "option_4", "text": "raise", "isCorrect": true }
    ],
    "hint": "This keyword can be used to trigger errors manually.",
    "answerDescription": "In Ruby, 'raise' is used to raise exceptions explicitly."
  },
  {
    "id": "ruby_996",
    "question": "Which type of error occurs when an undefined variable is accessed?",
    "options": [
      { "id": "option_1", "text": "NoMethodError", "isCorrect": false },
      { "id": "option_2", "text": "TypeError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "NameError", "isCorrect": true }
    ],
    "hint": "This error occurs when a variable is not declared before use.",
    "answerDescription": "'NameError' is raised when Ruby encounters an undefined variable or method name."
  },
  {
    "id": "ruby_997",
    "question": "Which keyword is used to retry a block of code in a rescue clause?",
    "options": [
      { "id": "option_1", "text": "restart", "isCorrect": false },
      { "id": "option_2", "text": "redo", "isCorrect": false },
      { "id": "option_3", "text": "retry", "isCorrect": false },
      { "id": "option_4", "text": "rescue", "isCorrect": true }
    ],
    "hint": "This keyword is used to handle exceptions and execute alternative code.",
    "answerDescription": "The 'rescue' keyword is used inside a 'begin' block to catch and handle exceptions."
  },
  {
    "id": "ruby_998",
    "question": "How do you create a custom error class in Ruby?",
    "options": [
      { "id": "option_1", "text": "class MyError < Exception", "isCorrect": false },
      { "id": "option_2", "text": "def MyError", "isCorrect": false },
      { "id": "option_3", "text": "raise MyError", "isCorrect": false },
      { "id": "option_4", "text": "class MyError < StandardError", "isCorrect": true }
    ],
    "hint": "Custom exceptions should inherit from 'StandardError'.",
    "answerDescription": "To create a custom exception class, inherit from 'StandardError'."
  },
  {
    "id": "ruby_999",
    "question": "What happens when you call 'raise' without arguments inside a rescue block?",
    "options": [
      { "id": "option_1", "text": "It raises a new RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "It logs an error", "isCorrect": false },
      { "id": "option_3", "text": "It suppresses the error", "isCorrect": false },
      { "id": "option_4", "text": "It re-raises the current exception", "isCorrect": true }
    ],
    "hint": "This behavior allows exceptions to be propagated up the call stack.",
    "answerDescription": "Calling 'raise' without arguments inside a rescue block re-raises the original exception."
  },
  {
    "id": "ruby_1000",
    "question": "Which of these errors is not a subclass of StandardError?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_2", "text": "TypeError", "isCorrect": false },
      { "id": "option_3", "text": "NoMethodError", "isCorrect": false },
      { "id": "option_4", "text": "SystemExit", "isCorrect": true }
    ],
    "hint": "This error causes the Ruby interpreter to terminate execution.",
    "answerDescription": "'SystemExit' is not a subclass of 'StandardError'; it inherits directly from 'Exception'."
  },  {
    "id": "ruby_1001",
    "question": "Which keyword is used to define an exception handling block in Ruby?",
    "options": [
      { "id": "option_1", "text": "begin", "isCorrect": true },
      { "id": "option_2", "text": "throw", "isCorrect": false },
      { "id": "option_3", "text": "catch", "isCorrect": false },
      { "id": "option_4", "text": "retry", "isCorrect": false }
    ],
    "hint": "This keyword starts an exception handling block.",
    "answerDescription": "In Ruby, 'begin' is used to start an exception handling block."
  },
  {
    "id": "ruby_1002",
    "question": "What is the superclass of all exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "Exception", "isCorrect": true },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "ErrorBase", "isCorrect": false }
    ],
    "hint": "All errors inherit from this class.",
    "answerDescription": "All exception classes in Ruby inherit from the 'Exception' class."
  },
  {
    "id": "ruby_1003",
    "question": "Which error occurs when an undefined variable is accessed?",
    "options": [
      { "id": "option_1", "text": "NameError", "isCorrect": true },
      { "id": "option_2", "text": "TypeError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "NoMethodError", "isCorrect": false }
    ],
    "hint": "This error occurs when a variable is not declared before use.",
    "answerDescription": "'NameError' is raised when Ruby encounters an undefined variable or method name."
  },
  {
    "id": "ruby_1004",
    "question": "Which method provides information about an exception's call stack?",
    "options": [
      { "id": "option_1", "text": "backtrace", "isCorrect": true },
      { "id": "option_2", "text": "trace", "isCorrect": false },
      { "id": "option_3", "text": "details", "isCorrect": false },
      { "id": "option_4", "text": "stack_info", "isCorrect": false }
    ],
    "hint": "This method helps in debugging by showing where an error occurred.",
    "answerDescription": "The 'backtrace' method returns an array of strings representing the call stack when an exception is raised."
  },
  {
    "id": "ruby_1005",
    "question": "How do you handle optional parameters in a method?",
    "options": [
      { "id": "option_1", "text": "Use curly braces", "isCorrect": false },
      { "id": "option_2", "text": "Use square brackets", "isCorrect": false },
      { "id": "option_3", "text": "Use a hash parameter", "isCorrect": false },
      { "id": "option_4", "text": "Assign default values in the method definition", "isCorrect": true }
    ],
    "hint": "Optional parameters can be handled with default values.",
    "answerDescription": "In Ruby, optional parameters are handled by assigning default values in the method definition."
  },
  {
    "id": "ruby_1006",
    "question": "Which type of error occurs when a method is called on an undefined object?",
    "options": [
      { "id": "option_1", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_2", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": false }
    ],
    "hint": "This error happens when calling a method on nil or an unknown object.",
    "answerDescription": "'NoMethodError' is raised when a method is called on an object that does not define it."
  },
  {
    "id": "ruby_1007",
    "question": "Which method returns the ASCII code of the first character of a string?",
    "options": [
      { "id": "option_1", "text": "ascii", "isCorrect": false },
      { "id": "option_2", "text": "unicode", "isCorrect": false },
      { "id": "option_3", "text": "ord", "isCorrect": true },
      { "id": "option_4", "text": "char_code", "isCorrect": false }
    ],
    "hint": "This method converts a character into its ASCII equivalent.",
    "answerDescription": "The `ord` method returns the ASCII code of the first character in a string."
  },
  {
    "id": "ruby_1008",
    "question": "Which method is used to convert a string into an array of characters?",
    "options": [
      { "id": "option_1", "text": "explode", "isCorrect": false },
      { "id": "option_2", "text": "chars", "isCorrect": true },
      { "id": "option_3", "text": "letters", "isCorrect": false },
      { "id": "option_4", "text": "to_a", "isCorrect": false }
    ],
    "hint": "This method breaks down a string into an array of individual characters.",
    "answerDescription": "The `chars` method splits a string into an array of characters."
 },
 {
    "id": "ruby_1009",
    "question": "Which method returns an array sorted in ascending order?",
    "options": [
      { "id": "option_1", "text": "arrange", "isCorrect": false },
      { "id": "option_2", "text": "order", "isCorrect": false },
      { "id": "option_3", "text": "sort!", "isCorrect": false },
      { "id": "option_4", "text": "sort", "isCorrect": true }
    ],
    "hint": "This method sorts an array without modifying it.",
    "answerDescription": "The `sort` method returns a new array sorted in ascending order."
  },
  {
    "id": "ruby_1010",
    "question": "Which method returns the length of a string?",
    "options": [
      { "id": "option_1", "text": "size?", "isCorrect": false },
      { "id": "option_2", "text": "count?", "isCorrect": false },
      { "id": "option_3", "text": "chars?", "isCorrect": false },
      { "id": "option_4", "text": "length", "isCorrect": true }
    ],
    "hint": "This method returns the number of characters in a string.",
    "answerDescription": "The `length` method returns the number of characters in a string."
  },
  {
    "id": "ruby_1011",
    "question": "Which method is used to remove trailing whitespace from a string?",
    "options": [
      { "id": "option_1", "text": "strip!", "isCorrect": false },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "rstrip", "isCorrect": true },
      { "id": "option_4", "text": "chomp", "isCorrect": false }
    ],
    "hint": "This method removes spaces at the end of a string.",
    "answerDescription": "The `rstrip` method removes trailing whitespace from a string."
  },
  {
    "id": "ruby_1012",
    "question": "What exception is raised when dividing by zero in Ruby?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_2", "text": "ZeroDivisionError", "isCorrect": true },
      { "id": "option_3", "text": "MathError", "isCorrect": false },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": false }
    ],
    "hint": "This error occurs when attempting to divide by zero.",
    "answerDescription": "Ruby raises a 'ZeroDivisionError' when an attempt is made to divide by zero."
  },
  {
    "id": "ruby_1013",
    "question": "Which method is used to raise an exception manually?",
    "options": [
      { "id": "option_1", "text": "fail", "isCorrect": false },
      { "id": "option_2", "text": "raise", "isCorrect": true },
      { "id": "option_3", "text": "throw", "isCorrect": false },
      { "id": "option_4", "text": "rescue", "isCorrect": false }
    ],
    "hint": "This method allows you to generate exceptions explicitly.",
    "answerDescription": "The 'raise' method is used in Ruby to manually trigger exceptions."
  },
  {
    "id": "ruby_1014",
    "question": "Which class is the parent class of StandardError?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "Exception", "isCorrect": true },
      { "id": "option_3", "text": "BaseError", "isCorrect": false },
      { "id": "option_4", "text": "Object", "isCorrect": false }
    ],
    "hint": "All error classes in Ruby inherit from this base class.",
    "answerDescription": "The 'Exception' class is the superclass of all exception classes, including 'StandardError'."
  },
  {
    "id": "ruby_1015",
    "question": "Which exception is raised when trying to access a non-existent method?",
    "options": [
      { "id": "option_1", "text": "TypeError", "isCorrect": false },
      { "id": "option_2", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "SyntaxError", "isCorrect": false }
    ],
    "hint": "This error happens when calling a method that is undefined for an object.",
    "answerDescription": "'NoMethodError' is raised when calling a method that does not exist."
  },
  {
    "id": "ruby_1016",
    "question": "Which keyword is used to execute cleanup code, regardless of an error occurring?",
    "options": [
      { "id": "option_1", "text": "rescue", "isCorrect": false },
      { "id": "option_2", "text": "ensure", "isCorrect": true },
      { "id": "option_3", "text": "finally", "isCorrect": false },
      { "id": "option_4", "text": "exit", "isCorrect": false }
    ],
    "hint": "This keyword guarantees execution of cleanup code.",
    "answerDescription": "The 'ensure' block runs whether an exception occurs or not, ensuring proper cleanup."
  },
  {
    "id": "ruby_1017",
    "question": "What does 'rescue Exception' do?",
    "options": [
      { "id": "option_1", "text": "Catches only runtime errors", "isCorrect": false },
      { "id": "option_2", "text": "Catches all exceptions, including system exit signals", "isCorrect": true },
      { "id": "option_3", "text": "Only catches StandardError", "isCorrect": false },
      { "id": "option_4", "text": "Does not catch syntax errors", "isCorrect": false }
    ],
    "hint": "This approach is usually discouraged because it catches everything.",
    "answerDescription": "'rescue Exception' catches all errors, including system-related exceptions like 'SystemExit'."
  },
  {
    "id": "ruby_1018",
    "question": "Which of the following is NOT a subclass of StandardError?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "SystemExit", "isCorrect": true },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "NoMethodError", "isCorrect": false }
    ],
    "hint": "This exception is used to terminate the Ruby interpreter.",
    "answerDescription": "'SystemExit' is a subclass of 'Exception', not 'StandardError'."
  },
  {
    "id": "ruby_1019",
    "question": "Which keyword is used to attempt a failed operation again?",
    "options": [
      { "id": "option_1", "text": "redo", "isCorrect": false },
      { "id": "option_2", "text": "retry", "isCorrect": true },
      { "id": "option_3", "text": "rescue", "isCorrect": false },
      { "id": "option_4", "text": "fail", "isCorrect": false }
    ],
    "hint": "This keyword is often used within a rescue block to attempt an operation again.",
    "answerDescription": "The 'retry' keyword restarts the 'begin' block after an exception is handled."
  },
  {
    "id": "ruby_1020",
    "question": "How do you define a custom error class?",
    "options": [
      { "id": "option_1", "text": "class MyError < Exception", "isCorrect": false },
      { "id": "option_2", "text": "class MyError < StandardError", "isCorrect": true },
      { "id": "option_3", "text": "def MyError", "isCorrect": false },
      { "id": "option_4", "text": "raise MyError", "isCorrect": false }
    ],
    "hint": "Custom errors should inherit from 'StandardError' rather than 'Exception'.",
    "answerDescription": "To create a custom error class in Ruby, inherit from 'StandardError'."
  },  {
    "id": "ruby_1021",
    "question": "What does the 'rescue' keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Terminates the program on error", "isCorrect": false },
      { "id": "option_2", "text": "Ignores all exceptions", "isCorrect": false },
      { "id": "option_3", "text": "Handles exceptions within a block", "isCorrect": true },
      { "id": "option_4", "text": "Raises an exception", "isCorrect": false }
    ],
    "hint": "This keyword allows handling exceptions inside a 'begin' block.",
    "answerDescription": "The 'rescue' keyword is used to handle exceptions in Ruby."
  },
  {
    "id": "ruby_1022",
    "question": "Which error is raised when an undefined variable is accessed?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "NameError", "isCorrect": true },
      { "id": "option_4", "text": "NoMethodError", "isCorrect": false }
    ],
    "hint": "This error is triggered when Ruby cannot find a variable.",
    "answerDescription": "'NameError' is raised when trying to access an undefined variable."
  },
  {
    "id": "ruby_1023",
    "question": "What does 'raise' do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Ignores exceptions", "isCorrect": false },
      { "id": "option_2", "text": "Catches exceptions", "isCorrect": false },
      { "id": "option_3", "text": "Generates an exception", "isCorrect": true },
      { "id": "option_4", "text": "Retries a block of code", "isCorrect": false }
    ],
    "hint": "This method is used to trigger exceptions manually.",
    "answerDescription": "The 'raise' keyword is used to generate an exception in Ruby."
  },
  {
    "id": "ruby_1024",
    "question": "Which error is raised when passing incorrect arguments to a method?",
    "options": [
      { "id": "option_1", "text": "NoMethodError", "isCorrect": false },
      { "id": "option_2", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": true },
      { "id": "option_4", "text": "StandardError", "isCorrect": false }
    ],
    "hint": "This error occurs when an incorrect number of arguments is given to a method.",
    "answerDescription": "'ArgumentError' is raised when a method receives the wrong number of arguments."
  },
  {
    "id": "ruby_1025",
    "question": "What does the 'ensure' block do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Handles exceptions", "isCorrect": false },
      { "id": "option_2", "text": "Raises an error", "isCorrect": false },
      { "id": "option_3", "text": "Executes code whether an error occurs or not", "isCorrect": true },
      { "id": "option_4", "text": "Skips error handling", "isCorrect": false }
    ],
    "hint": "This block runs regardless of whether an exception is raised.",
    "answerDescription": "The 'ensure' block guarantees execution, regardless of exceptions."
  },
  {
    "id": "ruby_1026",
    "question": "Which error class should custom exceptions inherit from?",
    "options": [
      { "id": "option_1", "text": "Exception", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "StandardError", "isCorrect": true },
      { "id": "option_4", "text": "ErrorBase", "isCorrect": false }
    ],
    "hint": "Custom exceptions should inherit from a commonly used error class.",
    "answerDescription": "Custom exception classes in Ruby should inherit from 'StandardError'."
  },
  {
    "id": "ruby_1027",
    "question": "Which error is raised when there is an issue with Ruby's syntax?",
    "options": [
      { "id": "option_1", "text": "NoMethodError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "SyntaxError", "isCorrect": true },
      { "id": "option_4", "text": "TypeError", "isCorrect": false }
    ],
    "hint": "This error occurs when the Ruby interpreter fails to parse code.",
    "answerDescription": "'SyntaxError' is raised when Ruby encounters incorrect syntax."
  },
  {
    "id": "ruby_1028",
    "question": "How do you rescue multiple exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using multiple 'rescue' blocks", "isCorrect": false },
      { "id": "option_2", "text": "Using 'catch'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'rescue' with multiple exception classes", "isCorrect": true },
      { "id": "option_4", "text": "Using 'retry'", "isCorrect": false }
    ],
    "hint": "Multiple exceptions can be handled in one 'rescue' statement.",
    "answerDescription": "In Ruby, 'rescue' can handle multiple exception types by specifying them in an array."
  },
  {
    "id": "ruby_1029",
    "question": "What does 'retry' do in Ruby exception handling?",
    "options": [
      { "id": "option_1", "text": "Ignores the exception", "isCorrect": false },
      { "id": "option_2", "text": "Continues execution normally", "isCorrect": false },
      { "id": "option_3", "text": "Restarts the begin block", "isCorrect": true },
      { "id": "option_4", "text": "Raises a new error", "isCorrect": false }
    ],
    "hint": "This keyword is used to attempt an operation again.",
    "answerDescription": "The 'retry' keyword re-executes the 'begin' block after an exception occurs."
  },
  {
    "id": "ruby_1030",
    "question": "What happens if an exception is not rescued?",
    "options": [
      { "id": "option_1", "text": "It is ignored", "isCorrect": false },
      { "id": "option_2", "text": "The program continues execution", "isCorrect": false },
      { "id": "option_3", "text": "The program terminates with an error message", "isCorrect": true },
      { "id": "option_4", "text": "Ruby automatically fixes it", "isCorrect": false }
    ],
    "hint": "Unhandled exceptions result in a program crash.",
    "answerDescription": "If an exception is not rescued, Ruby stops execution and prints an error message."
  },  {
    "id": "ruby_1031",
    "question": "Which Ruby keyword is used to handle exceptions?",
    "options": [
      { "id": "option_1", "text": "try", "isCorrect": false },
      { "id": "option_2", "text": "catch", "isCorrect": false },
      { "id": "option_3", "text": "trap", "isCorrect": false },
      { "id": "option_4", "text": "rescue", "isCorrect": true }
    ],
    "hint": "This keyword is used within a 'begin' block to handle errors.",
    "answerDescription": "The 'rescue' keyword is used to catch and handle exceptions in Ruby."
  },
  {
    "id": "ruby_1032",
    "question": "What type of error occurs when calling a method on a nil object?",
    "options": [
      { "id": "option_1", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "NoMethodError", "isCorrect": true }
    ],
    "hint": "This error is triggered when trying to use a method on an undefined object.",
    "answerDescription": "A 'NoMethodError' occurs when calling a method on a nil or undefined object."
  },
  {
    "id": "ruby_1033",
    "question": "Which method allows defining custom exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "custom_exception", "isCorrect": false },
      { "id": "option_2", "text": "define_error", "isCorrect": false },
      { "id": "option_3", "text": "create_exception", "isCorrect": false },
      { "id": "option_4", "text": "class MyError < StandardError", "isCorrect": true }
    ],
    "hint": "Custom exceptions are created by defining a new class that inherits from a built-in error class.",
    "answerDescription": "Custom exceptions in Ruby are created by defining a new class that inherits from 'StandardError'."
  },
  {
    "id": "ruby_1034",
    "question": "What does the 'retry' keyword do inside a rescue block?",
    "options": [
      { "id": "option_1", "text": "Skips the error and moves on", "isCorrect": false },
      { "id": "option_2", "text": "Raises a new exception", "isCorrect": false },
      { "id": "option_3", "text": "Ignores the exception", "isCorrect": false },
      { "id": "option_4", "text": "Restarts the 'begin' block", "isCorrect": true }
    ],
    "hint": "This keyword forces the program to attempt execution again.",
    "answerDescription": "The 'retry' keyword restarts the 'begin' block, allowing another attempt at execution."
  },
  {
    "id": "ruby_1035",
    "question": "Which error type is raised when a division by zero occurs?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "ZeroDivisionError", "isCorrect": true }
    ],
    "hint": "This error occurs when attempting to divide by zero.",
    "answerDescription": "Ruby raises a 'ZeroDivisionError' when an attempt is made to divide by zero."
  },
  {
    "id": "ruby_1036",
    "question": "Which method in Ruby allows manually raising an exception?",
    "options": [
      { "id": "option_1", "text": "throw", "isCorrect": false },
      { "id": "option_2", "text": "fail", "isCorrect": false },
      { "id": "option_3", "text": "error", "isCorrect": false },
      { "id": "option_4", "text": "raise", "isCorrect": true }
    ],
    "hint": "This method forces an exception to be triggered.",
    "answerDescription": "The 'raise' method is used in Ruby to manually trigger an exception."
  },
  {
    "id": "ruby_1037",
    "question": "What will happen if an exception is not rescued in Ruby?",
    "options": [
      { "id": "option_1", "text": "Ruby will ignore the exception", "isCorrect": false },
      { "id": "option_2", "text": "The program will continue execution", "isCorrect": false },
      { "id": "option_3", "text": "Ruby will log the exception and proceed", "isCorrect": false },
      { "id": "option_4", "text": "The program will terminate with an error message", "isCorrect": true }
    ],
    "hint": "Unhandled exceptions cause Ruby to stop execution.",
    "answerDescription": "If an exception is not rescued, Ruby halts execution and displays an error message."
  },
  {
    "id": "ruby_1038",
    "question": "How can you specify multiple exceptions in a single rescue block?",
    "options": [
      { "id": "option_1", "text": "Using multiple 'rescue' blocks", "isCorrect": false },
      { "id": "option_2", "text": "Using 'catch'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'if' conditions inside rescue", "isCorrect": false },
      { "id": "option_4", "text": "Listing them in an array within 'rescue'", "isCorrect": true }
    ],
    "hint": "A single 'rescue' block can handle multiple exception types.",
    "answerDescription": "You can specify multiple exception types in an array within a 'rescue' block."
  },
  {
    "id": "ruby_1039",
    "question": "Which built-in error class is the superclass of most exceptions?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "Exception", "isCorrect": true }
    ],
    "hint": "All error classes ultimately inherit from this class.",
    "answerDescription": "The 'Exception' class is the root superclass of all exception classes in Ruby."
  },
  {
    "id": "ruby_1040",
    "question": "What is the purpose of the 'ensure' block in Ruby exception handling?",
    "options": [
      { "id": "option_1", "text": "It handles exceptions", "isCorrect": false },
      { "id": "option_2", "text": "It raises an exception", "isCorrect": false },
      { "id": "option_3", "text": "It skips error handling", "isCorrect": false },
      { "id": "option_4", "text": "It runs code whether an exception occurs or not", "isCorrect": true }
    ],
    "hint": "This block executes code regardless of exceptions.",
    "answerDescription": "The 'ensure' block ensures that code inside it runs whether an error occurs or not."
  },  {
    "id": "ruby_1041",
    "question": "Which keyword is used in Ruby to handle exceptions?",
    "options": [
      { "id": "option_1", "text": "rescue", "isCorrect": true },
      { "id": "option_2", "text": "try", "isCorrect": false },
      { "id": "option_3", "text": "catch", "isCorrect": false },
      { "id": "option_4", "text": "trap", "isCorrect": false }
    ],
    "hint": "This keyword is part of a 'begin' block.",
    "answerDescription": "The 'rescue' keyword is used to handle exceptions in Ruby."
  },
  {
    "id": "ruby_1042",
    "question": "What error does Ruby raise when trying to divide by zero?",
    "options": [
      { "id": "option_1", "text": "ZeroDivisionError", "isCorrect": true },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "SyntaxError", "isCorrect": false }
    ],
    "hint": "This error name contains the word 'division'.",
    "answerDescription": "A 'ZeroDivisionError' occurs when dividing by zero in Ruby."
  },
  {
    "id": "ruby_1043",
    "question": "Which method in Ruby is used to manually raise an exception?",
    "options": [
      { "id": "option_1", "text": "raise", "isCorrect": true },
      { "id": "option_2", "text": "throw", "isCorrect": false },
      { "id": "option_3", "text": "fail", "isCorrect": false },
      { "id": "option_4", "text": "error", "isCorrect": false }
    ],
    "hint": "This method forces an exception to be triggered.",
    "answerDescription": "The 'raise' method in Ruby is used to manually trigger an exception."
  },
  {
    "id": "ruby_1044",
    "question": "Which error is raised when calling a method on nil?",
    "options": [
      { "id": "option_1", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_2", "text": "TypeError", "isCorrect": false },
      { "id": "option_3", "text": "NameError", "isCorrect": false },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": false }
    ],
    "hint": "The error name suggests that a method does not exist.",
    "answerDescription": "A 'NoMethodError' occurs when calling a method on an undefined object."
  },
  {
    "id": "ruby_1045",
    "question": "How can you define a custom exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "class MyError < StandardError", "isCorrect": true },
      { "id": "option_2", "text": "def MyError", "isCorrect": false },
      { "id": "option_3", "text": "raise :MyError", "isCorrect": false },
      { "id": "option_4", "text": "try MyError", "isCorrect": false }
    ],
    "hint": "Custom exceptions inherit from an existing error class.",
    "answerDescription": "To create a custom exception, define a new class inheriting from 'StandardError'."
  },
  {
    "id": "ruby_1046",
    "question": "Which keyword ensures code execution whether an exception occurs or not?",
    "options": [
      { "id": "option_1", "text": "ensure", "isCorrect": true },
      { "id": "option_2", "text": "finally", "isCorrect": false },
      { "id": "option_3", "text": "end", "isCorrect": false },
      { "id": "option_4", "text": "catch", "isCorrect": false }
    ],
    "hint": "This keyword is similar to 'finally' in other languages.",
    "answerDescription": "The 'ensure' block ensures that code runs whether an exception occurs or not."
  },
  {
    "id": "ruby_1047",
    "question": "What will happen if an exception is not rescued in Ruby?",
    "options": [
      { "id": "option_1", "text": "The program will terminate with an error message", "isCorrect": true },
      { "id": "option_2", "text": "Ruby will ignore the error", "isCorrect": false },
      { "id": "option_3", "text": "Ruby will log the error and continue", "isCorrect": false },
      { "id": "option_4", "text": "It will trigger a warning but continue execution", "isCorrect": false }
    ],
    "hint": "Unhandled exceptions cause Ruby to stop execution.",
    "answerDescription": "If an exception is not rescued, Ruby halts execution and displays an error message."
  },
  {
    "id": "ruby_1048",
    "question": "Which error class is the superclass of most Ruby exceptions?",
    "options": [
      { "id": "option_1", "text": "Exception", "isCorrect": true },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "All Ruby errors are derived from this class.",
    "answerDescription": "The 'Exception' class is the root superclass of all exceptions in Ruby."
  },
  {
    "id": "ruby_1049",
    "question": "Which keyword can be used to attempt an operation again inside a rescue block?",
    "options": [
      { "id": "option_1", "text": "retry", "isCorrect": true },
      { "id": "option_2", "text": "again", "isCorrect": false },
      { "id": "option_3", "text": "repeat", "isCorrect": false },
      { "id": "option_4", "text": "loop", "isCorrect": false }
    ],
    "hint": "This keyword restarts the 'begin' block.",
    "answerDescription": "The 'retry' keyword restarts the 'begin' block, allowing another attempt at execution."
  },
  {
    "id": "ruby_1050",
    "question": "How can multiple exceptions be handled in a single rescue block?",
    "options": [
      { "id": "option_1", "text": "By listing them in an array within 'rescue'", "isCorrect": true },
      { "id": "option_2", "text": "By using multiple 'rescue' blocks", "isCorrect": false },
      { "id": "option_3", "text": "By checking exception type with 'if'", "isCorrect": false },
      { "id": "option_4", "text": "By using 'try-catch' syntax", "isCorrect": false }
    ],
    "hint": "A single rescue block can handle multiple errors.",
    "answerDescription": "You can specify multiple exception types in an array within a 'rescue' block."
  },  {
    "id": "ruby_1051",
    "question": "What is the purpose of the 'begin' keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "To define a new block", "isCorrect": false },
      { "id": "option_2", "text": "To start an exception handling block", "isCorrect": true },
      { "id": "option_3", "text": "To execute code conditionally", "isCorrect": false },
      { "id": "option_4", "text": "To import external modules", "isCorrect": false }
    ],
    "hint": "It is commonly used in combination with 'rescue'.",
    "answerDescription": "The 'begin' keyword starts an exception-handling block in Ruby."
  },
  {
    "id": "ruby_1052",
    "question": "Which keyword is used to specify code that should always execute after an exception block?",
    "options": [
      { "id": "option_1", "text": "finally", "isCorrect": false },
      { "id": "option_2", "text": "ensure", "isCorrect": true },
      { "id": "option_3", "text": "after", "isCorrect": false },
      { "id": "option_4", "text": "end", "isCorrect": false }
    ],
    "hint": "Similar to 'finally' in other languages.",
    "answerDescription": "The 'ensure' keyword ensures code execution whether an exception occurs or not."
  },
  {
    "id": "ruby_1053",
    "question": "What happens if 'raise' is used without arguments?",
    "options": [
      { "id": "option_1", "text": "It does nothing", "isCorrect": false },
      { "id": "option_2", "text": "It re-raises the last exception", "isCorrect": true },
      { "id": "option_3", "text": "It raises a syntax error", "isCorrect": false },
      { "id": "option_4", "text": "It exits the program immediately", "isCorrect": false }
    ],
    "hint": "If no arguments are given, Ruby assumes there was a previous exception.",
    "answerDescription": "Using 'raise' without arguments re-raises the last exception in Ruby."
  },
  {
    "id": "ruby_1054",
    "question": "Which method allows capturing the exception message in a rescue block?",
    "options": [
      { "id": "option_1", "text": "message()", "isCorrect": false },
      { "id": "option_2", "text": "exception.message", "isCorrect": true },
      { "id": "option_3", "text": "get_message()", "isCorrect": false },
      { "id": "option_4", "text": "error_text()", "isCorrect": false }
    ],
    "hint": "This method returns the error description.",
    "answerDescription": "The 'exception.message' method provides the error message in a rescue block."
  },
  {
    "id": "ruby_1055",
    "question": "What is the default exception type raised by 'raise' if no arguments are provided?",
    "options": [
      { "id": "option_1", "text": "StandardError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": true },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "Exception", "isCorrect": false }
    ],
    "hint": "This is the default exception type when no class is specified with 'raise'.",
    "answerDescription": "If no exception type is provided, 'raise' defaults to 'RuntimeError'."
  },
  {
    "id": "ruby_1056",
    "question": "Which keyword is used in Ruby to exit a rescue block early?",
    "options": [
      { "id": "option_1", "text": "exit", "isCorrect": false },
      { "id": "option_2", "text": "next", "isCorrect": true },
      { "id": "option_3", "text": "continue", "isCorrect": false },
      { "id": "option_4", "text": "redo", "isCorrect": false }
    ],
    "hint": "It works similarly to skipping to the next iteration in loops.",
    "answerDescription": "The 'next' keyword can be used to exit early from a rescue block in Ruby."
  },
  {
    "id": "ruby_1057",
    "question": "What will happen if 'rescue' is used without specifying an exception class?",
    "options": [
      { "id": "option_1", "text": "It catches all exceptions", "isCorrect": false },
      { "id": "option_2", "text": "It catches only StandardError and its subclasses", "isCorrect": true },
      { "id": "option_3", "text": "It ignores the exception", "isCorrect": false },
      { "id": "option_4", "text": "It raises a syntax error", "isCorrect": false }
    ],
    "hint": "By default, it does not catch 'Exception' but a more specific type.",
    "answerDescription": "A rescue block without an exception class catches 'StandardError' and its subclasses."
  },
  {
    "id": "ruby_1058",
    "question": "How do you retry an operation inside a rescue block?",
    "options": [
      { "id": "option_1", "text": "using 'loop'", "isCorrect": false },
      { "id": "option_2", "text": "using 'retry'", "isCorrect": true },
      { "id": "option_3", "text": "using 'rescue'", "isCorrect": false },
      { "id": "option_4", "text": "using 'catch'", "isCorrect": false }
    ],
    "hint": "This keyword restarts the begin block.",
    "answerDescription": "The 'retry' keyword restarts the 'begin' block in case of an exception."
  },
  {
    "id": "ruby_1059",
    "question": "Which class should be inherited to create a custom exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "StandardError", "isCorrect": true },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "Exception", "isCorrect": false }
    ],
    "hint": "This is the most common parent class for custom exceptions.",
    "answerDescription": "Custom exceptions should inherit from 'StandardError' to be properly handled by 'rescue'."
  },
  {
    "id": "ruby_1060",
    "question": "How can you define multiple rescue clauses for different exceptions?",
    "options": [
      { "id": "option_1", "text": "Using 'rescue if'", "isCorrect": false },
      { "id": "option_2", "text": "Using multiple 'rescue' clauses", "isCorrect": true },
      { "id": "option_3", "text": "Using 'case' inside rescue", "isCorrect": false },
      { "id": "option_4", "text": "Using 'catch' blocks", "isCorrect": false }
    ],
    "hint": "Each rescue clause can specify a different exception type.",
    "answerDescription": "You can handle different exceptions by defining multiple 'rescue' clauses."
  },  {
    "id": "ruby_1061",
    "question": "What does the 'rescue' keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Terminates the program", "isCorrect": false },
      { "id": "option_2", "text": "Skips the next block", "isCorrect": false },
      { "id": "option_3", "text": "Handles exceptions in a begin block", "isCorrect": true },
      { "id": "option_4", "text": "Restarts the execution", "isCorrect": false }
    ],
    "hint": "It's used to catch and handle exceptions.",
    "answerDescription": "The 'rescue' keyword in Ruby allows handling exceptions within a 'begin' block."
  },
  {
    "id": "ruby_1062",
    "question": "Which method provides the backtrace of an exception?",
    "options": [
      { "id": "option_1", "text": "trace()", "isCorrect": false },
      { "id": "option_2", "text": "call_stack()", "isCorrect": false },
      { "id": "option_3", "text": "backtrace()", "isCorrect": true },
      { "id": "option_4", "text": "log_error()", "isCorrect": false }
    ],
    "hint": "This method returns an array of stack trace lines.",
    "answerDescription": "The 'backtrace' method returns an array containing the execution stack when an exception occurs."
  },
  {
    "id": "ruby_1063",
    "question": "How do you specify multiple exception types in a single rescue clause?",
    "options": [
      { "id": "option_1", "text": "Using 'or'", "isCorrect": false },
      { "id": "option_2", "text": "Using '|'", "isCorrect": false },
      { "id": "option_3", "text": "Using a comma-separated list", "isCorrect": true },
      { "id": "option_4", "text": "Using '&&'", "isCorrect": false }
    ],
    "hint": "Separate exception types using a specific delimiter.",
    "answerDescription": "You can specify multiple exception types in a 'rescue' clause using a comma-separated list."
  },
  {
    "id": "ruby_1064",
    "question": "Which exception is raised for invalid arguments in a method?",
    "options": [
      { "id": "option_1", "text": "StandardError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": true },
      { "id": "option_4", "text": "TypeError", "isCorrect": false }
    ],
    "hint": "It occurs when a method receives the wrong number or type of arguments.",
    "answerDescription": "'ArgumentError' is raised when a method receives incorrect arguments."
  },
  {
    "id": "ruby_1065",
    "question": "Which error is raised when attempting to divide by zero in Ruby?",
    "options": [
      { "id": "option_1", "text": "ArithmeticError", "isCorrect": false },
      { "id": "option_2", "text": "MathError", "isCorrect": false },
      { "id": "option_3", "text": "ZeroDivisionError", "isCorrect": true },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "This error occurs when dividing by zero in Ruby.",
    "answerDescription": "Ruby raises a 'ZeroDivisionError' when attempting division by zero."
  },
  {
    "id": "ruby_1066",
    "question": "Which keyword is used to restart a begin block after an exception?",
    "options": [
      { "id": "option_1", "text": "retry()", "isCorrect": false },
      { "id": "option_2", "text": "repeat()", "isCorrect": false },
      { "id": "option_3", "text": "retry", "isCorrect": true },
      { "id": "option_4", "text": "restart()", "isCorrect": false }
    ],
    "hint": "It allows retrying the begin block execution.",
    "answerDescription": "The 'retry' keyword re-executes the begin block from the start when an exception occurs."
  },
  {
    "id": "ruby_1067",
    "question": "What is the superclass of all Ruby exceptions?",
    "options": [
      { "id": "option_1", "text": "StandardError", "isCorrect": false },
      { "id": "option_2", "text": "Object", "isCorrect": false },
      { "id": "option_3", "text": "Exception", "isCorrect": true },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": false }
    ],
    "hint": "It is the root of the exception hierarchy.",
    "answerDescription": "All exceptions in Ruby inherit from the 'Exception' class."
  },
  {
    "id": "ruby_1068",
    "question": "Which method in an exception object retrieves the error message?",
    "options": [
      { "id": "option_1", "text": "error_text()", "isCorrect": false },
      { "id": "option_2", "text": "get_message()", "isCorrect": false },
      { "id": "option_3", "text": "message()", "isCorrect": true },
      { "id": "option_4", "text": "description()", "isCorrect": false }
    ],
    "hint": "This method returns the text of the error.",
    "answerDescription": "The 'message' method of an exception object retrieves its error message."
  },
  {
    "id": "ruby_1069",
    "question": "What error is shown if an exception is not rescued in Ruby?",
    "options": [
      { "id": "option_1", "text": "The script continues execution", "isCorrect": false },
      { "id": "option_2", "text": "It logs an error and continues", "isCorrect": false },
      { "id": "option_3", "text": "The program terminates", "isCorrect": true },
      { "id": "option_4", "text": "A warning is displayed", "isCorrect": false }
    ],
    "hint": "Unhandled exceptions lead to program failure.",
    "answerDescription": "If an exception is not rescued, Ruby terminates the program with an error message."
  },
  {
    "id": "ruby_1070",
    "question": "Which keyword ensures that a block of code runs whether an exception occurs or not?",
    "options": [
      { "id": "option_1", "text": "rescue", "isCorrect": false },
      { "id": "option_2", "text": "finally", "isCorrect": false },
      { "id": "option_3", "text": "ensure", "isCorrect": true },
      { "id": "option_4", "text": "always", "isCorrect": false }
    ],
    "hint": "This keyword is similar to 'finally' in other languages.",
    "answerDescription": "The 'ensure' keyword ensures that a block of code runs regardless of whether an exception occurs."
  },  {
    "id": "ruby_1071",
    "question": "What keyword is used to raise an exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "throw", "isCorrect": false },
      { "id": "option_2", "text": "raise_error", "isCorrect": false },
      { "id": "option_3", "text": "exception", "isCorrect": false },
      { "id": "option_4", "text": "raise", "isCorrect": true }
    ],
    "hint": "It explicitly triggers an exception.",
    "answerDescription": "The 'raise' keyword is used to raise exceptions in Ruby."
  },
  {
    "id": "ruby_1072",
    "question": "Which error class is the parent of most standard Ruby exceptions?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "Exception", "isCorrect": false },
      { "id": "option_3", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_4", "text": "StandardError", "isCorrect": true }
    ],
    "hint": "Most built-in exceptions in Ruby inherit from this class.",
    "answerDescription": "'StandardError' is the parent class of most Ruby exceptions."
  },
  {
    "id": "ruby_1073",
    "question": "What does the 'begin' keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Starts a block that can be retried", "isCorrect": false },
      { "id": "option_2", "text": "Terminates execution on error", "isCorrect": false },
      { "id": "option_3", "text": "Runs code without error handling", "isCorrect": false },
      { "id": "option_4", "text": "Marks the start of an exception-handling block", "isCorrect": true }
    ],
    "hint": "It's part of the error handling syntax.",
    "answerDescription": "The 'begin' keyword starts a block of code that can handle exceptions using 'rescue'."
  },
  {
    "id": "ruby_1076",
    "question": "Which global variable holds the most recent exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "$?", "isCorrect": false },
      { "id": "option_2", "text": "$@", "isCorrect": false },
      { "id": "option_3", "text": "$!", "isCorrect": true },
      { "id": "option_4", "text": "$error", "isCorrect": false }
    ],
    "hint": "This variable holds the last exception object raised.",
    "answerDescription": "The global variable '$!' contains the last raised exception."
  },
  {
    "id": "ruby_1075",
    "question": "Which format is used to define a custom exception class in Ruby?",
    "options": [
      { "id": "option_1", "text": "class CustomException < RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "module CustomException", "isCorrect": false },
      { "id": "option_3", "text": "class CustomException < Exception", "isCorrect": false },
      { "id": "option_4", "text": "class CustomException < StandardError", "isCorrect": true }
    ],
    "hint": "It should inherit from a common error-handling class.",
    "answerDescription": "Custom exception classes should inherit from 'StandardError' to be properly handled."
  },
  {
    "id": "ruby_1076",
    "question": "What happens when 'rescue' is used without specifying an exception class?",
    "options": [
      { "id": "option_1", "text": "It rescues only RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "It rescues SyntaxError and RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "It rescues all types of exceptions", "isCorrect": false },
      { "id": "option_4", "text": "It rescues StandardError and its subclasses", "isCorrect": true }
    ],
    "hint": "It does not rescue all exceptions, only a specific category.",
    "answerDescription": "A generic 'rescue' without an exception class rescues 'StandardError' and its subclasses."
  },
  {
    "id": "ruby_1077",
    "question": "Which keyword ensures a block runs whether an exception occurs or not?",
    "options": [
      { "id": "option_1", "text": "rescue", "isCorrect": false },
      { "id": "option_2", "text": "finally", "isCorrect": false },
      { "id": "option_3", "text": "retry", "isCorrect": false },
      { "id": "option_4", "text": "ensure", "isCorrect": true }
    ],
    "hint": "Similar to 'finally' in other languages.",
    "answerDescription": "The 'ensure' keyword guarantees that a block of code runs, regardless of exceptions."
  },
  {
    "id": "ruby_1078",
    "question": "What is the default exception raised when calling 'raise' without arguments?",
    "options": [
      { "id": "option_1", "text": "Exception", "isCorrect": false },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "SyntaxError", "isCorrect": false },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": true }
    ],
    "hint": "It is the default general-purpose exception.",
    "answerDescription": "If 'raise' is called without arguments, it raises a 'RuntimeError' by default."
  },
  {
    "id": "ruby_1079",
    "question": "Which method in an exception object retrieves its class name?",
    "options": [
      { "id": "option_1", "text": "error_type()", "isCorrect": false },
      { "id": "option_2", "text": "exception_name()", "isCorrect": false },
      { "id": "option_3", "text": "message()", "isCorrect": false },
      { "id": "option_4", "text": "class", "isCorrect": true }
    ],
    "hint": "All Ruby objects, including exceptions, have this method.",
    "answerDescription": "The 'class' method retrieves the class name of an exception object."
  },
  {
    "id": "ruby_1080",
    "question": "Which keyword allows you to handle multiple exceptions in separate blocks?",
    "options": [
      { "id": "option_1", "text": "case", "isCorrect": false },
      { "id": "option_2", "text": "switch", "isCorrect": false },
      { "id": "option_3", "text": "catch", "isCorrect": false },
      { "id": "option_4", "text": "rescue", "isCorrect": true }
    ],
    "hint": "It is part of the standard error handling syntax.",
    "answerDescription": "The 'rescue' keyword allows handling multiple exception types in separate blocks."
  },  {
    "id": "ruby_1081",
    "question": "Which keyword in Ruby is used to handle exceptions?",
    "options": [
      { "id": "option_1", "text": "rescue", "isCorrect": true },
      { "id": "option_2", "text": "catch", "isCorrect": false },
      { "id": "option_3", "text": "raise", "isCorrect": false },
      { "id": "option_4", "text": "trap", "isCorrect": false }
    ],
    "hint": "This keyword is used to recover from errors.",
    "answerDescription": "The 'rescue' keyword is used to handle exceptions in Ruby."
  },
  {
    "id": "ruby_1082",
    "question": "What method is used to retrieve an exception's message?",
    "options": [
      { "id": "option_1", "text": "message", "isCorrect": true },
      { "id": "option_2", "text": "error_info", "isCorrect": false },
      { "id": "option_3", "text": "exception_text", "isCorrect": false },
      { "id": "option_4", "text": "get_message", "isCorrect": false }
    ],
    "hint": "It's a common method in Ruby's Exception class.",
    "answerDescription": "The 'message' method returns a description of the exception."
  },
  {
    "id": "ruby_1083",
    "question": "Which class is at the top of Ruby’s exception hierarchy?",
    "options": [
      { "id": "option_1", "text": "Exception", "isCorrect": true },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "ErrorBase", "isCorrect": false }
    ],
    "hint": "It is the superclass of all exception classes.",
    "answerDescription": "'Exception' is the root class for all exceptions in Ruby."
  },
  {
    "id": "ruby_1084",
    "question": "What keyword is used to retry a failed block of code?",
    "options": [
      { "id": "option_1", "text": "retry", "isCorrect": true },
      { "id": "option_2", "text": "redo", "isCorrect": false },
      { "id": "option_3", "text": "repeat", "isCorrect": false },
      { "id": "option_4", "text": "again", "isCorrect": false }
    ],
    "hint": "This keyword restarts the 'begin' block.",
    "answerDescription": "The 'retry' keyword restarts a block when an exception occurs."
  },
  {
    "id": "ruby_1085",
    "question": "Which method provides the backtrace of an exception?",
    "options": [
      { "id": "option_1", "text": "backtrace", "isCorrect": true },
      { "id": "option_2", "text": "trace_info", "isCorrect": false },
      { "id": "option_3", "text": "error_path", "isCorrect": false },
      { "id": "option_4", "text": "exception_log", "isCorrect": false }
    ],
    "hint": "It returns an array of call stack locations.",
    "answerDescription": "The 'backtrace' method provides a stack trace of where the exception occurred."
  },
  {
    "id": "ruby_1086",
    "question": "What does the 'rescue nil' idiom do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Suppresses all exceptions and returns nil", "isCorrect": true },
      { "id": "option_2", "text": "Raises an exception", "isCorrect": false },
      { "id": "option_3", "text": "Logs the error and returns nil", "isCorrect": false },
      { "id": "option_4", "text": "Only rescues StandardError", "isCorrect": false }
    ],
    "hint": "It is often used to silently handle errors.",
    "answerDescription": "'rescue nil' prevents an exception from propagating and returns 'nil' instead."
  },
  {
    "id": "ruby_1087",
    "question": "Which method allows raising a new exception from within a rescue block?",
    "options": [
      { "id": "option_1", "text": "raise", "isCorrect": true },
      { "id": "option_2", "text": "throw", "isCorrect": false },
      { "id": "option_3", "text": "catch", "isCorrect": false },
      { "id": "option_4", "text": "retry", "isCorrect": false }
    ],
    "hint": "It's the same keyword used to raise an exception initially.",
    "answerDescription": "The 'raise' keyword can be used inside a rescue block to re-raise an exception."
  },
  {
    "id": "ruby_1088",
    "question": "What does the 'rescue => e' syntax do?",
    "options": [
      { "id": "option_1", "text": "Stores the exception in 'e'", "isCorrect": true },
      { "id": "option_2", "text": "Ignores the exception", "isCorrect": false },
      { "id": "option_3", "text": "Logs the error", "isCorrect": false },
      { "id": "option_4", "text": "Suppresses all exceptions", "isCorrect": false }
    ],
    "hint": "It allows handling and inspecting an exception object.",
    "answerDescription": "Using 'rescue => e' captures the exception into variable 'e' for further processing."
  },
  {
    "id": "ruby_1089",
    "question": "Which method can be used to create a custom error message in an exception?",
    "options": [
      { "id": "option_1", "text": "initialize", "isCorrect": true },
      { "id": "option_2", "text": "set_message", "isCorrect": false },
      { "id": "option_3", "text": "raise_error", "isCorrect": false },
      { "id": "option_4", "text": "custom_error", "isCorrect": false }
    ],
    "hint": "It is a constructor method in Ruby classes.",
    "answerDescription": "Overriding the 'initialize' method in a custom exception class allows setting a custom error message."
  },
  {
    "id": "ruby_1090",
    "question": "Which keyword ensures that a block of code always executes after an exception?",
    "options": [
      { "id": "option_1", "text": "ensure", "isCorrect": true },
      { "id": "option_2", "text": "finally", "isCorrect": false },
      { "id": "option_3", "text": "complete", "isCorrect": false },
      { "id": "option_4", "text": "after", "isCorrect": false }
    ],
    "hint": "It is equivalent to 'finally' in other languages.",
    "answerDescription": "The 'ensure' keyword guarantees that a block runs whether an exception occurs or not."
  },  {
    "id": "ruby_1091",
    "question": "What is the default exception type raised when using 'raise' without arguments?",
    "options": [
      { "id": "option_1", "text": "Exception", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": true },
      { "id": "option_3", "text": "StandardError", "isCorrect": false },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "It is one of the most common error types in Ruby.",
    "answerDescription": "When 'raise' is called without arguments, it raises a RuntimeError by default."
  },
  {
    "id": "ruby_1092",
    "question": "Which keyword can be used inside a rescue block to re-throw the caught exception?",
    "options": [
      { "id": "option_1", "text": "throw", "isCorrect": false },
      { "id": "option_2", "text": "raise", "isCorrect": true },
      { "id": "option_3", "text": "retry", "isCorrect": false },
      { "id": "option_4", "text": "fail", "isCorrect": false }
    ],
    "hint": "It is also used to create exceptions initially.",
    "answerDescription": "The 'raise' keyword can be used inside a rescue block to re-throw an exception."
  },
  {
    "id": "ruby_1093",
    "question": "What exception will be raised if an undefined method is called on an object?",
    "options": [
      { "id": "option_1", "text": "TypeError", "isCorrect": false },
      { "id": "option_2", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_3", "text": "NameError", "isCorrect": false },
      { "id": "option_4", "text": "UndefinedMethodError", "isCorrect": false }
    ],
    "hint": "The exception name contains 'Method' in it.",
    "answerDescription": "Calling a method that does not exist on an object raises a NoMethodError."
  },
  {
    "id": "ruby_1094",
    "question": "Which keyword ensures a block of code runs regardless of an exception occurring?",
    "options": [
      { "id": "option_1", "text": "finally", "isCorrect": false },
      { "id": "option_2", "text": "ensure", "isCorrect": true },
      { "id": "option_3", "text": "rescue", "isCorrect": false },
      { "id": "option_4", "text": "after", "isCorrect": false }
    ],
    "hint": "It is equivalent to 'finally' in other languages.",
    "answerDescription": "The 'ensure' keyword in Ruby guarantees a block of code executes, even if an exception occurs."
  },
  {
    "id": "ruby_1096",
    "question": "Which built-in Ruby method can be used to log errors to a file?",
    "options": [
      { "id": "option_1", "text": "puts", "isCorrect": false },
      { "id": "option_2", "text": "warn", "isCorrect": true },
      { "id": "option_3", "text": "log_error", "isCorrect": false },
      { "id": "option_4", "text": "exception_logger", "isCorrect": false }
    ],
    "hint": "This method is often used to display warnings.",
    "answerDescription": "The 'warn' method in Ruby can be used to log error messages, sending output to STDERR."
  },
  {
    "id": "ruby_1097",
    "question": "What does the 'rescue StandardError' syntax do?",
    "options": [
      { "id": "option_1", "text": "Handles all exceptions", "isCorrect": false },
      { "id": "option_2", "text": "Handles only StandardError exceptions", "isCorrect": true },
      { "id": "option_3", "text": "Ignores errors", "isCorrect": false },
      { "id": "option_4", "text": "Suppresses exceptions", "isCorrect": false }
    ],
    "hint": "StandardError is a common superclass of many built-in exceptions.",
    "answerDescription": "Using 'rescue StandardError' catches only exceptions that inherit from StandardError."
  },
  {
    "id": "ruby_1098",
    "question": "Which method returns an array of the keys in a hash?",
    "options": [
      { "id": "option_1", "text": "values", "isCorrect": false },
      { "id": "option_2", "text": "keys", "isCorrect": true },
      { "id": "option_3", "text": "get_keys", "isCorrect": false },
      { "id": "option_4", "text": "all_keys", "isCorrect": false }
    ],
    "hint": "This method returns all keys from a hash as an array.",
    "answerDescription": "The `keys` method returns an array containing all the keys of a hash."
  },
  {
    "id": "ruby_1099",
    "question": "What does 'begin...rescue' do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Starts a loop", "isCorrect": false },
      { "id": "option_2", "text": "Handles exceptions", "isCorrect": true },
      { "id": "option_3", "text": "Creates a new thread", "isCorrect": false },
      { "id": "option_4", "text": "Declares a function", "isCorrect": false }
    ],
    "hint": "It is used for exception handling.",
    "answerDescription": "'begin...rescue' in Ruby is used to handle exceptions that occur within the 'begin' block."
  },
  {
    "id": "ruby_1100",
    "question": "How do you specify multiple exception types in a 'rescue' clause?",
    "options": [
      { "id": "option_1", "text": "Using a case statement", "isCorrect": false },
      { "id": "option_2", "text": "Listing them after 'rescue' separated by commas", "isCorrect": true },
      { "id": "option_3", "text": "Using 'or' between exception names", "isCorrect": false },
      { "id": "option_4", "text": "Defining multiple 'rescue' blocks", "isCorrect": false }
    ],
    "hint": "The syntax allows handling multiple error types in one line.",
    "answerDescription": "Multiple exception types can be listed in a 'rescue' clause by separating them with commas."
  },
  {
    "id": "ruby_1101",
    "question": "Which keyword is used to define an exception-handling block in Ruby?",
    "options": [
      { "id": "option_1", "text": "try", "isCorrect": false },
      { "id": "option_2", "text": "catch", "isCorrect": false },
      { "id": "option_3", "text": "begin", "isCorrect": true },
      { "id": "option_4", "text": "handle", "isCorrect": false }
    ],
    "hint": "This keyword is used to start an exception-handling block.",
    "answerDescription": "In Ruby, 'begin' is used to define an exception-handling block."
  },
  {
    "id": "ruby_1102",
    "question": "Which class is the parent class of most standard exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "Error", "isCorrect": false },
      { "id": "option_2", "text": "Exception", "isCorrect": false },
      { "id": "option_3", "text": "StandardError", "isCorrect": true },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": false }
    ],
    "hint": "Most common Ruby exceptions inherit from this class.",
    "answerDescription": "In Ruby, 'StandardError' is the superclass of most standard exceptions."
  },
  {
    "id": "ruby_1103",
    "question": "What will happen if 'rescue' is used without specifying an exception class?",
    "options": [
      { "id": "option_1", "text": "It catches all exceptions", "isCorrect": false },
      { "id": "option_2", "text": "It ignores the exception", "isCorrect": false },
      { "id": "option_3", "text": "It catches only StandardError exceptions", "isCorrect": true },
      { "id": "option_4", "text": "It terminates the program", "isCorrect": false }
    ],
    "hint": "By default, it does not catch all exceptions.",
    "answerDescription": "When 'rescue' is used without specifying an exception, it catches only 'StandardError' exceptions."
  },
  {
    "id": "ruby_1104",
    "question": "Which method provides details about an exception object?",
    "options": [
      { "id": "option_1", "text": "message", "isCorrect": false },
      { "id": "option_2", "text": "info", "isCorrect": false },
      { "id": "option_3", "text": "backtrace", "isCorrect": true },
      { "id": "option_4", "text": "details", "isCorrect": false }
    ],
    "hint": "This method returns an array with stack trace details.",
    "answerDescription": "The 'backtrace' method provides details about where an exception occurred."
  },
  {
    "id": "ruby_1105",
    "question": "What is the purpose of the 'retry' keyword in a rescue block?",
    "options": [
      { "id": "option_1", "text": "Ignore the exception", "isCorrect": false },
      { "id": "option_2", "text": "Continue execution after the exception", "isCorrect": false },
      { "id": "option_3", "text": "Re-execute the begin block", "isCorrect": true },
      { "id": "option_4", "text": "Exit the program", "isCorrect": false }
    ],
    "hint": "It restarts execution from the beginning of the 'begin' block.",
    "answerDescription": "The 'retry' keyword re-executes the 'begin' block if an exception occurs."
  },
  {
    "id": "ruby_1106",
    "question": "Which keyword is used to define multiple rescue blocks for different exception types?",
    "options": [
      { "id": "option_1", "text": "catch", "isCorrect": false },
      { "id": "option_2", "text": "handle", "isCorrect": false },
      { "id": "option_3", "text": "rescue", "isCorrect": true },
      { "id": "option_4", "text": "raise", "isCorrect": false }
    ],
    "hint": "It is commonly used for handling exceptions in Ruby.",
    "answerDescription": "Multiple 'rescue' blocks can be defined to handle different exception types in Ruby."
  },
  {
    "id": "ruby_1107",
    "question": "Which method is used to find the index of an element in an array?",
    "options": [
      { "id": "option_1", "text": "position", "isCorrect": false },
      { "id": "option_2", "text": "index", "isCorrect": true },
      { "id": "option_3", "text": "find_index", "isCorrect": false },
      { "id": "option_4", "text": "locate", "isCorrect": false }
    ],
    "hint": "This method returns the position of the first occurrence of an element.",
    "answerDescription": "The `index` method returns the index of a given element in an array."
  },
  {
    "id": "ruby_1108",
    "question": "Which method is used to retrieve the message from an exception object?",
    "options": [
      { "id": "option_1", "text": "get_message", "isCorrect": false },
      { "id": "option_2", "text": "description", "isCorrect": false },
      { "id": "option_3", "text": "message", "isCorrect": true },
      { "id": "option_4", "text": "error_text", "isCorrect": false }
    ],
    "hint": "This method provides a string describing the exception.",
    "answerDescription": "The 'message' method returns the error message of an exception object."
  },
  {
    "id": "ruby_1109",
    "question": "What is the difference between 'raise' and 'fail' in Ruby?",
    "options": [
      { "id": "option_1", "text": "fail stops execution while raise does not", "isCorrect": false },
      { "id": "option_2", "text": "raise logs the error while fail does not", "isCorrect": false },
      { "id": "option_3", "text": "They are identical, but 'fail' is used to indicate failure", "isCorrect": true },
      { "id": "option_4", "text": "fail retries the operation automatically", "isCorrect": false }
    ],
    "hint": "One is stylistically preferred for indicating failure in methods.",
    "answerDescription": "The 'raise' and 'fail' methods are identical, but 'fail' is used to indicate failures in method execution."
  },
  {
    "id": "ruby_1110",
    "question": "How can you define a custom exception class that inherits from StandardError?",
    "options": [
      { "id": "option_1", "text": "class MyError < Exception", "isCorrect": false },
      { "id": "option_2", "text": "def MyError < StandardError", "isCorrect": false },
      { "id": "option_3", "text": "class MyError < StandardError", "isCorrect": true },
      { "id": "option_4", "text": "error MyError < StandardError", "isCorrect": false }
    ],
    "hint": "It follows Ruby's object-oriented structure.",
    "answerDescription": "A custom exception class can be created by subclassing 'StandardError'."
  },  {
    "id": "ruby_1111",
    "question": "Which method is used to raise an exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "throw", "isCorrect": false },
      { "id": "option_2", "text": "error", "isCorrect": false },
      { "id": "option_3", "text": "fail", "isCorrect": false },
      { "id": "option_4", "text": "raise", "isCorrect": true }
    ],
    "hint": "This method is used to generate an exception in Ruby.",
    "answerDescription": "The 'raise' method is used to raise an exception in Ruby."
  },
  {
    "id": "ruby_1112",
    "question": "Which method returns the first character of a string?",
    "options": [
      { "id": "option_1", "text": "slice", "isCorrect": false },
      { "id": "option_2", "text": "head", "isCorrect": false },
      { "id": "option_3", "text": "chr", "isCorrect": true },
      { "id": "option_4", "text": "first", "isCorrect": false }
    ],
    "hint": "This method returns the first character of a string as a new string.",
    "answerDescription": "The `chr` method returns the first character of a string."
  },
  {
    "id": "ruby_1113",
    "question": "Which exception is raised when calling a method that does not exist?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_4", "text": "NameError", "isCorrect": false }
    ],
    "hint": "This error occurs when an undefined method is called.",
    "answerDescription": "Ruby raises a 'NoMethodError' when a non-existent method is called."
  },
  {
    "id": "ruby_1114",
    "question": "What does the 'ensure' block do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Catches exceptions", "isCorrect": false },
      { "id": "option_2", "text": "Ignores errors", "isCorrect": false },
      { "id": "option_3", "text": "Stops execution", "isCorrect": false },
      { "id": "option_4", "text": "Runs code regardless of an exception", "isCorrect": true }
    ],
    "hint": "This block always executes, whether an exception occurs or not.",
    "answerDescription": "The 'ensure' block ensures that certain code runs, whether an exception occurs or not."
  },
  {
    "id": "ruby_1115",
    "question": "How can you specify multiple exceptions in a single 'rescue' statement?",
    "options": [
      { "id": "option_1", "text": "Using a loop", "isCorrect": false },
      { "id": "option_2", "text": "Using 'catch'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'when'", "isCorrect": false },
      { "id": "option_4", "text": "Using a comma-separated list", "isCorrect": true }
    ],
    "hint": "You can specify multiple exceptions in a list.",
    "answerDescription": "You can rescue multiple exception types in a single 'rescue' statement by using a comma-separated list."
  },
  {
    "id": "ruby_1116",
    "question": "Which of the following is a subclass of StandardError?",
    "options": [
      { "id": "option_1", "text": "Interrupt", "isCorrect": false },
      { "id": "option_2", "text": "NoMemoryError", "isCorrect": false },
      { "id": "option_3", "text": "SystemExit", "isCorrect": false },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": true }
    ],
    "hint": "This error occurs when the wrong number of arguments is passed.",
    "answerDescription": "'ArgumentError' is a subclass of 'StandardError' in Ruby."
  },
  {
    "id": "ruby_1117",
    "question": "What is the purpose of 'begin' in Ruby's exception handling?",
    "options": [
      { "id": "option_1", "text": "Declares a function", "isCorrect": false },
      { "id": "option_2", "text": "Defines a loop", "isCorrect": false },
      { "id": "option_3", "text": "Exits a method", "isCorrect": false },
      { "id": "option_4", "text": "Starts an exception-handling block", "isCorrect": true }
    ],
    "hint": "It marks the start of an exception-handling block.",
    "answerDescription": "'begin' is used to start an exception-handling block in Ruby."
  },
  {
    "id": "ruby_1118",
    "question": "What will happen if a 'raise' statement is used without an argument?",
    "options": [
      { "id": "option_1", "text": "It raises a warning", "isCorrect": false },
      { "id": "option_2", "text": "It does nothing", "isCorrect": false },
      { "id": "option_3", "text": "It exits the program normally", "isCorrect": false },
      { "id": "option_4", "text": "It re-raises the last exception", "isCorrect": true }
    ],
    "hint": "It affects the last encountered exception.",
    "answerDescription": "If 'raise' is used without an argument, it re-raises the last exception in Ruby."
  },
  {
    "id": "ruby_1119",
    "question": "Which method is used to check if an exception was rescued?",
    "options": [
      { "id": "option_1", "text": "caught?", "isCorrect": false },
      { "id": "option_2", "text": "handled?", "isCorrect": false },
      { "id": "option_3", "text": "rescued?", "isCorrect": false },
      { "id": "option_4", "text": "$!", "isCorrect": true }
    ],
    "hint": "This global variable stores the last exception raised.",
    "answerDescription": "The global variable '$!' holds the last raised exception if one was rescued."
  },
  {
    "id": "ruby_1120",
    "question": "What is the default exception type when 'raise' is called without arguments?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": true }
    ],
    "hint": "This is the most common default exception in Ruby.",
    "answerDescription": "When 'raise' is called without arguments, it raises a 'RuntimeError' by default."
  }, 
  {
    "id": "ruby_1121",
    "question": "Which method converts an array into a string with a specified separator?",
    "options": [
      { "id": "option_1", "text": "concat", "isCorrect": false },
      { "id": "option_2", "text": "merge", "isCorrect": false },
      { "id": "option_3", "text": "join", "isCorrect": true },
      { "id": "option_4", "text": "combine", "isCorrect": false }
    ],
    "hint": "This method is used to concatenate array elements into a string.",
    "answerDescription": "The `join` method converts an array into a string, using the specified separator."
  }, 
  {
    "id": "ruby_1122",
    "question": "Which method is used to raise an exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "raise", "isCorrect": true },
      { "id": "option_2", "text": "error", "isCorrect": false },
      { "id": "option_3", "text": "throw", "isCorrect": false },
      { "id": "option_4", "text": "fail", "isCorrect": false }
    ],
    "hint": "This method generates an exception in Ruby.",
    "answerDescription": "The 'raise' method is used to raise an exception in Ruby."
  },
  {
    "id": "ruby_1123",
    "question": "What exception is raised when trying to access a nil object?",
    "options": [
      { "id": "option_1", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "TypeError", "isCorrect": false },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": false }
    ],
    "hint": "This error occurs when calling a method on 'nil'.",
    "answerDescription": "'NoMethodError' is raised when a method is called on nil."
  },
  {
    "id": "ruby_1124",
    "question": "Which block always executes, whether an exception occurs or not?",
    "options": [
      { "id": "option_1", "text": "ensure", "isCorrect": true },
      { "id": "option_2", "text": "begin", "isCorrect": false },
      { "id": "option_3", "text": "rescue", "isCorrect": false },
      { "id": "option_4", "text": "retry", "isCorrect": false }
    ],
    "hint": "This block guarantees execution even after an error.",
    "answerDescription": "The 'ensure' block ensures that certain code runs, whether an exception occurs or not."
  },
  {
    "id": "ruby_1125",
    "question": "Which exception is raised when dividing by zero?",
    "options": [
      { "id": "option_1", "text": "ZeroDivisionError", "isCorrect": true },
      { "id": "option_2", "text": "MathError", "isCorrect": false },
      { "id": "option_3", "text": "ArithmeticError", "isCorrect": false },
      { "id": "option_4", "text": "DivisionByZero", "isCorrect": false }
    ],
    "hint": "This exception occurs when attempting to divide by zero.",
    "answerDescription": "Ruby raises 'ZeroDivisionError' when attempting to divide by zero."
  },
  {
    "id": "ruby_1126",
    "question": "What is the default exception type when 'raise' is called without arguments?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": true },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_4", "text": "Exception", "isCorrect": false }
    ],
    "hint": "This is the most common default exception in Ruby.",
    "answerDescription": "When 'raise' is called without arguments, it raises a 'RuntimeError' by default."
  },
  {
    "id": "ruby_1127",
    "question": "Which method can check if an exception was rescued?",
    "options": [
      { "id": "option_1", "text": "$!", "isCorrect": true },
      { "id": "option_2", "text": "error?", "isCorrect": false },
      { "id": "option_3", "text": "rescued?", "isCorrect": false },
      { "id": "option_4", "text": "exception?", "isCorrect": false }
    ],
    "hint": "This global variable holds the last raised exception.",
    "answerDescription": "The global variable '$!' stores the last rescued exception."
  },
  {
    "id": "ruby_1128",
    "question": "How can you specify multiple exceptions in a single 'rescue' statement?",
    "options": [
      { "id": "option_1", "text": "Using a comma-separated list", "isCorrect": true },
      { "id": "option_2", "text": "Using 'or'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'when'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'else'", "isCorrect": false }
    ],
    "hint": "You can list multiple exception types within 'rescue'.",
    "answerDescription": "You can rescue multiple exception types using a comma-separated list in a 'rescue' statement."
  },
  {
    "id": "ruby_1129",
    "question": "Which class is the superclass of all exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "Exception", "isCorrect": true },
      { "id": "option_2", "text": "StandardError", "isCorrect": false },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "Error", "isCorrect": false }
    ],
    "hint": "This class is at the top of Ruby's exception hierarchy.",
    "answerDescription": "All Ruby exceptions inherit from the 'Exception' class."
  },
  {
    "id": "ruby_1130",
    "question": "Which keyword can retry a failed block of code?",
    "options": [
      { "id": "option_1", "text": "retry", "isCorrect": true },
      { "id": "option_2", "text": "repeat", "isCorrect": false },
      { "id": "option_3", "text": "redo", "isCorrect": false },
      { "id": "option_4", "text": "restart", "isCorrect": false }
    ],
    "hint": "This keyword retries the block from the beginning.",
    "answerDescription": "The 'retry' keyword restarts a failed block of code from the beginning."
  },  {
    "id": "ruby_1131",
    "question": "Which keyword is used to define an exception class in Ruby?",
    "options": [
      { "id": "option_1", "text": "exception", "isCorrect": false },
      { "id": "option_2", "text": "class", "isCorrect": true },
      { "id": "option_3", "text": "error", "isCorrect": false },
      { "id": "option_4", "text": "define", "isCorrect": false }
    ],
    "hint": "Exception classes in Ruby are defined just like any other class.",
    "answerDescription": "In Ruby, exceptions are defined using the 'class' keyword."
  },
  {
    "id": "ruby_1132",
    "question": "Which method is used to define a custom error message in a Ruby exception?",
    "options": [
      { "id": "option_1", "text": "error_message", "isCorrect": false },
      { "id": "option_2", "text": "message", "isCorrect": true },
      { "id": "option_3", "text": "exception_message", "isCorrect": false },
      { "id": "option_4", "text": "info", "isCorrect": false }
    ],
    "hint": "This method is inherited from the 'Exception' class.",
    "answerDescription": "The 'message' method returns the custom error message for an exception."
  },
  {
    "id": "ruby_1133",
    "question": "Which built-in Ruby class is the parent of all standard exceptions?",
    "options": [
      { "id": "option_1", "text": "Error", "isCorrect": false },
      { "id": "option_2", "text": "StandardError", "isCorrect": true },
      { "id": "option_3", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_4", "text": "Exception", "isCorrect": false }
    ],
    "hint": "This class is a direct child of 'Exception' and the parent of common errors.",
    "answerDescription": "'StandardError' is the parent class of most built-in Ruby exceptions."
  },
  {
    "id": "ruby_1134",
    "question": "Which method allows you to capture an exception object in Ruby?",
    "options": [
      { "id": "option_1", "text": "catch", "isCorrect": false },
      { "id": "option_2", "text": "rescue => e", "isCorrect": true },
      { "id": "option_3", "text": "raise e", "isCorrect": false },
      { "id": "option_4", "text": "handle e", "isCorrect": false }
    ],
    "hint": "This syntax assigns the caught exception to a variable.",
    "answerDescription": "Using 'rescue => e' allows you to capture the exception object."
  },
  {
    "id": "ruby_1135",
    "question": "What will the 'rescue' clause do if no specific exception type is given?",
    "options": [
      { "id": "option_1", "text": "It rescues all exceptions", "isCorrect": false },
      { "id": "option_2", "text": "It rescues only StandardError", "isCorrect": true },
      { "id": "option_3", "text": "It does nothing", "isCorrect": false },
      { "id": "option_4", "text": "It raises an error", "isCorrect": false }
    ],
    "hint": "The default behavior of 'rescue' is to catch common exceptions.",
    "answerDescription": "By default, 'rescue' catches only StandardError and its subclasses."
  },
  {
    "id": "ruby_1136",
    "question": "How do you specify different exception handling logic for different error types?",
    "options": [
      { "id": "option_1", "text": "Using 'case' statements", "isCorrect": false },
      { "id": "option_2", "text": "Using multiple 'rescue' clauses", "isCorrect": true },
      { "id": "option_3", "text": "Using 'when' inside 'rescue'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'if' inside 'rescue'", "isCorrect": false }
    ],
    "hint": "Multiple 'rescue' clauses allow different handling for different exceptions.",
    "answerDescription": "You can handle different exceptions using multiple 'rescue' clauses."
  },
  {
    "id": "ruby_1137",
    "question": "Which method can be used to retrieve the backtrace of an exception?",
    "options": [
      { "id": "option_1", "text": "trace", "isCorrect": false },
      { "id": "option_2", "text": "backtrace", "isCorrect": true },
      { "id": "option_3", "text": "error_trace", "isCorrect": false },
      { "id": "option_4", "text": "history", "isCorrect": false }
    ],
    "hint": "This method provides an array of stack trace information.",
    "answerDescription": "The 'backtrace' method returns an array of stack trace details."
  },
  {
    "id": "ruby_1138",
    "question": "Which keyword can be used to trigger an exception from within a 'rescue' block?",
    "options": [
      { "id": "option_1", "text": "fail", "isCorrect": false },
      { "id": "option_2", "text": "raise", "isCorrect": true },
      { "id": "option_3", "text": "error", "isCorrect": false },
      { "id": "option_4", "text": "throw", "isCorrect": false }
    ],
    "hint": "This method generates an exception in Ruby.",
    "answerDescription": "The 'raise' method is used to trigger an exception."
  },
  {
    "id": "ruby_1139",
    "question": "Which global variable stores the last raised exception?",
    "options": [
      { "id": "option_1", "text": "$?", "isCorrect": false },
      { "id": "option_2", "text": "$!", "isCorrect": true },
      { "id": "option_3", "text": "$@", "isCorrect": false },
      { "id": "option_4", "text": "$error", "isCorrect": false }
    ],
    "hint": "This special global variable holds the last exception object.",
    "answerDescription": "The global variable '$!' contains the last exception raised."
  },
  {
    "id": "ruby_1140",
    "question": "Which keyword can be used to re-raise an exception inside a rescue block?",
    "options": [
      { "id": "option_1", "text": "error", "isCorrect": false },
      { "id": "option_2", "text": "throw", "isCorrect": false },
      { "id": "option_3", "text": "raise", "isCorrect": true },
      { "id": "option_4", "text": "fail", "isCorrect": false }
    ],
    "hint": "This keyword is also used to manually trigger exceptions.",
    "answerDescription": "The 'raise' keyword can be used inside a 'rescue' block to re-raise an exception."
  },  {
    "id": "ruby_1141",
    "question": "What keyword is used to handle exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "catch", "isCorrect": false },
      { "id": "option_2", "text": "try", "isCorrect": false },
      { "id": "option_3", "text": "rescue", "isCorrect": true },
      { "id": "option_4", "text": "trap", "isCorrect": false }
    ],
    "hint": "This keyword is used within a 'begin' block.",
    "answerDescription": "The 'rescue' keyword is used to handle exceptions in Ruby."
  },
  {
    "id": "ruby_1142",
    "question": "Which keyword is used to manually raise an exception in Ruby?",
    "options": [
      { "id": "option_1", "text": "throw", "isCorrect": false },
      { "id": "option_2", "text": "fail", "isCorrect": false },
      { "id": "option_3", "text": "raise", "isCorrect": true },
      { "id": "option_4", "text": "exception", "isCorrect": false }
    ],
    "hint": "This method generates an error message.",
    "answerDescription": "The 'raise' method is used to trigger an exception in Ruby."
  },
  {
    "id": "ruby_1143",
    "question": "Which exception class is the ancestor of all exceptions in Ruby?",
    "options": [
      { "id": "option_1", "text": "StandardError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "Exception", "isCorrect": true },
      { "id": "option_4", "text": "ArgumentError", "isCorrect": false }
    ],
    "hint": "This class is the root of Ruby’s exception hierarchy.",
    "answerDescription": "All exception classes in Ruby inherit from 'Exception'."
  },
  {
    "id": "ruby_1144",
    "question": "Which method provides a detailed stack trace when an exception occurs?",
    "options": [
      { "id": "option_1", "text": "trace", "isCorrect": false },
      { "id": "option_2", "text": "error_trace", "isCorrect": false },
      { "id": "option_3", "text": "backtrace", "isCorrect": true },
      { "id": "option_4", "text": "log", "isCorrect": false }
    ],
    "hint": "This method returns an array of method calls leading to the error.",
    "answerDescription": "The 'backtrace' method provides information on where the error occurred."
  },
  {
    "id": "ruby_1145",
    "question": "Which method is used to remove the first element of an array?",
    "options": [
      { "id": "option_1", "text": "delete_first", "isCorrect": false },
      { "id": "option_2", "text": "shift", "isCorrect": true },
      { "id": "option_3", "text": "remove", "isCorrect": false },
      { "id": "option_4", "text": "drop", "isCorrect": false }
    ],
    "hint": "This method modifies the original array and returns the removed element.",
    "answerDescription": "The `shift` method removes and returns the first element of an array."
  },
  {
    "id": "ruby_1146",
    "question": "What is the best way to log an exception without stopping execution?",
    "options": [
      { "id": "option_1", "text": "Wrap code in 'begin...rescue' and suppress errors", "isCorrect": false },
      { "id": "option_2", "text": "Use 'ensure' to ignore the exception", "isCorrect": false },
      { "id": "option_3", "text": "Rescue the exception and log it using 'puts' or 'Logger'", "isCorrect": true },
      { "id": "option_4", "text": "Terminate execution with 'exit!'", "isCorrect": false }
    ],
    "hint": "Handling exceptions properly is crucial in robust applications.",
    "answerDescription": "Using 'rescue' to catch the exception and log it allows execution to continue."
  },
  {
    "id": "ruby_1147",
    "question": "What does 'begin...rescue...else...ensure' do?",
    "options": [
      { "id": "option_1", "text": "Skips the rescue block if no exception occurs", "isCorrect": false },
      { "id": "option_2", "text": "Executes the ensure block only if rescue is triggered", "isCorrect": false },
      { "id": "option_3", "text": "Runs the else block if no exception occurs and ensure block always", "isCorrect": true },
      { "id": "option_4", "text": "Ensures the script exits if an exception occurs", "isCorrect": false }
    ],
    "hint": "The 'else' block runs when there is no exception.",
    "answerDescription": "If no exception occurs, the 'else' block executes, followed by the 'ensure' block."
  },
  {
    "id": "ruby_1148",
    "question": "Which of the following errors can be rescued in Ruby?",
    "options": [
      { "id": "option_1", "text": "SystemStackError", "isCorrect": false },
      { "id": "option_2", "text": "NoMemoryError", "isCorrect": false },
      { "id": "option_3", "text": "ZeroDivisionError", "isCorrect": true },
      { "id": "option_4", "text": "SignalException", "isCorrect": false }
    ],
    "hint": "Errors related to arithmetic operations are usually recoverable.",
    "answerDescription": "'ZeroDivisionError' is a subclass of 'StandardError' and can be rescued."
  },
  {
    "id": "ruby_1149",
    "question": "What will 'raise ArgumentError, \"Invalid input\"' do?",
    "options": [
      { "id": "option_1", "text": "Log the error but continue execution", "isCorrect": false },
      { "id": "option_2", "text": "Terminate the script immediately", "isCorrect": false },
      { "id": "option_3", "text": "Raise an ArgumentError with the message 'Invalid input'", "isCorrect": true },
      { "id": "option_4", "text": "Rescue the error automatically", "isCorrect": false }
    ],
    "hint": "It explicitly triggers an error of type 'ArgumentError'.",
    "answerDescription": "The 'raise' keyword throws an ArgumentError exception with the given message."
  },
  {
    "id": "ruby_1150",
    "question": "Which keyword allows you to catch and handle multiple specific exception types?",
    "options": [
      { "id": "option_1", "text": "ensure", "isCorrect": false },
      { "id": "option_2", "text": "catch", "isCorrect": false },
      { "id": "option_3", "text": "rescue with multiple exception classes", "isCorrect": true },
      { "id": "option_4", "text": "trap", "isCorrect": false }
    ],
    "hint": "It is possible to rescue multiple exceptions in a single block.",
    "answerDescription": "You can handle multiple exceptions using 'rescue ExceptionType1, ExceptionType2'."
  },
  {
    "id": "ruby_1151",
    "question": "What happens when you use 'retry' inside a rescue block?",
    "options": [
      { "id": "option_1", "text": "The program terminates immediately", "isCorrect": false },
      { "id": "option_2", "text": "The rescue block is ignored", "isCorrect": false },
      { "id": "option_3", "text": "The begin block executes again", "isCorrect": true },
      { "id": "option_4", "text": "A new exception is raised", "isCorrect": false }
    ],
    "hint": "It forces the program to reattempt execution from the begin block.",
    "answerDescription": "Using 'retry' within a rescue block causes Ruby to restart execution from the begin block."
  },
  {
    "id": "ruby_1152",
    "question": "Which exception is NOT a subclass of StandardError?",
    "options": [
      { "id": "option_1", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "SystemExit", "isCorrect": true },
      { "id": "option_4", "text": "NoMethodError", "isCorrect": false }
    ],
    "hint": "This exception causes program termination without being rescued by default.",
    "answerDescription": "'SystemExit' is not a subclass of 'StandardError' and is used when calling 'exit()'."
  },
  {
    "id": "ruby_1153",
    "question": "Which of the following will not be rescued by a 'rescue StandardError' block?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_2", "text": "ZeroDivisionError", "isCorrect": false },
      { "id": "option_3", "text": "NoMemoryError", "isCorrect": true },
      { "id": "option_4", "text": "NameError", "isCorrect": false }
    ],
    "hint": "This error belongs to a different hierarchy from 'StandardError'.",
    "answerDescription": "'NoMemoryError' is a subclass of 'Exception' and is not caught by 'rescue StandardError'."
  },
  {
    "id": "ruby_1154",
    "question": "Which of the following will happen if an exception occurs and there is no rescue block?",
    "options": [
      { "id": "option_1", "text": "The program will retry the operation automatically", "isCorrect": false },
      { "id": "option_2", "text": "The program will halt execution and display a stack trace", "isCorrect": false },
      { "id": "option_3", "text": "Ruby will propagate the exception up the call stack", "isCorrect": true },
      { "id": "option_4", "text": "Ruby will silently ignore the exception", "isCorrect": false }
    ],
    "hint": "Unhandled exceptions travel up through method calls.",
    "answerDescription": "If an exception is not rescued, Ruby propagates it up the call stack until handled or the program crashes."
  },
  {
    "id": "ruby_1155",
    "question": "Which of the following exceptions is NOT part of the StandardError hierarchy?",
    "options": [
      { "id": "option_1", "text": "NameError", "isCorrect": false },
      { "id": "option_2", "text": "ZeroDivisionError", "isCorrect": false },
      { "id": "option_3", "text": "SignalException", "isCorrect": true },
      { "id": "option_4", "text": "RuntimeError", "isCorrect": false }
    ],
    "hint": "This exception is related to OS signals rather than standard Ruby errors.",
    "answerDescription": "'SignalException' is not a subclass of 'StandardError'; it is used to handle system signals."
  },
  {
    "id": "ruby_1156",
    "question": "What does 'raise ArgumentError, \"Invalid input\"' do?",
    "options": [
      { "id": "option_1", "text": "Silently logs the error", "isCorrect": false },
      { "id": "option_2", "text": "Terminates the program with a success status", "isCorrect": false },
      { "id": "option_3", "text": "Throws an ArgumentError exception with the message 'Invalid input'", "isCorrect": true },
      { "id": "option_4", "text": "Ignores the error and continues execution", "isCorrect": false }
    ],
    "hint": "This explicitly triggers an ArgumentError.",
    "answerDescription": "The 'raise' keyword generates an ArgumentError with the specified message."
  },
  {
    "id": "ruby_1157",
    "question": "What is the purpose of the 'ensure' clause in Ruby?",
    "options": [
      { "id": "option_1", "text": "To catch specific types of exceptions", "isCorrect": false },
      { "id": "option_2", "text": "To execute only if no exception occurs", "isCorrect": false },
      { "id": "option_3", "text": "To execute code regardless of whether an exception was raised", "isCorrect": true },
      { "id": "option_4", "text": "To terminate the program in case of an error", "isCorrect": false }
    ],
    "hint": "This clause runs unconditionally.",
    "answerDescription": "'ensure' runs whether or not an exception occurs, making it useful for cleanup operations."
  },
  {
    "id": "ruby_1158",
    "question": "Which exception will be raised when attempting to call an undefined method on an object?",
    "options": [
      { "id": "option_1", "text": "TypeError", "isCorrect": false },
      { "id": "option_2", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_3", "text": "NoMethodError", "isCorrect": true },
      { "id": "option_4", "text": "NameError", "isCorrect": false }
    ],
    "hint": "This error specifically refers to missing methods.",
    "answerDescription": "'NoMethodError' is raised when calling a method that does not exist on an object."
  },
  {
    "id": "ruby_1159",
    "question": "What is the output of the following code?\n\n```ruby\nbegin\n  raise 'Error occurred'\nrescue\n  puts 'Rescued!'\nelse\n  puts 'No error'\nend\n```\n",
    "options": [
      { "id": "option_1", "text": "No error", "isCorrect": false },
      { "id": "option_2", "text": "Error occurred", "isCorrect": false },
      { "id": "option_3", "text": "Rescued!", "isCorrect": true },
      { "id": "option_4", "text": "No output", "isCorrect": false }
    ],
    "hint": "The 'rescue' block catches the exception.",
    "answerDescription": "Since an error is raised, the 'rescue' block executes, printing 'Rescued!'."
  },
  {
    "id": "ruby_1160",
    "question": "What does the following code snippet demonstrate?\n\n```ruby\nbegin\n  raise StandardError, 'Something went wrong'\nrescue StandardError => e\n  puts e.message\nend\n```",
    "options": [
      { "id": "option_1", "text": "Unrecoverable error handling", "isCorrect": false },
      { "id": "option_2", "text": "Ignoring exceptions", "isCorrect": false },
      { "id": "option_3", "text": "Capturing and printing the exception message", "isCorrect": true },
      { "id": "option_4", "text": "Forcing the program to terminate", "isCorrect": false }
    ],
    "hint": "It allows capturing and handling the error gracefully.",
    "answerDescription": "This snippet raises an exception, rescues it, and prints the exception message."
  },
  {
    "id": "ruby_1161",
    "question": "What happens when 'raise' is used inside a 'rescue' block with no arguments?",
    "options": [
      { "id": "option_1", "text": "A new generic exception is raised", "isCorrect": false },
      { "id": "option_2", "text": "The rescue block is ignored", "isCorrect": false },
      { "id": "option_3", "text": "The original rescued exception is re-raised", "isCorrect": true },
      { "id": "option_4", "text": "The program terminates immediately", "isCorrect": false }
    ],
    "hint": "It allows propagating the same error up the stack.",
    "answerDescription": "Using 'raise' inside a rescue block without arguments re-raises the original exception."
  },
  {
    "id": "ruby_1162",
    "question": "Which error can be caught by 'rescue' but is NOT a subclass of StandardError?",
    "options": [
      { "id": "option_1", "text": "ArgumentError", "isCorrect": false },
      { "id": "option_2", "text": "RuntimeError", "isCorrect": false },
      { "id": "option_3", "text": "Exception", "isCorrect": true },
      { "id": "option_4", "text": "NameError", "isCorrect": false }
    ],
    "hint": "This is a superclass of all errors.",
    "answerDescription": "'Exception' itself can be caught by 'rescue' but is not a subclass of 'StandardError'."
  },
  {
    "id": "ruby_1163",
    "question": "How do you include a module in a class to add its instance methods?",
    "options": [
      { "id": "option_1", "text": "By using the 'include' keyword", "isCorrect": true },
      { "id": "option_2", "text": "By using the 'extend' keyword", "isCorrect": false },
      { "id": "option_3", "text": "By using 'require'", "isCorrect": false },
      { "id": "option_4", "text": "By instantiating the module", "isCorrect": false }
    ],
    "hint": "To mix instance methods from a module into a class, use a specific keyword.",
    "answerDescription": "The 'include' keyword allows a class to mix in a module’s instance methods."
  },
  {
    "id": "ruby_1164",
    "question": "What is the key difference between 'include' and 'extend' when using modules?",
    "options": [
      { "id": "option_1", "text": "'include' adds instance methods, while 'extend' adds class methods", "isCorrect": true },
      { "id": "option_2", "text": "'extend' adds instance methods, while 'include' adds class methods", "isCorrect": false },
      { "id": "option_3", "text": "Both 'include' and 'extend' do the same thing", "isCorrect": false },
      { "id": "option_4", "text": "'include' is used for constants, while 'extend' is for methods", "isCorrect": false }
    ],
    "hint": "'include' affects instances, while 'extend' affects the class itself.",
    "answerDescription": "Using 'include' mixes in instance methods, whereas 'extend' mixes in class methods."
  },
  {
    "id": "ruby_1165",
    "question": "Which method is invoked when a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "Module#included", "isCorrect": true },
      { "id": "option_2", "text": "Module#extended", "isCorrect": false },
      { "id": "option_3", "text": "Module#prepended", "isCorrect": false },
      { "id": "option_4", "text": "Module#inherited", "isCorrect": false }
    ],
    "hint": "A special method in the module is automatically called when it is included.",
    "answerDescription": "When a module is included in a class, Ruby calls the 'included' method inside the module."
  },
  {
    "id": "ruby_1166",
    "question": "How do you prevent a module from being instantiated as an object?",
    "options": [
      { "id": "option_1", "text": "Modules cannot be instantiated", "isCorrect": true },
      { "id": "option_2", "text": "By defining a private 'new' method", "isCorrect": false },
      { "id": "option_3", "text": "By using 'extend' instead of 'include'", "isCorrect": false },
      { "id": "option_4", "text": "By using a class instead of a module", "isCorrect": false }
    ],
    "hint": "Unlike classes, modules do not allow direct instantiation.",
    "answerDescription": "Modules in Ruby cannot be instantiated because they are meant to be mixed into classes."
  },
  {
    "id": "ruby_1167",
    "question": "Which keyword allows a module to override methods of the class it is mixed into?",
    "options": [
      { "id": "option_1", "text": "'prepend'", "isCorrect": true },
      { "id": "option_2", "text": "'include'", "isCorrect": false },
      { "id": "option_3", "text": "'extend'", "isCorrect": false },
      { "id": "option_4", "text": "'alias'", "isCorrect": false }
    ],
    "hint": "This keyword places the module before the class in method lookup.",
    "answerDescription": "Using 'prepend' allows the module’s methods to override those of the class it is mixed into."
  },
  {
    "id": "ruby_1168",
    "question": "What is a common use case for the 'extend' keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "To add class-level methods from a module", "isCorrect": true },
      { "id": "option_2", "text": "To add instance-level methods from a module", "isCorrect": false },
      { "id": "option_3", "text": "To create singleton classes", "isCorrect": false },
      { "id": "option_4", "text": "To define mixins", "isCorrect": false }
    ],
    "hint": "'extend' affects the class, not instances.",
    "answerDescription": "'extend' is used to add module methods to a class itself, not its instances."
  },
  {
    "id": "ruby_1169",
    "question": "How do you check if a class includes a specific module?",
    "options": [
      { "id": "option_1", "text": "Using '.include?(ModuleName)'", "isCorrect": true },
      { "id": "option_2", "text": "Using '.extended_modules'", "isCorrect": false },
      { "id": "option_3", "text": "Using '.modules'", "isCorrect": false },
      { "id": "option_4", "text": "Using '.included_modules'", "isCorrect": false }
    ],
    "hint": "There's a method specifically for checking if a module is included.",
    "answerDescription": "To check if a class includes a module, use 'ClassName.include?(ModuleName)'."
  },
  {
    "id": "ruby_1170",
    "question": "Which Ruby method allows a module to execute code when it is included in a class?",
    "options": [
      { "id": "option_1", "text": "'self.included'", "isCorrect": true },
      { "id": "option_2", "text": "'self.extended'", "isCorrect": false },
      { "id": "option_3", "text": "'self.prepended'", "isCorrect": false },
      { "id": "option_4", "text": "'self.required'", "isCorrect": false }
    ],
    "hint": "This method is triggered automatically when a module is included.",
    "answerDescription": "A module’s 'self.included' method is executed when it is included in a class."
  },
  {
    "id": "ruby_1171",
    "question": "What does the 'ancestors' method return when called on a class?",
    "options": [
      { "id": "option_1", "text": "An array of the class's inheritance chain and included modules", "isCorrect": true },
      { "id": "option_2", "text": "Only the superclass of the class", "isCorrect": false },
      { "id": "option_3", "text": "Only the modules included in the class", "isCorrect": false },
      { "id": "option_4", "text": "Only the class itself", "isCorrect": false }
    ],
    "hint": "This method lists the inheritance chain and modules.",
    "answerDescription": "'ancestors' returns an array showing the class hierarchy and included modules."
  },
  {
    "id": "ruby_1172",
    "question": "What will 'Module.constants' return?",
    "options": [
      { "id": "option_1", "text": "A list of all defined constants in modules", "isCorrect": true },
      { "id": "option_2", "text": "A list of all loaded modules", "isCorrect": false },
      { "id": "option_3", "text": "A list of instance methods in modules", "isCorrect": false },
      { "id": "option_4", "text": "An error", "isCorrect": false }
    ],
    "hint": "This method retrieves all constants from modules.",
    "answerDescription": "'Module.constants' returns an array of all constants defined in modules."
  },  {
    "id": "ruby_1173",
    "question": "Which method lists all modules included in a given class?",
    "options": [
      { "id": "option_1", "text": "Class#modules", "isCorrect": false },
      { "id": "option_2", "text": "Class#included_modules", "isCorrect": true },
      { "id": "option_3", "text": "Class#ancestors", "isCorrect": false },
      { "id": "option_4", "text": "Class#superclass", "isCorrect": false }
    ],
    "hint": "This method returns only modules and not the entire inheritance chain.",
    "answerDescription": "'included_modules' returns an array of all modules mixed into a class."
  },
  {
    "id": "ruby_1174",
    "question": "What happens when a module defines an 'included' method?",
    "options": [
      { "id": "option_1", "text": "It is called when the module is included in a class", "isCorrect": false },
      { "id": "option_2", "text": "It executes custom logic upon inclusion", "isCorrect": true },
      { "id": "option_3", "text": "It prevents the module from being included", "isCorrect": false },
      { "id": "option_4", "text": "It allows multiple inheritance", "isCorrect": false }
    ],
    "hint": "This method allows executing additional setup logic when a module is included.",
    "answerDescription": "Defining 'included' in a module executes the method's logic when the module is included."
  },
  {
    "id": "ruby_1175",
    "question": "How do you dynamically include a module at runtime?",
    "options": [
      { "id": "option_1", "text": "Using 'require'", "isCorrect": false },
      { "id": "option_2", "text": "Using 'extend'", "isCorrect": true },
      { "id": "option_3", "text": "Using 'include'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'prepend'", "isCorrect": false }
    ],
    "hint": "This method adds module methods to the class itself rather than instances.",
    "answerDescription": "'extend' is used to dynamically add module methods as class methods at runtime."
  },
  {
    "id": "ruby_1176",
    "question": "What is the purpose of the 'refine' method in Ruby?",
    "options": [
      { "id": "option_1", "text": "To create singleton methods", "isCorrect": false },
      { "id": "option_2", "text": "To provide scoped modifications to existing classes", "isCorrect": true },
      { "id": "option_3", "text": "To override private methods", "isCorrect": false },
      { "id": "option_4", "text": "To optimize method resolution", "isCorrect": false }
    ],
    "hint": "It allows changing class behavior within a specific scope.",
    "answerDescription": "'refine' provides scoped modifications to a class without affecting the global scope."
  },
  {
    "id": "ruby_1177",
    "question": "How can you prevent a module from being included multiple times?",
    "options": [
      { "id": "option_1", "text": "By using 'alias_method'", "isCorrect": false },
      { "id": "option_2", "text": "By checking 'included_modules' before including", "isCorrect": true },
      { "id": "option_3", "text": "By using 'extend' instead of 'include'", "isCorrect": false },
      { "id": "option_4", "text": "By using 'module_function'", "isCorrect": false }
    ],
    "hint": "There's a way to check if a module is already included before mixing it in.",
    "answerDescription": "Using 'included_modules.include?(ModuleName)' helps avoid multiple inclusions."
  },
  {
    "id": "ruby_1178",
    "question": "Which mixin method allows a module to be prepended before the class methods?",
    "options": [
      { "id": "option_1", "text": "'extend'", "isCorrect": false },
      { "id": "option_2", "text": "'prepend'", "isCorrect": true },
      { "id": "option_3", "text": "'alias_method'", "isCorrect": false },
      { "id": "option_4", "text": "'override'", "isCorrect": false }
    ],
    "hint": "This keyword makes module methods take precedence over class methods.",
    "answerDescription": "'prepend' allows the module methods to override class methods in method lookup."
  },
  {
    "id": "ruby_1179",
    "question": "What does 'module_function' do when defined inside a module?",
    "options": [
      { "id": "option_1", "text": "Makes module methods both instance and class methods", "isCorrect": false },
      { "id": "option_2", "text": "Turns module methods into singleton methods", "isCorrect": true },
      { "id": "option_3", "text": "Hides module methods from subclasses", "isCorrect": false },
      { "id": "option_4", "text": "Prevents a module from being extended", "isCorrect": false }
    ],
    "hint": "It allows methods to be used as both module functions and instance methods.",
    "answerDescription": "'module_function' makes methods callable both on the module itself and on instances."
  },
  {
    "id": "ruby_1180",
    "question": "How can you check if an object’s class extends a module?",
    "options": [
      { "id": "option_1", "text": "Using '.included_modules'", "isCorrect": false },
      { "id": "option_2", "text": "Using '.is_a?(ModuleName)'", "isCorrect": true },
      { "id": "option_3", "text": "Using '.respond_to?'", "isCorrect": false },
      { "id": "option_4", "text": "Using '.methods.include?'", "isCorrect": false }
    ],
    "hint": "This method checks if an object is derived from a specific class or module.",
    "answerDescription": "'is_a?' determines whether an object is an instance of a class that includes a module."
  },
  {
    "id": "ruby_1181",
    "question": "What will happen if a module with the same method name is included in a class?",
    "options": [
      { "id": "option_1", "text": "The method from the module will be ignored", "isCorrect": false },
      { "id": "option_2", "text": "The module method will override the class method", "isCorrect": true },
      { "id": "option_3", "text": "Ruby will throw an error", "isCorrect": false },
      { "id": "option_4", "text": "Both methods will be merged", "isCorrect": false }
    ],
    "hint": "Method lookup in Ruby follows a specific order when modules are included.",
    "answerDescription": "If a module method has the same name as a class method, the module method takes precedence."
  },
  {
    "id": "ruby_1182",
    "question": "Which method allows you to list all constants defined in a module?",
    "options": [
      { "id": "option_1", "text": "'constants'", "isCorrect": false },
      { "id": "option_2", "text": "'Module.constants'", "isCorrect": true },
      { "id": "option_3", "text": "'Object.constants'", "isCorrect": false },
      { "id": "option_4", "text": "'module_constants'", "isCorrect": false }
    ],
    "hint": "This method provides a list of constants at the module level.",
    "answerDescription": "'Module.constants' lists all constants defined inside modules."
  },
  {
    "id": "ruby_1183",
    "question": "Which of the following is true about the 'extend' method in Ruby?",
    "options": [
      { "id": "option_1", "text": "It allows a module's methods to be used as instance methods", "isCorrect": false },
      { "id": "option_2", "text": "It prevents a module from being included in a class", "isCorrect": false },
      { "id": "option_3", "text": "It adds a module’s methods as class methods", "isCorrect": true },
      { "id": "option_4", "text": "It enables multiple inheritance in Ruby", "isCorrect": false }
    ],
    "hint": "This method helps mix in module methods at the class level.",
    "answerDescription": "'extend' allows module methods to be added as class methods rather than instance methods."
  },
  {
    "id": "ruby_1184",
    "question": "What is the primary difference between 'include' and 'prepend' when mixing in a module?",
    "options": [
      { "id": "option_1", "text": "'include' adds module methods after class methods in the lookup chain", "isCorrect": false },
      { "id": "option_2", "text": "'prepend' prevents method overriding", "isCorrect": false },
      { "id": "option_3", "text": "'prepend' places module methods before class methods in the lookup chain", "isCorrect": true },
      { "id": "option_4", "text": "'include' allows module methods to override class methods", "isCorrect": false }
    ],
    "hint": "One of these methods changes the order of method resolution.",
    "answerDescription": "'prepend' places module methods before class methods in the method lookup chain."
  },
  {
    "id": "ruby_1185",
    "question": "How does 'super' behave inside a method defined in a module?",
    "options": [
      { "id": "option_1", "text": "It calls the method from the next ancestor in the lookup chain", "isCorrect": false },
      { "id": "option_2", "text": "It ignores the method in the superclass and calls the module's method only", "isCorrect": false },
      { "id": "option_3", "text": "It calls the overridden method in the next class or module in the hierarchy", "isCorrect": true },
      { "id": "option_4", "text": "It raises an error unless explicitly defined in the module", "isCorrect": false }
    ],
    "hint": "Method lookup in Ruby follows a chain when calling 'super'.",
    "answerDescription": "'super' calls the next method in the method resolution order, which can be from a superclass or another module."
  },
  {
    "id": "ruby_1186",
    "question": "Which of the following statements about mixins in Ruby is correct?",
    "options": [
      { "id": "option_1", "text": "Mixins allow Ruby to support multiple inheritance", "isCorrect": false },
      { "id": "option_2", "text": "Mixins are only useful for defining constants", "isCorrect": false },
      { "id": "option_3", "text": "Mixins provide a way to share behavior without using class inheritance", "isCorrect": true },
      { "id": "option_4", "text": "Mixins must be explicitly called in every method", "isCorrect": false }
    ],
    "hint": "Mixins serve as an alternative to multiple inheritance in Ruby.",
    "answerDescription": "Mixins allow behavior to be shared across classes without requiring class inheritance."
  },
  {
    "id": "ruby_1187",
    "question": "When a module is included in a class, where do its methods appear in the method lookup chain?",
    "options": [
      { "id": "option_1", "text": "Before the class’s own methods", "isCorrect": false },
      { "id": "option_2", "text": "After the superclass methods", "isCorrect": false },
      { "id": "option_3", "text": "Between the class and its superclass", "isCorrect": true },
      { "id": "option_4", "text": "At the bottom of the method lookup chain", "isCorrect": false }
    ],
    "hint": "Modules get inserted at a specific place in the hierarchy.",
    "answerDescription": "When a module is included, its methods are placed between the class and its superclass in the lookup chain."
  },
  {
    "id": "ruby_1188",
    "question": "Which method allows a module to execute custom logic when it is extended by a class?",
    "options": [
      { "id": "option_1", "text": "'included'", "isCorrect": false },
      { "id": "option_2", "text": "'prepended'", "isCorrect": false },
      { "id": "option_3", "text": "'extended'", "isCorrect": true },
      { "id": "option_4", "text": "'refined'", "isCorrect": false }
    ],
    "hint": "This method is triggered when a module is extended by a class.",
    "answerDescription": "'extended' allows modules to execute custom logic when they are extended by a class."
  },
  {
    "id": "ruby_1189",
    "question": "What happens if a module defines a constant and is included in multiple classes?",
    "options": [
      { "id": "option_1", "text": "The constant will be duplicated in each class", "isCorrect": false },
      { "id": "option_2", "text": "Each class gets its own separate copy of the constant", "isCorrect": false },
      { "id": "option_3", "text": "The constant is shared among all classes that include the module", "isCorrect": true },
      { "id": "option_4", "text": "The constant is only accessible inside the module", "isCorrect": false }
    ],
    "hint": "Constants in modules behave differently from instance variables.",
    "answerDescription": "A constant defined in a module is shared among all classes that include the module."
  },
  {
    "id": "ruby_1190",
    "question": "What is the purpose of 'refinements' in Ruby?",
    "options": [
      { "id": "option_1", "text": "To replace monkey patching with scoped modifications", "isCorrect": false },
      { "id": "option_2", "text": "To allow global modifications to classes", "isCorrect": false },
      { "id": "option_3", "text": "To provide temporary modifications to a class within a specific scope", "isCorrect": true },
      { "id": "option_4", "text": "To override private methods in a superclass", "isCorrect": false }
    ],
    "hint": "This feature helps modify classes without affecting the global scope.",
    "answerDescription": "Refinements provide scoped modifications to classes, avoiding unintended side effects of monkey patching."
  },
  {
    "id": "ruby_1191",
    "question": "Which method is used to check if a module has been included in a class?",
    "options": [
      { "id": "option_1", "text": "'defined_modules'", "isCorrect": false },
      { "id": "option_2", "text": "'Module#constants'", "isCorrect": false },
      { "id": "option_3", "text": "'Module#included_modules'", "isCorrect": true },
      { "id": "option_4", "text": "'Module#ancestors'", "isCorrect": false }
    ],
    "hint": "This method specifically returns only the included modules in a class.",
    "answerDescription": "'included_modules' returns a list of all modules that have been included in a given class."
  },
  {
    "id": "ruby_1192",
    "question": "Which mixin method is automatically called when a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "'prepended'", "isCorrect": false },
      { "id": "option_2", "text": "'refined'", "isCorrect": false },
      { "id": "option_3", "text": "'included'", "isCorrect": true },
      { "id": "option_4", "text": "'extended'", "isCorrect": false }
    ],
    "hint": "This method is often used to execute additional logic upon inclusion.",
    "answerDescription": "'included' is a callback method triggered when a module is included in a class."
  },
  {
    "id": "ruby_1193",
    "question": "What is the primary purpose of mixins in Ruby?",
    "options": [
      { "id": "option_1", "text": "To allow multiple inheritance", "isCorrect": false },
      { "id": "option_2", "text": "To define instance variables", "isCorrect": false },
      { "id": "option_3", "text": "To restrict access to certain methods", "isCorrect": false },
      { "id": "option_4", "text": "To share behavior across multiple classes without inheritance", "isCorrect": true }
    ],
    "hint": "Mixins provide a way to reuse code without class inheritance.",
    "answerDescription": "Mixins allow behavior to be shared across classes without using class inheritance, avoiding the limitations of multiple inheritance."
  },
  {
    "id": "ruby_1194",
    "question": "Which keyword is used to include a module’s methods as instance methods in a class?",
    "options": [
      { "id": "option_1", "text": "extend", "isCorrect": false },
      { "id": "option_2", "text": "prepend", "isCorrect": false },
      { "id": "option_3", "text": "inherit", "isCorrect": false },
      { "id": "option_4", "text": "include", "isCorrect": true }
    ],
    "hint": "This keyword is used to mix in instance methods from a module.",
    "answerDescription": "The 'include' keyword allows module methods to be used as instance methods in the including class."
  },
  {
    "id": "ruby_1195",
    "question": "Which method can be used to check if a module has been included in a class?",
    "options": [
      { "id": "option_1", "text": "has_module?", "isCorrect": false },
      { "id": "option_2", "text": "module_included?", "isCorrect": false },
      { "id": "option_3", "text": "has_mixin?", "isCorrect": false },
      { "id": "option_4", "text": "included_modules", "isCorrect": true }
    ],
    "hint": "This method returns a list of all modules that have been included.",
    "answerDescription": "'included_modules' returns an array of modules included in a class, allowing you to check for a specific module."
  },
  {
    "id": "ruby_1196",
    "question": "What happens when a module containing a method is included in a class that already defines the same method?",
    "options": [
      { "id": "option_1", "text": "The module method is ignored", "isCorrect": false },
      { "id": "option_2", "text": "An error is raised", "isCorrect": false },
      { "id": "option_3", "text": "The module method is called instead", "isCorrect": false },
      { "id": "option_4", "text": "The class method takes precedence", "isCorrect": true }
    ],
    "hint": "The method resolution order favors class-defined methods first.",
    "answerDescription": "If a class defines a method with the same name as one in an included module, the class’s method takes precedence."
  },
  {
    "id": "ruby_1197",
    "question": "Which Ruby method is called automatically when a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "extend", "isCorrect": false },
      { "id": "option_2", "text": "module_added", "isCorrect": false },
      { "id": "option_3", "text": "method_missing", "isCorrect": false },
      { "id": "option_4", "text": "included", "isCorrect": true }
    ],
    "hint": "This method is a callback triggered on module inclusion.",
    "answerDescription": "'included' is a callback method that gets triggered when a module is included in a class."
  },
  {
    "id": "ruby_1198",
    "question": "Which method can be used to add module methods as class methods?",
    "options": [
      { "id": "option_1", "text": "prepend", "isCorrect": false },
      { "id": "option_2", "text": "include", "isCorrect": false },
      { "id": "option_3", "text": "inherit", "isCorrect": false },
      { "id": "option_4", "text": "extend", "isCorrect": true }
    ],
    "hint": "This method is used to add module methods to the class itself, not instances.",
    "answerDescription": "'extend' allows module methods to be added as class methods instead of instance methods."
  },
  {
    "id": "ruby_1199",
    "question": "How does the 'prepend' method affect the method lookup chain?",
    "options": [
      { "id": "option_1", "text": "It places the module’s methods after the superclass methods", "isCorrect": false },
      { "id": "option_2", "text": "It prevents method overriding in the including class", "isCorrect": false },
      { "id": "option_3", "text": "It has the same effect as 'include'", "isCorrect": false },
      { "id": "option_4", "text": "It places the module’s methods before the class methods", "isCorrect": true }
    ],
    "hint": "This method ensures that module methods have higher priority than class methods.",
    "answerDescription": "'prepend' inserts module methods before class methods in the method resolution order."
  },
  {
    "id": "ruby_1200",
    "question": "What is the effect of calling 'Module#ancestors' on a class?",
    "options": [
      { "id": "option_1", "text": "It returns only the superclass of the class", "isCorrect": false },
      { "id": "option_2", "text": "It lists only included modules", "isCorrect": false },
      { "id": "option_3", "text": "It returns only the methods defined in the class", "isCorrect": false },
      { "id": "option_4", "text": "It returns the class's superclass and included modules", "isCorrect": true }
    ],
    "hint": "This method helps understand the method resolution order.",
    "answerDescription": "'ancestors' lists the class, its superclass, and all included modules in method lookup order."
  },
  {
    "id": "ruby_1201",
    "question": "What happens if a module defines a constant and is included in multiple classes?",
    "options": [
      { "id": "option_1", "text": "Each class gets a separate copy of the constant", "isCorrect": false },
      { "id": "option_2", "text": "The constant is only available inside the module", "isCorrect": false },
      { "id": "option_3", "text": "Each class must redefine the constant to use it", "isCorrect": false },
      { "id": "option_4", "text": "The constant is shared among all including classes", "isCorrect": true }
    ],
    "hint": "Constants in modules behave differently from instance variables.",
    "answerDescription": "A constant defined in a module is shared among all classes that include the module."
  },
  {
    "id": "ruby_1202",
    "question": "Which mixin method is called automatically when a module is extended by a class?",
    "options": [
      { "id": "option_1", "text": "included", "isCorrect": false },
      { "id": "option_2", "text": "prepended", "isCorrect": false },
      { "id": "option_3", "text": "refined", "isCorrect": false },
      { "id": "option_4", "text": "extended", "isCorrect": true }
    ],
    "hint": "This method is triggered when a module is used to extend a class.",
    "answerDescription": "'extended' is a callback method triggered when a module is extended by a class."
  },  {
    "id": "ruby_1203",
    "question": "What is a key advantage of using modules in Ruby?",
    "options": [
      { "id": "option_1", "text": "They help avoid name conflicts", "isCorrect": true },
      { "id": "option_2", "text": "They allow multiple inheritance", "isCorrect": false },
      { "id": "option_3", "text": "They create a new object instance", "isCorrect": false },
      { "id": "option_4", "text": "They execute code automatically when required", "isCorrect": false }
    ],
    "hint": "Modules can act as namespaces to prevent conflicts.",
    "answerDescription": "Modules help encapsulate methods and constants, reducing name conflicts in large applications."
  },
  {
    "id": "ruby_1204",
    "question": "How can you define a module in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the 'module' keyword", "isCorrect": true },
      { "id": "option_2", "text": "Using the 'class' keyword", "isCorrect": false },
      { "id": "option_3", "text": "Using the 'def' keyword", "isCorrect": false },
      { "id": "option_4", "text": "Using the 'mixin' keyword", "isCorrect": false }
    ],
    "hint": "Ruby provides a dedicated keyword for defining reusable code blocks.",
    "answerDescription": "Modules are defined using the 'module' keyword, allowing methods and constants to be grouped together."
  },
  {
    "id": "ruby_1205",
    "question": "Which method can be used to determine whether an object has access to a module’s methods?",
    "options": [
      { "id": "option_1", "text": "is_a?", "isCorrect": true },
      { "id": "option_2", "text": "has_method?", "isCorrect": false },
      { "id": "option_3", "text": "contains?", "isCorrect": false },
      { "id": "option_4", "text": "method_defined?", "isCorrect": false }
    ],
    "hint": "This method checks an object's class hierarchy, including modules.",
    "answerDescription": "'is_a?' checks if an object is an instance of a class or module, verifying access to methods."
  },
  {
    "id": "ruby_1206",
    "question": "Which keyword ensures that module methods become class methods when included?",
    "options": [
      { "id": "option_1", "text": "self", "isCorrect": true },
      { "id": "option_2", "text": "private", "isCorrect": false },
      { "id": "option_3", "text": "module_function", "isCorrect": false },
      { "id": "option_4", "text": "protected", "isCorrect": false }
    ],
    "hint": "This keyword defines methods specifically for the class itself.",
    "answerDescription": "Using 'self' within a module method ensures it acts as a class method when mixed in."
  },
  {
    "id": "ruby_1207",
    "question": "Which of the following is a valid way to call a method from a module without including it?",
    "options": [
      { "id": "option_1", "text": "ModuleName.method_name", "isCorrect": true },
      { "id": "option_2", "text": "ModuleName->method_name", "isCorrect": false },
      { "id": "option_3", "text": "include ModuleName", "isCorrect": false },
      { "id": "option_4", "text": "extend ModuleName", "isCorrect": false }
    ],
    "hint": "You can call module methods directly if they are defined as module functions.",
    "answerDescription": "Calling 'ModuleName.method_name' allows direct access to methods without including the module."
  },
  {
    "id": "ruby_1208",
    "question": "What does 'prepend' do when used with a module?",
    "options": [
      { "id": "option_1", "text": "Places module methods before class methods", "isCorrect": true },
      { "id": "option_2", "text": "Removes methods from the class", "isCorrect": false },
      { "id": "option_3", "text": "Prevents method overriding", "isCorrect": false },
      { "id": "option_4", "text": "Works the same as 'include'", "isCorrect": false }
    ],
    "hint": "It alters the method lookup chain in favor of the module.",
    "answerDescription": "'prepend' ensures module methods take precedence over class methods in method resolution order."
  },
  {
    "id": "ruby_1209",
    "question": "What is the default visibility of methods defined in a module?",
    "options": [
      { "id": "option_1", "text": "Public", "isCorrect": true },
      { "id": "option_2", "text": "Private", "isCorrect": false },
      { "id": "option_3", "text": "Protected", "isCorrect": false },
      { "id": "option_4", "text": "Hidden", "isCorrect": false }
    ],
    "hint": "Unless explicitly set otherwise, all methods are callable from outside the module.",
    "answerDescription": "Methods defined in a module are public by default unless explicitly marked as private or protected."
  },
  {
    "id": "ruby_1210",
    "question": "Which Ruby feature prevents method name clashes when using modules?",
    "options": [
      { "id": "option_1", "text": "Namespacing", "isCorrect": true },
      { "id": "option_2", "text": "Private methods", "isCorrect": false },
      { "id": "option_3", "text": "Global variables", "isCorrect": false },
      { "id": "option_4", "text": "Extending classes", "isCorrect": false }
    ],
    "hint": "It helps to define separate contexts for methods and constants.",
    "answerDescription": "Namespacing prevents conflicts by grouping related methods and constants within a module."
  },
  {
    "id": "ruby_1211",
    "question": "What happens if a module with the same method name is included multiple times?",
    "options": [
      { "id": "option_1", "text": "The method remains unchanged", "isCorrect": true },
      { "id": "option_2", "text": "An error is raised", "isCorrect": false },
      { "id": "option_3", "text": "The module method is called instead", "isCorrect": false },
      { "id": "option_4", "text": "The method is removed from the class", "isCorrect": false }
    ],
    "hint": "Modules do not override existing methods if included multiple times.",
    "answerDescription": "Including the same module multiple times does not overwrite existing methods."
  },
  {
    "id": "ruby_1212",
    "question": "What is the main difference between 'include' and 'extend'?",
    "options": [
      { "id": "option_1", "text": "'include' adds instance methods, 'extend' adds class methods", "isCorrect": true },
      { "id": "option_2", "text": "'extend' works only with private methods", "isCorrect": false },
      { "id": "option_3", "text": "'include' only works inside a method", "isCorrect": false },
      { "id": "option_4", "text": "'extend' requires method overriding", "isCorrect": false }
    ],
    "hint": "One is used for instances, the other for the class itself.",
    "answerDescription": "'include' makes module methods available as instance methods, while 'extend' adds them as class methods."
  },  {
    "id": "ruby_1213",
    "question": "Which of the following best describes a mixin in Ruby?",
    "options": [
      { "id": "option_1", "text": "A subclass of another class", "isCorrect": false },
      { "id": "option_2", "text": "A module that provides shared functionality", "isCorrect": true },
      { "id": "option_3", "text": "A class that can inherit from multiple classes", "isCorrect": false },
      { "id": "option_4", "text": "An instance of a module", "isCorrect": false }
    ],
    "hint": "Mixins allow code reuse without using class inheritance.",
    "answerDescription": "Mixins in Ruby are modules that provide additional functionality to classes without the need for inheritance."
  },
  {
    "id": "ruby_1214",
    "question": "How does a module differ from a class in Ruby?",
    "options": [
      { "id": "option_1", "text": "A module can be instantiated", "isCorrect": false },
      { "id": "option_2", "text": "A module cannot be instantiated", "isCorrect": true },
      { "id": "option_3", "text": "A module supports inheritance", "isCorrect": false },
      { "id": "option_4", "text": "A module is always public", "isCorrect": false }
    ],
    "hint": "Unlike classes, modules cannot be used to create objects.",
    "answerDescription": "Modules in Ruby cannot be instantiated, meaning they cannot create objects, whereas classes can."
  },
  {
    "id": "ruby_1215",
    "question": "Which keyword is used to access constants defined inside a module?",
    "options": [
      { "id": "option_1", "text": ".", "isCorrect": false },
      { "id": "option_2", "text": "::", "isCorrect": true },
      { "id": "option_3", "text": "->", "isCorrect": false },
      { "id": "option_4", "text": "=>", "isCorrect": false }
    ],
    "hint": "Think about how module methods are accessed.",
    "answerDescription": "Constants in Ruby modules are accessed using the '::' operator, e.g., ModuleName::CONSTANT."
  },
  {
    "id": "ruby_1216",
    "question": "Which method is used to check if a module has been included in a class?",
    "options": [
      { "id": "option_1", "text": "module_used?", "isCorrect": false },
      { "id": "option_2", "text": "ancestors", "isCorrect": true },
      { "id": "option_3", "text": "included_modules", "isCorrect": false },
      { "id": "option_4", "text": "has_module?", "isCorrect": false }
    ],
    "hint": "It returns the method lookup path of a class.",
    "answerDescription": "The 'ancestors' method returns an array of classes and modules in the method lookup chain."
  },
  {
    "id": "ruby_1217",
    "question": "What is the purpose of the 'module_function' method in a module?",
    "options": [
      { "id": "option_1", "text": "Defines private methods", "isCorrect": false },
      { "id": "option_2", "text": "Makes instance methods available as module-level methods", "isCorrect": true },
      { "id": "option_3", "text": "Hides methods from subclasses", "isCorrect": false },
      { "id": "option_4", "text": "Prevents method overriding", "isCorrect": false }
    ],
    "hint": "It allows calling methods on the module itself.",
    "answerDescription": "'module_function' allows methods to be both instance methods and module-level methods."
  },
  {
    "id": "ruby_1218",
    "question": "Which method can you use to list all modules included in a class?",
    "options": [
      { "id": "option_1", "text": "module_list", "isCorrect": false },
      { "id": "option_2", "text": "included_modules", "isCorrect": true },
      { "id": "option_3", "text": "module_lookup", "isCorrect": false },
      { "id": "option_4", "text": "module_tree", "isCorrect": false }
    ],
    "hint": "This method returns an array of modules included in a class.",
    "answerDescription": "'included_modules' provides a list of modules that have been included in a class."
  },
  {
    "id": "ruby_1219",
    "question": "How does Ruby handle conflicts when a class and an included module define the same method?",
    "options": [
      { "id": "option_1", "text": "The module method is used", "isCorrect": false },
      { "id": "option_2", "text": "The class method takes precedence", "isCorrect": true },
      { "id": "option_3", "text": "An error is raised", "isCorrect": false },
      { "id": "option_4", "text": "Ruby picks the first definition", "isCorrect": false }
    ],
    "hint": "Class methods always override module methods.",
    "answerDescription": "If a class and an included module define the same method, the class's version takes precedence."
  },
  {
    "id": "ruby_1220",
    "question": "How can you include methods from a module as both instance and class methods?",
    "options": [
      { "id": "option_1", "text": "Use 'include' and 'class_eval'", "isCorrect": false },
      { "id": "option_2", "text": "Use 'include' and 'extend'", "isCorrect": true },
      { "id": "option_3", "text": "Use 'require' and 'load'", "isCorrect": false },
      { "id": "option_4", "text": "Use 'prepend' and 'alias'", "isCorrect": false }
    ],
    "hint": "'include' works for instances, while another method works for classes.",
    "answerDescription": "'include' adds instance methods from a module, while 'extend' adds class methods."
  },
  {
    "id": "ruby_1221",
    "question": "What happens if you try to instantiate a module?",
    "options": [
      { "id": "option_1", "text": "An instance is created", "isCorrect": false },
      { "id": "option_2", "text": "An error is raised", "isCorrect": true },
      { "id": "option_3", "text": "Ruby creates an anonymous class", "isCorrect": false },
      { "id": "option_4", "text": "The module is converted to a class", "isCorrect": false }
    ],
    "hint": "Modules are not designed to create objects.",
    "answerDescription": "Trying to instantiate a module in Ruby results in an error since modules cannot create objects."
  },
  {
    "id": "ruby_1222",
    "question": "Which method is used to extend a class with module methods?",
    "options": [
      { "id": "option_1", "text": "inherit", "isCorrect": false },
      { "id": "option_2", "text": "extend", "isCorrect": true },
      { "id": "option_3", "text": "mix", "isCorrect": false },
      { "id": "option_4", "text": "prepend", "isCorrect": false }
    ],
    "hint": "This method makes module methods available as class methods.",
    "answerDescription": "Using 'extend' adds module methods as class methods rather than instance methods."
  },  {
    "id": "ruby_1223",
    "question": "Which keyword is used to include a module as instance methods in a class?",
    "options": [
      { "id": "option_1", "text": "require", "isCorrect": false },
      { "id": "option_2", "text": "extend", "isCorrect": false },
      { "id": "option_3", "text": "include", "isCorrect": true },
      { "id": "option_4", "text": "mixin", "isCorrect": false }
    ],
    "hint": "This keyword is commonly used to add module methods to instances of a class.",
    "answerDescription": "The 'include' keyword in Ruby adds module methods as instance methods in a class."
  },
  {
    "id": "ruby_1224",
    "question": "What is the primary advantage of using mixins over inheritance?",
    "options": [
      { "id": "option_1", "text": "It allows multiple inheritance", "isCorrect": false },
      { "id": "option_2", "text": "It forces method overriding", "isCorrect": false },
      { "id": "option_3", "text": "It promotes code reusability without deep inheritance trees", "isCorrect": true },
      { "id": "option_4", "text": "It prevents method name conflicts", "isCorrect": false }
    ],
    "hint": "Think about avoiding the downsides of deep class hierarchies.",
    "answerDescription": "Mixins allow code reuse without forcing deep inheritance, promoting better modularization."
  },
  {
    "id": "ruby_1225",
    "question": "Which method returns the inheritance hierarchy and included modules for a class?",
    "options": [
      { "id": "option_1", "text": "lookup_chain", "isCorrect": false },
      { "id": "option_2", "text": "included_modules", "isCorrect": false },
      { "id": "option_3", "text": "ancestors", "isCorrect": true },
      { "id": "option_4", "text": "inheritance_path", "isCorrect": false }
    ],
    "hint": "This method returns both the class hierarchy and included modules.",
    "answerDescription": "'ancestors' shows the class inheritance chain along with included modules."
  },
  {
    "id": "ruby_1226",
    "question": "Which method can be used to prevent a module method from being overridden?",
    "options": [
      { "id": "option_1", "text": "finalize", "isCorrect": false },
      { "id": "option_2", "text": "restrict", "isCorrect": false },
      { "id": "option_3", "text": "freeze", "isCorrect": true },
      { "id": "option_4", "text": "lock", "isCorrect": false }
    ],
    "hint": "Think about methods that make objects immutable.",
    "answerDescription": "Calling 'freeze' on a module prevents modification, including method overriding."
  },
  {
    "id": "ruby_1227",
    "question": "Which method is used to define module-level methods accessible without including the module?",
    "options": [
      { "id": "option_1", "text": "extend", "isCorrect": false },
      { "id": "option_2", "text": "define_method", "isCorrect": false },
      { "id": "option_3", "text": "self.method_name", "isCorrect": true },
      { "id": "option_4", "text": "static", "isCorrect": false }
    ],
    "hint": "Methods defined using 'self.' belong directly to the module.",
    "answerDescription": "Defining methods with 'self.method_name' inside a module makes them accessible without inclusion."
  },
  {
    "id": "ruby_1228",
    "question": "Which of the following allows a module’s methods to be used as both instance and class methods?",
    "options": [
      { "id": "option_1", "text": "Use 'alias_method'", "isCorrect": false },
      { "id": "option_2", "text": "Use 'module_eval'", "isCorrect": false },
      { "id": "option_3", "text": "Use 'module_function'", "isCorrect": true },
      { "id": "option_4", "text": "Use 'prepend'", "isCorrect": false }
    ],
    "hint": "This method makes module methods available both as instance and module methods.",
    "answerDescription": "'module_function' makes methods usable as both instance and module-level methods."
  },
  {
    "id": "ruby_1229",
    "question": "Which module is automatically included in every Ruby class?",
    "options": [
      { "id": "option_1", "text": "Enumerable", "isCorrect": false },
      { "id": "option_2", "text": "FileUtils", "isCorrect": false },
      { "id": "option_3", "text": "Kernel", "isCorrect": true },
      { "id": "option_4", "text": "Math", "isCorrect": false }
    ],
    "hint": "This module provides methods like 'puts' and 'gets'.",
    "answerDescription": "The 'Kernel' module is included in all classes and provides fundamental methods."
  },
  {
    "id": "ruby_1230",
    "question": "How can you check if a class includes a specific module?",
    "options": [
      { "id": "option_1", "text": "has_module?", "isCorrect": false },
      { "id": "option_2", "text": "check_inclusion", "isCorrect": false },
      { "id": "option_3", "text": "included_modules.include?(ModuleName)", "isCorrect": true },
      { "id": "option_4", "text": "module_used?", "isCorrect": false }
    ],
    "hint": "Look for an array method that checks module inclusion.",
    "answerDescription": "The method 'included_modules.include?(ModuleName)' returns true if the module is included."
  },
  {
    "id": "ruby_1231",
    "question": "Which method allows a module’s methods to take precedence over class methods?",
    "options": [
      { "id": "option_1", "text": "override", "isCorrect": false },
      { "id": "option_2", "text": "extend", "isCorrect": false },
      { "id": "option_3", "text": "prepend", "isCorrect": true },
      { "id": "option_4", "text": "inherit", "isCorrect": false }
    ],
    "hint": "This method places the module higher in the method lookup chain.",
    "answerDescription": "'prepend' ensures the module's methods take precedence over those in the class."
  },
  {
    "id": "ruby_1232",
    "question": "Which keyword can be used inside a module to access another module’s methods?",
    "options": [
      { "id": "option_1", "text": "require", "isCorrect": false },
      { "id": "option_2", "text": "mixin", "isCorrect": false },
      { "id": "option_3", "text": "include", "isCorrect": true },
      { "id": "option_4", "text": "import", "isCorrect": false }
    ],
    "hint": "This keyword is used for adding instance methods from another module.",
    "answerDescription": "'include' is used to add methods from another module inside a module."
  },  {
    "id": "ruby_1233",
    "question": "What happens when a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "The module becomes a superclass", "isCorrect": false },
      { "id": "option_2", "text": "The module overrides the class methods", "isCorrect": false },
      { "id": "option_3", "text": "The module methods are added as class methods", "isCorrect": false },
      { "id": "option_4", "text": "The module methods are added as instance methods", "isCorrect": true }
    ],
    "hint": "Including a module affects instance behavior rather than class behavior.",
    "answerDescription": "When a module is included in a class, its methods become instance methods of that class."
  },
  {
    "id": "ruby_1234",
    "question": "Which keyword should be used to make module methods available as class methods?",
    "options": [
      { "id": "option_1", "text": "mixin", "isCorrect": false },
      { "id": "option_2", "text": "require", "isCorrect": false },
      { "id": "option_3", "text": "include", "isCorrect": false },
      { "id": "option_4", "text": "extend", "isCorrect": true }
    ],
    "hint": "This keyword allows module methods to be directly available on the class.",
    "answerDescription": "'extend' adds module methods as class methods rather than instance methods."
  },
  {
    "id": "ruby_1235",
    "question": "How can you prevent a module’s method from being called outside the module?",
    "options": [
      { "id": "option_1", "text": "Make it a private method", "isCorrect": false },
      { "id": "option_2", "text": "Use the 'final' keyword", "isCorrect": false },
      { "id": "option_3", "text": "Define it with 'self.'", "isCorrect": false },
      { "id": "option_4", "text": "Use 'module_function'", "isCorrect": true }
    ],
    "hint": "This method allows making some module methods private.",
    "answerDescription": "'module_function' makes module methods private when included but still callable on the module."
  },
  {
    "id": "ruby_1236",
    "question": "What is the main difference between 'include' and 'extend' in Ruby?",
    "options": [
      { "id": "option_1", "text": "'include' works only in modules, 'extend' works in classes", "isCorrect": false },
      { "id": "option_2", "text": "'extend' is used for instance methods, 'include' for class methods", "isCorrect": false },
      { "id": "option_3", "text": "'include' makes methods available globally", "isCorrect": false },
      { "id": "option_4", "text": "'include' adds instance methods, 'extend' adds class methods", "isCorrect": true }
    ],
    "hint": "'include' affects instances, while 'extend' affects the class itself.",
    "answerDescription": "'include' adds module methods as instance methods, whereas 'extend' adds them as class methods."
  },
  {
    "id": "ruby_1237",
    "question": "Which of the following best describes mixins in Ruby?",
    "options": [
      { "id": "option_1", "text": "A special type of class", "isCorrect": false },
      { "id": "option_2", "text": "A function that modifies classes", "isCorrect": false },
      { "id": "option_3", "text": "A design pattern for single inheritance", "isCorrect": false },
      { "id": "option_4", "text": "A way to share reusable code via modules", "isCorrect": true }
    ],
    "hint": "Mixins allow Ruby to achieve multiple inheritance-like behavior.",
    "answerDescription": "Mixins in Ruby use modules to provide reusable code without traditional inheritance."
  },
  {
    "id": "ruby_1238",
    "question": "Which built-in Ruby module provides basic object methods like 'puts'?",
    "options": [
      { "id": "option_1", "text": "Enumerable", "isCorrect": false },
      { "id": "option_2", "text": "Comparable", "isCorrect": false },
      { "id": "option_3", "text": "Math", "isCorrect": false },
      { "id": "option_4", "text": "Kernel", "isCorrect": true }
    ],
    "hint": "This module is included in every Ruby object by default.",
    "answerDescription": "The 'Kernel' module provides essential methods like 'puts', 'gets', and 'sleep'."
  },
  {
    "id": "ruby_1239",
    "question": "What does the 'prepend' keyword do when used with a module?",
    "options": [
      { "id": "option_1", "text": "Adds methods at the end of the method lookup chain", "isCorrect": false },
      { "id": "option_2", "text": "Replaces all class methods with module methods", "isCorrect": false },
      { "id": "option_3", "text": "Forces the class to inherit only from the module", "isCorrect": false },
      { "id": "option_4", "text": "Ensures module methods take precedence over class methods", "isCorrect": true }
    ],
    "hint": "This keyword places module methods higher in the lookup chain than the class's own methods.",
    "answerDescription": "'prepend' ensures that a module's methods override the class methods instead of acting as fallbacks."
  },
  {
    "id": "ruby_1240",
    "question": "How can you check if a class extends a particular module?",
    "options": [
      { "id": "option_1", "text": "Module.used_by?(ClassName)", "isCorrect": false },
      { "id": "option_2", "text": "ClassName.extended_modules", "isCorrect": false },
      { "id": "option_3", "text": "ClassName.ancestors.include?(ModuleName)", "isCorrect": false },
      { "id": "option_4", "text": "ClassName.singleton_class.include?(ModuleName)", "isCorrect": true }
    ],
    "hint": "Modules extended into classes appear in their singleton class.",
    "answerDescription": "Checking 'ClassName.singleton_class.include?(ModuleName)' verifies if the module is extended."
  },
  {
    "id": "ruby_1241",
    "question": "Which method lists all modules included in a class?",
    "options": [
      { "id": "option_1", "text": "list_modules", "isCorrect": false },
      { "id": "option_2", "text": "modules_included", "isCorrect": false },
      { "id": "option_3", "text": "used_modules", "isCorrect": false },
      { "id": "option_4", "text": "included_modules", "isCorrect": true }
    ],
    "hint": "This method returns an array of modules included in a class.",
    "answerDescription": "'included_modules' lists all modules included in a specific class."
  },
  {
    "id": "ruby_1242",
    "question": "Which keyword allows a module to inject methods that override those in a class?",
    "options": [
      { "id": "option_1", "text": "override", "isCorrect": false },
      { "id": "option_2", "text": "extend", "isCorrect": false },
      { "id": "option_3", "text": "include", "isCorrect": false },
      { "id": "option_4", "text": "prepend", "isCorrect": true }
    ],
    "hint": "This keyword ensures that module methods have higher precedence than class methods.",
    "answerDescription": "'prepend' allows module methods to override class methods in the method lookup chain."
  },  {
    "id": "ruby_1243",
    "question": "Which keyword is used to include module methods as instance methods?",
    "options": [
      { "id": "option_1", "text": "include", "isCorrect": true },
      { "id": "option_2", "text": "extend", "isCorrect": false },
      { "id": "option_3", "text": "prepend", "isCorrect": false },
      { "id": "option_4", "text": "inject", "isCorrect": false }
    ],
    "hint": "This keyword adds module methods as instance methods, not class methods.",
    "answerDescription": "'include' adds module methods as instance methods in the class."
  },
  {
    "id": "ruby_1244",
    "question": "What happens when you use 'extend' with a module in Ruby?",
    "options": [
      { "id": "option_1", "text": "It adds the module's methods as class methods", "isCorrect": true },
      { "id": "option_2", "text": "It replaces the existing class methods", "isCorrect": false },
      { "id": "option_3", "text": "It includes the module methods as instance methods", "isCorrect": false },
      { "id": "option_4", "text": "It creates an alias for module methods", "isCorrect": false }
    ],
    "hint": "This makes the module's methods directly callable on the class itself.",
    "answerDescription": "'extend' adds the module's methods as class methods instead of instance methods."
  },
  {
    "id": "ruby_1245",
    "question": "Which method lists all modules included in a class?",
    "options": [
      { "id": "option_1", "text": "included_modules", "isCorrect": true },
      { "id": "option_2", "text": "modules_list", "isCorrect": false },
      { "id": "option_3", "text": "module_lookup", "isCorrect": false },
      { "id": "option_4", "text": "ancestors", "isCorrect": false }
    ],
    "hint": "This method returns an array of modules included in a specific class.",
    "answerDescription": "'included_modules' returns a list of all modules included in a given class."
  },
  {
    "id": "ruby_1246",
    "question": "How do you check if an object has a module included?",
    "options": [
      { "id": "option_1", "text": "obj.is_a?(ModuleName)", "isCorrect": true },
      { "id": "option_2", "text": "ModuleName.has?(obj)", "isCorrect": false },
      { "id": "option_3", "text": "obj.module_included?(ModuleName)", "isCorrect": false },
      { "id": "option_4", "text": "obj.includes?(ModuleName)", "isCorrect": false }
    ],
    "hint": "You can check if an object is an instance of a module using this method.",
    "answerDescription": "'is_a?' helps check whether an object has a specific module included."
  },
  {
    "id": "ruby_1247",
    "question": "Which method allows defining both private and public module functions?",
    "options": [
      { "id": "option_1", "text": "module_function", "isCorrect": true },
      { "id": "option_2", "text": "private", "isCorrect": false },
      { "id": "option_3", "text": "public", "isCorrect": false },
      { "id": "option_4", "text": "singleton_method", "isCorrect": false }
    ],
    "hint": "This method allows making module methods private while keeping them callable on the module itself.",
    "answerDescription": "'module_function' makes methods private when included but callable on the module."
  },
  {
    "id": "ruby_1248",
    "question": "What does 'prepend' do when used with a module?",
    "options": [
      { "id": "option_1", "text": "Places module methods before class methods in the lookup chain", "isCorrect": true },
      { "id": "option_2", "text": "Removes class methods and replaces them with module methods", "isCorrect": false },
      { "id": "option_3", "text": "Adds module methods as class methods", "isCorrect": false },
      { "id": "option_4", "text": "Creates an alias for module methods", "isCorrect": false }
    ],
    "hint": "This keyword ensures module methods override class methods.",
    "answerDescription": "'prepend' places module methods before class methods in the method lookup chain."
  },
  {
    "id": "ruby_1249",
    "question": "Which method returns a list of all ancestors of a class?",
    "options": [
      { "id": "option_1", "text": "ancestors", "isCorrect": true },
      { "id": "option_2", "text": "included_modules", "isCorrect": false },
      { "id": "option_3", "text": "method_lookup", "isCorrect": false },
      { "id": "option_4", "text": "superclasses", "isCorrect": false }
    ],
    "hint": "This method lists all superclasses and included modules.",
    "answerDescription": "'ancestors' returns a list of a class's superclass and included modules."
  },
  {
    "id": "ruby_1250",
    "question": "Which module in Ruby provides comparison methods like '<' and '=='?",
    "options": [
      { "id": "option_1", "text": "Comparable", "isCorrect": true },
      { "id": "option_2", "text": "Enumerable", "isCorrect": false },
      { "id": "option_3", "text": "Math", "isCorrect": false },
      { "id": "option_4", "text": "Kernel", "isCorrect": false }
    ],
    "hint": "This module provides comparison operators based on '<=>'.",
    "answerDescription": "'Comparable' allows defining comparison operators like '<', '>', and '==' using '<=>'."
  },
  {
    "id": "ruby_1251",
    "question": "How can you check if a class extends a particular module?",
    "options": [
      { "id": "option_1", "text": "ClassName.singleton_class.include?(ModuleName)", "isCorrect": true },
      { "id": "option_2", "text": "ClassName.extended_modules.include?(ModuleName)", "isCorrect": false },
      { "id": "option_3", "text": "ModuleName.is_extended_by?(ClassName)", "isCorrect": false },
      { "id": "option_4", "text": "ClassName.modules.include?(ModuleName)", "isCorrect": false }
    ],
    "hint": "Modules extended into classes appear in their singleton class.",
    "answerDescription": "'singleton_class.include?' verifies if a module has been extended in a class."
  },
  {
    "id": "ruby_1252",
    "question": "Which keyword allows multiple modules to be included in a class?",
    "options": [
      { "id": "option_1", "text": "include", "isCorrect": true },
      { "id": "option_2", "text": "extend", "isCorrect": false },
      { "id": "option_3", "text": "mixin", "isCorrect": false },
      { "id": "option_4", "text": "inherit", "isCorrect": false }
    ],
    "hint": "This keyword allows multiple modules to be mixed into a class.",
    "answerDescription": "'include' allows adding multiple modules to a class as instance methods."
  }, 
  {
    "id": "ruby_1253",
    "question": "Which method is used to check if a class includes a module?",
    "options": [
      { "id": "option_1", "text": "has_module?", "isCorrect": false },
      { "id": "option_2", "text": "include?", "isCorrect": true },
      { "id": "option_3", "text": "module_included?", "isCorrect": false },
      { "id": "option_4", "text": "module_lookup", "isCorrect": false }
    ],
    "hint": "This method checks if a module is part of a class's ancestor chain.",
    "answerDescription": "'include?' checks if a class includes a specific module."
  },
  {
    "id": "ruby_1254",
    "question": "What is the purpose of the 'Enumerable' module?",
    "options": [
      { "id": "option_1", "text": "To provide mathematical methods", "isCorrect": false },
      { "id": "option_2", "text": "To provide iteration methods like 'map' and 'select'", "isCorrect": true },
      { "id": "option_3", "text": "To enable object serialization", "isCorrect": false },
      { "id": "option_4", "text": "To manage class-level behavior", "isCorrect": false }
    ],
    "hint": "This module is commonly used in arrays and hashes for iteration.",
    "answerDescription": "'Enumerable' provides iteration methods such as 'map', 'select', and 'each_with_index'."
  },
  {
    "id": "ruby_1255",
    "question": "Which method lists all constants defined in a module?",
    "options": [
      { "id": "option_1", "text": "list_constants", "isCorrect": false },
      { "id": "option_2", "text": "constants", "isCorrect": true },
      { "id": "option_3", "text": "module_constants", "isCorrect": false },
      { "id": "option_4", "text": "defined_constants", "isCorrect": false }
    ],
    "hint": "This method returns an array of all constants defined in a module.",
    "answerDescription": "'constants' returns a list of all constants available in a module."
  },
  {
    "id": "ruby_1256",
    "question": "How do you make a method private inside a module?",
    "options": [
      { "id": "option_1", "text": "hide_method", "isCorrect": false },
      { "id": "option_2", "text": "private", "isCorrect": true },
      { "id": "option_3", "text": "lock_method", "isCorrect": false },
      { "id": "option_4", "text": "secure_method", "isCorrect": false }
    ],
    "hint": "This keyword is used to make methods inaccessible from outside the module.",
    "answerDescription": "'private' makes a method inaccessible outside the module."
  },
  {
    "id": "ruby_1257",
    "question": "Which keyword is used to define a module in Ruby?",
    "options": [
      { "id": "option_1", "text": "mixin", "isCorrect": false },
      { "id": "option_2", "text": "module", "isCorrect": true },
      { "id": "option_3", "text": "class", "isCorrect": false },
      { "id": "option_4", "text": "extend", "isCorrect": false }
    ],
    "hint": "This keyword is similar to 'class' but is used to define reusable code structures.",
    "answerDescription": "'module' is the keyword used to define a module in Ruby."
  },
  {
    "id": "ruby_1258",
    "question": "What does 'Kernel' module provide in Ruby?",
    "options": [
      { "id": "option_1", "text": "Basic mathematical operations", "isCorrect": false },
      { "id": "option_2", "text": "Fundamental methods like 'puts' and 'gets'", "isCorrect": true },
      { "id": "option_3", "text": "File handling methods", "isCorrect": false },
      { "id": "option_4", "text": "Security functions", "isCorrect": false }
    ],
    "hint": "This module contains methods that are available everywhere in Ruby.",
    "answerDescription": "'Kernel' provides basic methods like 'puts', 'gets', and 'sleep'."
  },
  {
    "id": "ruby_1259",
    "question": "Which method allows calling a module method as both instance and class method?",
    "options": [
      { "id": "option_1", "text": "public", "isCorrect": false },
      { "id": "option_2", "text": "module_function", "isCorrect": true },
      { "id": "option_3", "text": "extend_function", "isCorrect": false },
      { "id": "option_4", "text": "alias_method", "isCorrect": false }
    ],
    "hint": "This method makes module methods private when included but callable on the module itself.",
    "answerDescription": "'module_function' allows module methods to be used as both class and instance methods."
  },
  {
    "id": "ruby_1260",
    "question": "What is the purpose of the 'Object' class in Ruby?",
    "options": [
      { "id": "option_1", "text": "To define file operations", "isCorrect": false },
      { "id": "option_2", "text": "To serve as the root class for all Ruby objects", "isCorrect": true },
      { "id": "option_3", "text": "To implement thread management", "isCorrect": false },
      { "id": "option_4", "text": "To handle networking functionality", "isCorrect": false }
    ],
    "hint": "This class is the parent of all classes in Ruby.",
    "answerDescription": "'Object' is the root class from which all Ruby classes inherit."
  },
  {
    "id": "ruby_1261",
    "question": "How can you prevent a module method from being overridden?",
    "options": [
      { "id": "option_1", "text": "finalize", "isCorrect": false },
      { "id": "option_2", "text": "freeze", "isCorrect": true },
      { "id": "option_3", "text": "lock", "isCorrect": false },
      { "id": "option_4", "text": "protect", "isCorrect": false }
    ],
    "hint": "This method makes objects immutable in Ruby.",
    "answerDescription": "'freeze' prevents a module method from being modified."
  },
  {
    "id": "ruby_1262",
    "question": "What is the main purpose of mixins in Ruby?",
    "options": [
      { "id": "option_1", "text": "To provide multiple inheritance", "isCorrect": false },
      { "id": "option_2", "text": "To allow code reuse without inheritance", "isCorrect": true },
      { "id": "option_3", "text": "To override class constructors", "isCorrect": false },
      { "id": "option_4", "text": "To define custom exception handlers", "isCorrect": false }
    ],
    "hint": "Mixins allow adding functionality to classes without modifying inheritance.",
    "answerDescription": "Mixins help in code reuse by including module methods into a class."
  },
  {
    "id": "ruby_1263",
    "question": "Which keyword is used to mix a module into a class as instance methods?",
    "options": [
      { "id": "option_1", "text": "extend", "isCorrect": false },
      { "id": "option_2", "text": "require", "isCorrect": false },
      { "id": "option_3", "text": "include", "isCorrect": true },
      { "id": "option_4", "text": "import", "isCorrect": false }
    ],
    "hint": "This keyword allows adding module methods to instances of a class.",
    "answerDescription": "'include' mixes module methods into a class as instance methods."
  },
  {
    "id": "ruby_1264",
    "question": "How do you access constants defined in a module?",
    "options": [
      { "id": "option_1", "text": "Using dot notation", "isCorrect": false },
      { "id": "option_2", "text": "Using parentheses", "isCorrect": false },
      { "id": "option_3", "text": "Using double colons (::)", "isCorrect": true },
      { "id": "option_4", "text": "Using square brackets", "isCorrect": false }
    ],
    "hint": "This operator is used to access module-level constants and methods.",
    "answerDescription": "Constants in a module are accessed using 'ModuleName::CONSTANT'."
  },
  {
    "id": "ruby_1265",
    "question": "Which module provides mathematical functions like 'sin' and 'log'?",
    "options": [
      { "id": "option_1", "text": "Numbers", "isCorrect": false },
      { "id": "option_2", "text": "Kernel", "isCorrect": false },
      { "id": "option_3", "text": "Math", "isCorrect": true },
      { "id": "option_4", "text": "Numeric", "isCorrect": false }
    ],
    "hint": "This module contains methods for trigonometry and logarithms.",
    "answerDescription": "'Math' module provides mathematical functions like 'sin', 'cos', and 'log'."
  },
  {
    "id": "ruby_1266",
    "question": "What does the 'extend' keyword do when used in a class?",
    "options": [
      { "id": "option_1", "text": "Adds methods as private", "isCorrect": false },
      { "id": "option_2", "text": "Includes module methods as instance methods", "isCorrect": false },
      { "id": "option_3", "text": "Adds module methods as class methods", "isCorrect": true },
      { "id": "option_4", "text": "Creates a subclass of the module", "isCorrect": false }
    ],
    "hint": "This keyword makes module methods available at the class level.",
    "answerDescription": "'extend' adds module methods as class methods instead of instance methods."
  },
  {
    "id": "ruby_1267",
    "question": "Which built-in Ruby module allows handling file paths and directories?",
    "options": [
      { "id": "option_1", "text": "IO", "isCorrect": false },
      { "id": "option_2", "text": "FileHandler", "isCorrect": false },
      { "id": "option_3", "text": "FileUtils", "isCorrect": true },
      { "id": "option_4", "text": "PathManager", "isCorrect": false }
    ],
    "hint": "This module provides utilities for file manipulation and directory operations.",
    "answerDescription": "'FileUtils' provides methods for handling files and directories."
  },
  {
    "id": "ruby_1268",
    "question": "What is the advantage of using mixins in Ruby?",
    "options": [
      { "id": "option_1", "text": "They enable multiple inheritance", "isCorrect": false },
      { "id": "option_2", "text": "They improve runtime performance", "isCorrect": false },
      { "id": "option_3", "text": "They allow code reuse without class inheritance", "isCorrect": true },
      { "id": "option_4", "text": "They restrict object creation", "isCorrect": false }
    ],
    "hint": "Mixins help avoid deep inheritance trees while still reusing code.",
    "answerDescription": "Mixins provide reusable functionality without requiring class inheritance."
  },
  {
    "id": "ruby_1269",
    "question": "Which method lists all modules included in a class?",
    "options": [
      { "id": "option_1", "text": "modules", "isCorrect": false },
      { "id": "option_2", "text": "module_list", "isCorrect": false },
      { "id": "option_3", "text": "included_modules", "isCorrect": true },
      { "id": "option_4", "text": "list_mixins", "isCorrect": false }
    ],
    "hint": "This method returns an array of modules included in a class.",
    "answerDescription": "'included_modules' returns all modules included in a given class."
  },
  {
    "id": "ruby_1270",
    "question": "Which Ruby method can check if a class extends a module?",
    "options": [
      { "id": "option_1", "text": "uses?", "isCorrect": false },
      { "id": "option_2", "text": "inherits?", "isCorrect": false },
      { "id": "option_3", "text": "singleton_class.include?", "isCorrect": true },
      { "id": "option_4", "text": "mixin?", "isCorrect": false }
    ],
    "hint": "A class extending a module means it gets its methods as class methods.",
    "answerDescription": "'singleton_class.include?' checks if a class has extended a module."
  },
  {
    "id": "ruby_1271",
    "question": "What will 'self' refer to inside a module method?",
    "options": [
      { "id": "option_1", "text": "The class including the module", "isCorrect": false },
      { "id": "option_2", "text": "The instance of the class", "isCorrect": false },
      { "id": "option_3", "text": "The module itself", "isCorrect": true },
      { "id": "option_4", "text": "The global scope", "isCorrect": false }
    ],
    "hint": "In a module, 'self' represents the module rather than a class or instance.",
    "answerDescription": "Inside a module, 'self' refers to the module itself."
  },
  {
    "id": "ruby_1272",
    "question": "What happens when you include a module in a class?",
    "options": [
      { "id": "option_1", "text": "The class gets new class methods", "isCorrect": false },
      { "id": "option_2", "text": "The module is instantiated as an object", "isCorrect": false },
      { "id": "option_3", "text": "The class gains the module’s instance methods", "isCorrect": true },
      { "id": "option_4", "text": "The module gets initialized like a class", "isCorrect": false }
    ],
    "hint": "Modules provide reusable instance methods to a class when included.",
    "answerDescription": "Including a module adds its instance methods to a class."
  },
  {
    "id": "ruby_1273",
    "question": "Which of the following is the correct way to include a module in a class?",
    "options": [
      { "id": "option_1", "text": "class MyClass < MyModule", "isCorrect": false },
      { "id": "option_2", "text": "MyClass.use MyModule", "isCorrect": false },
      { "id": "option_3", "text": "extend MyModule", "isCorrect": false },
      { "id": "option_4", "text": "include MyModule", "isCorrect": true }
    ],
    "hint": "Instance methods from a module are added to a class using this keyword.",
    "answerDescription": "The 'include' keyword adds module methods as instance methods in a class."
  },
  {
    "id": "ruby_1274",
    "question": "What is the purpose of using 'prepend' instead of 'include'?",
    "options": [
      { "id": "option_1", "text": "To mix in methods at the end of the method chain", "isCorrect": false },
      { "id": "option_2", "text": "To override class methods globally", "isCorrect": false },
      { "id": "option_3", "text": "To add module methods as private", "isCorrect": false },
      { "id": "option_4", "text": "To place module methods before class methods in the method lookup chain", "isCorrect": true }
    ],
    "hint": "'prepend' affects method lookup differently than 'include'.",
    "answerDescription": "'prepend' places module methods before the class’s own methods in the lookup chain."
  },
  {
    "id": "ruby_1275",
    "question": "Which method lists all methods available to an object, including those from mixins?",
    "options": [
      { "id": "option_1", "text": "methods_only", "isCorrect": false },
      { "id": "option_2", "text": "all_methods", "isCorrect": false },
      { "id": "option_3", "text": "instance_methods", "isCorrect": false },
      { "id": "option_4", "text": "methods", "isCorrect": true }
    ],
    "hint": "This method returns an array of all callable methods.",
    "answerDescription": "Calling 'methods' on an object lists all available methods, including inherited and mixed-in methods."
  },
  {
    "id": "ruby_1276",
    "question": "How can you check if a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "MyClass.includes?(MyModule)", "isCorrect": false },
      { "id": "option_2", "text": "MyClass.uses?(MyModule)", "isCorrect": false },
      { "id": "option_3", "text": "MyModule.included?(MyClass)", "isCorrect": false },
      { "id": "option_4", "text": "MyClass.include?(MyModule)", "isCorrect": true }
    ],
    "hint": "This method checks if a module has been included in a class.",
    "answerDescription": "'include?' determines whether a class includes a specific module."
  },
  {
    "id": "ruby_1277",
    "question": "Which method allows checking the ancestors of a class, including mixed-in modules?",
    "options": [
      { "id": "option_1", "text": "superclasses", "isCorrect": false },
      { "id": "option_2", "text": "heritage", "isCorrect": false },
      { "id": "option_3", "text": "inherits", "isCorrect": false },
      { "id": "option_4", "text": "ancestors", "isCorrect": true }
    ],
    "hint": "This method returns an array of all classes and modules in the inheritance chain.",
    "answerDescription": "Calling 'ancestors' on a class returns its superclass and included modules."
  },
  {
    "id": "ruby_1278",
    "question": "What happens if a class and an included module define the same method?",
    "options": [
      { "id": "option_1", "text": "The module’s method overrides the class method", "isCorrect": false },
      { "id": "option_2", "text": "Ruby raises an error due to ambiguity", "isCorrect": false },
      { "id": "option_3", "text": "The class method takes precedence", "isCorrect": false },
      { "id": "option_4", "text": "The class method overrides the module method", "isCorrect": true }
    ],
    "hint": "Ruby's method lookup prefers class methods over included module methods.",
    "answerDescription": "Class-defined methods take precedence over methods from included modules."
  },
  {
    "id": "ruby_1279",
    "question": "Which module is automatically included in every Ruby object?",
    "options": [
      { "id": "option_1", "text": "Math", "isCorrect": false },
      { "id": "option_2", "text": "FileUtils", "isCorrect": false },
      { "id": "option_3", "text": "OS", "isCorrect": false },
      { "id": "option_4", "text": "Kernel", "isCorrect": true }
    ],
    "hint": "This module provides methods like 'puts' and 'print'.",
    "answerDescription": "'Kernel' module is included in all Ruby objects and provides basic methods."
  },
  {
    "id": "ruby_1280",
    "question": "How can a module be made to act like a class method provider instead of an instance method provider?",
    "options": [
      { "id": "option_1", "text": "Using 'include'", "isCorrect": false },
      { "id": "option_2", "text": "Using 'require'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'mixin'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'extend'", "isCorrect": true }
    ],
    "hint": "This keyword adds module methods as class methods instead of instance methods.",
    "answerDescription": "'extend' allows a module to provide class methods when mixed into a class."
  },
  {
    "id": "ruby_1281",
    "question": "Which method is triggered when a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "on_include", "isCorrect": false },
      { "id": "option_2", "text": "load", "isCorrect": false },
      { "id": "option_3", "text": "extend", "isCorrect": false },
      { "id": "option_4", "text": "included", "isCorrect": true }
    ],
    "hint": "This method is a callback that runs when a module is included.",
    "answerDescription": "The 'included' method is called when a module is mixed into a class."
  },
  {
    "id": "ruby_1282",
    "question": "What is the main advantage of using modules in Ruby?",
    "options": [
      { "id": "option_1", "text": "They allow for multiple inheritance", "isCorrect": false },
      { "id": "option_2", "text": "They improve performance", "isCorrect": false },
      { "id": "option_3", "text": "They act as standalone objects", "isCorrect": false },
      { "id": "option_4", "text": "They enable code reuse without class inheritance", "isCorrect": true }
    ],
    "hint": "Modules help in reusing code across multiple classes without deep inheritance.",
    "answerDescription": "Modules provide reusable methods without requiring class inheritance."
  },
  {
    "id": "ruby_1283",
    "question": "What keyword is used to include module methods as instance methods in a class?",
    "options": [
      { "id": "option_1", "text": "include", "isCorrect": true },
      { "id": "option_2", "text": "extend", "isCorrect": false },
      { "id": "option_3", "text": "prepend", "isCorrect": false },
      { "id": "option_4", "text": "require", "isCorrect": false }
    ],
    "hint": "This keyword makes module methods available as instance methods in a class.",
    "answerDescription": "'include' is used to mix in instance methods from a module into a class."
  },
  {
    "id": "ruby_1284",
    "question": "Which method lists the modules included in a class?",
    "options": [
      { "id": "option_1", "text": "included_modules", "isCorrect": true },
      { "id": "option_2", "text": "modules", "isCorrect": false },
      { "id": "option_3", "text": "list_modules", "isCorrect": false },
      { "id": "option_4", "text": "inherits", "isCorrect": false }
    ],
    "hint": "This method returns an array of modules included in a class.",
    "answerDescription": "'included_modules' lists all modules mixed into a class."
  },
  {
    "id": "ruby_1285",
    "question": "How do you add module methods as class methods?",
    "options": [
      { "id": "option_1", "text": "extend", "isCorrect": true },
      { "id": "option_2", "text": "include", "isCorrect": false },
      { "id": "option_3", "text": "prepend", "isCorrect": false },
      { "id": "option_4", "text": "inherit", "isCorrect": false }
    ],
    "hint": "This keyword makes module methods available at the class level.",
    "answerDescription": "'extend' mixes in a module’s methods as class methods instead of instance methods."
  },
  {
    "id": "ruby_1286",
    "question": "What does 'prepend' do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Adds methods before instance methods in the lookup chain", "isCorrect": true },
      { "id": "option_2", "text": "Replaces existing methods in a class", "isCorrect": false },
      { "id": "option_3", "text": "Mixes in methods after the class methods", "isCorrect": false },
      { "id": "option_4", "text": "Forces method resolution to the superclass", "isCorrect": false }
    ],
    "hint": "'prepend' affects method lookup order differently than 'include'.",
    "answerDescription": "'prepend' allows module methods to be searched before class methods in method lookup."
  },
  {
    "id": "ruby_1287",
    "question": "Which of the following is a built-in Ruby module?",
    "options": [
      { "id": "option_1", "text": "Enumerable", "isCorrect": true },
      { "id": "option_2", "text": "Files", "isCorrect": false },
      { "id": "option_3", "text": "Objects", "isCorrect": false },
      { "id": "option_4", "text": "Logger", "isCorrect": false }
    ],
    "hint": "This module provides iteration methods like 'map' and 'each'.",
    "answerDescription": "'Enumerable' is a core Ruby module used for collections."
  },
  {
    "id": "ruby_1288",
    "question": "What happens when a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "Its methods become instance methods of the class", "isCorrect": true },
      { "id": "option_2", "text": "It is automatically inherited", "isCorrect": false },
      { "id": "option_3", "text": "Its methods become private", "isCorrect": false },
      { "id": "option_4", "text": "The class cannot define its own methods", "isCorrect": false }
    ],
    "hint": "'include' allows instance methods from the module to be available in a class.",
    "answerDescription": "Including a module makes its methods available as instance methods in the class."
  },
  {
    "id": "ruby_1289",
    "question": "Which method is called when a module is included?",
    "options": [
      { "id": "option_1", "text": "included", "isCorrect": true },
      { "id": "option_2", "text": "initialized", "isCorrect": false },
      { "id": "option_3", "text": "mixin", "isCorrect": false },
      { "id": "option_4", "text": "load", "isCorrect": false }
    ],
    "hint": "This method is a callback triggered upon inclusion.",
    "answerDescription": "'included' is a callback that runs when a module is included in a class."
  },
  {
    "id": "ruby_1290",
    "question": "Which module provides mathematical methods in Ruby?",
    "options": [
      { "id": "option_1", "text": "Math", "isCorrect": true },
      { "id": "option_2", "text": "NumberUtils", "isCorrect": false },
      { "id": "option_3", "text": "MathOperations", "isCorrect": false },
      { "id": "option_4", "text": "Numbers", "isCorrect": false }
    ],
    "hint": "This module provides methods like 'sqrt' and 'sin'.",
    "answerDescription": "'Math' is a built-in Ruby module for mathematical operations."
  },
  {
    "id": "ruby_1291",
    "question": "Which module is automatically included in every class?",
    "options": [
      { "id": "option_1", "text": "Kernel", "isCorrect": true },
      { "id": "option_2", "text": "Object", "isCorrect": false },
      { "id": "option_3", "text": "Enumerable", "isCorrect": false },
      { "id": "option_4", "text": "ActiveSupport", "isCorrect": false }
    ],
    "hint": "This module provides methods like 'puts' and 'print'.",
    "answerDescription": "'Kernel' module is included in all Ruby objects and provides fundamental methods."
  },
  {
    "id": "ruby_1292",
    "question": "What is the benefit of using modules?",
    "options": [
      { "id": "option_1", "text": "They allow code reuse without multiple inheritance", "isCorrect": true },
      { "id": "option_2", "text": "They make classes faster", "isCorrect": false },
      { "id": "option_3", "text": "They allow classes to override methods", "isCorrect": false },
      { "id": "option_4", "text": "They act as standalone objects", "isCorrect": false }
    ],
    "hint": "Modules enable code reuse across different classes without requiring inheritance.",
    "answerDescription": "Modules provide shared functionality without the limitations of multiple inheritance."
  },  {
    "id": "ruby_1293",
    "question": "Which keyword is used to mix in a module's instance methods into a class?",
    "options": [
      { "id": "option_1", "text": "extend", "isCorrect": false },
      { "id": "option_2", "text": "include", "isCorrect": true },
      { "id": "option_3", "text": "inherit", "isCorrect": false },
      { "id": "option_4", "text": "prepend", "isCorrect": false }
    ],
    "hint": "This keyword allows a module’s methods to be used as instance methods.",
    "answerDescription": "'include' is used to mix in instance methods from a module."
  },
  {
    "id": "ruby_1294",
    "question": "Which module is automatically available in all Ruby objects?",
    "options": [
      { "id": "option_1", "text": "Enumerable", "isCorrect": false },
      { "id": "option_2", "text": "Kernel", "isCorrect": true },
      { "id": "option_3", "text": "Math", "isCorrect": false },
      { "id": "option_4", "text": "FileUtils", "isCorrect": false }
    ],
    "hint": "This module provides methods like 'puts' and 'gets'.",
    "answerDescription": "'Kernel' is included in all Ruby objects and provides core methods."
  },
  {
    "id": "ruby_1295",
    "question": "What are the difference between 'include' and 'extend' in Ruby?",
    "options": [
      { "id": "option_1", "text": "'extend' makes methods available as instance methods", "isCorrect": false },
      { "id": "option_2", "text": "'include' adds instance methods, 'extend' adds class methods", "isCorrect": true },
      { "id": "option_3", "text": "Both are used for class inheritance", "isCorrect": false },
      { "id": "option_4", "text": "'include' is used only for private methods", "isCorrect": false }
    ],
    "hint": "'include' is for instance methods, while 'extend' affects class methods.",
    "answerDescription": "'include' mixes in instance methods, while 'extend' makes module methods available as class methods."
  },
  {
    "id": "ruby_1296",
    "question": "Which module provides collection iteration methods like 'map' and 'each'?",
    "options": [
      { "id": "option_1", "text": "Math", "isCorrect": false },
      { "id": "option_2", "text": "Enumerable", "isCorrect": true },
      { "id": "option_3", "text": "FileUtils", "isCorrect": false },
      { "id": "option_4", "text": "IO", "isCorrect": false }
    ],
    "hint": "This module is commonly included in classes like Array and Hash.",
    "answerDescription": "'Enumerable' provides methods for iterating over collections."
  },
  {
    "id": "ruby_1297",
    "question": "What is the purpose of the 'prepend' keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "It appends methods to a class", "isCorrect": false },
      { "id": "option_2", "text": "It adds methods before instance methods in the lookup chain", "isCorrect": true },
      { "id": "option_3", "text": "It removes methods from a module", "isCorrect": false },
      { "id": "option_4", "text": "It prevents method overriding", "isCorrect": false }
    ],
    "hint": "It changes the order of method lookup, placing module methods before class methods.",
    "answerDescription": "'prepend' ensures module methods are checked before class methods in method resolution."
  },
  {
    "id": "ruby_1298",
    "question": "How can a module enforce implementation of methods in classes that include it?",
    "options": [
      { "id": "option_1", "text": "Using 'self.required'", "isCorrect": false },
      { "id": "option_2", "text": "Defining an abstract method with 'raise NotImplementedError'", "isCorrect": true },
      { "id": "option_3", "text": "Using 'include_require'", "isCorrect": false },
      { "id": "option_4", "text": "Defining 'initialize' in the module", "isCorrect": false }
    ],
    "hint": "Raise an error when an essential method is missing.",
    "answerDescription": "Using 'raise NotImplementedError' in a module method forces subclasses to define it."
  },
  {
    "id": "ruby_1299",
    "question": "What happens if a class includes multiple modules with the same method name?",
    "options": [
      { "id": "option_1", "text": "Ruby throws an error", "isCorrect": false },
      { "id": "option_2", "text": "The last included module's method is used", "isCorrect": true },
      { "id": "option_3", "text": "Both methods are available simultaneously", "isCorrect": false },
      { "id": "option_4", "text": "Ruby randomly selects one method", "isCorrect": false }
    ],
    "hint": "Method lookup follows the order in which modules are included.",
    "answerDescription": "The last included module overrides earlier methods with the same name."
  },
  {
    "id": "ruby_1300",
    "question": "How do you check if a class includes a specific module?",
    "options": [
      { "id": "option_1", "text": "using_class?", "isCorrect": false },
      { "id": "option_2", "text": "ancestors.include?(ModuleName)", "isCorrect": true },
      { "id": "option_3", "text": "class_modules()", "isCorrect": false },
      { "id": "option_4", "text": "has_module?(ModuleName)", "isCorrect": false }
    ],
    "hint": "'ancestors' method helps in checking module inclusion.",
    "answerDescription": "'ancestors.include?(ModuleName)' checks if a module is included in a class."
  },
  {
    "id": "ruby_1301",
    "question": "Which callback is triggered when a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "on_include", "isCorrect": false },
      { "id": "option_2", "text": "included", "isCorrect": true },
      { "id": "option_3", "text": "after_include", "isCorrect": false },
      { "id": "option_4", "text": "initialize", "isCorrect": false }
    ],
    "hint": "This callback is defined inside the module and executed when it’s included.",
    "answerDescription": "'included' is a lifecycle callback that runs when a module is mixed into a class."
  },
  {
    "id": "ruby_1302",
    "question": "What happens if you 'extend' a module in a class?",
    "options": [
      { "id": "option_1", "text": "Its methods become instance methods", "isCorrect": false },
      { "id": "option_2", "text": "Its methods become class methods", "isCorrect": true },
      { "id": "option_3", "text": "The module is permanently bound to the class", "isCorrect": false },
      { "id": "option_4", "text": "All instance methods of the class are removed", "isCorrect": false }
    ],
    "hint": "'extend' applies module methods at the class level.",
    "answerDescription": "'extend' adds module methods as class methods, rather than instance methods."
  },
  {
    "id": "ruby_1303",
    "question": "What is the purpose of Ruby modules?",
    "options": [
      { "id": "option_1", "text": "To create new classes", "isCorrect": false },
      { "id": "option_2", "text": "To store instance variables", "isCorrect": false },
      { "id": "option_3", "text": "To provide reusable methods without inheritance", "isCorrect": true },
      { "id": "option_4", "text": "To define global constants", "isCorrect": false }
    ],
    "hint": "Modules help in code reuse without forming class hierarchies.",
    "answerDescription": "Modules in Ruby provide reusable methods without requiring inheritance."
  },
  {
    "id": "ruby_1304",
    "question": "Which method lists all modules included in a class?",
    "options": [
      { "id": "option_1", "text": "included_modules", "isCorrect": false },
      { "id": "option_2", "text": "list_modules", "isCorrect": false },
      { "id": "option_3", "text": "ancestors", "isCorrect": true },
      { "id": "option_4", "text": "module_list", "isCorrect": false }
    ],
    "hint": "This method also includes parent classes in the lookup chain.",
    "answerDescription": "'ancestors' lists all included modules and parent classes in a class."
  },
  {
    "id": "ruby_1305",
    "question": "How do you define a module in Ruby?",
    "options": [
      { "id": "option_1", "text": "class ModuleName", "isCorrect": false },
      { "id": "option_2", "text": "defmodule ModuleName", "isCorrect": false },
      { "id": "option_3", "text": "module ModuleName", "isCorrect": true },
      { "id": "option_4", "text": "include ModuleName", "isCorrect": false }
    ],
    "hint": "The keyword to define a module is similar to defining a class but distinct.",
    "answerDescription": "Modules in Ruby are defined using the 'module' keyword followed by a name."
  },
  {
    "id": "ruby_1306",
    "question": "What is a mixin in Ruby?",
    "options": [
      { "id": "option_1", "text": "A way to inherit multiple classes", "isCorrect": false },
      { "id": "option_2", "text": "A way to override instance variables", "isCorrect": false },
      { "id": "option_3", "text": "A way to add module methods to a class", "isCorrect": true },
      { "id": "option_4", "text": "A method for class instantiation", "isCorrect": false }
    ],
    "hint": "A mixin allows a module’s methods to be used in a class.",
    "answerDescription": "A mixin is the inclusion of module methods into a class using 'include'."
  },
  {
    "id": "ruby_1307",
    "question": "What happens when a module method conflicts with a class method?",
    "options": [
      { "id": "option_1", "text": "Ruby throws an error", "isCorrect": false },
      { "id": "option_2", "text": "The module method is ignored", "isCorrect": false },
      { "id": "option_3", "text": "The class method takes precedence", "isCorrect": true },
      { "id": "option_4", "text": "Ruby merges both methods", "isCorrect": false }
    ],
    "hint": "Method lookup prioritizes class-defined methods over mixed-in module methods.",
    "answerDescription": "When a module method conflicts with a class method, the class method takes precedence."
  },
  {
    "id": "ruby_1308",
    "question": "Which keyword allows calling a module method without mixing it into a class?",
    "options": [
      { "id": "option_1", "text": "use", "isCorrect": false },
      { "id": "option_2", "text": "apply", "isCorrect": false },
      { "id": "option_3", "text": "scope resolution (::)", "isCorrect": true },
      { "id": "option_4", "text": "import", "isCorrect": false }
    ],
    "hint": "Modules can be accessed directly using a special operator.",
    "answerDescription": "The '::' operator allows calling module methods without mixing them into a class."
  },
  {
    "id": "ruby_1309",
    "question": "What is the purpose of 'self.included' inside a module?",
    "options": [
      { "id": "option_1", "text": "It is a built-in method for automatic inclusion", "isCorrect": false },
      { "id": "option_2", "text": "It prevents the module from being included", "isCorrect": false },
      { "id": "option_3", "text": "It runs a block of code when a module is included", "isCorrect": true },
      { "id": "option_4", "text": "It enables multiple inheritance", "isCorrect": false }
    ],
    "hint": "This method acts as a callback when a module is mixed in.",
    "answerDescription": "'self.included' is executed when a module is included in a class."
  },
  {
    "id": "ruby_1310",
    "question": "What is the difference between 'include' and 'prepend'?",
    "options": [
      { "id": "option_1", "text": "'include' overrides class methods", "isCorrect": false },
      { "id": "option_2", "text": "'prepend' appends module methods at the end", "isCorrect": false },
      { "id": "option_3", "text": "'prepend' places module methods before instance methods in the lookup chain", "isCorrect": true },
      { "id": "option_4", "text": "'include' and 'prepend' have no difference", "isCorrect": false }
    ],
    "hint": "'prepend' changes method lookup order.",
    "answerDescription": "'prepend' ensures module methods are checked before class methods."
  },
  {
    "id": "ruby_1311",
    "question": "How do you check if an object extends a module?",
    "options": [
      { "id": "option_1", "text": "obj.has_module?(ModuleName)", "isCorrect": false },
      { "id": "option_2", "text": "obj.modules.include?(ModuleName)", "isCorrect": false },
      { "id": "option_3", "text": "obj.is_a?(ModuleName)", "isCorrect": true },
      { "id": "option_4", "text": "obj.includes?(ModuleName)", "isCorrect": false }
    ],
    "hint": "Checking class hierarchy is a way to determine module extension.",
    "answerDescription": "'is_a?' checks if an object is an instance of a class or module."
  },
  {
    "id": "ruby_1312",
    "question": "Which Ruby method allows dynamically adding modules to an object?",
    "options": [
      { "id": "option_1", "text": "include", "isCorrect": false },
      { "id": "option_2", "text": "inherit", "isCorrect": false },
      { "id": "option_3", "text": "extend", "isCorrect": true },
      { "id": "option_4", "text": "super", "isCorrect": false }
    ],
    "hint": "This method allows adding module methods to a single object.",
    "answerDescription": "'extend' is used to add module methods to a specific object."
  },  {
    "id": "ruby_1313",
    "question": "What is the primary advantage of using modules in Ruby?",
    "options": [
      { "id": "option_1", "text": "They allow multiple inheritance", "isCorrect": false },
      { "id": "option_2", "text": "They enable direct object instantiation", "isCorrect": false },
      { "id": "option_3", "text": "They prevent method overriding", "isCorrect": false },
      { "id": "option_4", "text": "They provide reusable code without inheritance", "isCorrect": true }
    ],
    "hint": "Modules help avoid the complexities of multiple inheritance.",
    "answerDescription": "Modules in Ruby provide reusable code without requiring class inheritance."
  },
  {
    "id": "ruby_1314",
    "question": "How can you check if a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "class.has_module?(ModuleName)", "isCorrect": false },
      { "id": "option_2", "text": "class.includes_module?(ModuleName)", "isCorrect": false },
      { "id": "option_3", "text": "class.contains?(ModuleName)", "isCorrect": false },
      { "id": "option_4", "text": "class.included_modules.include?(ModuleName)", "isCorrect": true }
    ],
    "hint": "There is a method that lists all included modules in a class.",
    "answerDescription": "The 'included_modules' method helps check if a module is included in a class."
  },
  {
    "id": "ruby_1315",
    "question": "Which keyword is used to include instance methods from a module into a class?",
    "options": [
      { "id": "option_1", "text": "require", "isCorrect": false },
      { "id": "option_2", "text": "extend", "isCorrect": false },
      { "id": "option_3", "text": "inherit", "isCorrect": false },
      { "id": "option_4", "text": "include", "isCorrect": true }
    ],
    "hint": "This keyword is commonly used for mixins.",
    "answerDescription": "The 'include' keyword is used to mix module methods as instance methods in a class."
  },
  {
    "id": "ruby_1316",
    "question": "What happens if a class includes two modules with the same method name?",
    "options": [
      { "id": "option_1", "text": "Ruby raises an error", "isCorrect": false },
      { "id": "option_2", "text": "Both methods execute sequentially", "isCorrect": false },
      { "id": "option_3", "text": "The last included module’s method is used", "isCorrect": false },
      { "id": "option_4", "text": "The first included module’s method is used", "isCorrect": true }
    ],
    "hint": "Ruby follows a last-in-first-out module resolution order.",
    "answerDescription": "If two modules have the same method, the last included module’s method takes precedence."
  },
  {
    "id": "ruby_1317",
    "question": "How can you call a method from a module without including it in a class?",
    "options": [
      { "id": "option_1", "text": "use ModuleName.method_name", "isCorrect": false },
      { "id": "option_2", "text": "import ModuleName.method_name", "isCorrect": false },
      { "id": "option_3", "text": "apply ModuleName.method_name", "isCorrect": false },
      { "id": "option_4", "text": "ModuleName.method_name", "isCorrect": true }
    ],
    "hint": "Use the module name directly to access its methods.",
    "answerDescription": "You can call a module method directly using 'ModuleName.method_name'."
  },
  {
    "id": "ruby_1318",
    "question": "Which method is called automatically when a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "initialize", "isCorrect": false },
      { "id": "option_2", "text": "setup", "isCorrect": false },
      { "id": "option_3", "text": "extend", "isCorrect": false },
      { "id": "option_4", "text": "included", "isCorrect": true }
    ],
    "hint": "This is a callback method in modules.",
    "answerDescription": "The 'included' method is executed when a module is included in a class."
  },
  {
    "id": "ruby_1319",
    "question": "What does the 'extend' keyword do in Ruby modules?",
    "options": [
      { "id": "option_1", "text": "Adds module methods as instance methods", "isCorrect": false },
      { "id": "option_2", "text": "Removes methods from a class", "isCorrect": false },
      { "id": "option_3", "text": "Creates a new subclass", "isCorrect": false },
      { "id": "option_4", "text": "Adds module methods as class methods", "isCorrect": true }
    ],
    "hint": "This keyword is used to add module methods to a class itself.",
    "answerDescription": "'extend' allows a class to add module methods as class methods."
  },
  {
    "id": "ruby_1320",
    "question": "What is the main difference between 'include' and 'extend' in Ruby?",
    "options": [
      { "id": "option_1", "text": "'extend' is for instance methods, 'include' is for class methods", "isCorrect": false },
      { "id": "option_2", "text": "'include' replaces class methods", "isCorrect": false },
      { "id": "option_3", "text": "'extend' prevents method overriding", "isCorrect": false },
      { "id": "option_4", "text": "'include' adds instance methods, 'extend' adds class methods", "isCorrect": true }
    ],
    "hint": "One affects instance methods, the other affects class methods.",
    "answerDescription": "'include' is used for instance methods, while 'extend' is used for class methods."
  },
  {
    "id": "ruby_1321",
    "question": "How do you define module methods that cannot be included in a class?",
    "options": [
      { "id": "option_1", "text": "Use 'private' keyword", "isCorrect": false },
      { "id": "option_2", "text": "Define methods with 'attr_accessor'", "isCorrect": false },
      { "id": "option_3", "text": "Declare methods inside a 'def' block", "isCorrect": false },
      { "id": "option_4", "text": "Define methods as 'self.method_name'", "isCorrect": true }
    ],
    "hint": "These methods belong to the module itself and are not mixed into classes.",
    "answerDescription": "Defining methods as 'self.method_name' makes them module-level methods, not mixable."
  },
  {
    "id": "ruby_1322",
    "question": "What is the purpose of 'prepend' in Ruby modules?",
    "options": [
      { "id": "option_1", "text": "It prevents a module from being included", "isCorrect": false },
      { "id": "option_2", "text": "It ensures modules can only be extended", "isCorrect": false },
      { "id": "option_3", "text": "It removes existing methods in a class", "isCorrect": false },
      { "id": "option_4", "text": "It adds module methods before class methods in lookup order", "isCorrect": true }
    ],
    "hint": "'prepend' changes the method resolution order.",
    "answerDescription": "'prepend' ensures module methods are checked before class-defined methods."
  },
  {
    "id": "ruby_1323",
    "question": "What keyword is used to define a module in Ruby?",
    "options": [
      { "id": "option_1", "text": "module", "isCorrect": true },
      { "id": "option_2", "text": "class", "isCorrect": false },
      { "id": "option_3", "text": "define", "isCorrect": false },
      { "id": "option_4", "text": "mod", "isCorrect": false }
    ],
    "hint": "It is a dedicated keyword in Ruby for module definition.",
    "answerDescription": "The 'module' keyword is used to define modules in Ruby."
  },
  {
    "id": "ruby_1324",
    "question": "Which method is automatically called when a module is prepended to a class?",
    "options": [
      { "id": "option_1", "text": "prepended", "isCorrect": true },
      { "id": "option_2", "text": "included", "isCorrect": false },
      { "id": "option_3", "text": "extended", "isCorrect": false },
      { "id": "option_4", "text": "initialize", "isCorrect": false }
    ],
    "hint": "This method is similar to 'included' but is used with 'prepend'.",
    "answerDescription": "The 'prepended' method is a callback that is executed when a module is prepended."
  },
  {
    "id": "ruby_1325",
    "question": "How does Ruby resolve method conflicts when using modules?",
    "options": [
      { "id": "option_1", "text": "Last included module method takes precedence", "isCorrect": true },
      { "id": "option_2", "text": "First included module method takes precedence", "isCorrect": false },
      { "id": "option_3", "text": "Ruby throws an error", "isCorrect": false },
      { "id": "option_4", "text": "All methods execute sequentially", "isCorrect": false }
    ],
    "hint": "Ruby follows a last-in-first-out rule for method resolution.",
    "answerDescription": "When multiple modules define the same method, the last included module takes precedence."
  },
  {
    "id": "ruby_1326",
    "question": "What method lists all modules included in a class?",
    "options": [
      { "id": "option_1", "text": "included_modules", "isCorrect": true },
      { "id": "option_2", "text": "modules_list", "isCorrect": false },
      { "id": "option_3", "text": "class_modules", "isCorrect": false },
      { "id": "option_4", "text": "list_modules", "isCorrect": false }
    ],
    "hint": "This method returns an array of included modules.",
    "answerDescription": "The 'included_modules' method returns a list of modules included in a class."
  },
  {
    "id": "ruby_1327",
    "question": "Which operator is used to check if a class includes a module?",
    "options": [
      { "id": "option_1", "text": "<", "isCorrect": true },
      { "id": "option_2", "text": ">", "isCorrect": false },
      { "id": "option_3", "text": "<=", "isCorrect": false },
      { "id": "option_4", "text": ">=", "isCorrect": false }
    ],
    "hint": "It is a comparison operator that works with modules and classes.",
    "answerDescription": "In Ruby, the '<' operator checks if a class includes a specific module."
  },
  {
    "id": "ruby_1328",
    "question": "How can you prevent a module method from being overridden?",
    "options": [
      { "id": "option_1", "text": "Use 'freeze' on the module", "isCorrect": true },
      { "id": "option_2", "text": "Use 'final' keyword", "isCorrect": false },
      { "id": "option_3", "text": "Declare the method as 'protected'", "isCorrect": false },
      { "id": "option_4", "text": "Declare the method as 'attr_readonly'", "isCorrect": false }
    ],
    "hint": "A Ruby object, including modules, can be made immutable.",
    "answerDescription": "Using 'freeze' prevents a module from being modified, thus preventing method overrides."
  },
  {
    "id": "ruby_1329",
    "question": "What does the 'self' keyword refer to inside a module method?",
    "options": [
      { "id": "option_1", "text": "The module itself", "isCorrect": true },
      { "id": "option_2", "text": "The class including the module", "isCorrect": false },
      { "id": "option_3", "text": "The object instance", "isCorrect": false },
      { "id": "option_4", "text": "The main Ruby object", "isCorrect": false }
    ],
    "hint": "'self' always refers to the current context in Ruby.",
    "answerDescription": "Inside a module, 'self' refers to the module itself, not an instance of a class."
  },
  {
    "id": "ruby_1330",
    "question": "Which method allows a module to execute code when it's included?",
    "options": [
      { "id": "option_1", "text": "included", "isCorrect": true },
      { "id": "option_2", "text": "executed", "isCorrect": false },
      { "id": "option_3", "text": "run", "isCorrect": false },
      { "id": "option_4", "text": "autoload", "isCorrect": false }
    ],
    "hint": "This is a common callback method in modules.",
    "answerDescription": "The 'included' method is a callback that runs when a module is included in a class."
  },
  {
    "id": "ruby_1331",
    "question": "How can you check if an object is an instance of a module?",
    "options": [
      { "id": "option_1", "text": "object.is_a?(ModuleName)", "isCorrect": true },
      { "id": "option_2", "text": "object.instance_of?(ModuleName)", "isCorrect": false },
      { "id": "option_3", "text": "object.module_instance?", "isCorrect": false },
      { "id": "option_4", "text": "object.module?", "isCorrect": false }
    ],
    "hint": "There is a built-in Ruby method that checks if an object belongs to a certain class/module.",
    "answerDescription": "'is_a?' checks whether an object is an instance of a class or a module."
  },
  {
    "id": "ruby_1332",
    "question": "Which of the following is NOT true about modules in Ruby?",
    "options": [
      { "id": "option_1", "text": "Modules cannot be instantiated", "isCorrect": true },
      { "id": "option_2", "text": "Modules cannot have instance variables", "isCorrect": false },
      { "id": "option_3", "text": "Modules can contain constants", "isCorrect": false },
      { "id": "option_4", "text": "Modules can define methods", "isCorrect": false }
    ],
    "hint": "Modules are not like classes when it comes to instantiation.",
    "answerDescription": "Modules cannot be instantiated, but they can contain constants and methods."
  },
  {
    "id": "ruby_1333",
    "question": "What is the main purpose of a module in Ruby?",
    "options": [
      { "id": "option_1", "text": "To create instances", "isCorrect": false },
      { "id": "option_2", "text": "To provide a namespace and mixin functionality", "isCorrect": true },
      { "id": "option_3", "text": "To define database models", "isCorrect": false },
      { "id": "option_4", "text": "To act as a superclass", "isCorrect": false }
    ],
    "hint": "Modules help organize code and avoid name conflicts.",
    "answerDescription": "Modules in Ruby serve as namespaces and mixins to enhance code organization."
  },
  {
    "id": "ruby_1334",
    "question": "How do you include a module's methods as instance methods in a class?",
    "options": [
      { "id": "option_1", "text": "Using 'extend'", "isCorrect": false },
      { "id": "option_2", "text": "Using 'include'", "isCorrect": true },
      { "id": "option_3", "text": "Using 'require'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'prepend'", "isCorrect": false }
    ],
    "hint": "This method mixes in module methods as instance methods.",
    "answerDescription": "The 'include' method mixes in module methods as instance methods in a class."
  },
  {
    "id": "ruby_1335",
    "question": "Which keyword is used to add a module's methods as class methods?",
    "options": [
      { "id": "option_1", "text": "include", "isCorrect": false },
      { "id": "option_2", "text": "extend", "isCorrect": true },
      { "id": "option_3", "text": "require", "isCorrect": false },
      { "id": "option_4", "text": "import", "isCorrect": false }
    ],
    "hint": "This method allows modules to provide class-level behavior.",
    "answerDescription": "Using 'extend' adds module methods as class methods instead of instance methods."
  },
  {
    "id": "ruby_1336",
    "question": "What happens if two modules define the same method and both are included in a class?",
    "options": [
      { "id": "option_1", "text": "Ruby throws an error", "isCorrect": false },
      { "id": "option_2", "text": "The last included module's method is used", "isCorrect": true },
      { "id": "option_3", "text": "Both methods execute in sequence", "isCorrect": false },
      { "id": "option_4", "text": "The first included module's method is used", "isCorrect": false }
    ],
    "hint": "Ruby follows a last-in-first-out rule for method resolution.",
    "answerDescription": "When multiple modules define the same method, the last included module's method takes precedence."
  },
  {
    "id": "ruby_1337",
    "question": "Which method is used to check if a class includes a specific module?",
    "options": [
      { "id": "option_1", "text": "has_module?", "isCorrect": false },
      { "id": "option_2", "text": "include?", "isCorrect": true },
      { "id": "option_3", "text": "contains?", "isCorrect": false },
      { "id": "option_4", "text": "module?", "isCorrect": false }
    ],
    "hint": "This method is commonly used to check module inclusion.",
    "answerDescription": "The 'include?' method checks if a module is included in a class."
  },
  {
    "id": "ruby_1338",
    "question": "What is the difference between 'include' and 'extend' in Ruby modules?",
    "options": [
      { "id": "option_1", "text": "There is no difference", "isCorrect": false },
      { "id": "option_2", "text": "'include' adds instance methods, 'extend' adds class methods", "isCorrect": true },
      { "id": "option_3", "text": "'include' adds class methods, 'extend' adds instance methods", "isCorrect": false },
      { "id": "option_4", "text": "'extend' is only for constants", "isCorrect": false }
    ],
    "hint": "One affects instances, the other affects the class itself.",
    "answerDescription": "'include' mixes in methods as instance methods, while 'extend' adds them as class methods."
  },
  {
    "id": "ruby_1339",
    "question": "Which method is executed when a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "extended", "isCorrect": false },
      { "id": "option_2", "text": "included", "isCorrect": true },
      { "id": "option_3", "text": "initialized", "isCorrect": false },
      { "id": "option_4", "text": "required", "isCorrect": false }
    ],
    "hint": "This method is commonly used as a callback in modules.",
    "answerDescription": "The 'included' method is automatically called when a module is included in a class."
  },
  {
    "id": "ruby_1340",
    "question": "What does the 'prepend' method do when used with modules?",
    "options": [
      { "id": "option_1", "text": "Removes methods from a module", "isCorrect": false },
      { "id": "option_2", "text": "Adds module methods before instance methods in the method lookup chain", "isCorrect": true },
      { "id": "option_3", "text": "Disables a module", "isCorrect": false },
      { "id": "option_4", "text": "Executes module code immediately", "isCorrect": false }
    ],
    "hint": "This method allows a module to override instance methods.",
    "answerDescription": "Using 'prepend' ensures that module methods are executed before instance methods."
  },
  {
    "id": "ruby_1341",
    "question": "Which keyword allows a module to provide constants and methods without mixing into classes?",
    "options": [
      { "id": "option_1", "text": "mixin", "isCorrect": false },
      { "id": "option_2", "text": "module_function", "isCorrect": true },
      { "id": "option_3", "text": "extend", "isCorrect": false },
      { "id": "option_4", "text": "namespace", "isCorrect": false }
    ],
    "hint": "This method makes module methods callable without inclusion.",
    "answerDescription": "The 'module_function' keyword makes module methods available as standalone methods."
  },
  {
    "id": "ruby_1342",
    "question": "Which of the following is NOT a characteristic of Ruby modules?",
    "options": [
      { "id": "option_1", "text": "They cannot be instantiated", "isCorrect": false },
      { "id": "option_2", "text": "They can be used to create mixins", "isCorrect": true },
      { "id": "option_3", "text": "They can store constants", "isCorrect": false },
      { "id": "option_4", "text": "They can have methods but no instances", "isCorrect": false }
    ],
    "hint": "Modules provide a way to mix functionality into classes.",
    "answerDescription": "Modules in Ruby cannot be instantiated but can be used as mixins."
  },
  {
    "id": "ruby_1343",
    "question": "What is a mixin in Ruby?",
    "options": [
      { "id": "option_1", "text": "A subclass of a module", "isCorrect": false },
      { "id": "option_2", "text": "A method of extending classes", "isCorrect": false },
      { "id": "option_3", "text": "A way to add shared behavior via modules", "isCorrect": true },
      { "id": "option_4", "text": "A special kind of class", "isCorrect": false }
    ],
    "hint": "Mixins allow sharing behavior across multiple classes.",
    "answerDescription": "A mixin is a way to add shared behavior to multiple classes using modules."
  },
  {
    "id": "ruby_1344",
    "question": "Which method lists all modules included in a class?",
    "options": [
      { "id": "option_1", "text": "ancestors", "isCorrect": false },
      { "id": "option_2", "text": "modules", "isCorrect": false },
      { "id": "option_3", "text": "included_modules", "isCorrect": true },
      { "id": "option_4", "text": "superclass", "isCorrect": false }
    ],
    "hint": "This method returns all mixins used in a class.",
    "answerDescription": "'included_modules' lists all modules included in a class."
  },
  {
    "id": "ruby_1345",
    "question": "What is the purpose of 'super' in a module method?",
    "options": [
      { "id": "option_1", "text": "To call the next method in the lookup chain", "isCorrect": false },
      { "id": "option_2", "text": "To define a superclass", "isCorrect": false },
      { "id": "option_3", "text": "To invoke the overridden method from a parent module or class", "isCorrect": true },
      { "id": "option_4", "text": "To reference the module itself", "isCorrect": false }
    ],
    "hint": "'super' helps call a method with the same name in a superclass or mixin.",
    "answerDescription": "Using 'super' in a module method invokes the overridden method from a parent class or module."
  },
  {
    "id": "ruby_1346",
    "question": "How can a module prevent method name conflicts when included in a class?",
    "options": [
      { "id": "option_1", "text": "Using 'alias'", "isCorrect": false },
      { "id": "option_2", "text": "Using 'prepend'", "isCorrect": false },
      { "id": "option_3", "text": "Using module namespaces", "isCorrect": true },
      { "id": "option_4", "text": "Using 'private' methods", "isCorrect": false }
    ],
    "hint": "Modules can be used as namespaces to avoid conflicts.",
    "answerDescription": "Modules can prevent method conflicts by using namespaces to encapsulate methods."
  },
  {
    "id": "ruby_1347",
    "question": "Which module in Ruby provides mathematical functions like sin and cos?",
    "options": [
      { "id": "option_1", "text": "MathFunctions", "isCorrect": false },
      { "id": "option_2", "text": "Trig", "isCorrect": false },
      { "id": "option_3", "text": "Math", "isCorrect": true },
      { "id": "option_4", "text": "Algebra", "isCorrect": false }
    ],
    "hint": "This module is built into Ruby and contains common mathematical methods.",
    "answerDescription": "The 'Math' module provides mathematical functions such as sin, cos, and sqrt."
  },
  {
    "id": "ruby_1348",
    "question": "Which keyword is used inside a module to define class-level methods?",
    "options": [
      { "id": "option_1", "text": "self.method_name", "isCorrect": false },
      { "id": "option_2", "text": "static", "isCorrect": false },
      { "id": "option_3", "text": "def self.method_name", "isCorrect": true },
      { "id": "option_4", "text": "class_method", "isCorrect": false }
    ],
    "hint": "Use 'self.' before the method name to make it a class method.",
    "answerDescription": "Defining a method as 'def self.method_name' makes it a class-level method within a module."
  },
  {
    "id": "ruby_1349",
    "question": "What does 'Module.nesting' return?",
    "options": [
      { "id": "option_1", "text": "A list of included modules", "isCorrect": false },
      { "id": "option_2", "text": "The inheritance hierarchy", "isCorrect": false },
      { "id": "option_3", "text": "An array of nested module names", "isCorrect": true },
      { "id": "option_4", "text": "The current module's name", "isCorrect": false }
    ],
    "hint": "This method gives insight into the module hierarchy.",
    "answerDescription": "'Module.nesting' returns an array representing the current module nesting hierarchy."
  },
  {
    "id": "ruby_1350",
    "question": "How do you create a module in Ruby?",
    "options": [
      { "id": "option_1", "text": "module = {}", "isCorrect": false },
      { "id": "option_2", "text": "class ModuleName", "isCorrect": false },
      { "id": "option_3", "text": "module ModuleName", "isCorrect": true },
      { "id": "option_4", "text": "def module_name", "isCorrect": false }
    ],
    "hint": "Modules are defined using a specific keyword.",
    "answerDescription": "A module is created using the 'module' keyword followed by the module name."
  },
  {
    "id": "ruby_1351",
    "question": "Which method can be used to execute code only once per module inclusion?",
    "options": [
      { "id": "option_1", "text": "initialize", "isCorrect": false },
      { "id": "option_2", "text": "self.included", "isCorrect": false },
      { "id": "option_3", "text": "included", "isCorrect": true },
      { "id": "option_4", "text": "require", "isCorrect": false }
    ],
    "hint": "This method is a callback that triggers when a module is included.",
    "answerDescription": "The 'included' method runs once when a module is included in a class."
  },
  {
    "id": "ruby_1352",
    "question": "What is a key advantage of using modules in Ruby?",
    "options": [
      { "id": "option_1", "text": "They allow multiple inheritance", "isCorrect": false },
      { "id": "option_2", "text": "They replace the need for classes", "isCorrect": false },
      { "id": "option_3", "text": "They help organize code and enable mixins", "isCorrect": true },
      { "id": "option_4", "text": "They act as standalone objects", "isCorrect": false }
    ],
    "hint": "Modules help structure and share behavior in Ruby.",
    "answerDescription": "Modules are useful for organizing code and providing reusable mixins."
  },
  {
    "id": "ruby_1353",
    "question": "What keyword is used to include a module in a class?",
    "options": [
      { "id": "option_1", "text": "extend", "isCorrect": false },
      { "id": "option_2", "text": "use", "isCorrect": false },
      { "id": "option_3", "text": "require", "isCorrect": false },
      { "id": "option_4", "text": "include", "isCorrect": true }
    ],
    "hint": "This keyword allows instance methods from a module to be used in a class.",
    "answerDescription": "Using 'include' allows a module’s methods to be used as instance methods in a class."
  },
  {
    "id": "ruby_1354",
    "question": "What is the difference between 'include' and 'extend' when using modules?",
    "options": [
      { "id": "option_1", "text": "'include' adds constants, 'extend' adds methods", "isCorrect": false },
      { "id": "option_2", "text": "'include' adds private methods, 'extend' adds public methods", "isCorrect": false },
      { "id": "option_3", "text": "'include' makes methods static, 'extend' makes them instance methods", "isCorrect": false },
      { "id": "option_4", "text": "'include' adds instance methods, 'extend' adds class methods", "isCorrect": true }
    ],
    "hint": "One modifies instance behavior, while the other affects the class itself.",
    "answerDescription": "'include' adds module methods as instance methods, whereas 'extend' adds them as class methods."
  },
  {
    "id": "ruby_1355",
    "question": "Which built-in Ruby module provides methods for comparison?",
    "options": [
      { "id": "option_1", "text": "ComparableHelper", "isCorrect": false },
      { "id": "option_2", "text": "Math", "isCorrect": false },
      { "id": "option_3", "text": "Enumerable", "isCorrect": false },
      { "id": "option_4", "text": "Comparable", "isCorrect": true }
    ],
    "hint": "This module allows objects to define ordering and comparisons.",
    "answerDescription": "The 'Comparable' module provides comparison methods such as '<', '>', and '==' for custom objects."
  },
  {
    "id": "ruby_1356",
    "question": "Which keyword prevents a module’s methods from being overridden?",
    "options": [
      { "id": "option_1", "text": "lock", "isCorrect": false },
      { "id": "option_2", "text": "restrict", "isCorrect": false },
      { "id": "option_3", "text": "final", "isCorrect": false },
      { "id": "option_4", "text": "freeze", "isCorrect": true }
    ],
    "hint": "This method is used to make an object immutable.",
    "answerDescription": "'freeze' prevents further modifications to a module or an object, making it immutable."
  },
  {
    "id": "ruby_1357",
    "question": "How can you check if a class includes a specific module?",
    "options": [
      { "id": "option_1", "text": "class.contains?(ModuleName)", "isCorrect": false },
      { "id": "option_2", "text": "class.extends?(ModuleName)", "isCorrect": false },
      { "id": "option_3", "text": "class.has_module?(ModuleName)", "isCorrect": false },
      { "id": "option_4", "text": "class.include?(ModuleName)", "isCorrect": true }
    ],
    "hint": "This method checks if a module is part of a class’s ancestry.",
    "answerDescription": "'include?' is used to check if a class includes a specific module."
  },
  {
    "id": "ruby_1358",
    "question": "What is the purpose of the 'Module#constants' method?",
    "options": [
      { "id": "option_1", "text": "Lists all methods in a module", "isCorrect": false },
      { "id": "option_2", "text": "Lists all instances of a module", "isCorrect": false },
      { "id": "option_3", "text": "Lists all included modules", "isCorrect": false },
      { "id": "option_4", "text": "Lists all constants defined in a module", "isCorrect": true }
    ],
    "hint": "This method returns an array of names of constants defined in a module.",
    "answerDescription": "'Module#constants' returns all constants that are defined within a module."
  },
  {
    "id": "ruby_1359",
    "question": "How can you define a singleton method inside a module?",
    "options": [
      { "id": "option_1", "text": "Using 'singleton_method'", "isCorrect": false },
      { "id": "option_2", "text": "Using 'unique_def'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'self.singleton_method'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'def self.method_name'", "isCorrect": true }
    ],
    "hint": "This is the same way class methods are defined inside a module.",
    "answerDescription": "Using 'def self.method_name' inside a module defines a singleton (module-level) method."
  },
  {
    "id": "ruby_1360",
    "question": "Which module in Ruby provides iteration capabilities to collections?",
    "options": [
      { "id": "option_1", "text": "Iterable", "isCorrect": false },
      { "id": "option_2", "text": "Loopable", "isCorrect": false },
      { "id": "option_3", "text": "Traversable", "isCorrect": false },
      { "id": "option_4", "text": "Enumerable", "isCorrect": true }
    ],
    "hint": "This module provides methods like 'each', 'map', and 'reduce'.",
    "answerDescription": "The 'Enumerable' module allows iteration over collections and provides powerful traversal methods."
  },
  {
    "id": "ruby_1361",
    "question": "What happens if a module method has the same name as a method in a class it is included in?",
    "options": [
      { "id": "option_1", "text": "An error occurs", "isCorrect": false },
      { "id": "option_2", "text": "The module method is ignored", "isCorrect": false },
      { "id": "option_3", "text": "Both methods execute sequentially", "isCorrect": false },
      { "id": "option_4", "text": "The class method overrides the module method", "isCorrect": true }
    ],
    "hint": "Method lookup follows a specific order in Ruby.",
    "answerDescription": "When a module method has the same name as a class method, the class method takes precedence."
  },
  {
    "id": "ruby_1362",
    "question": "What is a benefit of using mixins over class inheritance in Ruby?",
    "options": [
      { "id": "option_1", "text": "It allows for multiple inheritance", "isCorrect": false },
      { "id": "option_2", "text": "It reduces memory usage", "isCorrect": false },
      { "id": "option_3", "text": "It prevents method conflicts", "isCorrect": false },
      { "id": "option_4", "text": "It promotes code reuse without deep inheritance", "isCorrect": true }
    ],
    "hint": "Mixins enable reusable behavior across different classes.",
    "answerDescription": "Mixins allow code reuse across multiple classes without the complexity of deep inheritance."
  },  {
    "id": "ruby_1363",
    "question": "What is a mixin in Ruby?",
    "options": [
      { "id": "option_1", "text": "A module used to add shared behavior to multiple classes", "isCorrect": true },
      { "id": "option_2", "text": "A type of Ruby class for inheritance", "isCorrect": false },
      { "id": "option_3", "text": "A way to declare private methods", "isCorrect": false },
      { "id": "option_4", "text": "A method for modifying instance variables", "isCorrect": false }
    ],
    "hint": "It allows for code reuse without using traditional inheritance.",
    "answerDescription": "A mixin is a module that is included in multiple classes to share behavior."
  },
  {
    "id": "ruby_1364",
    "question": "Which method can be used to add class methods from a module?",
    "options": [
      { "id": "option_1", "text": "extend", "isCorrect": true },
      { "id": "option_2", "text": "include", "isCorrect": false },
      { "id": "option_3", "text": "require", "isCorrect": false },
      { "id": "option_4", "text": "inherit", "isCorrect": false }
    ],
    "hint": "This method allows module methods to be used as class methods.",
    "answerDescription": "'extend' adds module methods as class methods."
  },
  {
    "id": "ruby_1365",
    "question": "which one is used to define a module in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the 'module' keyword", "isCorrect": true },
      { "id": "option_2", "text": "Using the 'class' keyword", "isCorrect": false },
      { "id": "option_3", "text": "Using the 'mixin' keyword", "isCorrect": false },
      { "id": "option_4", "text": "Using the 'define' keyword", "isCorrect": false }
    ],
    "hint": "This keyword is specifically used to create reusable modules.",
    "answerDescription": "Modules in Ruby are defined using the 'module' keyword."
  },
  {
    "id": "ruby_1366",
    "question": "What method returns an array of included modules for a class?",
    "options": [
      { "id": "option_1", "text": "included_modules", "isCorrect": true },
      { "id": "option_2", "text": "list_modules", "isCorrect": false },
      { "id": "option_3", "text": "modules_list", "isCorrect": false },
      { "id": "option_4", "text": "fetch_modules", "isCorrect": false }
    ],
    "hint": "This method returns a list of all modules included in a class.",
    "answerDescription": "'included_modules' provides an array of all modules mixed into a class."
  },
  {
    "id": "ruby_1367",
    "question": "How do you define a constant inside a module?",
    "options": [
      { "id": "option_1", "text": "By assigning a value to an uppercase variable", "isCorrect": true },
      { "id": "option_2", "text": "By using the 'constant' keyword", "isCorrect": false },
      { "id": "option_3", "text": "By using 'const'", "isCorrect": false },
      { "id": "option_4", "text": "By defining it inside a class inside the module", "isCorrect": false }
    ],
    "hint": "Constants in Ruby follow a naming convention.",
    "answerDescription": "A constant inside a module is defined using an uppercase variable name."
  },
  {
    "id": "ruby_1368",
    "question": "What method can check if a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "ancestors.include?(ModuleName)", "isCorrect": true },
      { "id": "option_2", "text": "has_module?(ModuleName)", "isCorrect": false },
      { "id": "option_3", "text": "is_part_of?(ModuleName)", "isCorrect": false },
      { "id": "option_4", "text": "modules.list?(ModuleName)", "isCorrect": false }
    ],
    "hint": "This method helps inspect a class’s hierarchy.",
    "answerDescription": "'ancestors.include?(ModuleName)' checks if a module is part of a class's ancestry."
  },
  {
    "id": "ruby_1369",
    "question": "How do you make a method private inside a module?",
    "options": [
      { "id": "option_1", "text": "Using 'private' before method definition", "isCorrect": true },
      { "id": "option_2", "text": "Using 'private_method'", "isCorrect": false },
      { "id": "option_3", "text": "Using 'hidden_method'", "isCorrect": false },
      { "id": "option_4", "text": "Using 'restrict'", "isCorrect": false }
    ],
    "hint": "This is the same way private methods are declared in classes.",
    "answerDescription": "'private' makes methods inside a module inaccessible from outside the module."
  },
  {
    "id": "ruby_1370",
    "question": "Which method is used to list all methods defined in a module?",
    "options": [
      { "id": "option_1", "text": "instance_methods", "isCorrect": true },
      { "id": "option_2", "text": "module_methods", "isCorrect": false },
      { "id": "option_3", "text": "list_methods", "isCorrect": false },
      { "id": "option_4", "text": "show_methods", "isCorrect": false }
    ],
    "hint": "This method helps to inspect the methods defined in a module.",
    "answerDescription": "'instance_methods' lists all instance methods defined in a module."
  },
  {
    "id": "ruby_1371",
    "question": "What is the scope of constants defined inside a module?",
    "options": [
      { "id": "option_1", "text": "They are accessible using 'ModuleName::ConstantName'", "isCorrect": true },
      { "id": "option_2", "text": "They are globally accessible", "isCorrect": false },
      { "id": "option_3", "text": "They are only accessible within the module", "isCorrect": false },
      { "id": "option_4", "text": "They are only accessible within included classes", "isCorrect": false }
    ],
    "hint": "Modules use a specific syntax for accessing constants.",
    "answerDescription": "Constants in a module are accessed using 'ModuleName::ConstantName'."
  },
  {
    "id": "ruby_1372",
    "question": "What is a common use case for modules in Ruby?",
    "options": [
      { "id": "option_1", "text": "To provide shared behavior across multiple classes", "isCorrect": true },
      { "id": "option_2", "text": "To define instance variables for a class", "isCorrect": false },
      { "id": "option_3", "text": "To act as an alternative to variables", "isCorrect": false },
      { "id": "option_4", "text": "To store global configurations", "isCorrect": false }
    ],
    "hint": "Modules allow classes to share behavior without inheritance.",
    "answerDescription": "Modules are commonly used to share behavior across multiple classes."
  },
  {
    "id": "ruby_1373",
    "question": "What keyword is used to include a module’s instance methods into a class?",
    "options": [
      { "id": "option_1", "text": "require", "isCorrect": false },
      { "id": "option_2", "text": "include", "isCorrect": true },
      { "id": "option_3", "text": "extend", "isCorrect": false },
      { "id": "option_4", "text": "inherit", "isCorrect": false }
    ],
    "hint": "This keyword allows instance methods from a module to be used in a class.",
    "answerDescription": "The 'include' keyword allows a module's instance methods to be used in a class."
  },
  {
    "id": "ruby_1374",
    "question": "What happens if a module and a class define a method with the same name?",
    "options": [
      { "id": "option_1", "text": "The module method takes precedence", "isCorrect": false },
      { "id": "option_2", "text": "The class method overrides the module method", "isCorrect": true },
      { "id": "option_3", "text": "An error occurs due to conflict", "isCorrect": false },
      { "id": "option_4", "text": "Both methods are merged", "isCorrect": false }
    ],
    "hint": "Method resolution follows the class’s hierarchy.",
    "answerDescription": "If a class defines a method with the same name as one from an included module, the class's method overrides the module method."
  },
  {
    "id": "ruby_1375",
    "question": "How do you access a module constant outside the module?",
    "options": [
      { "id": "option_1", "text": "Module.constant", "isCorrect": false },
      { "id": "option_2", "text": "ModuleName::CONSTANT_NAME", "isCorrect": true },
      { "id": "option_3", "text": "constant(ModuleName)", "isCorrect": false },
      { "id": "option_4", "text": "ModuleName.CONSTANT_NAME", "isCorrect": false }
    ],
    "hint": "Ruby uses a double colon (::) to access constants from modules.",
    "answerDescription": "Module constants are accessed using 'ModuleName::CONSTANT_NAME'."
  },
  {
    "id": "ruby_1376",
    "question": "What method lists all modules included in an object’s class?",
    "options": [
      { "id": "option_1", "text": "object.modules", "isCorrect": false },
      { "id": "option_2", "text": "object.class.included_modules", "isCorrect": true },
      { "id": "option_3", "text": "object.class.modules_list", "isCorrect": false },
      { "id": "option_4", "text": "object.list_modules", "isCorrect": false }
    ],
    "hint": "Use this method to see which modules a class has included.",
    "answerDescription": "To list all modules included in an object's class, use 'object.class.included_modules'."
  },
  {
    "id": "ruby_1377",
    "question": "What does the 'prepend' method do when used with a module?",
    "options": [
      { "id": "option_1", "text": "Replaces the class methods with module methods", "isCorrect": false },
      { "id": "option_2", "text": "Adds module methods before class methods in the method lookup chain", "isCorrect": true },
      { "id": "option_3", "text": "Ignores the module methods if class methods exist", "isCorrect": false },
      { "id": "option_4", "text": "Only allows constants from the module", "isCorrect": false }
    ],
    "hint": "Unlike 'include', this method prioritizes the module in method resolution.",
    "answerDescription": "'prepend' adds module methods before class methods in the method lookup chain."
  },
  {
    "id": "ruby_1378",
    "question": "How do you check if an object’s class has included a specific module?",
    "options": [
      { "id": "option_1", "text": "object.has_module?(ModuleName)", "isCorrect": false },
      { "id": "option_2", "text": "object.class.include?(ModuleName)", "isCorrect": true },
      { "id": "option_3", "text": "object.check_module(ModuleName)", "isCorrect": false },
      { "id": "option_4", "text": "object.module_list.include?(ModuleName)", "isCorrect": false }
    ],
    "hint": "Check if the module is included in the class hierarchy.",
    "answerDescription": "'object.class.include?(ModuleName)' checks if a module is included in a class."
  },
  {
    "id": "ruby_1379",
    "question": "Which method allows adding both instance and class methods from a module?",
    "options": [
      { "id": "option_1", "text": "include + extend", "isCorrect": false },
      { "id": "option_2", "text": "extend + prepend", "isCorrect": true },
      { "id": "option_3", "text": "require + include", "isCorrect": false },
      { "id": "option_4", "text": "mix + extend", "isCorrect": false }
    ],
    "hint": "'extend' adds class methods, while another method changes method lookup order.",
    "answerDescription": "'extend' adds class methods, while 'prepend' ensures module methods take precedence."
  },
  {
    "id": "ruby_1380",
    "question": "Which method is used to call a module method explicitly within a class?",
    "options": [
      { "id": "option_1", "text": "ModuleName.call_method", "isCorrect": false },
      { "id": "option_2", "text": "ModuleName.method_name", "isCorrect": true },
      { "id": "option_3", "text": "invoke ModuleName.method_name", "isCorrect": false },
      { "id": "option_4", "text": "ModuleName->method_name", "isCorrect": false }
    ],
    "hint": "Use the module name directly to call its methods.",
    "answerDescription": "Module methods can be called explicitly using 'ModuleName.method_name'."
  },
  {
    "id": "ruby_1381",
    "question": "What does 'self' refer to inside a module?",
    "options": [
      { "id": "option_1", "text": "The module itself", "isCorrect": false },
      { "id": "option_2", "text": "The current execution context", "isCorrect": true },
      { "id": "option_3", "text": "The calling object", "isCorrect": false },
      { "id": "option_4", "text": "A new instance of the module", "isCorrect": false }
    ],
    "hint": "Think of 'self' in terms of execution context rather than object instances.",
    "answerDescription": "'self' inside a module refers to the current execution context."
  },
  {
    "id": "ruby_1382",
    "question": "What is the key difference between 'include' and 'extend' in Ruby?",
    "options": [
      { "id": "option_1", "text": "'include' adds class methods, 'extend' adds instance methods", "isCorrect": false },
      { "id": "option_2", "text": "'include' adds instance methods, 'extend' adds class methods", "isCorrect": true },
      { "id": "option_3", "text": "'include' and 'extend' both add instance methods", "isCorrect": false },
      { "id": "option_4", "text": "'include' and 'extend' both add class methods", "isCorrect": false }
    ],
    "hint": "'include' affects instances, while 'extend' affects the class itself.",
    "answerDescription": "'include' adds instance methods to a class, while 'extend' adds class methods."
  },
  {
    "id": "ruby_1383",
    "question": "Which keyword is used to extend a class with module methods as class methods?",
    "options": [
      { "id": "option_1", "text": "include", "isCorrect": false },
      { "id": "option_2", "text": "require", "isCorrect": false },
      { "id": "option_3", "text": "extend", "isCorrect": true },
      { "id": "option_4", "text": "import", "isCorrect": false }
    ],
    "hint": "This keyword adds module methods directly to a class as class methods.",
    "answerDescription": "The 'extend' keyword allows a module’s methods to be used as class methods."
  },
  {
    "id": "ruby_1384",
    "question": "How can you check if a class includes a particular module?",
    "options": [
      { "id": "option_1", "text": "Class.includes?(ModuleName)", "isCorrect": false },
      { "id": "option_2", "text": "Class.has_module?(ModuleName)", "isCorrect": false },
      { "id": "option_3", "text": "Class.ancestors.include?(ModuleName)", "isCorrect": true },
      { "id": "option_4", "text": "Class.modules_list(ModuleName)", "isCorrect": false }
    ],
    "hint": "Check the class's ancestors list to see if the module is included.",
    "answerDescription": "'Class.ancestors.include?(ModuleName)' checks if a module is included in a class."
  },
  {
    "id": "ruby_1385",
    "question": "Which method returns an array of a class’s ancestors, including modules?",
    "options": [
      { "id": "option_1", "text": "class.parents", "isCorrect": false },
      { "id": "option_2", "text": "class.list_modules", "isCorrect": false },
      { "id": "option_3", "text": "class.ancestors", "isCorrect": true },
      { "id": "option_4", "text": "class.included_modules", "isCorrect": false }
    ],
    "hint": "This method includes both modules and superclasses.",
    "answerDescription": "'class.ancestors' returns an array of a class’s ancestors, including modules."
  },
  {
    "id": "ruby_1386",
    "question": "What does 'prepend' do differently compared to 'include'?",
    "options": [
      { "id": "option_1", "text": "It replaces class methods with module methods", "isCorrect": false },
      { "id": "option_2", "text": "It ignores module methods if class methods exist", "isCorrect": false },
      { "id": "option_3", "text": "It inserts module methods before the class methods in the method lookup chain", "isCorrect": true },
      { "id": "option_4", "text": "It only includes constants from the module", "isCorrect": false }
    ],
    "hint": "'prepend' affects method resolution order differently than 'include'.",
    "answerDescription": "'prepend' inserts module methods before class methods in the method lookup chain."
  },
  {
    "id": "ruby_1387",
    "question": "Which method allows you to check all modules included in a class?",
    "options": [
      { "id": "option_1", "text": "class.modules_list", "isCorrect": false },
      { "id": "option_2", "text": "class.list_all_modules", "isCorrect": false },
      { "id": "option_3", "text": "class.included_modules", "isCorrect": true },
      { "id": "option_4", "text": "class.module_names", "isCorrect": false }
    ],
    "hint": "This method returns only the modules included in a class, excluding superclasses.",
    "answerDescription": "'class.included_modules' lists all modules included in a class."
  },
  {
    "id": "ruby_1388",
    "question": "What happens if a module and a class define the same method?",
    "options": [
      { "id": "option_1", "text": "An error occurs due to conflict", "isCorrect": false },
      { "id": "option_2", "text": "The module method takes precedence", "isCorrect": false },
      { "id": "option_3", "text": "The class method overrides the module method", "isCorrect": true },
      { "id": "option_4", "text": "Both methods are merged", "isCorrect": false }
    ],
    "hint": "Ruby follows method lookup order with class methods taking priority.",
    "answerDescription": "If a class defines a method with the same name as one from an included module, the class method overrides the module method."
  },
  {
    "id": "ruby_1389",
    "question": "Which method is used to explicitly call a module method from within a class?",
    "options": [
      { "id": "option_1", "text": "invoke ModuleName.method_name", "isCorrect": false },
      { "id": "option_2", "text": "ModuleName->method_name", "isCorrect": false },
      { "id": "option_3", "text": "ModuleName.method_name", "isCorrect": true },
      { "id": "option_4", "text": "ModuleName::method_name()", "isCorrect": false }
    ],
    "hint": "You can use the module name directly to call its methods.",
    "answerDescription": "Module methods can be called explicitly using 'ModuleName.method_name'."
  },
  {
    "id": "ruby_1390",
    "question": "What keyword is used to define a module in Ruby?",
    "options": [
      { "id": "option_1", "text": "class", "isCorrect": false },
      { "id": "option_2", "text": "define", "isCorrect": false },
      { "id": "option_3", "text": "module", "isCorrect": true },
      { "id": "option_4", "text": "namespace", "isCorrect": false }
    ],
    "hint": "Modules in Ruby are defined using a specific keyword different from 'class'.",
    "answerDescription": "Modules are defined using the 'module' keyword in Ruby."
  },
  {
    "id": "ruby_1391",
    "question": "Which method allows you to check if an object is an instance of a module?",
    "options": [
      { "id": "option_1", "text": "object.check_module?(ModuleName)", "isCorrect": false },
      { "id": "option_2", "text": "object.is_module?(ModuleName)", "isCorrect": false },
      { "id": "option_3", "text": "object.is_a?(ModuleName)", "isCorrect": true },
      { "id": "option_4", "text": "object.module_type?(ModuleName)", "isCorrect": false }
    ],
    "hint": "Use this method to check if an object belongs to a class or module.",
    "answerDescription": "'object.is_a?(ModuleName)' checks if an object is an instance of a module."
  },
  {
    "id": "ruby_1392",
    "question": "Which method can be used to list all constants defined in a module?",
    "options": [
      { "id": "option_1", "text": "ModuleName.get_constants", "isCorrect": false },
      { "id": "option_2", "text": "ModuleName.constants_list", "isCorrect": false },
      { "id": "option_3", "text": "ModuleName.constants", "isCorrect": true },
      { "id": "option_4", "text": "ModuleName.list_all_constants", "isCorrect": false }
    ],
    "hint": "This method returns an array of all constant names defined within a module.",
    "answerDescription": "'ModuleName.constants' lists all constants defined in a module."
  },
  {
    "id": "ruby_1393",
    "question": "What is the purpose of mixins in Ruby?",
    "options": [
      { "id": "option_1", "text": "To inherit from multiple classes", "isCorrect": false },
      { "id": "option_2", "text": "To replace the need for object-oriented programming", "isCorrect": false },
      { "id": "option_3", "text": "To share functionality between classes without inheritance", "isCorrect": true },
      { "id": "option_4", "text": "To override all instance methods in a class", "isCorrect": false }
    ],
    "hint": "Mixins allow code reuse without requiring multiple inheritance.",
    "answerDescription": "Mixins in Ruby are used to share functionality across classes without direct inheritance."
  },
  {
    "id": "ruby_1394",
    "question": "Which method checks if a module is included in a class?",
    "options": [
      { "id": "option_1", "text": "Module.used_by?", "isCorrect": false },
      { "id": "option_2", "text": "Class.uses_module?", "isCorrect": false },
      { "id": "option_3", "text": "Class.include?(ModuleName)", "isCorrect": true },
      { "id": "option_4", "text": "Module.check_class?", "isCorrect": false }
    ],
    "hint": "This method checks whether a module is mixed into a class.",
    "answerDescription": "'Class.include?(ModuleName)' checks if a module is included in a class."
  },
  {
    "id": "ruby_1395",
    "question": "Which method lists the modules included in an object’s class?",
    "options": [
      { "id": "option_1", "text": "Object.list_modules", "isCorrect": false },
      { "id": "option_2", "text": "Object.module_names", "isCorrect": false },
      { "id": "option_3", "text": "Object.class.included_modules", "isCorrect": true },
      { "id": "option_4", "text": "Object.get_mixin", "isCorrect": false }
    ],
    "hint": "This method retrieves all mixins included in an object's class.",
    "answerDescription": "'Object.class.included_modules' lists the modules included in an object’s class."
  },
  {
    "id": "ruby_1396",
    "question": "How can you override a module method in a class?",
    "options": [
      { "id": "option_1", "text": "Using 'super' only", "isCorrect": false },
      { "id": "option_2", "text": "Using 'prepend'", "isCorrect": false },
      { "id": "option_3", "text": "By redefining the method in the class", "isCorrect": true },
      { "id": "option_4", "text": "It is not possible to override module methods", "isCorrect": false }
    ],
    "hint": "A method defined in a class takes precedence over a module method.",
    "answerDescription": "A class can override a module method by redefining it within the class."
  },
  {
    "id": "ruby_1397",
    "question": "What does the 'super' keyword do when used inside a method included from a module?",
    "options": [
      { "id": "option_1", "text": "Calls the module method again", "isCorrect": false },
      { "id": "option_2", "text": "Raises an error", "isCorrect": false },
      { "id": "option_3", "text": "Calls the next method in the method lookup chain", "isCorrect": true },
      { "id": "option_4", "text": "Removes the method from the class", "isCorrect": false }
    ],
    "hint": "'super' helps in calling methods from the superclass or module.",
    "answerDescription": "'super' calls the next method in the method lookup chain, which may be in a module or superclass."
  },
  {
    "id": "ruby_1398",
    "question": "Which module provides mathematical constants and functions in Ruby?",
    "options": [
      { "id": "option_1", "text": "MathTools", "isCorrect": false },
      { "id": "option_2", "text": "Calculator", "isCorrect": false },
      { "id": "option_3", "text": "Math", "isCorrect": true },
      { "id": "option_4", "text": "RubyMath", "isCorrect": false }
    ],
    "hint": "This module provides constants like PI and methods like sqrt.",
    "answerDescription": "The 'Math' module in Ruby provides mathematical functions and constants."
  },
  {
    "id": "ruby_1399",
    "question": "What happens if a module is included multiple times in the same class?",
    "options": [
      { "id": "option_1", "text": "Ruby raises an error", "isCorrect": false },
      { "id": "option_2", "text": "Methods are duplicated in the class", "isCorrect": false },
      { "id": "option_3", "text": "The module is included only once", "isCorrect": true },
      { "id": "option_4", "text": "All module methods are removed", "isCorrect": false }
    ],
    "hint": "Ruby prevents duplicate inclusions of a module.",
    "answerDescription": "If a module is included multiple times in a class, it is only included once."
  },
  {
    "id": "ruby_1400",
    "question": "Which module allows debugging in Ruby by providing methods like 'p' and 'pp'?",
    "options": [
      { "id": "option_1", "text": "PrintTools", "isCorrect": false },
      { "id": "option_2", "text": "DebuggingHelper", "isCorrect": false },
      { "id": "option_3", "text": "Kernel", "isCorrect": true },
      { "id": "option_4", "text": "ConsoleHelper", "isCorrect": false }
    ],
    "hint": "This module contains methods that are available to all Ruby objects.",
    "answerDescription": "The 'Kernel' module provides debugging methods like 'p' and 'pp'."
  },
  {
    "id": "ruby_1401",
    "question": "What happens when a class extends a module?",
    "options": [
      { "id": "option_1", "text": "The module’s methods become instance methods", "isCorrect": false },
      { "id": "option_2", "text": "The module’s methods are ignored", "isCorrect": false },
      { "id": "option_3", "text": "The module’s methods become class methods", "isCorrect": true },
      { "id": "option_4", "text": "Ruby raises an error", "isCorrect": false }
    ],
    "hint": "Extending a module makes its methods available as class methods.",
    "answerDescription": "When a class extends a module, the module’s methods become class methods."
  },
  {
    "id": "ruby_1402",
    "question": "Which module provides support for enumeration in Ruby?",
    "options": [
      { "id": "option_1", "text": "ListHandler", "isCorrect": false },
      { "id": "option_2", "text": "Collection", "isCorrect": false },
      { "id": "option_3", "text": "Enumerable", "isCorrect": true },
      { "id": "option_4", "text": "Iterator", "isCorrect": false }
    ],
    "hint": "This module provides methods like 'each', 'map', and 'select'.",
    "answerDescription": "The 'Enumerable' module provides support for iteration methods in Ruby."
  },
  {
    "id": "ruby_1403",
    "question": "In the MVC architecture, what is the primary role of the Model?",
    "options": [
      { "id": "option_1", "text": "To handle user input", "isCorrect": false },
      { "id": "option_2", "text": "To manage application data and business logic", "isCorrect": true },
      { "id": "option_3", "text": "To display information to users", "isCorrect": false },
      { "id": "option_4", "text": "To control the flow of the application", "isCorrect": false }
    ],
    "hint": "The Model is responsible for managing the data and logic of the application.",
    "answerDescription": "The Model in MVC handles data, logic, and rules of the application."
  },
  {
    "id": "ruby_1404",
    "question": "Which component of MVC is responsible for rendering views to the user?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": true },
      { "id": "option_3", "text": "Controller", "isCorrect": false },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "The View is responsible for the presentation layer in MVC.",
    "answerDescription": "The View handles UI rendering and user interactions in an MVC framework."
  },
  {
    "id": "ruby_1405",
    "question": "Which Ruby framework is most commonly associated with MVC architecture?",
    "options": [
      { "id": "option_1", "text": "Sinatra", "isCorrect": false },
      { "id": "option_2", "text": "Rails", "isCorrect": true },
      { "id": "option_3", "text": "Padrino", "isCorrect": false },
      { "id": "option_4", "text": "Hanami", "isCorrect": false }
    ],
    "hint": "This framework follows the 'Convention over Configuration' principle.",
    "answerDescription": "Ruby on Rails is a web application framework that follows the MVC pattern."
  },
  {
    "id": "ruby_1406",
    "question": "What is the main function of the Controller in MVC?",
    "options": [
      { "id": "option_1", "text": "To display data to users", "isCorrect": false },
      { "id": "option_2", "text": "To manage the database", "isCorrect": false },
      { "id": "option_3", "text": "To handle user requests and update the Model or View", "isCorrect": true },
      { "id": "option_4", "text": "To store business logic", "isCorrect": false }
    ],
    "hint": "The Controller acts as an intermediary between the Model and View.",
    "answerDescription": "The Controller processes user input, interacts with the Model, and returns the appropriate View."
  },
  {
    "id": "ruby_1407",
    "question": "Which of the following best describes the relationship between Model and View in MVC?",
    "options": [
      { "id": "option_1", "text": "The Model directly updates the View", "isCorrect": false },
      { "id": "option_2", "text": "The View fetches data directly from the Model", "isCorrect": false },
      { "id": "option_3", "text": "The Controller acts as a mediator between them", "isCorrect": true },
      { "id": "option_4", "text": "The Model and View are independent of each other", "isCorrect": false }
    ],
    "hint": "The Controller handles communication between Model and View.",
    "answerDescription": "In MVC, the Controller updates the Model based on user input and then updates the View accordingly."
  },
  {
    "id": "ruby_1408",
    "question": "In a Ruby on Rails application, where are controller files typically stored?",
    "options": [
      { "id": "option_1", "text": "app/models/", "isCorrect": false },
      { "id": "option_2", "text": "app/views/", "isCorrect": false },
      { "id": "option_3", "text": "lib/controllers/", "isCorrect": false },
      { "id": "option_4", "text": "app/controllers/", "isCorrect": true }
    ],
    "hint": "Controllers are stored in the 'app' directory of a Rails application.",
    "answerDescription": "Controller files in Rails are located in the 'app/controllers/' directory."
  },
  {
    "id": "ruby_1409",
    "question": "Which of the following best describes the role of Routes in MVC architecture?",
    "options": [
      { "id": "option_1", "text": "They define how data is stored in the database", "isCorrect": false },
      { "id": "option_2", "text": "They handle user authentication", "isCorrect": false },
      { "id": "option_3", "text": "They store business logic", "isCorrect": false },
      { "id": "option_4", "text": "They map incoming HTTP requests to controller actions", "isCorrect": true }
    ],
    "hint": "Routes in Rails are defined in 'config/routes.rb'.",
    "answerDescription": "Routes in MVC define how HTTP requests are directed to controller actions."
  },
  {
    "id": "ruby_1410",
    "question": "Which Rails command generates a new controller?",
    "options": [
      { "id": "option_1", "text": "rails new controller", "isCorrect": false },
      { "id": "option_2", "text": "rails controller generate", "isCorrect": false },
      { "id": "option_3", "text": "rails generate model", "isCorrect": false },
      { "id": "option_4", "text": "rails generate controller", "isCorrect": true }
    ],
    "hint": "The command starts with 'rails generate'.",
    "answerDescription": "To create a new controller in Rails, use 'rails generate controller ControllerName'."
  },
  {
    "id": "ruby_1411",
    "question": "In Rails MVC, what is the purpose of the 'before_action' filter in controllers?",
    "options": [
      { "id": "option_1", "text": "To define the order of database migrations", "isCorrect": false },
      { "id": "option_2", "text": "To fetch data from the Model before rendering the View", "isCorrect": false },
      { "id": "option_3", "text": "To create new database tables", "isCorrect": false },
      { "id": "option_4", "text": "To execute a method before certain controller actions", "isCorrect": true }
    ],
    "hint": "This filter is often used for authentication and setting variables.",
    "answerDescription": "In Rails, 'before_action' executes a specified method before controller actions."
  },
  {
    "id": "ruby_1412",
    "question": "Which of the following file types are typically used for Views in a Rails application?",
    "options": [
      { "id": "option_1", "text": ".rb", "isCorrect": false },
      { "id": "option_2", "text": ".yaml", "isCorrect": false },
      { "id": "option_3", "text": ".json", "isCorrect": false },
      { "id": "option_4", "text": ".erb", "isCorrect": true }
    ],
    "hint": "Rails uses embedded Ruby for rendering Views.",
    "answerDescription": "Views in Rails commonly use '.erb' files for HTML templates with embedded Ruby."
  },
  {
    "id": "ruby_1413",
    "question": "In Rails, which of the following best describes 'render' in a controller?",
    "options": [
      { "id": "option_1", "text": "It redirects the user to another page", "isCorrect": false },
      { "id": "option_2", "text": "It queries the database for records", "isCorrect": false },
      { "id": "option_3", "text": "It processes form submissions", "isCorrect": false },
      { "id": "option_4", "text": "It displays a specific View template", "isCorrect": true }
    ],
    "hint": "The 'render' method is used to display Views.",
    "answerDescription": "In Rails, 'render' is used to display specific View templates from a controller."
  },
  {
    "id": "ruby_1414",
    "question": "Which of the following is an advantage of using MVC architecture?",
    "options": [
      { "id": "option_1", "text": "It mixes business logic with presentation", "isCorrect": false },
      { "id": "option_2", "text": "It avoids the need for database interactions", "isCorrect": false },
      { "id": "option_3", "text": "It removes the need for routing", "isCorrect": false },
      { "id": "option_4", "text": "It promotes separation of concerns", "isCorrect": true }
    ],
    "hint": "MVC divides responsibilities into three distinct layers.",
    "answerDescription": "MVC helps maintain code organization by separating concerns into Models, Views, and Controllers."
  },
  {
    "id": "ruby_1415",
    "question": "Which directory in a Rails project typically contains the database schema?",
    "options": [
      { "id": "option_1", "text": "app/models", "isCorrect": false },
      { "id": "option_2", "text": "app/controllers", "isCorrect": false },
      { "id": "option_3", "text": "config/routes", "isCorrect": false },
      { "id": "option_4", "text": "db/", "isCorrect": true }
    ],
    "hint": "This directory contains migration and schema files.",
    "answerDescription": "The 'db/' directory in a Rails project contains the database schema and migrations."
  },
  {
    "id": "ruby_1416",
    "question": "What does 'strong parameters' do in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "It restricts access to controller actions", "isCorrect": false },
      { "id": "option_2", "text": "It enforces authentication in the Model", "isCorrect": false },
      { "id": "option_3", "text": "It defines the layout for views", "isCorrect": false },
      { "id": "option_4", "text": "It permits only specified parameters to be accepted in a request", "isCorrect": true }
    ],
    "hint": "It is used to prevent mass-assignment vulnerabilities.",
    "answerDescription": "Strong parameters in Rails protect against mass-assignment vulnerabilities by explicitly permitting attributes."
  },
  {
    "id": "ruby_1417",
    "question": "Which method is used to redirect a user to a different URL in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "send", "isCorrect": false },
      { "id": "option_2", "text": "link_to", "isCorrect": false },
      { "id": "option_3", "text": "navigate", "isCorrect": false },
      { "id": "option_4", "text": "redirect_to", "isCorrect": true }
    ],
    "hint": "This method is used for sending HTTP redirects in Rails.",
    "answerDescription": "In Rails, 'redirect_to' is used to send an HTTP redirect to another URL or action."
  },
  {
    "id": "ruby_1418",
    "question": "Which component of MVC is responsible for interacting with the database in Rails?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": true },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": false },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "It handles business logic and database interactions.",
    "answerDescription": "The Model in MVC is responsible for handling business logic and interacting with the database."
  },
  {
    "id": "ruby_1419",
    "question": "What is the primary role of the View in the MVC pattern?",
    "options": [
      { "id": "option_1", "text": "To present data to the user", "isCorrect": true },
      { "id": "option_2", "text": "To process business logic", "isCorrect": false },
      { "id": "option_3", "text": "To manage HTTP requests", "isCorrect": false },
      { "id": "option_4", "text": "To store database records", "isCorrect": false }
    ],
    "hint": "Views are responsible for rendering the user interface.",
    "answerDescription": "The View in MVC handles presenting data to the user, often using templates."
  },
  {
    "id": "ruby_1420",
    "question": "Which file in a Rails application defines routes?",
    "options": [
      { "id": "option_1", "text": "config/routes.rb", "isCorrect": true },
      { "id": "option_2", "text": "app/controllers/routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "app/views/routes.html.erb", "isCorrect": false },
      { "id": "option_4", "text": "db/routes.sql", "isCorrect": false }
    ],
    "hint": "This file is located inside the 'config' directory.",
    "answerDescription": "The 'config/routes.rb' file in Rails defines how requests are mapped to controllers."
  },
  {
    "id": "ruby_1421",
    "question": "What command generates a new Rails application?",
    "options": [
      { "id": "option_1", "text": "rails new app_name", "isCorrect": true },
      { "id": "option_2", "text": "rails create app_name", "isCorrect": false },
      { "id": "option_3", "text": "rails generate app_name", "isCorrect": false },
      { "id": "option_4", "text": "rails build app_name", "isCorrect": false }
    ],
    "hint": "The command starts with 'rails new'.",
    "answerDescription": "To create a new Rails application, use 'rails new app_name'."
  },
  {
    "id": "ruby_1422",
    "question": "Which Rails component processes user requests and selects the correct View?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "Router", "isCorrect": false },
      { "id": "option_4", "text": "Database", "isCorrect": false }
    ],
    "hint": "This component acts as an intermediary between Model and View.",
    "answerDescription": "Controllers in Rails handle user requests, interact with the Model, and render appropriate Views."
  },
  {
    "id": "ruby_1423",
    "question": "Which of the following correctly initializes a new Rails controller?",
    "options": [
      { "id": "option_1", "text": "rails generate controller Users", "isCorrect": true },
      { "id": "option_2", "text": "rails new controller Users", "isCorrect": false },
      { "id": "option_3", "text": "rails create controller Users", "isCorrect": false },
      { "id": "option_4", "text": "rails scaffold controller Users", "isCorrect": false }
    ],
    "hint": "The command starts with 'rails generate'.",
    "answerDescription": "To generate a new controller in Rails, use 'rails generate controller ControllerName'."
  },
  {
    "id": "ruby_1424",
    "question": "Which helper method is used in Rails Views to create a hyperlink?",
    "options": [
      { "id": "option_1", "text": "link_to", "isCorrect": true },
      { "id": "option_2", "text": "a_tag", "isCorrect": false },
      { "id": "option_3", "text": "create_link", "isCorrect": false },
      { "id": "option_4", "text": "hyperlink_to", "isCorrect": false }
    ],
    "hint": "The method name follows the format: 'link_to 'Text', URL'.",
    "answerDescription": "Rails provides the 'link_to' helper method to generate hyperlinks in Views."
  },
  {
    "id": "ruby_1425",
    "question": "What is the default database used in a new Rails application?",
    "options": [
      { "id": "option_1", "text": "SQLite", "isCorrect": true },
      { "id": "option_2", "text": "PostgreSQL", "isCorrect": false },
      { "id": "option_3", "text": "MySQL", "isCorrect": false },
      { "id": "option_4", "text": "MongoDB", "isCorrect": false }
    ],
    "hint": "It is a lightweight, file-based database used by default.",
    "answerDescription": "SQLite is the default database for new Rails applications unless another database is specified."
  },
  {
    "id": "ruby_1426",
    "question": "Which method is commonly used to find a record by its primary key in Rails?",
    "options": [
      { "id": "option_1", "text": "find", "isCorrect": true },
      { "id": "option_2", "text": "where", "isCorrect": false },
      { "id": "option_3", "text": "lookup", "isCorrect": false },
      { "id": "option_4", "text": "select", "isCorrect": false }
    ],
    "hint": "This method retrieves a record using its ID.",
    "answerDescription": "The 'find' method in Rails retrieves a record by its primary key (ID)."
  },
  {
    "id": "ruby_1427",
    "question": "Which file in a Rails application contains the database configuration settings?",
    "options": [
      { "id": "option_1", "text": "config/database.yml", "isCorrect": true },
      { "id": "option_2", "text": "db/schema.rb", "isCorrect": false },
      { "id": "option_3", "text": "config/routes.rb", "isCorrect": false },
      { "id": "option_4", "text": "app/models/database.rb", "isCorrect": false }
    ],
    "hint": "This YAML file stores database connection details.",
    "answerDescription": "In Rails, 'config/database.yml' defines the database settings for different environments."
  },
  {
    "id": "ruby_1428",
    "question": "In Rails, which component handles user input and updates the Model?",
    "options": [
      { "id": "option_1", "text": "View", "isCorrect": false },
      { "id": "option_2", "text": "Controller", "isCorrect": true },
      { "id": "option_3", "text": "Model", "isCorrect": false },
      { "id": "option_4", "text": "Database", "isCorrect": false }
    ],
    "hint": "It acts as an intermediary between Model and View.",
    "answerDescription": "The Controller processes user input, updates the Model, and selects the appropriate View."
  },
  {
    "id": "ruby_1429",
    "question": "Which method is used to define a route in Rails?",
    "options": [
      { "id": "option_1", "text": "define_route", "isCorrect": false },
      { "id": "option_2", "text": "get", "isCorrect": true },
      { "id": "option_3", "text": "route_to", "isCorrect": false },
      { "id": "option_4", "text": "create_path", "isCorrect": false }
    ],
    "hint": "The method specifies HTTP verb and path.",
    "answerDescription": "In Rails, the 'get' method is used to define a route in 'config/routes.rb'."
  },
  {
    "id": "ruby_1430",
    "question": "Which command generates a new model in Rails?",
    "options": [
      { "id": "option_1", "text": "rails make model User", "isCorrect": false },
      { "id": "option_2", "text": "rails generate model User", "isCorrect": true },
      { "id": "option_3", "text": "rails new model User", "isCorrect": false },
      { "id": "option_4", "text": "rails scaffold model User", "isCorrect": false }
    ],
    "hint": "Use 'rails generate' to create a new model.",
    "answerDescription": "To create a model, use 'rails generate model ModelName'."
  },
  {
    "id": "ruby_1431",
    "question": "Which ActiveRecord method is used to retrieve all records from a model?",
    "options": [
      { "id": "option_1", "text": "find_all", "isCorrect": false },
      { "id": "option_2", "text": "all", "isCorrect": true },
      { "id": "option_3", "text": "select_all", "isCorrect": false },
      { "id": "option_4", "text": "fetch", "isCorrect": false }
    ],
    "hint": "This method retrieves all rows from the table.",
    "answerDescription": "'all' returns all records of a model in Rails ActiveRecord."
  },
  {
    "id": "ruby_1432",
    "question": "Which file contains the database schema in a Rails application?",
    "options": [
      { "id": "option_1", "text": "config/database.yml", "isCorrect": false },
      { "id": "option_2", "text": "db/schema.rb", "isCorrect": true },
      { "id": "option_3", "text": "db/migrate/schema.rb", "isCorrect": false },
      { "id": "option_4", "text": "app/models/schema.rb", "isCorrect": false }
    ],
    "hint": "This file is located inside the 'db' directory.",
    "answerDescription": "The 'db/schema.rb' file stores the database schema in Rails."
  },
  {
    "id": "ruby_1433",
    "question": "Which method in Rails is used to validate model attributes?",
    "options": [
      { "id": "option_1", "text": "check_field", "isCorrect": false },
      { "id": "option_2", "text": "validates", "isCorrect": true },
      { "id": "option_3", "text": "ensure_valid", "isCorrect": false },
      { "id": "option_4", "text": "validate_model", "isCorrect": false }
    ],
    "hint": "This method enforces data integrity in models.",
    "answerDescription": "'validates' is used in models to enforce attribute validations."
  },
  {
    "id": "ruby_1434",
    "question": "What does the 'rails routes' command do?",
    "options": [
      { "id": "option_1", "text": "Lists all database tables", "isCorrect": false },
      { "id": "option_2", "text": "Displays all defined routes", "isCorrect": true },
      { "id": "option_3", "text": "Generates a new route", "isCorrect": false },
      { "id": "option_4", "text": "Runs the Rails server", "isCorrect": false }
    ],
    "hint": "This command helps debug route configurations.",
    "answerDescription": "'rails routes' lists all available routes in a Rails application."
  },
  {
    "id": "ruby_1435",
    "question": "Which Rails component is primarily responsible for rendering HTML?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": true },
      { "id": "option_3", "text": "Controller", "isCorrect": false },
      { "id": "option_4", "text": "Database", "isCorrect": false }
    ],
    "hint": "This component interacts with templates to present data.",
    "answerDescription": "Views in Rails are responsible for rendering HTML content."
  },
  {
    "id": "ruby_1436",
    "question": "Which Rails method redirects users to another URL?",
    "options": [
      { "id": "option_1", "text": "send_to", "isCorrect": false },
      { "id": "option_2", "text": "redirect_to", "isCorrect": true },
      { "id": "option_3", "text": "go_to", "isCorrect": false },
      { "id": "option_4", "text": "navigate_to", "isCorrect": false }
    ],
    "hint": "This method is commonly used in controllers.",
    "answerDescription": "'redirect_to' sends users to a different page in Rails."
  },
  {
    "id": "ruby_1437",
    "question": "What is the purpose of the 'before_action' filter in Rails?",
    "options": [
      { "id": "option_1", "text": "To execute code before a controller action", "isCorrect": false },
      { "id": "option_2", "text": "To filter database queries", "isCorrect": true },
      { "id": "option_3", "text": "To process form data", "isCorrect": false },
      { "id": "option_4", "text": "To define model relationships", "isCorrect": false }
    ],
    "hint": "It is used in controllers to execute actions before the main action.",
    "answerDescription": "'before_action' is a Rails filter that runs code before controller actions."
  },
  {
    "id": "ruby_1438",
    "question": "Which Rails component is responsible for interacting with the database?",
    "options": [
      { "id": "option_1", "text": "View", "isCorrect": false },
      { "id": "option_2", "text": "Controller", "isCorrect": false },
      { "id": "option_3", "text": "Model", "isCorrect": true },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "It handles data logic and interactions with the database.",
    "answerDescription": "The Model in Rails is responsible for handling database interactions using ActiveRecord."
  },
  {
    "id": "ruby_1439",
    "question": "What does the 'rails new myapp' command do?",
    "options": [
      { "id": "option_1", "text": "Creates a new database", "isCorrect": false },
      { "id": "option_2", "text": "Starts the Rails server", "isCorrect": false },
      { "id": "option_3", "text": "Generates a new Rails application", "isCorrect": true },
      { "id": "option_4", "text": "Creates a new Rails model", "isCorrect": false }
    ],
    "hint": "This command is used to initialize a new Rails project.",
    "answerDescription": "The 'rails new myapp' command generates a new Rails application with default directory structures."
  },
  {
    "id": "ruby_1440",
    "question": "Which method is used to define a one-to-many relationship in Rails models?",
    "options": [
      { "id": "option_1", "text": "has_many_records", "isCorrect": false },
      { "id": "option_2", "text": "one_to_many", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "This method is defined in the parent model.",
    "answerDescription": "The 'has_many' association is used to establish a one-to-many relationship between models."
  },
  {
    "id": "ruby_1441",
    "question": "What is the default database used in a new Rails application?",
    "options": [
      { "id": "option_1", "text": "MySQL", "isCorrect": false },
      { "id": "option_2", "text": "PostgreSQL", "isCorrect": false },
      { "id": "option_3", "text": "SQLite", "isCorrect": true },
      { "id": "option_4", "text": "MongoDB", "isCorrect": false }
    ],
    "hint": "This database is lightweight and file-based.",
    "answerDescription": "SQLite is the default database for Rails applications unless another is specified."
  },
  {
    "id": "ruby_1442",
    "question": "Which command is used to start the Rails server?",
    "options": [
      { "id": "option_1", "text": "rails launch", "isCorrect": false },
      { "id": "option_2", "text": "rails start", "isCorrect": false },
      { "id": "option_3", "text": "rails server", "isCorrect": true },
      { "id": "option_4", "text": "rails run", "isCorrect": false }
    ],
    "hint": "This command starts the web server for development.",
    "answerDescription": "Running 'rails server' (or 'rails s') starts the Rails web server."
  },
  {
    "id": "ruby_1443",
    "question": "What is the purpose of migrations in Rails?",
    "options": [
      { "id": "option_1", "text": "To store user data", "isCorrect": false },
      { "id": "option_2", "text": "To manage views", "isCorrect": false },
      { "id": "option_3", "text": "To modify the database schema", "isCorrect": true },
      { "id": "option_4", "text": "To create controllers", "isCorrect": false }
    ],
    "hint": "These files help with database schema evolution.",
    "answerDescription": "Migrations allow Rails developers to create, modify, and update database schemas."
  },
  {
    "id": "ruby_1444",
    "question": "Which method retrieves the first record from a Rails model?",
    "options": [
      { "id": "option_1", "text": "fetch_first", "isCorrect": false },
      { "id": "option_2", "text": "retrieve", "isCorrect": false },
      { "id": "option_3", "text": "first", "isCorrect": true },
      { "id": "option_4", "text": "get_first", "isCorrect": false }
    ],
    "hint": "It returns the first row from the database table.",
    "answerDescription": "The 'first' method in ActiveRecord retrieves the first record from a model."
  },
  {
    "id": "ruby_1445",
    "question": "How does Rails handle session data by default?",
    "options": [
      { "id": "option_1", "text": "Stores it in a cookie", "isCorrect": false },
      { "id": "option_2", "text": "Saves it in localStorage", "isCorrect": false },
      { "id": "option_3", "text": "Uses cookie-based storage", "isCorrect": true },
      { "id": "option_4", "text": "Stores it in a database", "isCorrect": false }
    ],
    "hint": "The default storage is a client-side mechanism.",
    "answerDescription": "Rails uses cookie-based session storage by default."
  },
  {
    "id": "ruby_1446",
    "question": "Which command is used to apply database migrations in Rails?",
    "options": [
      { "id": "option_1", "text": "rails update", "isCorrect": false },
      { "id": "option_2", "text": "rails sync", "isCorrect": false },
      { "id": "option_3", "text": "rails db:migrate", "isCorrect": true },
      { "id": "option_4", "text": "rails execute", "isCorrect": false }
    ],
    "hint": "This command updates the database structure.",
    "answerDescription": "The 'rails db:migrate' command applies pending migrations to update the database schema."
  },
  {
    "id": "ruby_1447",
    "question": "Which Rails command generates a new controller?",
    "options": [
      { "id": "option_1", "text": "rails create controller", "isCorrect": false },
      { "id": "option_2", "text": "rails make controller", "isCorrect": false },
      { "id": "option_3", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_4", "text": "rails scaffold controller", "isCorrect": false }
    ],
    "hint": "It uses 'generate' to create files for MVC components.",
    "answerDescription": "The 'rails generate controller' command creates a new controller in Rails."
  },
  {
    "id": "ruby_1448",
    "question": "What is the main responsibility of the Controller in Rails?",
    "options": [
      { "id": "option_1", "text": "Handles database interactions", "isCorrect": false },
      { "id": "option_2", "text": "Renders HTML templates", "isCorrect": false },
      { "id": "option_3", "text": "Processes user input and coordinates the model and view", "isCorrect": true },
      { "id": "option_4", "text": "Defines URL routes", "isCorrect": false }
    ],
    "hint": "The Controller acts as a bridge between the Model and View.",
    "answerDescription": "The Controller in Rails is responsible for handling user requests, calling the Model for data, and selecting the appropriate View."
  },
  {
    "id": "ruby_1449",
    "question": "Which command generates a new Rails model?",
    "options": [
      { "id": "option_1", "text": "rails make model", "isCorrect": false },
      { "id": "option_2", "text": "rails new model", "isCorrect": false },
      { "id": "option_3", "text": "rails generate model", "isCorrect": true },
      { "id": "option_4", "text": "rails scaffold model", "isCorrect": false }
    ],
    "hint": "It uses the 'generate' command to create model files.",
    "answerDescription": "The 'rails generate model' command creates a new model file and a migration file for defining database tables."
  },
  {
    "id": "ruby_1450",
    "question": "Which method establishes a one-to-one relationship in Rails models?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": true },
      { "id": "option_4", "text": "one_to_one", "isCorrect": false }
    ],
    "hint": "This association is used when one record is linked to one other record.",
    "answerDescription": "The 'has_one' association establishes a one-to-one relationship between models in Rails."
  },
  {
    "id": "ruby_1451",
    "question": "How does Rails handle database queries?",
    "options": [
      { "id": "option_1", "text": "By using raw SQL queries only", "isCorrect": false },
      { "id": "option_2", "text": "By manually writing queries in controllers", "isCorrect": false },
      { "id": "option_3", "text": "Through ActiveRecord ORM", "isCorrect": true },
      { "id": "option_4", "text": "By storing queries in routes", "isCorrect": false }
    ],
    "hint": "Rails uses an ORM layer to simplify database interactions.",
    "answerDescription": "ActiveRecord is the ORM in Rails that provides an interface for database queries using Ruby instead of raw SQL."
  },
  {
    "id": "ruby_1452",
    "question": "What is the purpose of the 'before_action' callback in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "To filter database records", "isCorrect": false },
      { "id": "option_2", "text": "To execute code after an action", "isCorrect": false },
      { "id": "option_3", "text": "To run code before controller actions", "isCorrect": true },
      { "id": "option_4", "text": "To define model associations", "isCorrect": false }
    ],
    "hint": "This callback executes before any controller action runs.",
    "answerDescription": "The 'before_action' callback in Rails controllers is used to execute specific code before controller actions are run, often for authentication or data preparation."
  },
  {
    "id": "ruby_1453",
    "question": "Which command lists all available routes in a Rails application?",
    "options": [
      { "id": "option_1", "text": "rails show routes", "isCorrect": false },
      { "id": "option_2", "text": "rails list routes", "isCorrect": false },
      { "id": "option_3", "text": "rails routes", "isCorrect": true },
      { "id": "option_4", "text": "rails map routes", "isCorrect": false }
    ],
    "hint": "This command provides an overview of URL patterns in a Rails app.",
    "answerDescription": "The 'rails routes' command lists all available routes and the corresponding controllers and actions."
  },
  {
    "id": "ruby_1454",
    "question": "Which file is responsible for defining routes in a Rails application?",
    "options": [
      { "id": "option_1", "text": "routes.rb", "isCorrect": false },
      { "id": "option_2", "text": "routes.yml", "isCorrect": false },
      { "id": "option_3", "text": "config/routes.rb", "isCorrect": true },
      { "id": "option_4", "text": "app/routes.rb", "isCorrect": false }
    ],
    "hint": "This file is located in the 'config' directory.",
    "answerDescription": "The 'config/routes.rb' file is used to define URL mappings in a Rails application."
  },
  {
    "id": "ruby_1455",
    "question": "Which Rails command is used to roll back the last migration?",
    "options": [
      { "id": "option_1", "text": "rails db:reset", "isCorrect": false },
      { "id": "option_2", "text": "rails db:rollback all", "isCorrect": false },
      { "id": "option_3", "text": "rails db:rollback", "isCorrect": true },
      { "id": "option_4", "text": "rails db:undo", "isCorrect": false }
    ],
    "hint": "This command reverts the last migration applied.",
    "answerDescription": "The 'rails db:rollback' command is used to undo the last migration and revert changes to the database schema."
  },
  {
    "id": "ruby_1456",
    "question": "What is the default web server used by Rails in development mode?",
    "options": [
      { "id": "option_1", "text": "Apache", "isCorrect": false },
      { "id": "option_2", "text": "Nginx", "isCorrect": false },
      { "id": "option_3", "text": "Puma", "isCorrect": true },
      { "id": "option_4", "text": "Unicorn", "isCorrect": false }
    ],
    "hint": "This server is lightweight and optimized for concurrency.",
    "answerDescription": "Puma is the default web server for Rails applications in development mode."
  },
  {
    "id": "ruby_1457",
    "question": "Which Rails feature helps avoid mass assignment vulnerabilities?",
    "options": [
      { "id": "option_1", "text": "Controller filters", "isCorrect": false },
      { "id": "option_2", "text": "Session storage", "isCorrect": false },
      { "id": "option_3", "text": "Strong parameters", "isCorrect": true },
      { "id": "option_4", "text": "Routing constraints", "isCorrect": false }
    ],
    "hint": "This feature ensures only permitted attributes can be updated.",
    "answerDescription": "Strong parameters in Rails prevent mass assignment vulnerabilities by requiring explicit whitelisting of allowed attributes."
  },
  {
    "id": "ruby_1458",
    "question": "Which component of Rails is responsible for interacting with the database?",
    "options": [
      { "id": "option_1", "text": "View", "isCorrect": false },
      { "id": "option_2", "text": "Controller", "isCorrect": false },
      { "id": "option_3", "text": "Route", "isCorrect": false },
      { "id": "option_4", "text": "Model", "isCorrect": true }
    ],
    "hint": "This component handles data persistence and business logic.",
    "answerDescription": "The Model in Rails is responsible for interacting with the database using ActiveRecord."
  },
  {
    "id": "ruby_1459",
    "question": "Which file is used to configure the database in a Rails application?",
    "options": [
      { "id": "option_1", "text": "database.rb", "isCorrect": false },
      { "id": "option_2", "text": "db/config.yml", "isCorrect": false },
      { "id": "option_3", "text": "config/database.json", "isCorrect": false },
      { "id": "option_4", "text": "config/database.yml", "isCorrect": true }
    ],
    "hint": "This YAML file defines the database settings for different environments.",
    "answerDescription": "The 'config/database.yml' file in Rails specifies database configurations for development, test, and production environments."
  },
  {
    "id": "ruby_1460",
    "question": "Which Rails method is used to validate the presence of an attribute in a model?",
    "options": [
      { "id": "option_1", "text": "validates_format", "isCorrect": false },
      { "id": "option_2", "text": "validate_presence", "isCorrect": false },
      { "id": "option_3", "text": "validates_numericality", "isCorrect": false },
      { "id": "option_4", "text": "validates_presence_of", "isCorrect": true }
    ],
    "hint": "This validation ensures a required attribute is not empty.",
    "answerDescription": "The 'validates_presence_of' method in Rails ensures that a specified attribute is not left blank."
  },
  {
    "id": "ruby_1461",
    "question": "What does the 'rails db:migrate' command do?",
    "options": [
      { "id": "option_1", "text": "Creates a new database", "isCorrect": false },
      { "id": "option_2", "text": "Drops all database tables", "isCorrect": false },
      { "id": "option_3", "text": "Lists all migration files", "isCorrect": false },
      { "id": "option_4", "text": "Applies pending migrations to the database", "isCorrect": true }
    ],
    "hint": "This command is used to execute database schema changes.",
    "answerDescription": "The 'rails db:migrate' command runs pending migrations and updates the database schema accordingly."
  },
  {
    "id": "ruby_1462",
    "question": "Which method in Rails is used to define a custom route?",
    "options": [
      { "id": "option_1", "text": "map.route", "isCorrect": false },
      { "id": "option_2", "text": "custom_route", "isCorrect": false },
      { "id": "option_3", "text": "define_route", "isCorrect": false },
      { "id": "option_4", "text": "get", "isCorrect": true }
    ],
    "hint": "This method specifies an HTTP verb followed by a URL pattern.",
    "answerDescription": "In Rails, custom routes are defined using methods such as 'get', 'post', 'patch', and 'delete' in 'config/routes.rb'."
  },
  {
    "id": "ruby_1463",
    "question": "What is the purpose of 'params' in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "Defines URL paths", "isCorrect": false },
      { "id": "option_2", "text": "Stores session data", "isCorrect": false },
      { "id": "option_3", "text": "Manages database migrations", "isCorrect": false },
      { "id": "option_4", "text": "Accesses request parameters", "isCorrect": true }
    ],
    "hint": "This method is used to retrieve form data and query strings.",
    "answerDescription": "The 'params' hash in Rails controllers stores data from form submissions, URL parameters, and query strings."
  },
  {
    "id": "ruby_1464",
    "question": "Which file contains environment-specific configurations in Rails?",
    "options": [
      { "id": "option_1", "text": "config/application.yml", "isCorrect": false },
      { "id": "option_2", "text": "app/config.rb", "isCorrect": false },
      { "id": "option_3", "text": "config/env_settings.rb", "isCorrect": false },
      { "id": "option_4", "text": "config/environments/development.rb", "isCorrect": true }
    ],
    "hint": "Each environment has a separate configuration file under 'config/environments/'.",
    "answerDescription": "Rails stores environment-specific settings in 'config/environments/', such as 'development.rb', 'test.rb', and 'production.rb'."
  },
  {
    "id": "ruby_1465",
    "question": "Which Rails helper method generates a form for submitting data?",
    "options": [
      { "id": "option_1", "text": "make_form", "isCorrect": false },
      { "id": "option_2", "text": "create_form", "isCorrect": false },
      { "id": "option_3", "text": "new_form_tag", "isCorrect": false },
      { "id": "option_4", "text": "form_for", "isCorrect": true }
    ],
    "hint": "This method simplifies the creation of forms associated with models.",
    "answerDescription": "The 'form_for' helper in Rails generates a form that binds to a specific model instance."
  },
  {
    "id": "ruby_1466",
    "question": "What does the 'resources' keyword define in Rails routes?",
    "options": [
      { "id": "option_1", "text": "A single custom route", "isCorrect": false },
      { "id": "option_2", "text": "A database migration", "isCorrect": false },
      { "id": "option_3", "text": "A view template", "isCorrect": false },
      { "id": "option_4", "text": "A set of RESTful routes for a resource", "isCorrect": true }
    ],
    "hint": "It generates standard CRUD routes for a resource.",
    "answerDescription": "Using 'resources' in 'routes.rb' creates a full set of RESTful routes for a given resource in Rails."
  },
  {
    "id": "ruby_1467",
    "question": "Which Rails feature prevents SQL injection vulnerabilities?",
    "options": [
      { "id": "option_1", "text": "Session encryption", "isCorrect": false },
      { "id": "option_2", "text": "Strong parameters", "isCorrect": false },
      { "id": "option_3", "text": "Controller filters", "isCorrect": false },
      { "id": "option_4", "text": "ActiveRecord query binding", "isCorrect": true }
    ],
    "hint": "This feature automatically escapes SQL queries.",
    "answerDescription": "ActiveRecord query binding prevents SQL injection by using parameterized queries instead of raw SQL concatenation."
  },
  {
    "id": "ruby_1468",
    "question": "Which component in Rails is responsible for rendering HTML views?",
    "options": [
      { "id": "option_1", "text": "View", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": false },
      { "id": "option_4", "text": "Route", "isCorrect": false }
    ],
    "hint": "This component is responsible for user interface representation.",
    "answerDescription": "In Rails, the View is responsible for rendering HTML, JSON, or other formats based on controller data."
  },
  {
    "id": "ruby_1469",
    "question": "Which file defines URL routes in a Rails application?",
    "options": [
      { "id": "option_1", "text": "config/routes.rb", "isCorrect": true },
      { "id": "option_2", "text": "app/controllers/routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "config/urls.rb", "isCorrect": false },
      { "id": "option_4", "text": "routes.json", "isCorrect": false }
    ],
    "hint": "This file is found under the 'config' directory and defines how URLs map to controllers.",
    "answerDescription": "In Rails, 'config/routes.rb' is where all application routes are defined."
  },
  {
    "id": "ruby_1470",
    "question": "Which command generates a new controller in a Rails application?",
    "options": [
      { "id": "option_1", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_2", "text": "rails new controller", "isCorrect": false },
      { "id": "option_3", "text": "rails create controller", "isCorrect": false },
      { "id": "option_4", "text": "rails add controller", "isCorrect": false }
    ],
    "hint": "This command is part of the Rails generator system.",
    "answerDescription": "The 'rails generate controller' command is used to create a new controller along with associated views and tests."
  },
  {
    "id": "ruby_1471",
    "question": "What does the 'before_action' callback do in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "Runs a method before an action executes", "isCorrect": true },
      { "id": "option_2", "text": "Runs a method after an action executes", "isCorrect": false },
      { "id": "option_3", "text": "Defines a model validation", "isCorrect": false },
      { "id": "option_4", "text": "Executes JavaScript before rendering a page", "isCorrect": false }
    ],
    "hint": "This callback is used to set up controller logic before processing an action.",
    "answerDescription": "The 'before_action' filter in Rails controllers ensures that a method runs before specific controller actions."
  },
  {
    "id": "ruby_1472",
    "question": "What is the default database used in a new Rails application?",
    "options": [
      { "id": "option_1", "text": "SQLite", "isCorrect": true },
      { "id": "option_2", "text": "PostgreSQL", "isCorrect": false },
      { "id": "option_3", "text": "MySQL", "isCorrect": false },
      { "id": "option_4", "text": "MongoDB", "isCorrect": false }
    ],
    "hint": "This lightweight database is used by default in Rails unless configured otherwise.",
    "answerDescription": "Rails applications default to using SQLite as the database, though PostgreSQL and MySQL are also common choices."
  },
  {
    "id": "ruby_1473",
    "question": "Which method is used in Rails to prevent mass assignment vulnerabilities?",
    "options": [
      { "id": "option_1", "text": "strong parameters", "isCorrect": true },
      { "id": "option_2", "text": "secure params", "isCorrect": false },
      { "id": "option_3", "text": "protected attributes", "isCorrect": false },
      { "id": "option_4", "text": "secure_parameters", "isCorrect": false }
    ],
    "hint": "This feature was introduced in Rails 4 to prevent unauthorized mass assignment.",
    "answerDescription": "Strong parameters ensure only permitted attributes can be assigned to models, preventing security vulnerabilities."
  },
  {
    "id": "ruby_1474",
    "question": "What does the 'flash' object in Rails store?",
    "options": [
      { "id": "option_1", "text": "Temporary messages between requests", "isCorrect": true },
      { "id": "option_2", "text": "Session variables", "isCorrect": false },
      { "id": "option_3", "text": "Database transactions", "isCorrect": false },
      { "id": "option_4", "text": "User authentication details", "isCorrect": false }
    ],
    "hint": "This object is commonly used to store success or error messages.",
    "answerDescription": "The 'flash' object in Rails is used to store messages that persist for one request cycle and then disappear."
  },
  {
    "id": "ruby_1475",
    "question": "Which command is used to start a Rails server?",
    "options": [
      { "id": "option_1", "text": "rails server", "isCorrect": true },
      { "id": "option_2", "text": "rails start", "isCorrect": false },
      { "id": "option_3", "text": "rails launch", "isCorrect": false },
      { "id": "option_4", "text": "rails run", "isCorrect": false }
    ],
    "hint": "This command is commonly abbreviated as 'rails s'.",
    "answerDescription": "The 'rails server' command starts a local web server for a Rails application."
  },
  {
    "id": "ruby_1476",
    "question": "Which Ruby gem is used to manage dependencies in a Rails application?",
    "options": [
      { "id": "option_1", "text": "Bundler", "isCorrect": true },
      { "id": "option_2", "text": "Rake", "isCorrect": false },
      { "id": "option_3", "text": "Yarn", "isCorrect": false },
      { "id": "option_4", "text": "Gemspec", "isCorrect": false }
    ],
    "hint": "This gem installs and manages required Ruby gems for your project.",
    "answerDescription": "Bundler is a Ruby gem that manages gem dependencies and ensures all required gems are installed."
  },
  {
    "id": "ruby_1477",
    "question": "Which Rails feature handles user authentication and authorization?",
    "options": [
      { "id": "option_1", "text": "Devise", "isCorrect": true },
      { "id": "option_2", "text": "Pundit", "isCorrect": false },
      { "id": "option_3", "text": "CanCan", "isCorrect": false },
      { "id": "option_4", "text": "Warden", "isCorrect": false }
    ],
    "hint": "This gem provides authentication with minimal configuration.",
    "answerDescription": "Devise is a popular Rails gem for handling authentication and user sessions."
  },
  {
    "id": "ruby_1478",
    "question": "Which component in Rails is responsible for handling business logic and database interactions?",
    "options": [
      { "id": "option_1", "text": "View", "isCorrect": false },
      { "id": "option_2", "text": "Model", "isCorrect": true },
      { "id": "option_3", "text": "Controller", "isCorrect": false },
      { "id": "option_4", "text": "Helper", "isCorrect": false }
    ],
    "hint": "This component represents data and business rules in an MVC pattern.",
    "answerDescription": "In Rails, the Model is responsible for managing data, validations, and database queries."
  },
  {
    "id": "ruby_1479",
    "question": "Which directory in a Rails project contains controller files?",
    "options": [
      { "id": "option_1", "text": "app/models", "isCorrect": false },
      { "id": "option_2", "text": "app/controllers", "isCorrect": true },
      { "id": "option_3", "text": "app/views", "isCorrect": false },
      { "id": "option_4", "text": "config/", "isCorrect": false }
    ],
    "hint": "This directory contains files that process HTTP requests and handle user interactions.",
    "answerDescription": "Rails controllers are stored in the 'app/controllers' directory and handle request routing."
  },
  {
    "id": "ruby_1480",
    "question": "Which Rails command is used to generate a new model?",
    "options": [
      { "id": "option_1", "text": "rails generate controller", "isCorrect": false },
      { "id": "option_2", "text": "rails generate model", "isCorrect": true },
      { "id": "option_3", "text": "rails create model", "isCorrect": false },
      { "id": "option_4", "text": "rails add model", "isCorrect": false }
    ],
    "hint": "This command is used to create a new ActiveRecord class.",
    "answerDescription": "The 'rails generate model' command creates a new model with a migration file for the database."
  },
  {
    "id": "ruby_1481",
    "question": "Which method is used to retrieve all records from a Rails model?",
    "options": [
      { "id": "option_1", "text": "find_all", "isCorrect": false },
      { "id": "option_2", "text": "all", "isCorrect": true },
      { "id": "option_3", "text": "fetch_all", "isCorrect": false },
      { "id": "option_4", "text": "get_all", "isCorrect": false }
    ],
    "hint": "This method retrieves all records as an ActiveRecord relation.",
    "answerDescription": "The 'all' method in Rails returns all records of a model as an ActiveRecord::Relation."
  },
  {
    "id": "ruby_1482",
    "question": "Which of the following is an ORM (Object-Relational Mapping) framework used in Rails?",
    "options": [
      { "id": "option_1", "text": "Sequel", "isCorrect": false },
      { "id": "option_2", "text": "ActiveRecord", "isCorrect": true },
      { "id": "option_3", "text": "Django ORM", "isCorrect": false },
      { "id": "option_4", "text": "SQLAlchemy", "isCorrect": false }
    ],
    "hint": "This framework is the default ORM in Rails.",
    "answerDescription": "ActiveRecord is the default ORM in Rails, allowing developers to interact with databases using Ruby objects."
  },
  {
    "id": "ruby_1483",
    "question": "Which command is used to create a new Rails application?",
    "options": [
      { "id": "option_1", "text": "rails create app", "isCorrect": false },
      { "id": "option_2", "text": "rails new app_name", "isCorrect": true },
      { "id": "option_3", "text": "rails generate app", "isCorrect": false },
      { "id": "option_4", "text": "rails setup app_name", "isCorrect": false }
    ],
    "hint": "This command initializes a new Rails project structure.",
    "answerDescription": "The 'rails new app_name' command creates a new Rails application with a default directory structure."
  },
  {
    "id": "ruby_1484",
    "question": "Which method in a Rails controller is commonly used to retrieve a record by its ID?",
    "options": [
      { "id": "option_1", "text": "get_by_id", "isCorrect": false },
      { "id": "option_2", "text": "find", "isCorrect": true },
      { "id": "option_3", "text": "fetch", "isCorrect": false },
      { "id": "option_4", "text": "retrieve", "isCorrect": false }
    ],
    "hint": "This method raises an error if the record is not found.",
    "answerDescription": "The 'find' method in Rails retrieves a record by its primary key and raises an exception if not found."
  },
  {
    "id": "ruby_1485",
    "question": "Which command runs database migrations in Rails?",
    "options": [
      { "id": "option_1", "text": "rails db:create", "isCorrect": false },
      { "id": "option_2", "text": "rails db:migrate", "isCorrect": true },
      { "id": "option_3", "text": "rails migrate", "isCorrect": false },
      { "id": "option_4", "text": "rails db:upgrade", "isCorrect": false }
    ],
    "hint": "This command updates the database schema based on migration files.",
    "answerDescription": "The 'rails db:migrate' command applies pending migrations to update the database schema."
  },
  {
    "id": "ruby_1486",
    "question": "Which Rails feature is used to handle form data securely?",
    "options": [
      { "id": "option_1", "text": "Params.require", "isCorrect": false },
      { "id": "option_2", "text": "Strong Parameters", "isCorrect": true },
      { "id": "option_3", "text": "Form Protection", "isCorrect": false },
      { "id": "option_4", "text": "SecureParams", "isCorrect": false }
    ],
    "hint": "This feature was introduced in Rails 4 to prevent mass assignment vulnerabilities.",
    "answerDescription": "Strong Parameters ensure only permitted attributes are assigned, preventing security issues."
  },
  {
    "id": "ruby_1487",
    "question": "Which of the following Rails components is responsible for managing HTTP requests and responses?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "Controller", "isCorrect": true },
      { "id": "option_3", "text": "Helper", "isCorrect": false },
      { "id": "option_4", "text": "Route", "isCorrect": false }
    ],
    "hint": "This component processes incoming HTTP requests and invokes the appropriate logic.",
    "answerDescription": "The Controller in Rails is responsible for handling HTTP requests, processing data, and rendering views."
  },  {
    "id": "ruby_1488",
    "question": "Which component in Rails is responsible for rendering HTML templates?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "Controller", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": true },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "This component handles the user interface in an MVC pattern.",
    "answerDescription": "In Rails, the View is responsible for rendering HTML templates and presenting data."
  },
  {
    "id": "ruby_1489",
    "question": "Which file defines routes in a Rails application?",
    "options": [
      { "id": "option_1", "text": "routes.rb", "isCorrect": false },
      { "id": "option_2", "text": "application.rb", "isCorrect": false },
      { "id": "option_3", "text": "config/routes.rb", "isCorrect": true },
      { "id": "option_4", "text": "controllers.rb", "isCorrect": false }
    ],
    "hint": "This file is located inside the config directory.",
    "answerDescription": "The 'config/routes.rb' file in Rails is responsible for defining URL patterns and mapping them to controllers."
  },
  {
    "id": "ruby_1490",
    "question": "Which of the following is a Rails convention for naming models?",
    "options": [
      { "id": "option_1", "text": "Snake_case", "isCorrect": false },
      { "id": "option_2", "text": "CamelCase", "isCorrect": false },
      { "id": "option_3", "text": "Singular CamelCase", "isCorrect": true },
      { "id": "option_4", "text": "Upper_snake_case", "isCorrect": false }
    ],
    "hint": "Rails models are usually named in singular form using a specific casing style.",
    "answerDescription": "Rails models follow the singular CamelCase convention (e.g., 'User', 'Article') while their corresponding database tables are pluralized."
  },
  {
    "id": "ruby_1491",
    "question": "Which command is used to generate a new Rails controller?",
    "options": [
      { "id": "option_1", "text": "rails generate model", "isCorrect": false },
      { "id": "option_2", "text": "rails new controller", "isCorrect": false },
      { "id": "option_3", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_4", "text": "rails make controller", "isCorrect": false }
    ],
    "hint": "This command creates a new controller along with view templates.",
    "answerDescription": "The 'rails generate controller' command generates a new controller with associated files."
  },
  {
    "id": "ruby_1492",
    "question": "Which of the following is NOT a valid HTTP verb in Rails routes?",
    "options": [
      { "id": "option_1", "text": "GET", "isCorrect": false },
      { "id": "option_2", "text": "POST", "isCorrect": false },
      { "id": "option_3", "text": "FETCH", "isCorrect": true },
      { "id": "option_4", "text": "DELETE", "isCorrect": false }
    ],
    "hint": "Standard RESTful HTTP methods include GET, POST, PUT, DELETE, and PATCH.",
    "answerDescription": "'FETCH' is not a standard HTTP verb in Rails, while GET, POST, PUT, PATCH, and DELETE are commonly used."
  },
  {
    "id": "ruby_1493",
    "question": "Which keyword is used to define a method in a Rails model?",
    "options": [
      { "id": "option_1", "text": "defmethod", "isCorrect": false },
      { "id": "option_2", "text": "method", "isCorrect": false },
      { "id": "option_3", "text": "def", "isCorrect": true },
      { "id": "option_4", "text": "function", "isCorrect": false }
    ],
    "hint": "This keyword is also used in plain Ruby to define methods.",
    "answerDescription": "In Ruby and Rails, methods are defined using the 'def' keyword."
  },
  {
    "id": "ruby_1494",
    "question": "Which Rails method is used to validate the presence of an attribute in a model?",
    "options": [
      { "id": "option_1", "text": "ensure_presence", "isCorrect": false },
      { "id": "option_2", "text": "require", "isCorrect": false },
      { "id": "option_3", "text": "validates :attribute, presence: true", "isCorrect": true },
      { "id": "option_4", "text": "confirm_presence", "isCorrect": false }
    ],
    "hint": "This method is part of Rails' built-in validation framework.",
    "answerDescription": "The 'validates :attribute, presence: true' syntax ensures that a model attribute is not empty."
  },
  {
    "id": "ruby_1495",
    "question": "What does the `render` method do in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "Redirects to another action", "isCorrect": false },
      { "id": "option_2", "text": "Executes a database query", "isCorrect": false },
      { "id": "option_3", "text": "Renders a view template", "isCorrect": true },
      { "id": "option_4", "text": "Handles an exception", "isCorrect": false }
    ],
    "hint": "This method is commonly used to display HTML templates.",
    "answerDescription": "In Rails, 'render' is used to display a view template within a controller action."
  },
  {
    "id": "ruby_1496",
    "question": "Which Rails method is used to redirect users to a different page?",
    "options": [
      { "id": "option_1", "text": "send_to", "isCorrect": false },
      { "id": "option_2", "text": "forward_to", "isCorrect": false },
      { "id": "option_3", "text": "redirect_to", "isCorrect": true },
      { "id": "option_4", "text": "move_to", "isCorrect": false }
    ],
    "hint": "This method is often used after a form submission to avoid duplicate requests.",
    "answerDescription": "The 'redirect_to' method in Rails is used to navigate users to a different page or action."
  },
  {
    "id": "ruby_1497",
    "question": "Which method is used to establish a one-to-many association in Rails?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "many_to_one", "isCorrect": false }
    ],
    "hint": "This method is commonly used to define parent-child relationships in Rails models.",
    "answerDescription": "The 'has_many' association is used in Rails to establish a one-to-many relationship between models."
  },
  {
    "id": "ruby_1498",
    "question": "Which component of MVC handles business logic and database interactions?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Router", "isCorrect": false },
      { "id": "option_4", "text": "Model", "isCorrect": true }
    ],
    "hint": "This component represents and manipulates data in an MVC framework.",
    "answerDescription": "In MVC, the Model is responsible for handling business logic and interacting with the database."
  },
  {
    "id": "ruby_1499",
    "question": "What is the purpose of the `params` hash in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "Stores session data", "isCorrect": false },
      { "id": "option_2", "text": "Manages database queries", "isCorrect": false },
      { "id": "option_3", "text": "Defines model attributes", "isCorrect": false },
      { "id": "option_4", "text": "Contains request parameters", "isCorrect": true }
    ],
    "hint": "It holds data sent from forms or URLs to a controller.",
    "answerDescription": "In Rails, the `params` hash stores request parameters from forms, URLs, or JSON payloads."
  },
  {
    "id": "ruby_1500",
    "question": "Which Rails command creates a new model and migration file?",
    "options": [
      { "id": "option_1", "text": "rails generate controller", "isCorrect": false },
      { "id": "option_2", "text": "rails new model", "isCorrect": false },
      { "id": "option_3", "text": "rails db:migrate", "isCorrect": false },
      { "id": "option_4", "text": "rails generate model", "isCorrect": true }
    ],
    "hint": "This command generates both a model file and a migration file.",
    "answerDescription": "The `rails generate model` command creates a new model and its associated database migration file."
  },
  {
    "id": "ruby_1501",
    "question": "Which keyword is used to define an instance method in a Rails model?",
    "options": [
      { "id": "option_1", "text": "method", "isCorrect": false },
      { "id": "option_2", "text": "function", "isCorrect": false },
      { "id": "option_3", "text": "define", "isCorrect": false },
      { "id": "option_4", "text": "def", "isCorrect": true }
    ],
    "hint": "This keyword is used to define methods in Ruby.",
    "answerDescription": "In Rails models, instance methods are defined using the `def` keyword."
  },
  {
    "id": "ruby_1502",
    "question": "Which HTTP verb is used for updating an existing resource in Rails?",
    "options": [
      { "id": "option_1", "text": "GET", "isCorrect": false },
      { "id": "option_2", "text": "POST", "isCorrect": false },
      { "id": "option_3", "text": "DELETE", "isCorrect": false },
      { "id": "option_4", "text": "PATCH", "isCorrect": true }
    ],
    "hint": "This verb is used to partially update a resource in RESTful APIs.",
    "answerDescription": "In Rails, the `PATCH` method is used to update an existing resource partially."
  },
  {
    "id": "ruby_1503",
    "question": "Which method is used in Rails models to define a relationship where a model belongs to another model?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "belongs_to", "isCorrect": true }
    ],
    "hint": "This method defines a one-to-one or many-to-one association.",
    "answerDescription": "The `belongs_to` method in Rails models defines a one-to-one or many-to-one association."
  },
  {
    "id": "ruby_1504",
    "question": "What is the default ORM (Object-Relational Mapping) used in Rails?",
    "options": [
      { "id": "option_1", "text": "Sequel", "isCorrect": false },
      { "id": "option_2", "text": "DataMapper", "isCorrect": false },
      { "id": "option_3", "text": "Mongoid", "isCorrect": false },
      { "id": "option_4", "text": "ActiveRecord", "isCorrect": true }
    ],
    "hint": "This ORM is included by default in Ruby on Rails.",
    "answerDescription": "ActiveRecord is the default ORM in Rails, enabling database interaction using Ruby objects."
  },
  {
    "id": "ruby_1505",
    "question": "Which method is used to execute a redirect in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "send_to", "isCorrect": false },
      { "id": "option_2", "text": "go_to", "isCorrect": false },
      { "id": "option_3", "text": "navigate_to", "isCorrect": false },
      { "id": "option_4", "text": "redirect_to", "isCorrect": true }
    ],
    "hint": "This method is commonly used after form submissions to prevent duplicate submissions.",
    "answerDescription": "In Rails, the `redirect_to` method is used to navigate users to a different page."
  },
  {
    "id": "ruby_1506",
    "question": "Which method in Rails is used to retrieve all records of a model?",
    "options": [
      { "id": "option_1", "text": "find_all", "isCorrect": false },
      { "id": "option_2", "text": "get_all", "isCorrect": false },
      { "id": "option_3", "text": "retrieve", "isCorrect": false },
      { "id": "option_4", "text": "all", "isCorrect": true }
    ],
    "hint": "This method returns an array of all records in a model.",
    "answerDescription": "The `.all` method in Rails retrieves all records of a model."
  },
  {
    "id": "ruby_1507",
    "question": "Which method is used in Rails to validate that a field is unique in a model?",
    "options": [
      { "id": "option_1", "text": "validates_presence_of", "isCorrect": false },
      { "id": "option_2", "text": "ensures_uniqueness", "isCorrect": false },
      { "id": "option_3", "text": "unique", "isCorrect": false },
      { "id": "option_4", "text": "validates :attribute, uniqueness: true", "isCorrect": true }
    ],
    "hint": "This validation method ensures that no two records have the same value for an attribute.",
    "answerDescription": "The `validates :attribute, uniqueness: true` method ensures that a field has unique values in a Rails model."
  },
  {
    "id": "ruby_1508",
    "question": "What is the primary purpose of a Controller in the MVC pattern?",
    "options": [
      { "id": "option_1", "text": "Handles user input and manages application flow", "isCorrect": true },
      { "id": "option_2", "text": "Defines how data is stored", "isCorrect": false },
      { "id": "option_3", "text": "Renders HTML templates", "isCorrect": false },
      { "id": "option_4", "text": "Executes SQL queries", "isCorrect": false }
    ],
    "hint": "It acts as an intermediary between the model and the view.",
    "answerDescription": "In MVC, the Controller handles user input, processes business logic, and communicates with the model and view."
  },
  {
    "id": "ruby_1509",
    "question": "Which Rails method is used to fetch a single record by its ID?",
    "options": [
      { "id": "option_1", "text": "find", "isCorrect": true },
      { "id": "option_2", "text": "retrieve", "isCorrect": false },
      { "id": "option_3", "text": "get", "isCorrect": false },
      { "id": "option_4", "text": "search", "isCorrect": false }
    ],
    "hint": "This method raises an error if the record is not found.",
    "answerDescription": "The `find` method in Rails fetches a record by its ID and raises an error if it doesn't exist."
  },
  {
    "id": "ruby_1510",
    "question": "Which keyword in Rails routes maps a URL to a controller action?",
    "options": [
      { "id": "option_1", "text": "get", "isCorrect": true },
      { "id": "option_2", "text": "route", "isCorrect": false },
      { "id": "option_3", "text": "map", "isCorrect": false },
      { "id": "option_4", "text": "link", "isCorrect": false }
    ],
    "hint": "This keyword is commonly used in `config/routes.rb`.",
    "answerDescription": "The `get` method in Rails routing is used to map a URL pattern to a controller action."
  },
  {
    "id": "ruby_1511",
    "question": "What method is commonly used in Rails to display a view?",
    "options": [
      { "id": "option_1", "text": "render", "isCorrect": true },
      { "id": "option_2", "text": "show", "isCorrect": false },
      { "id": "option_3", "text": "display", "isCorrect": false },
      { "id": "option_4", "text": "present", "isCorrect": false }
    ],
    "hint": "This method is automatically called in controller actions if no explicit redirection is provided.",
    "answerDescription": "In Rails, the `render` method is used to display a specific view template."
  },
  {
    "id": "ruby_1512",
    "question": "Which method is used in Rails models to enforce presence validation on an attribute?",
    "options": [
      { "id": "option_1", "text": "validates_presence_of", "isCorrect": true },
      { "id": "option_2", "text": "ensure_presence", "isCorrect": false },
      { "id": "option_3", "text": "require", "isCorrect": false },
      { "id": "option_4", "text": "check_presence", "isCorrect": false }
    ],
    "hint": "This method ensures that a specific attribute is not left blank.",
    "answerDescription": "The `validates_presence_of` method in Rails ensures that an attribute is present before saving a record."
  },
  {
    "id": "ruby_1513",
    "question": "Which file in a Rails project defines database table structures?",
    "options": [
      { "id": "option_1", "text": "migration files", "isCorrect": true },
      { "id": "option_2", "text": "schema.rb", "isCorrect": false },
      { "id": "option_3", "text": "models.rb", "isCorrect": false },
      { "id": "option_4", "text": "routes.rb", "isCorrect": false }
    ],
    "hint": "These files are located in the `db/migrate/` directory.",
    "answerDescription": "Rails migration files define the structure of database tables and allow schema changes."
  },
  {
    "id": "ruby_1514",
    "question": "Which method in Rails is used to delete a record from the database?",
    "options": [
      { "id": "option_1", "text": "destroy", "isCorrect": true },
      { "id": "option_2", "text": "delete", "isCorrect": false },
      { "id": "option_3", "text": "remove", "isCorrect": false },
      { "id": "option_4", "text": "erase", "isCorrect": false }
    ],
    "hint": "This method not only removes the record but also triggers callbacks.",
    "answerDescription": "The `destroy` method in Rails deletes a record and calls associated callbacks."
  },
  {
    "id": "ruby_1515",
    "question": "What is the default file extension for views in Rails?",
    "options": [
      { "id": "option_1", "text": ".html.erb", "isCorrect": true },
      { "id": "option_2", "text": ".rb.html", "isCorrect": false },
      { "id": "option_3", "text": ".erb.html", "isCorrect": false },
      { "id": "option_4", "text": ".view.rb", "isCorrect": false }
    ],
    "hint": "This format allows embedding Ruby code into HTML templates.",
    "answerDescription": "Rails views use `.html.erb` as the default file extension for embedding Ruby in HTML."
  },
  {
    "id": "ruby_1516",
    "question": "Which Rails command is used to start a local development server?",
    "options": [
      { "id": "option_1", "text": "rails server", "isCorrect": true },
      { "id": "option_2", "text": "rails start", "isCorrect": false },
      { "id": "option_3", "text": "rails run", "isCorrect": false },
      { "id": "option_4", "text": "rails boot", "isCorrect": false }
    ],
    "hint": "This command starts a Puma web server for development.",
    "answerDescription": "The `rails server` command launches a local web server for Rails applications."
  },
  {
    "id": "ruby_1517",
    "question": "Which component of MVC in Rails is responsible for displaying data to users?",
    "options": [
      { "id": "option_1", "text": "View", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": false },
      { "id": "option_4", "text": "Database", "isCorrect": false }
    ],
    "hint": "It consists of templates and layouts.",
    "answerDescription": "In Rails MVC, the View is responsible for rendering HTML and presenting data to users."
  },
  {
    "id": "ruby_1518",
    "question": "What is the role of the Model in MVC?",
    "options": [
      { "id": "option_1", "text": "Handles user input", "isCorrect": false },
      { "id": "option_2", "text": "Manages data and business logic", "isCorrect": true },
      { "id": "option_3", "text": "Renders the user interface", "isCorrect": false },
      { "id": "option_4", "text": "Controls routing and navigation", "isCorrect": false }
    ],
    "hint": "It interacts with the database and contains the application's logic.",
    "answerDescription": "In MVC, the Model is responsible for managing data and business rules."
  },
  {
    "id": "ruby_1519",
    "question": "Which Rails file is responsible for defining URL patterns?",
    "options": [
      { "id": "option_1", "text": "application.rb", "isCorrect": false },
      { "id": "option_2", "text": "routes.rb", "isCorrect": true },
      { "id": "option_3", "text": "database.yml", "isCorrect": false },
      { "id": "option_4", "text": "seeds.rb", "isCorrect": false }
    ],
    "hint": "This file is located inside the `config` directory.",
    "answerDescription": "The `routes.rb` file in Rails defines how URLs map to controllers and actions."
  },
  {
    "id": "ruby_1520",
    "question": "How to generate a new model in Rails ?",
    "options": [
      { "id": "option_1", "text": "rails new model", "isCorrect": false },
      { "id": "option_2", "text": "rails generate model", "isCorrect": true },
      { "id": "option_3", "text": "rails scaffold model", "isCorrect": false },
      { "id": "option_4", "text": "rails create model", "isCorrect": false }
    ],
    "hint": "This command generates a migration file along with the model.",
    "answerDescription": "The `rails generate model` command is used to create a new model in Rails."
  },
  {
    "id": "ruby_1521",
    "question": "Which Rails method is used to check if a record exists?",
    "options": [
      { "id": "option_1", "text": "validate", "isCorrect": false },
      { "id": "option_2", "text": "exists?", "isCorrect": true },
      { "id": "option_3", "text": "check", "isCorrect": false },
      { "id": "option_4", "text": "present?", "isCorrect": false }
    ],
    "hint": "This method returns a boolean value.",
    "answerDescription": "The `exists?` method in Rails checks whether a record is present in the database."
  },
  {
    "id": "ruby_1522",
    "question": "Which of the following best describes the purpose of a View in Rails MVC?",
    "options": [
      { "id": "option_1", "text": "Processes business logic", "isCorrect": false },
      { "id": "option_2", "text": "Displays data to the user", "isCorrect": true },
      { "id": "option_3", "text": "Handles database transactions", "isCorrect": false },
      { "id": "option_4", "text": "Controls application flow", "isCorrect": false }
    ],
    "hint": "It is responsible for rendering the UI.",
    "answerDescription": "In Rails, Views handle the presentation layer and display data to users."
  },
  {
    "id": "ruby_1523",
    "question": "Which method is used to redirect a user to another URL in Rails?",
    "options": [
      { "id": "option_1", "text": "send", "isCorrect": false },
      { "id": "option_2", "text": "redirect_to", "isCorrect": true },
      { "id": "option_3", "text": "navigate", "isCorrect": false },
      { "id": "option_4", "text": "route_to", "isCorrect": false }
    ],
    "hint": "It is commonly used in controllers for navigation.",
    "answerDescription": "The `redirect_to` method in Rails is used to send users to a different page."
  },
  {
    "id": "ruby_1524",
    "question": "What is the purpose of the 'before_action' filter in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "Executes after an action runs", "isCorrect": false },
      { "id": "option_2", "text": "Runs before an action executes", "isCorrect": true },
      { "id": "option_3", "text": "Handles exceptions in controllers", "isCorrect": false },
      { "id": "option_4", "text": "Applies validations to models", "isCorrect": false }
    ],
    "hint": "It is often used for authentication and setting variables.",
    "answerDescription": "The `before_action` filter in Rails executes a method before an action runs."
  },
  {
    "id": "ruby_1525",
    "question": "Which database abstraction layer does Rails use?",
    "options": [
      { "id": "option_1", "text": "SQLAlchemy", "isCorrect": false },
      { "id": "option_2", "text": "Active Record", "isCorrect": true },
      { "id": "option_3", "text": "Doctrine", "isCorrect": false },
      { "id": "option_4", "text": "Sequel", "isCorrect": false }
    ],
    "hint": "It follows the ORM (Object-Relational Mapping) pattern.",
    "answerDescription": "Rails uses Active Record as its default ORM for interacting with databases."
  },
  {
    "id": "ruby_1526",
    "question": "Which method in Rails fetches all records from a model?",
    "options": [
      { "id": "option_1", "text": "find_all", "isCorrect": false },
      { "id": "option_2", "text": "all", "isCorrect": true },
      { "id": "option_3", "text": "fetch", "isCorrect": false },
      { "id": "option_4", "text": "retrieve_all", "isCorrect": false }
    ],
    "hint": "This method returns an ActiveRecord::Relation object.",
    "answerDescription": "The `all` method in Rails retrieves all records from a model."
  },
  {
    "id": "ruby_1527",
    "question": "What command is used to create a new Rails project?",
    "options": [
      { "id": "option_1", "text": "rails init", "isCorrect": false },
      { "id": "option_2", "text": "rails new", "isCorrect": true },
      { "id": "option_3", "text": "rails generate app", "isCorrect": false },
      { "id": "option_4", "text": "rails start", "isCorrect": false }
    ],
    "hint": "It is the first step in setting up a new Rails application.",
    "answerDescription": "The `rails new` command creates a new Rails application with the necessary directory structure."
  },
  {
    "id": "ruby_1528",
    "question": "What does the Controller do in an MVC architecture?",
    "options": [
      { "id": "option_1", "text": "Manages data and business logic", "isCorrect": false },
      { "id": "option_2", "text": "Renders the user interface", "isCorrect": false },
      { "id": "option_3", "text": "Handles user requests and manages flow", "isCorrect": true },
      { "id": "option_4", "text": "Defines database schema", "isCorrect": false }
    ],
    "hint": "It acts as a bridge between Model and View.",
    "answerDescription": "The Controller in MVC handles user requests and manages application flow."
  },
  {
    "id": "ruby_1529",
    "question": "Which command in Rails is used to start a development server?",
    "options": [
      { "id": "option_1", "text": "rails generate server", "isCorrect": false },
      { "id": "option_2", "text": "rails init", "isCorrect": false },
      { "id": "option_3", "text": "rails server", "isCorrect": true },
      { "id": "option_4", "text": "rails start", "isCorrect": false }
    ],
    "hint": "It launches a local web server for Rails applications.",
    "answerDescription": "The `rails server` command starts the Rails development server."
  },
  {
    "id": "ruby_1530",
    "question": "Which folder in a Rails project contains views?",
    "options": [
      { "id": "option_1", "text": "app/models", "isCorrect": false },
      { "id": "option_2", "text": "app/controllers", "isCorrect": false },
      { "id": "option_3", "text": "app/views", "isCorrect": true },
      { "id": "option_4", "text": "app/assets", "isCorrect": false }
    ],
    "hint": "It stores HTML templates for rendering UI.",
    "answerDescription": "The `app/views` folder contains the view templates in Rails."
  },
  {
    "id": "ruby_1531",
    "question": "Which Rails file contains the database configuration settings?",
    "options": [
      { "id": "option_1", "text": "schema.rb", "isCorrect": false },
      { "id": "option_2", "text": "routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "database.yml", "isCorrect": true },
      { "id": "option_4", "text": "seeds.rb", "isCorrect": false }
    ],
    "hint": "This file is located inside the `config` folder.",
    "answerDescription": "The `database.yml` file in Rails specifies the database configuration."
  },
  {
    "id": "ruby_1532",
    "question": "What is the primary function of ActiveRecord in Rails?",
    "options": [
      { "id": "option_1", "text": "Routing requests", "isCorrect": false },
      { "id": "option_2", "text": "Rendering views", "isCorrect": false },
      { "id": "option_3", "text": "Handling database interactions", "isCorrect": true },
      { "id": "option_4", "text": "Managing assets", "isCorrect": false }
    ],
    "hint": "It is an ORM layer for database operations.",
    "answerDescription": "ActiveRecord in Rails is responsible for handling database interactions."
  },
  {
    "id": "ruby_1533",
    "question": "Which keyword is used to define a model in Rails?",
    "options": [
      { "id": "option_1", "text": "table", "isCorrect": false },
      { "id": "option_2", "text": "entity", "isCorrect": false },
      { "id": "option_3", "text": "class", "isCorrect": true },
      { "id": "option_4", "text": "record", "isCorrect": false }
    ],
    "hint": "It follows Ruby's object-oriented principles.",
    "answerDescription": "In Rails, models are defined using the `class` keyword."
  },
  {
    "id": "ruby_1534",
    "question": "What is the purpose of Rails migrations?",
    "options": [
      { "id": "option_1", "text": "Managing user sessions", "isCorrect": false },
      { "id": "option_2", "text": "Handling URL routing", "isCorrect": false },
      { "id": "option_3", "text": "Modifying database schema", "isCorrect": true },
      { "id": "option_4", "text": "Generating views dynamically", "isCorrect": false }
    ],
    "hint": "They allow changes to database structure without losing data.",
    "answerDescription": "Rails migrations modify database schema while keeping track of changes."
  },
  {
    "id": "ruby_1535",
    "question": "Which command in Rails generates a new controller?",
    "options": [
      { "id": "option_1", "text": "rails create controller", "isCorrect": false },
      { "id": "option_2", "text": "rails new controller", "isCorrect": false },
      { "id": "option_3", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_4", "text": "rails add controller", "isCorrect": false }
    ],
    "hint": "This command automatically creates related files such as views and routes.",
    "answerDescription": "The `rails generate controller` command creates a new controller in Rails."
  },
  {
    "id": "ruby_1536",
    "question": "Which of the following best describes the 'params' object in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "Stores session data", "isCorrect": false },
      { "id": "option_2", "text": "Handles HTTP responses", "isCorrect": false },
      { "id": "option_3", "text": "Contains request parameters", "isCorrect": true },
      { "id": "option_4", "text": "Manages database queries", "isCorrect": false }
    ],
    "hint": "It helps retrieve user input from forms and URLs.",
    "answerDescription": "The `params` object in Rails controllers contains request parameters."
  },
  {
    "id": "ruby_1537",
    "question": "What is the purpose of the 'flash' object in Rails?",
    "options": [
      { "id": "option_1", "text": "Stores temporary user authentication data", "isCorrect": false },
      { "id": "option_2", "text": "Handles API requests", "isCorrect": false },
      { "id": "option_3", "text": "Displays temporary messages to users", "isCorrect": true },
      { "id": "option_4", "text": "Manages background jobs", "isCorrect": false }
    ],
    "hint": "It is often used to display success or error messages after actions.",
    "answerDescription": "The `flash` object in Rails stores messages for the next request, useful for user notifications."
  },  {
    "id": "ruby_1538",
    "question": "What does the Model do in an MVC architecture?",
    "options": [
      { "id": "option_1", "text": "Handles user requests", "isCorrect": false },
      { "id": "option_2", "text": "Renders HTML templates", "isCorrect": false },
      { "id": "option_3", "text": "Manages routing", "isCorrect": false },
      { "id": "option_4", "text": "Handles data and business logic", "isCorrect": true }
    ],
    "hint": "It represents the data and logic layer of the application.",
    "answerDescription": "In MVC, the Model handles the business logic and data management."
  },
  {
    "id": "ruby_1539",
    "question": "Which Rails command is used to create a new Rails application?",
    "options": [
      { "id": "option_1", "text": "rails start", "isCorrect": false },
      { "id": "option_2", "text": "rails generate app", "isCorrect": false },
      { "id": "option_3", "text": "rails create", "isCorrect": false },
      { "id": "option_4", "text": "rails new", "isCorrect": true }
    ],
    "hint": "It initializes a new Rails project with necessary directories.",
    "answerDescription": "The `rails new` command creates a new Rails application."
  },
  {
    "id": "ruby_1540",
    "question": "Which file defines the routes in a Rails application?",
    "options": [
      { "id": "option_1", "text": "database.yml", "isCorrect": false },
      { "id": "option_2", "text": "schema.rb", "isCorrect": false },
      { "id": "option_3", "text": "application.rb", "isCorrect": false },
      { "id": "option_4", "text": "routes.rb", "isCorrect": true }
    ],
    "hint": "It specifies how URLs map to controllers.",
    "answerDescription": "The `routes.rb` file in Rails defines URL mappings to controllers."
  },
  {
    "id": "ruby_1541",
    "question": "Which Rails method is used to define a database table?",
    "options": [
      { "id": "option_1", "text": "add_table", "isCorrect": false },
      { "id": "option_2", "text": "set_table", "isCorrect": false },
      { "id": "option_3", "text": "make_table", "isCorrect": false },
      { "id": "option_4", "text": "create_table", "isCorrect": true }
    ],
    "hint": "It's used in migrations to define a new table.",
    "answerDescription": "The `create_table` method is used in Rails migrations to define a new database table."
  },
  {
    "id": "ruby_1542",
    "question": "Which method is used to render a view in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "show", "isCorrect": false },
      { "id": "option_2", "text": "view", "isCorrect": false },
      { "id": "option_3", "text": "display", "isCorrect": false },
      { "id": "option_4", "text": "render", "isCorrect": true }
    ],
    "hint": "It's commonly used to display templates.",
    "answerDescription": "The `render` method is used in Rails controllers to render a view template."
  },
  {
    "id": "ruby_1543",
    "question": "Which method is used to count occurrences of elements in an array?",
    "options": [
      { "id": "option_1", "text": "frequency", "isCorrect": false },
      { "id": "option_2", "text": "occurrences", "isCorrect": false },
      { "id": "option_3", "text": "tally", "isCorrect": true },
      { "id": "option_4", "text": "histogram", "isCorrect": false }
    ],
    "hint": "This method returns a hash with element counts.",
    "answerDescription": "The `tally` method counts occurrences of each element in an array."
  }, 
  {
    "id": "ruby_1544",
    "question": "What is the primary purpose of the 'has_many' association in Rails models?",
    "options": [
      { "id": "option_1", "text": "It defines a one-to-one relationship", "isCorrect": false },
      { "id": "option_2", "text": "It manages user authentication", "isCorrect": false },
      { "id": "option_3", "text": "It handles URL routing", "isCorrect": false },
      { "id": "option_4", "text": "It establishes a one-to-many relationship", "isCorrect": true }
    ],
    "hint": "It allows one record to be associated with multiple others.",
    "answerDescription": "The `has_many` association in Rails defines a one-to-many relationship between models."
  },
  {
    "id": "ruby_1545",
    "question": "Which method is used to redirect users in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "reroute", "isCorrect": false },
      { "id": "option_2", "text": "relocate", "isCorrect": false },
      { "id": "option_3", "text": "move_to", "isCorrect": false },
      { "id": "option_4", "text": "redirect_to", "isCorrect": true }
    ],
    "hint": "It's often used after form submissions.",
    "answerDescription": "The `redirect_to` method in Rails is used to send users to a different URL."
  },
  {
    "id": "ruby_1546",
    "question": "What is the purpose of 'strong parameters' in Rails?",
    "options": [
      { "id": "option_1", "text": "Encrypts user passwords", "isCorrect": false },
      { "id": "option_2", "text": "Validates form inputs", "isCorrect": false },
      { "id": "option_3", "text": "Defines model associations", "isCorrect": false },
      { "id": "option_4", "text": "Prevents mass assignment vulnerabilities", "isCorrect": true }
    ],
    "hint": "It ensures only permitted parameters are accepted.",
    "answerDescription": "Strong parameters in Rails help prevent mass assignment vulnerabilities by explicitly allowing certain parameters."
  },
  {
    "id": "ruby_1547",
    "question": "Which command rolls back the last Rails migration?",
    "options": [
      { "id": "option_1", "text": "rails db:reset", "isCorrect": false },
      { "id": "option_2", "text": "rails db:migrate:undo", "isCorrect": false },
      { "id": "option_3", "text": "rails db:revert", "isCorrect": false },
      { "id": "option_4", "text": "rails db:rollback", "isCorrect": true }
    ],
    "hint": "It reverses the last migration applied to the database.",
    "answerDescription": "The `rails db:rollback` command rolls back the last applied migration."
  },  {
    "id": "ruby_1548",
    "question": "What is the purpose of the View in an MVC framework?",
    "options": [
      { "id": "option_1", "text": "Displays data to the user", "isCorrect": true },
      { "id": "option_2", "text": "Handles business logic", "isCorrect": false },
      { "id": "option_3", "text": "Manages database queries", "isCorrect": false },
      { "id": "option_4", "text": "Defines application routes", "isCorrect": false }
    ],
    "hint": "It presents information to users.",
    "answerDescription": "The View in MVC is responsible for rendering the UI and presenting data to the user."
  },
  {
    "id": "ruby_1549",
    "question": "Which component of MVC is responsible for handling user interactions?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "It acts as a bridge between View and Model.",
    "answerDescription": "The Controller in MVC handles user inputs and coordinates with the Model and View."
  },
  {
    "id": "ruby_1550",
    "question": "What does the Rails Active Record module provide?",
    "options": [
      { "id": "option_1", "text": "Object-Relational Mapping (ORM)", "isCorrect": true },
      { "id": "option_2", "text": "Front-end templating", "isCorrect": false },
      { "id": "option_3", "text": "Session management", "isCorrect": false },
      { "id": "option_4", "text": "URL routing", "isCorrect": false }
    ],
    "hint": "It simplifies database interactions.",
    "answerDescription": "Active Record in Rails provides ORM functionality, making database management easier."
  },
  {
    "id": "ruby_1551",
    "question": "Which Rails component handles HTTP requests and responses?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Database", "isCorrect": false }
    ],
    "hint": "It processes requests before sending responses.",
    "answerDescription": "The Controller in Rails receives HTTP requests, processes them, and returns responses."
  },
  {
    "id": "ruby_1552",
    "question": "What is the main purpose of Rails migrations?",
    "options": [
      { "id": "option_1", "text": "Modify database schema", "isCorrect": true },
      { "id": "option_2", "text": "Manage controllers", "isCorrect": false },
      { "id": "option_3", "text": "Render HTML pages", "isCorrect": false },
      { "id": "option_4", "text": "Configure routes", "isCorrect": false }
    ],
    "hint": "They are used to update database structures.",
    "answerDescription": "Rails migrations allow developers to modify the database schema over time."
  },
  {
    "id": "ruby_1553",
    "question": "Which command generates a new Rails controller?",
    "options": [
      { "id": "option_1", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_2", "text": "rails new controller", "isCorrect": false },
      { "id": "option_3", "text": "rails create controller", "isCorrect": false },
      { "id": "option_4", "text": "rails make controller", "isCorrect": false }
    ],
    "hint": "It follows the `rails generate` pattern.",
    "answerDescription": "The `rails generate controller` command creates a new controller in a Rails application."
  },
  {
    "id": "ruby_1554",
    "question": "What does the Rails 'flash' object store?",
    "options": [
      { "id": "option_1", "text": "Temporary messages between requests", "isCorrect": true },
      { "id": "option_2", "text": "User authentication tokens", "isCorrect": false },
      { "id": "option_3", "text": "Active Record associations", "isCorrect": false },
      { "id": "option_4", "text": "Session variables", "isCorrect": false }
    ],
    "hint": "It is used to show success or error messages.",
    "answerDescription": "The `flash` object in Rails stores temporary messages that persist for one request."
  },
  {
    "id": "ruby_1555",
    "question": "Which Rails helper is used for form creation?",
    "options": [
      { "id": "option_1", "text": "form_for", "isCorrect": true },
      { "id": "option_2", "text": "generate_form", "isCorrect": false },
      { "id": "option_3", "text": "make_form", "isCorrect": false },
      { "id": "option_4", "text": "form_create", "isCorrect": false }
    ],
    "hint": "It helps in building forms with model data.",
    "answerDescription": "The `form_for` helper in Rails is used for creating forms linked to models."
  },
  {
    "id": "ruby_1556",
    "question": "What is the purpose of 'render' in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "Displays a specific view", "isCorrect": true },
      { "id": "option_2", "text": "Redirects to another page", "isCorrect": false },
      { "id": "option_3", "text": "Defines routes", "isCorrect": false },
      { "id": "option_4", "text": "Manages database queries", "isCorrect": false }
    ],
    "hint": "It is used to display views in controllers.",
    "answerDescription": "The `render` method in Rails controllers is used to display a specific view template."
  },
  {
    "id": "ruby_1557",
    "question": "What is the purpose of the 'params' object in Rails?",
    "options": [
      { "id": "option_1", "text": "Access request parameters", "isCorrect": true },
      { "id": "option_2", "text": "Define database relations", "isCorrect": false },
      { "id": "option_3", "text": "Configure application settings", "isCorrect": false },
      { "id": "option_4", "text": "Manage background jobs", "isCorrect": false }
    ],
    "hint": "It holds data sent via HTTP requests.",
    "answerDescription": "The `params` object in Rails contains request parameters, such as form data or URL parameters."
  },  {
    "id": "ruby_1558",
    "question": "Which Rails component is responsible for handling database interactions?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": false },
      { "id": "option_2", "text": "Model", "isCorrect": true },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "It represents the data layer in MVC.",
    "answerDescription": "The Model in Rails handles database interactions and business logic."
  },
  {
    "id": "ruby_1559",
    "question": "What is the role of 'before_action' in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "Render a view", "isCorrect": false },
      { "id": "option_2", "text": "Execute code before controller actions", "isCorrect": true },
      { "id": "option_3", "text": "Define model associations", "isCorrect": false },
      { "id": "option_4", "text": "Create a new database record", "isCorrect": false }
    ],
    "hint": "It helps in running methods before actions execute.",
    "answerDescription": "The `before_action` filter runs a method before a controller action is executed."
  },
  {
    "id": "ruby_1560",
    "question": "Which method is used to redirect users in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "send_user", "isCorrect": false },
      { "id": "option_2", "text": "redirect_to", "isCorrect": true },
      { "id": "option_3", "text": "route_to", "isCorrect": false },
      { "id": "option_4", "text": "navigate_to", "isCorrect": false }
    ],
    "hint": "It is used to send HTTP redirects.",
    "answerDescription": "The `redirect_to` method in Rails is used to redirect users to another action or URL."
  },
  {
    "id": "ruby_1561",
    "question": "How do you define a route in Rails?",
    "options": [
      { "id": "option_1", "text": "Using the 'route' keyword", "isCorrect": false },
      { "id": "option_2", "text": "Using the 'resources' or 'get' methods in 'routes.rb'", "isCorrect": true },
      { "id": "option_3", "text": "By modifying the controller file", "isCorrect": false },
      { "id": "option_4", "text": "By defining it in the database schema", "isCorrect": false }
    ],
    "hint": "Routes are defined in a specific configuration file.",
    "answerDescription": "In Rails, routes are defined in `config/routes.rb` using `resources`, `get`, `post`, and other methods."
  },
  {
    "id": "ruby_1562",
    "question": "Which Rails method finds a record by its primary key?",
    "options": [
      { "id": "option_1", "text": "search_by", "isCorrect": false },
      { "id": "option_2", "text": "find", "isCorrect": true },
      { "id": "option_3", "text": "lookup", "isCorrect": false },
      { "id": "option_4", "text": "fetch", "isCorrect": false }
    ],
    "hint": "It raises an error if the record is not found.",
    "answerDescription": "The `find` method retrieves a record by its primary key and raises an error if not found."
  },
  {
    "id": "ruby_1563",
    "question": "What is the purpose of 'params' in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "Store session variables", "isCorrect": false },
      { "id": "option_2", "text": "Access request parameters", "isCorrect": true },
      { "id": "option_3", "text": "Define controller filters", "isCorrect": false },
      { "id": "option_4", "text": "Manage database transactions", "isCorrect": false }
    ],
    "hint": "It is used to access data sent via HTTP requests.",
    "answerDescription": "The `params` object contains request parameters like form data and URL parameters."
  },
  {
    "id": "ruby_1564",
    "question": "What does 'render' do in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "Redirect to another page", "isCorrect": false },
      { "id": "option_2", "text": "Display a specific view", "isCorrect": true },
      { "id": "option_3", "text": "Fetch a database record", "isCorrect": false },
      { "id": "option_4", "text": "Define a new route", "isCorrect": false }
    ],
    "hint": "It determines which view file to display.",
    "answerDescription": "The `render` method displays a specific view template in a Rails controller."
  },
  {
    "id": "ruby_1565",
    "question": "Which file stores database configuration settings in a Rails app?",
    "options": [
      { "id": "option_1", "text": "config/routes.rb", "isCorrect": false },
      { "id": "option_2", "text": "config/database.yml", "isCorrect": true },
      { "id": "option_3", "text": "config/secrets.yml", "isCorrect": false },
      { "id": "option_4", "text": "db/schema.rb", "isCorrect": false }
    ],
    "hint": "It contains settings for database connections.",
    "answerDescription": "The `config/database.yml` file stores database configuration details in a Rails application."
  },
  {
    "id": "ruby_1566",
    "question": "What does 'has_many' define in a Rails model?",
    "options": [
      { "id": "option_1", "text": "A belongs-to association", "isCorrect": false },
      { "id": "option_2", "text": "A one-to-many relationship", "isCorrect": true },
      { "id": "option_3", "text": "A many-to-many relationship", "isCorrect": false },
      { "id": "option_4", "text": "A one-to-one relationship", "isCorrect": false }
    ],
    "hint": "It signifies that a record can be associated with multiple other records.",
    "answerDescription": "The `has_many` association in Rails defines a one-to-many relationship between models."
  },
  {
    "id": "ruby_1567",
    "question": "Which Rails method is used to create a new record and save it to the database?",
    "options": [
      { "id": "option_1", "text": "insert", "isCorrect": false },
      { "id": "option_2", "text": "create", "isCorrect": true },
      { "id": "option_3", "text": "save", "isCorrect": false },
      { "id": "option_4", "text": "store", "isCorrect": false }
    ],
    "hint": "It combines object instantiation and database persistence.",
    "answerDescription": "The `create` method in Rails instantiates and saves a new record in one step."
  }, 
  {
    "id": "ruby_1568",
    "question": "Which part of MVC in Rails is responsible for user interface rendering?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "Controller", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": true },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "It is responsible for the front-end display.",
    "answerDescription": "The View in Rails is responsible for rendering user interfaces."
  },
  {
    "id": "ruby_1569",
    "question": "Which method is commonly used in Rails controllers to retrieve a specific record?",
    "options": [
      { "id": "option_1", "text": "get_record", "isCorrect": false },
      { "id": "option_2", "text": "fetch", "isCorrect": false },
      { "id": "option_3", "text": "find", "isCorrect": true },
      { "id": "option_4", "text": "retrieve", "isCorrect": false }
    ],
    "hint": "This method requires a primary key as an argument.",
    "answerDescription": "The `find` method retrieves a record by its primary key in Rails."
  },
  {
    "id": "ruby_1570",
    "question": "What does the 'resources' method define in Rails routes?",
    "options": [
      { "id": "option_1", "text": "A custom API endpoint", "isCorrect": false },
      { "id": "option_2", "text": "A static page", "isCorrect": false },
      { "id": "option_3", "text": "A RESTful set of routes", "isCorrect": true },
      { "id": "option_4", "text": "A middleware function", "isCorrect": false }
    ],
    "hint": "It generates routes for standard CRUD actions.",
    "answerDescription": "The `resources` method in Rails generates RESTful routes for a model."
  },
  {
    "id": "ruby_1571",
    "question": "Which command generates a new Rails controller?",
    "options": [
      { "id": "option_1", "text": "rails new controller", "isCorrect": false },
      { "id": "option_2", "text": "rails create controller", "isCorrect": false },
      { "id": "option_3", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_4", "text": "rails make controller", "isCorrect": false }
    ],
    "hint": "It starts with 'rails generate'.",
    "answerDescription": "The `rails generate controller` command creates a new Rails controller."
  },
  {
    "id": "ruby_1572",
    "question": "Which Rails method is used to update a database record?",
    "options": [
      { "id": "option_1", "text": "modify", "isCorrect": false },
      { "id": "option_2", "text": "set", "isCorrect": false },
      { "id": "option_3", "text": "update", "isCorrect": true },
      { "id": "option_4", "text": "change", "isCorrect": false }
    ],
    "hint": "It modifies an existing record and persists changes.",
    "answerDescription": "The `update` method modifies an existing record and saves it in Rails."
  },
  {
    "id": "ruby_1573",
    "question": "What does 'params' store in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "Session data", "isCorrect": false },
      { "id": "option_2", "text": "Cookies", "isCorrect": false },
      { "id": "option_3", "text": "Request parameters", "isCorrect": true },
      { "id": "option_4", "text": "Controller methods", "isCorrect": false }
    ],
    "hint": "It contains user input and query parameters.",
    "answerDescription": "The `params` object stores request parameters such as form data and URL variables."
  },
  {
    "id": "ruby_1574",
    "question": "Which of the following best describes a Rails helper?",
    "options": [
      { "id": "option_1", "text": "A method for database queries", "isCorrect": false },
      { "id": "option_2", "text": "A method for handling controller logic", "isCorrect": false },
      { "id": "option_3", "text": "A method used in views to format data", "isCorrect": true },
      { "id": "option_4", "text": "A method to define custom routes", "isCorrect": false }
    ],
    "hint": "Helpers are used to simplify view templates.",
    "answerDescription": "Rails helpers provide reusable methods for formatting and displaying data in views."
  },
  {
    "id": "ruby_1575",
    "question": "What does the 'before_action' callback do in Rails?",
    "options": [
      { "id": "option_1", "text": "Executes after an action", "isCorrect": false },
      { "id": "option_2", "text": "Handles errors in a controller", "isCorrect": false },
      { "id": "option_3", "text": "Runs a method before an action executes", "isCorrect": true },
      { "id": "option_4", "text": "Validates user input", "isCorrect": false }
    ],
    "hint": "It ensures certain logic runs before controller actions.",
    "answerDescription": "The `before_action` callback in Rails allows a method to execute before a controller action runs."
  },
  {
    "id": "ruby_1576",
    "question": "What 'flash' object does in Rails?",
    "options": [
      { "id": "option_1", "text": "Store user session data", "isCorrect": false },
      { "id": "option_2", "text": "Manage database records", "isCorrect": false },
      { "id": "option_3", "text": "Store temporary messages across requests", "isCorrect": true },
      { "id": "option_4", "text": "Handle API responses", "isCorrect": false }
    ],
    "hint": "It is commonly used for success and error messages.",
    "answerDescription": "The `flash` object in Rails stores temporary messages displayed in the next request."
  },
  {
    "id": "ruby_1577",
    "question": "Which Rails file defines the database schema?",
    "options": [
      { "id": "option_1", "text": "config/database.yml", "isCorrect": false },
      { "id": "option_2", "text": "db/migrate/schema.rb", "isCorrect": false },
      { "id": "option_3", "text": "db/schema.rb", "isCorrect": true },
      { "id": "option_4", "text": "app/models/schema.rb", "isCorrect": false }
    ],
    "hint": "It is automatically updated when migrations run.",
    "answerDescription": "The `db/schema.rb` file stores the current database structure in Rails."
  },
  {
    "id": "ruby_1578",
    "question": "Which Rails component is responsible for handling database interactions?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Router", "isCorrect": false },
      { "id": "option_4", "text": "Model", "isCorrect": true }
    ],
    "hint": "It represents the data layer in the MVC architecture.",
    "answerDescription": "The Model in Rails is responsible for interacting with the database."
  },
  {
    "id": "ruby_1579",
    "question": "Which file in a Rails application contains route definitions?",
    "options": [
      { "id": "option_1", "text": "config/application.rb", "isCorrect": false },
      { "id": "option_2", "text": "db/routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "app/routes.rb", "isCorrect": false },
      { "id": "option_4", "text": "config/routes.rb", "isCorrect": true }
    ],
    "hint": "This file defines URL mappings to controllers.",
    "answerDescription": "The `config/routes.rb` file in Rails defines application routes."
  },
  {
    "id": "ruby_1580",
    "question": "Which command generates a new Rails model?",
    "options": [
      { "id": "option_1", "text": "rails new model", "isCorrect": false },
      { "id": "option_2", "text": "rails create model", "isCorrect": false },
      { "id": "option_3", "text": "rails make model", "isCorrect": false },
      { "id": "option_4", "text": "rails generate model", "isCorrect": true }
    ],
    "hint": "This command starts with 'rails generate'.",
    "answerDescription": "The `rails generate model` command creates a new model in Rails."
  },
  {
    "id": "ruby_1581",
    "question": "What is the purpose of the 'has_many' association in Rails?",
    "options": [
      { "id": "option_1", "text": "To establish a one-to-one relationship", "isCorrect": false },
      { "id": "option_2", "text": "To define a model scope", "isCorrect": false },
      { "id": "option_3", "text": "To create a database migration", "isCorrect": false },
      { "id": "option_4", "text": "To establish a one-to-many relationship", "isCorrect": true }
    ],
    "hint": "It defines that one record can have multiple associated records.",
    "answerDescription": "The `has_many` association in Rails is used to define a one-to-many relationship between models."
  },
  {
    "id": "ruby_1582",
    "question": "Which method is used to validate data in Rails models?",
    "options": [
      { "id": "option_1", "text": "check_data", "isCorrect": false },
      { "id": "option_2", "text": "verify", "isCorrect": false },
      { "id": "option_3", "text": "ensure", "isCorrect": false },
      { "id": "option_4", "text": "validates", "isCorrect": true }
    ],
    "hint": "It is used within the model to enforce data integrity.",
    "answerDescription": "The `validates` method in Rails is used to ensure data consistency before saving records."
  },
  {
    "id": "ruby_1583",
    "question": "What is the purpose of a partial in Rails views?",
    "options": [
      { "id": "option_1", "text": "To define controller actions", "isCorrect": false },
      { "id": "option_2", "text": "To manage database queries", "isCorrect": false },
      { "id": "option_3", "text": "To create RESTful routes", "isCorrect": false },
      { "id": "option_4", "text": "To reuse view components", "isCorrect": true }
    ],
    "hint": "It is useful for reusing HTML structures in multiple places.",
    "answerDescription": "A partial in Rails allows reusing parts of views to avoid code duplication."
  },
  {
    "id": "ruby_1584",
    "question": "Which method is used to persist a new record in Rails?",
    "options": [
      { "id": "option_1", "text": "insert", "isCorrect": false },
      { "id": "option_2", "text": "store", "isCorrect": false },
      { "id": "option_3", "text": "add", "isCorrect": false },
      { "id": "option_4", "text": "save", "isCorrect": true }
    ],
    "hint": "It commits the changes to the database.",
    "answerDescription": "The `save` method in Rails is used to persist a new or updated record to the database."
  },
  {
    "id": "ruby_1585",
    "question": "What does 'strong parameters' in Rails controllers do?",
    "options": [
      { "id": "option_1", "text": "Encrypt data before saving", "isCorrect": false },
      { "id": "option_2", "text": "Handle background jobs", "isCorrect": false },
      { "id": "option_3", "text": "Define custom routes", "isCorrect": false },
      { "id": "option_4", "text": "Whitelist permitted parameters", "isCorrect": true }
    ],
    "hint": "It protects against mass assignment vulnerabilities.",
    "answerDescription": "Strong parameters in Rails ensure only permitted attributes can be modified via forms."
  },
  {
    "id": "ruby_1586",
    "question": "Which Rails command rolls back the last migration?",
    "options": [
      { "id": "option_1", "text": "rails rollback", "isCorrect": false },
      { "id": "option_2", "text": "rails undo migration", "isCorrect": false },
      { "id": "option_3", "text": "rails remove migration", "isCorrect": false },
      { "id": "option_4", "text": "rails db:rollback", "isCorrect": true }
    ],
    "hint": "It is commonly used to undo the most recent database migration.",
    "answerDescription": "The `rails db:rollback` command reverts the last migration in Rails."
  },
  {
    "id": "ruby_1587",
    "question": "Which file in a Rails project specifies dependencies?",
    "options": [
      { "id": "option_1", "text": "Gemfile.lock", "isCorrect": false },
      { "id": "option_2", "text": "config/dependencies.rb", "isCorrect": false },
      { "id": "option_3", "text": "app/dependencies.rb", "isCorrect": false },
      { "id": "option_4", "text": "Gemfile", "isCorrect": true }
    ],
    "hint": "It lists required gems for the application.",
    "answerDescription": "The `Gemfile` in Rails contains the list of dependencies and gems required for the project."
  },
  {
    "id": "ruby_1588",
    "question": "Which layer of the MVC architecture is responsible for handling user requests?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Database", "isCorrect": false },
      { "id": "option_4", "text": "Controller", "isCorrect": true }
    ],
    "hint": "It is responsible for processing input and updating the model and view.",
    "answerDescription": "The Controller in MVC handles user requests and determines how to respond."
  },
  {
    "id": "ruby_1589",
    "question": "What is the default database used in a new Rails application?",
    "options": [
      { "id": "option_1", "text": "MySQL", "isCorrect": false },
      { "id": "option_2", "text": "PostgreSQL", "isCorrect": false },
      { "id": "option_3", "text": "Oracle", "isCorrect": false },
      { "id": "option_4", "text": "SQLite", "isCorrect": true }
    ],
    "hint": "It is a lightweight, file-based database.",
    "answerDescription": "SQLite is the default database for new Rails applications unless another is specified."
  },
  {
    "id": "ruby_1590",
    "question": "Which Rails command creates a new controller?",
    "options": [
      { "id": "option_1", "text": "rails create controller", "isCorrect": false },
      { "id": "option_2", "text": "rails build controller", "isCorrect": false },
      { "id": "option_3", "text": "rails make controller", "isCorrect": false },
      { "id": "option_4", "text": "rails generate controller", "isCorrect": true }
    ],
    "hint": "This command starts with 'rails generate'.",
    "answerDescription": "The `rails generate controller` command creates a new controller in Rails."
  },
  {
    "id": "ruby_1591",
    "question": "What is the purpose of the 'belongs_to' association in Rails?",
    "options": [
      { "id": "option_1", "text": "To define a many-to-many relationship", "isCorrect": false },
      { "id": "option_2", "text": "To create database indexes", "isCorrect": false },
      { "id": "option_3", "text": "To establish a one-to-many relationship", "isCorrect": false },
      { "id": "option_4", "text": "To define a one-to-one or many-to-one relationship", "isCorrect": true }
    ],
    "hint": "It is used on the model that holds the foreign key.",
    "answerDescription": "The `belongs_to` association defines a one-to-one or many-to-one relationship in Rails."
  },
  {
    "id": "ruby_1592",
    "question": "Which method removes the newline character from the end of a string?",
    "options": [
      { "id": "option_1", "text": "trim_newline", "isCorrect": false },
      { "id": "option_2", "text": "strip_line", "isCorrect": false },
      { "id": "option_3", "text": "remove_newline", "isCorrect": false },
      { "id": "option_4", "text": "chomp", "isCorrect": true }
    ],
    "hint": "This method removes trailing newline characters.",
    "answerDescription": "The `chomp` method removes newline characters from the end of a string."
  },
  {
    "id": "ruby_1593",
    "question": "In Rails, what file defines environment-specific configurations?",
    "options": [
      { "id": "option_1", "text": "config/database.yml", "isCorrect": false },
      { "id": "option_2", "text": "app/config.rb", "isCorrect": false },
      { "id": "option_3", "text": "routes.rb", "isCorrect": false },
      { "id": "option_4", "text": "config/environments/*.rb", "isCorrect": true }
    ],
    "hint": "Different settings exist for development, test, and production modes.",
    "answerDescription": "The `config/environments/*.rb` files define settings for different environments."
  },
  {
    "id": "ruby_1594",
    "question": "Which method is used to create a new instance of a model in Rails?",
    "options": [
      { "id": "option_1", "text": "insert", "isCorrect": false },
      { "id": "option_2", "text": "store", "isCorrect": false },
      { "id": "option_3", "text": "add", "isCorrect": false },
      { "id": "option_4", "text": "new", "isCorrect": true }
    ],
    "hint": "It initializes an object but does not save it.",
    "answerDescription": "The `new` method in Rails initializes a new instance of a model."
  },
  {
    "id": "ruby_1595",
    "question": "Which Rails file is responsible for defining ActiveRecord models?",
    "options": [
      { "id": "option_1", "text": "config/models.rb", "isCorrect": false },
      { "id": "option_2", "text": "db/models.rb", "isCorrect": false },
      { "id": "option_3", "text": "routes.rb", "isCorrect": false },
      { "id": "option_4", "text": "app/models/*.rb", "isCorrect": true }
    ],
    "hint": "Models in Rails are stored within a specific 'app' subdirectory.",
    "answerDescription": "ActiveRecord models are defined inside the `app/models` directory in Rails."
  },
  {
    "id": "ruby_1596",
    "question": "What is the purpose of the 'before_action' callback in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "To log requests", "isCorrect": false },
      { "id": "option_2", "text": "To validate model data", "isCorrect": false },
      { "id": "option_3", "text": "To establish database connections", "isCorrect": false },
      { "id": "option_4", "text": "To run code before executing controller actions", "isCorrect": true }
    ],
    "hint": "It ensures specific code runs before executing an action.",
    "answerDescription": "The `before_action` callback in Rails controllers executes code before an action runs."
  },
  {
    "id": "ruby_1597",
    "question": "Which method returns a string in all uppercase letters?",
    "options": [
      { "id": "option_1", "text": "capitalize_all", "isCorrect": false },
      { "id": "option_2", "text": "uppercase", "isCorrect": false },
      { "id": "option_3", "text": "ucase", "isCorrect": false },
      { "id": "option_4", "text": "upcase", "isCorrect": true }
    ],
    "hint": "This method changes all characters to uppercase.",
    "answerDescription": "The `upcase` method converts a string to all uppercase."
  },
  {
    "id": "ruby_1598",
    "question": "Which part of MVC is responsible for interacting with the database?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": true },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": false },
      { "id": "option_4", "text": "Helper", "isCorrect": false }
    ],
    "hint": "It represents the data and business logic.",
    "answerDescription": "In MVC, the Model layer interacts with the database and defines business rules."
  },
  {
    "id": "ruby_1599",
    "question": "Which Ruby framework follows the MVC pattern by default?",
    "options": [
      { "id": "option_1", "text": "Ruby on Rails", "isCorrect": true },
      { "id": "option_2", "text": "Sinatra", "isCorrect": false },
      { "id": "option_3", "text": "Hanami", "isCorrect": false },
      { "id": "option_4", "text": "Roda", "isCorrect": false }
    ],
    "hint": "This is the most popular Ruby web framework.",
    "answerDescription": "Ruby on Rails follows the MVC architecture by default for web applications."
  },
  {
    "id": "ruby_1600",
    "question": "Which component of Rails handles user interactions?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Config", "isCorrect": false }
    ],
    "hint": "It processes user requests and updates the model and view.",
    "answerDescription": "The Controller in Rails processes user interactions and routes them accordingly."
  },
  {
    "id": "ruby_1601",
    "question": "What is the usage of the 'has_many' association in Rails?",
    "options": [
      { "id": "option_1", "text": "Defines a one-to-many relationship", "isCorrect": true },
      { "id": "option_2", "text": "Defines a one-to-one relationship", "isCorrect": false },
      { "id": "option_3", "text": "Defines a many-to-many relationship", "isCorrect": false },
      { "id": "option_4", "text": "Links a model to a database migration", "isCorrect": false }
    ],
    "hint": "It is used when one record is linked to multiple records of another model.",
    "answerDescription": "The `has_many` association defines a one-to-many relationship in Rails."
  },
  {
    "id": "ruby_1602",
    "question": "Which command is used to generate a new Rails model?",
    "options": [
      { "id": "option_1", "text": "rails generate model", "isCorrect": true },
      { "id": "option_2", "text": "rails create model", "isCorrect": false },
      { "id": "option_3", "text": "rails new model", "isCorrect": false },
      { "id": "option_4", "text": "rails build model", "isCorrect": false }
    ],
    "hint": "This command starts with 'rails generate'.",
    "answerDescription": "The `rails generate model` command creates a new model file in Rails."
  },
  {
    "id": "ruby_1603",
    "question": "Which method is used in Rails to define routes?",
    "options": [
      { "id": "option_1", "text": "resources", "isCorrect": true },
      { "id": "option_2", "text": "paths", "isCorrect": false },
      { "id": "option_3", "text": "routers", "isCorrect": false },
      { "id": "option_4", "text": "links", "isCorrect": false }
    ],
    "hint": "It is commonly used in config/routes.rb to set up RESTful routes.",
    "answerDescription": "In Rails, `resources` is used in routes to define RESTful routes."
  },
  {
    "id": "ruby_1604",
    "question": "Which Rails command is used to apply database migrations?",
    "options": [
      { "id": "option_1", "text": "rails db:migrate", "isCorrect": true },
      { "id": "option_2", "text": "rails migrate:db", "isCorrect": false },
      { "id": "option_3", "text": "rails apply:migration", "isCorrect": false },
      { "id": "option_4", "text": "rails update:db", "isCorrect": false }
    ],
    "hint": "It runs all pending migrations on the database.",
    "answerDescription": "The `rails db:migrate` command applies all pending database migrations."
  },
  {
    "id": "ruby_1605",
    "question": "What file in a Rails project defines the database schema?",
    "options": [
      { "id": "option_1", "text": "db/schema.rb", "isCorrect": true },
      { "id": "option_2", "text": "config/database.yml", "isCorrect": false },
      { "id": "option_3", "text": "app/models/schema.rb", "isCorrect": false },
      { "id": "option_4", "text": "db/migrate.rb", "isCorrect": false }
    ],
    "hint": "This file stores a representation of the database structure.",
    "answerDescription": "In Rails, `db/schema.rb` defines the structure of the database."
  },
  {
    "id": "ruby_1606",
    "question": "Which method is used in Rails to find a specific record by its ID?",
    "options": [
      { "id": "option_1", "text": "find", "isCorrect": true },
      { "id": "option_2", "text": "fetch", "isCorrect": false },
      { "id": "option_3", "text": "get", "isCorrect": false },
      { "id": "option_4", "text": "select", "isCorrect": false }
    ],
    "hint": "This method raises an exception if no record is found.",
    "answerDescription": "The `find` method in Rails retrieves a record by its ID."
  },
  {
    "id": "ruby_1607",
    "question": "Which file in a Rails project defines application routes?",
    "options": [
      { "id": "option_1", "text": "config/routes.rb", "isCorrect": true },
      { "id": "option_2", "text": "app/routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "db/routes.rb", "isCorrect": false },
      { "id": "option_4", "text": "routes/config.rb", "isCorrect": false }
    ],
    "hint": "It is located inside the 'config' directory.",
    "answerDescription": "In Rails, `config/routes.rb` defines application routes."
  },
  {
    "id": "ruby_1608",
    "question": "What is the purpose of the View layer in MVC?",
    "options": [
      { "id": "option_1", "text": "To display data to the user", "isCorrect": true },
      { "id": "option_2", "text": "To handle database queries", "isCorrect": false },
      { "id": "option_3", "text": "To control application flow", "isCorrect": false },
      { "id": "option_4", "text": "To define routes", "isCorrect": false }
    ],
    "hint": "This layer is responsible for rendering HTML templates.",
    "answerDescription": "In MVC, the View layer is responsible for presenting data to the user."
  },
  {
    "id": "ruby_1609",
    "question": "Which component in Rails is responsible for defining business logic?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": true },
      { "id": "option_2", "text": "Controller", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "This component interacts with the database and contains business rules.",
    "answerDescription": "The Model in Rails defines business logic and interacts with the database."
  },
  {
    "id": "ruby_1610",
    "question": "In Rails, which file contains route definitions?",
    "options": [
      { "id": "option_1", "text": "config/routes.rb", "isCorrect": true },
      { "id": "option_2", "text": "app/config.rb", "isCorrect": false },
      { "id": "option_3", "text": "routes.yml", "isCorrect": false },
      { "id": "option_4", "text": "app/routes.rb", "isCorrect": false }
    ],
    "hint": "This file is located inside the config directory.",
    "answerDescription": "In Rails, the `config/routes.rb` file defines application routes."
  },
  {
    "id": "ruby_1611",
    "question": "Which command is used to start a new Rails application?",
    "options": [
      { "id": "option_1", "text": "rails new app_name", "isCorrect": true },
      { "id": "option_2", "text": "rails generate app app_name", "isCorrect": false },
      { "id": "option_3", "text": "rails create app_name", "isCorrect": false },
      { "id": "option_4", "text": "rails build app_name", "isCorrect": false }
    ],
    "hint": "This command initializes a new Rails project.",
    "answerDescription": "The `rails new app_name` command creates a new Rails application."
  },
  {
    "id": "ruby_1612",
    "question": "Which Rails method retrieves all records of a model?",
    "options": [
      { "id": "option_1", "text": "all", "isCorrect": true },
      { "id": "option_2", "text": "get_all", "isCorrect": false },
      { "id": "option_3", "text": "find_all", "isCorrect": false },
      { "id": "option_4", "text": "retrieve", "isCorrect": false }
    ],
    "hint": "This method is often used in ActiveRecord queries.",
    "answerDescription": "The `all` method retrieves all records of a model in Rails."
  },
  {
    "id": "ruby_1613",
    "question": "Which keyword is used in Rails models to define a one-to-one relationship?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": true },
      { "id": "option_2", "text": "has_many", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "one_to_one", "isCorrect": false }
    ],
    "hint": "This association ensures each record relates to only one record in another model.",
    "answerDescription": "The `has_one` association in Rails defines a one-to-one relationship."
  },
  {
    "id": "ruby_1614",
    "question": "Which Rails method is used to validate the presence of a field in a model?",
    "options": [
      { "id": "option_1", "text": "validates :field, presence: true", "isCorrect": true },
      { "id": "option_2", "text": "ensure :field, required: true", "isCorrect": false },
      { "id": "option_3", "text": "validate_presence :field", "isCorrect": false },
      { "id": "option_4", "text": "field.required = true", "isCorrect": false }
    ],
    "hint": "It is commonly used in ActiveRecord models to enforce field requirements.",
    "answerDescription": "The `validates :field, presence: true` method ensures that a field is required in Rails."
  },
  {
    "id": "ruby_1615",
    "question": "Which Rails component handles HTTP requests?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Route", "isCorrect": false }
    ],
    "hint": "It processes user actions and communicates with the model and view.",
    "answerDescription": "In Rails, the Controller handles HTTP requests and routes them accordingly."
  },
  {
    "id": "ruby_1616",
    "question": "Which file contains database configuration settings in a Rails project?",
    "options": [
      { "id": "option_1", "text": "config/database.yml", "isCorrect": true },
      { "id": "option_2", "text": "db/schema.rb", "isCorrect": false },
      { "id": "option_3", "text": "database/config.rb", "isCorrect": false },
      { "id": "option_4", "text": "db/migrate.rb", "isCorrect": false }
    ],
    "hint": "It defines the connection settings for the database.",
    "answerDescription": "In Rails, `config/database.yml` contains database configuration settings."
  },
  {
    "id": "ruby_1617",
    "question": "Which command is used to roll back the last Rails database migration?",
    "options": [
      { "id": "option_1", "text": "rails db:rollback", "isCorrect": true },
      { "id": "option_2", "text": "rails rollback:migration", "isCorrect": false },
      { "id": "option_3", "text": "rails db:undo", "isCorrect": false },
      { "id": "option_4", "text": "rails migrate:rollback", "isCorrect": false }
    ],
    "hint": "This command reverses the last migration applied to the database.",
    "answerDescription": "The `rails db:rollback` command undoes the last database migration in Rails."
  },
  {
    "id": "ruby_1618",
    "question": "What does the Model component in MVC handle?",
    "options": [
      { "id": "option_1", "text": "User interface rendering", "isCorrect": false },
      { "id": "option_2", "text": "Data and business logic", "isCorrect": true },
      { "id": "option_3", "text": "Routing user requests", "isCorrect": false },
      { "id": "option_4", "text": "Processing HTTP responses", "isCorrect": false }
    ],
    "hint": "It manages the application's data and rules.",
    "answerDescription": "In MVC, the Model component handles data storage and business logic."
  },
  {
    "id": "ruby_1619",
    "question": "Which Rails file is primarily responsible for defining the application’s routes?",
    "options": [
      { "id": "option_1", "text": "app/routes.rb", "isCorrect": false },
      { "id": "option_2", "text": "config/routes.rb", "isCorrect": true },
      { "id": "option_3", "text": "routes.yml", "isCorrect": false },
      { "id": "option_4", "text": "app/config/routes.rb", "isCorrect": false }
    ],
    "hint": "This file maps URLs to controllers and actions.",
    "answerDescription": "In Rails, `config/routes.rb` is used to define application routes."
  },
  {
    "id": "ruby_1620",
    "question": "Which command generates a new controller in Rails?",
    "options": [
      { "id": "option_1", "text": "rails new controller ControllerName", "isCorrect": false },
      { "id": "option_2", "text": "rails generate controller ControllerName", "isCorrect": true },
      { "id": "option_3", "text": "rails create controller ControllerName", "isCorrect": false },
      { "id": "option_4", "text": "rails controller ControllerName", "isCorrect": false }
    ],
    "hint": "This command is used to create new resources in Rails.",
    "answerDescription": "The `rails generate controller ControllerName` command creates a new controller in Rails."
  },
  {
    "id": "ruby_1621",
    "question": "Which Rails component handles user requests?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "Controller", "isCorrect": true },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Helper", "isCorrect": false }
    ],
    "hint": "This component acts as a bridge between the model and the view.",
    "answerDescription": "In Rails, the Controller processes user requests and interacts with models and views."
  },
  {
    "id": "ruby_1622",
    "question": "Which Rails method retrieves a specific record by its ID?",
    "options": [
      { "id": "option_1", "text": "search_by_id", "isCorrect": false },
      { "id": "option_2", "text": "find", "isCorrect": true },
      { "id": "option_3", "text": "fetch", "isCorrect": false },
      { "id": "option_4", "text": "retrieve", "isCorrect": false }
    ],
    "hint": "This method fetches a record based on its primary key.",
    "answerDescription": "In Rails, the `find` method retrieves a specific record by ID."
  },
  {
    "id": "ruby_1623",
    "question": "Which method in Rails defines a many-to-one relationship?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": true },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "many_to_one", "isCorrect": false }
    ],
    "hint": "This relationship is defined in the child model.",
    "answerDescription": "The `belongs_to` association defines a many-to-one relationship in Rails."
  },
  {
    "id": "ruby_1624",
    "question": "What is the purpose of the `before_action` filter in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "To run actions before starting the server", "isCorrect": false },
      { "id": "option_2", "text": "To execute methods before controller actions", "isCorrect": true },
      { "id": "option_3", "text": "To validate form inputs", "isCorrect": false },
      { "id": "option_4", "text": "To filter database queries", "isCorrect": false }
    ],
    "hint": "It is commonly used for authentication and setting instance variables.",
    "answerDescription": "The `before_action` filter ensures methods run before controller actions in Rails."
  },
  {
    "id": "ruby_1625",
    "question": "Which file in a Rails project contains environment-specific settings?",
    "options": [
      { "id": "option_1", "text": "config/boot.rb", "isCorrect": false },
      { "id": "option_2", "text": "config/environments/development.rb", "isCorrect": true },
      { "id": "option_3", "text": "app/settings.rb", "isCorrect": false },
      { "id": "option_4", "text": "db/config.rb", "isCorrect": false }
    ],
    "hint": "Each environment has its own configuration file.",
    "answerDescription": "In Rails, environment-specific settings are defined in `config/environments/*.rb`."
  },
  {
    "id": "ruby_1626",
    "question": "Which Rails command is used to create a new database migration?",
    "options": [
      { "id": "option_1", "text": "rails db:create_migration", "isCorrect": false },
      { "id": "option_2", "text": "rails generate migration MigrationName", "isCorrect": true },
      { "id": "option_3", "text": "rails new migration MigrationName", "isCorrect": false },
      { "id": "option_4", "text": "rails db:migrate:create", "isCorrect": false }
    ],
    "hint": "This command generates a file inside the db/migrate directory.",
    "answerDescription": "The `rails generate migration MigrationName` command creates a new database migration."
  },
  {
    "id": "ruby_1627",
    "question": "Which method is used to check if a record exists in the database?",
    "options": [
      { "id": "option_1", "text": "exists?", "isCorrect": false },
      { "id": "option_2", "text": "exists?", "isCorrect": true },
      { "id": "option_3", "text": "present?", "isCorrect": false },
      { "id": "option_4", "text": "include?", "isCorrect": false }
    ],
    "hint": "It returns a boolean indicating whether the record is present.",
    "answerDescription": "The `exists?` method checks if a record exists in the database in Rails."
  },
  {
    "id": "ruby_1628",
    "question": "Which component of MVC is responsible for displaying data to the user?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "Controller", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": true },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "This component is responsible for rendering user interfaces.",
    "answerDescription": "In MVC, the View is responsible for displaying data to the user."
  },
  {
    "id": "ruby_1629",
    "question": "Which file in a Rails project defines database structure changes?",
    "options": [
      { "id": "option_1", "text": "schema.rb", "isCorrect": false },
      { "id": "option_2", "text": "routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "migration file", "isCorrect": true },
      { "id": "option_4", "text": "config.rb", "isCorrect": false }
    ],
    "hint": "This file is located in the db/migrate directory.",
    "answerDescription": "Rails migrations define database structure changes."
  },
  {
    "id": "ruby_1630",
    "question": "What is the purpose of the `render` method in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "To define new routes", "isCorrect": false },
      { "id": "option_2", "text": "To fetch data from the model", "isCorrect": false },
      { "id": "option_3", "text": "To return a view as a response", "isCorrect": true },
      { "id": "option_4", "text": "To create a new model instance", "isCorrect": false }
    ],
    "hint": "This method is used to send responses to the user.",
    "answerDescription": "In Rails, `render` is used in controllers to return a view as a response."
  },
  {
    "id": "ruby_1631",
    "question": "Which ActiveRecord method retrieves the first record in a table?",
    "options": [
      { "id": "option_1", "text": "get_first", "isCorrect": false },
      { "id": "option_2", "text": "fetch", "isCorrect": false },
      { "id": "option_3", "text": "first", "isCorrect": true },
      { "id": "option_4", "text": "retrieve", "isCorrect": false }
    ],
    "hint": "This method returns the first record ordered by primary key.",
    "answerDescription": "The `first` method retrieves the first record in an ActiveRecord table."
  },
  {
    "id": "ruby_1632",
    "question": "What is the default web server used in Rails during development?",
    "options": [
      { "id": "option_1", "text": "Nginx", "isCorrect": false },
      { "id": "option_2", "text": "Puma", "isCorrect": false },
      { "id": "option_3", "text": "WEBrick", "isCorrect": true },
      { "id": "option_4", "text": "Unicorn", "isCorrect": false }
    ],
    "hint": "This server is built into Ruby and used by default in Rails.",
    "answerDescription": "WEBrick is the default web server for Rails in development mode."
  },
  {
    "id": "ruby_1633",
    "question": "Which of the following best describes the Rails asset pipeline?",
    "options": [
      { "id": "option_1", "text": "A background job processor", "isCorrect": false },
      { "id": "option_2", "text": "A testing framework", "isCorrect": false },
      { "id": "option_3", "text": "A system for managing JavaScript, CSS, and images", "isCorrect": true },
      { "id": "option_4", "text": "A tool for optimizing database queries", "isCorrect": false }
    ],
    "hint": "It compiles and minifies static assets in a Rails project.",
    "answerDescription": "The asset pipeline manages JavaScript, CSS, and images in Rails applications."
  },
  {
    "id": "ruby_1634",
    "question": "What does `rails db:migrate` do?",
    "options": [
      { "id": "option_1", "text": "Applies database migrations", "isCorrect": true },
      { "id": "option_2", "text": "Resets the database", "isCorrect": false },
      { "id": "option_3", "text": "Deletes all records", "isCorrect": false },
      { "id": "option_4", "text": "Generates a new migration file", "isCorrect": false }
    ],
    "hint": "This command updates the database schema based on migration files.",
    "answerDescription": "The `rails db:migrate` command runs pending migrations to update the database."
  },
  {
    "id": "ruby_1635",
    "question": "What is the purpose of a helper in Rails?",
    "options": [
      { "id": "option_1", "text": "To handle model relationships", "isCorrect": false },
      { "id": "option_2", "text": "To route HTTP requests", "isCorrect": false },
      { "id": "option_3", "text": "To assist in rendering views", "isCorrect": true },
      { "id": "option_4", "text": "To validate user input", "isCorrect": false }
    ],
    "hint": "Helpers provide reusable methods for views.",
    "answerDescription": "Helpers in Rails assist with rendering views by providing reusable methods."
  },
  {
    "id": "ruby_1636",
    "question": "Which method is used to redirect a user to another action in Rails?",
    "options": [
      { "id": "option_1", "text": "reroute", "isCorrect": false },
      { "id": "option_2", "text": "navigate_to", "isCorrect": false },
      { "id": "option_3", "text": "redirect_to", "isCorrect": true },
      { "id": "option_4", "text": "forward", "isCorrect": false }
    ],
    "hint": "This method is often used in controllers to send users to a different page.",
    "answerDescription": "The `redirect_to` method in Rails is used to send users to another action or URL."
  },
  {
    "id": "ruby_1637",
    "question": "What does the `validates` method do in Rails models?",
    "options": [
      { "id": "option_1", "text": "Defines relationships between models", "isCorrect": false },
      { "id": "option_2", "text": "Creates database indexes", "isCorrect": false },
      { "id": "option_3", "text": "Enforces data validation rules", "isCorrect": true },
      { "id": "option_4", "text": "Defines model attributes", "isCorrect": false }
    ],
    "hint": "This method ensures data integrity at the model level.",
    "answerDescription": "The `validates` method in Rails ensures that data meets specified validation rules."
  },
  {
    "id": "ruby_1638",
    "question": "Which part of MVC is responsible for handling user input?",
    "options": [
      { "id": "option_1", "text": "View", "isCorrect": false },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "Database", "isCorrect": false },
      { "id": "option_4", "text": "Controller", "isCorrect": true }
    ],
    "hint": "This component processes user input and updates the model.",
    "answerDescription": "The Controller in MVC handles user input and manages application flow."
  },
  {
    "id": "ruby_1639",
    "question": "Which method in Rails is used to retrieve a record by its primary key?",
    "options": [
      { "id": "option_1", "text": "where", "isCorrect": false },
      { "id": "option_2", "text": "fetch", "isCorrect": false },
      { "id": "option_3", "text": "lookup", "isCorrect": false },
      { "id": "option_4", "text": "find", "isCorrect": true }
    ],
    "hint": "This method raises an error if no record is found.",
    "answerDescription": "The `find` method retrieves a record by its primary key."
  },
  {
    "id": "ruby_1640",
    "question": "What command is used to generate a new Rails model?",
    "options": [
      { "id": "option_1", "text": "rails create model", "isCorrect": false },
      { "id": "option_2", "text": "rails model new", "isCorrect": false },
      { "id": "option_3", "text": "rails g database", "isCorrect": false },
      { "id": "option_4", "text": "rails generate model", "isCorrect": true }
    ],
    "hint": "This command can be shortened using `rails g`.",
    "answerDescription": "The `rails generate model` command creates a new model file in a Rails application."
  },
  {
    "id": "ruby_1641",
    "question": "Which database is the default for new Rails applications?",
    "options": [
      { "id": "option_1", "text": "MySQL", "isCorrect": false },
      { "id": "option_2", "text": "PostgreSQL", "isCorrect": false },
      { "id": "option_3", "text": "Oracle", "isCorrect": false },
      { "id": "option_4", "text": "SQLite", "isCorrect": true }
    ],
    "hint": "This is a lightweight, file-based database.",
    "answerDescription": "Rails uses SQLite as the default database for new applications."
  },
  {
    "id": "ruby_1642",
    "question": "Which Rails file is responsible for defining application routes?",
    "options": [
      { "id": "option_1", "text": "config/database.rb", "isCorrect": false },
      { "id": "option_2", "text": "app/controllers.rb", "isCorrect": false },
      { "id": "option_3", "text": "routes.json", "isCorrect": false },
      { "id": "option_4", "text": "config/routes.rb", "isCorrect": true }
    ],
    "hint": "This file maps URLs to controllers and actions.",
    "answerDescription": "The `config/routes.rb` file defines the routes for a Rails application."
  },
  {
    "id": "ruby_1643",
    "question": "What is the purpose of the `before_action` callback in Rails?",
    "options": [
      { "id": "option_1", "text": "To handle errors in controllers", "isCorrect": false },
      { "id": "option_2", "text": "To define application-wide filters", "isCorrect": false },
      { "id": "option_3", "text": "To validate form inputs", "isCorrect": false },
      { "id": "option_4", "text": "To run code before controller actions", "isCorrect": true }
    ],
    "hint": "This callback is commonly used for authentication checks.",
    "answerDescription": "The `before_action` callback ensures certain logic runs before controller actions execute."
  },
  {
    "id": "ruby_1644",
    "question": "Which command is used to create and apply a new database migration in Rails?",
    "options": [
      { "id": "option_1", "text": "rails new migration", "isCorrect": false },
      { "id": "option_2", "text": "rails apply migration", "isCorrect": false },
      { "id": "option_3", "text": "rails db:rollback", "isCorrect": false },
      { "id": "option_4", "text": "rails db:migrate", "isCorrect": true }
    ],
    "hint": "This command updates the database schema based on migrations.",
    "answerDescription": "The `rails db:migrate` command applies pending database migrations."
  },
  {
    "id": "ruby_1645",
    "question": "What is the purpose of the `flash` hash in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "To store session data", "isCorrect": false },
      { "id": "option_2", "text": "To handle background jobs", "isCorrect": false },
      { "id": "option_3", "text": "To define model associations", "isCorrect": false },
      { "id": "option_4", "text": "To store temporary messages", "isCorrect": true }
    ],
    "hint": "This hash is commonly used to display success or error messages.",
    "answerDescription": "The `flash` hash stores messages that persist for one request-response cycle."
  },
  {
    "id": "ruby_1646",
    "question": "Which Rails method is used to specify relationships between models?",
    "options": [
      { "id": "option_1", "text": "define_relationship", "isCorrect": false },
      { "id": "option_2", "text": "model_association", "isCorrect": false },
      { "id": "option_3", "text": "add_association", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "This method establishes a one-to-many relationship in models.",
    "answerDescription": "The `has_many` method in Rails defines a one-to-many relationship between models."
  },
  {
    "id": "ruby_1647",
    "question": "What does the `scaffold` command do in Rails?",
    "options": [
      { "id": "option_1", "text": "Creates only a database table", "isCorrect": false },
      { "id": "option_2", "text": "Generates a basic API", "isCorrect": false },
      { "id": "option_3", "text": "Defines an ActiveRecord query", "isCorrect": false },
      { "id": "option_4", "text": "Generates a full CRUD interface", "isCorrect": true }
    ],
    "hint": "This command creates models, views, and controllers automatically.",
    "answerDescription": "The `rails generate scaffold` command generates a full CRUD interface for a resource."
  },
  {
    "id": "ruby_1648",
    "question": "Which part of the MVC pattern represents the data and business logic?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": true },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": false },
      { "id": "option_4", "text": "Helper", "isCorrect": false }
    ],
    "hint": "This component handles the application's core logic and data.",
    "answerDescription": "The Model represents the data and business logic in the MVC pattern."
  },
  {
    "id": "ruby_1649",
    "question": "Which Rails command is used to start the server?",
    "options": [
      { "id": "option_1", "text": "rails server", "isCorrect": true },
      { "id": "option_2", "text": "rails start", "isCorrect": false },
      { "id": "option_3", "text": "rails boot", "isCorrect": false },
      { "id": "option_4", "text": "rails run", "isCorrect": false }
    ],
    "hint": "This command launches a local web server for development.",
    "answerDescription": "The `rails server` command starts the Rails application server."
  },
  {
    "id": "ruby_1650",
    "question": "Which method in Rails controllers is used to redirect a user to another page?",
    "options": [
      { "id": "option_1", "text": "redirect_to", "isCorrect": true },
      { "id": "option_2", "text": "go_to", "isCorrect": false },
      { "id": "option_3", "text": "move_to", "isCorrect": false },
      { "id": "option_4", "text": "send_to", "isCorrect": false }
    ],
    "hint": "This method changes the browser's URL and initiates a new request.",
    "answerDescription": "The `redirect_to` method in Rails controllers redirects users to another URL."
  },
  {
    "id": "ruby_1651",
    "question": "What file type is commonly used for Rails views?",
    "options": [
      { "id": "option_1", "text": ".html.erb", "isCorrect": true },
      { "id": "option_2", "text": ".html.rb", "isCorrect": false },
      { "id": "option_3", "text": ".view.html", "isCorrect": false },
      { "id": "option_4", "text": ".rb.html", "isCorrect": false }
    ],
    "hint": "This format combines Ruby code with HTML.",
    "answerDescription": "Rails views are commonly written in `.html.erb` format, which supports embedded Ruby."
  },
  {
    "id": "ruby_1652",
    "question": "Which Rails command is used to generate a new controller?",
    "options": [
      { "id": "option_1", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_2", "text": "rails new controller", "isCorrect": false },
      { "id": "option_3", "text": "rails make controller", "isCorrect": false },
      { "id": "option_4", "text": "rails create controller", "isCorrect": false }
    ],
    "hint": "This command creates a controller file along with associated views.",
    "answerDescription": "The `rails generate controller` command creates a new controller in a Rails application."
  },
  {
    "id": "ruby_1653",
    "question": "Which keyword is used in Rails to define a database table structure?",
    "options": [
      { "id": "option_1", "text": "create_table", "isCorrect": true },
      { "id": "option_2", "text": "define_table", "isCorrect": false },
      { "id": "option_3", "text": "set_table", "isCorrect": false },
      { "id": "option_4", "text": "make_table", "isCorrect": false }
    ],
    "hint": "This method is used inside migrations to define table schema.",
    "answerDescription": "The `create_table` method is used in Rails migrations to define a database table structure."
  },
  {
    "id": "ruby_1654",
    "question": "Which Rails helper method is used to generate form elements?",
    "options": [
      { "id": "option_1", "text": "form_for", "isCorrect": true },
      { "id": "option_2", "text": "create_form", "isCorrect": false },
      { "id": "option_3", "text": "form_generate", "isCorrect": false },
      { "id": "option_4", "text": "new_form", "isCorrect": false }
    ],
    "hint": "This method simplifies form creation by binding it to an ActiveRecord object.",
    "answerDescription": "The `form_for` helper is used to generate form elements in Rails views."
  },
  {
    "id": "ruby_1655",
    "question": "Which ActiveRecord method is used to define a one-to-one association?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": true },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": false },
      { "id": "option_4", "text": "connect_to", "isCorrect": false }
    ],
    "hint": "This method is used when a model should be associated with only one record.",
    "answerDescription": "The `has_one` method in ActiveRecord defines a one-to-one relationship between models."
  },
  {
    "id": "ruby_1656",
    "question": "Which method is used to display data inside Rails views?",
    "options": [
      { "id": "option_1", "text": "<%= %>", "isCorrect": true },
      { "id": "option_2", "text": "<% %>", "isCorrect": false },
      { "id": "option_3", "text": "{{ }}", "isCorrect": false },
      { "id": "option_4", "text": "<%=->", "isCorrect": false }
    ],
    "hint": "This syntax is used to print values in ERB templates.",
    "answerDescription": "The `<%= %>` syntax is used in Rails views to display data dynamically."
  },
  {
    "id": "ruby_1657",
    "question": "Which Rails command is used to rollback the last migration?",
    "options": [
      { "id": "option_1", "text": "rails db:rollback", "isCorrect": true },
      { "id": "option_2", "text": "rails migration undo", "isCorrect": false },
      { "id": "option_3", "text": "rails db:reverse", "isCorrect": false },
      { "id": "option_4", "text": "rails undo:migration", "isCorrect": false }
    ],
    "hint": "This command reverts the last applied migration in Rails.",
    "answerDescription": "The `rails db:rollback` command undoes the most recent database migration."
  },
  {
    "id": "ruby_1658",
    "question": "Which component of the MVC pattern is responsible for handling user input?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Helper", "isCorrect": false }
    ],
    "hint": "This component processes requests and interacts with the model.",
    "answerDescription": "The Controller handles user input and interacts with the model to update the view."
  },
  {
    "id": "ruby_1659",
    "question": "What is the main function of the View in the MVC pattern?",
    "options": [
      { "id": "option_1", "text": "Displaying data to the user", "isCorrect": true },
      { "id": "option_2", "text": "Processing business logic", "isCorrect": false },
      { "id": "option_3", "text": "Handling database queries", "isCorrect": false },
      { "id": "option_4", "text": "Managing user authentication", "isCorrect": false }
    ],
    "hint": "This component is responsible for rendering the user interface.",
    "answerDescription": "The View in MVC is responsible for displaying data to the user in a structured format."
  },
  {
    "id": "ruby_1660",
    "question": "Which Rails command is used to create a new Rails application?",
    "options": [
      { "id": "option_1", "text": "rails new app_name", "isCorrect": true },
      { "id": "option_2", "text": "rails generate app app_name", "isCorrect": false },
      { "id": "option_3", "text": "rails create app_name", "isCorrect": false },
      { "id": "option_4", "text": "rails start app_name", "isCorrect": false }
    ],
    "hint": "This command initializes a new Rails project structure.",
    "answerDescription": "The `rails new app_name` command is used to create a new Rails application."
  },
  {
    "id": "ruby_1661",
    "question": "Which folder in a Rails project contains the application's models?",
    "options": [
      { "id": "option_1", "text": "app/models", "isCorrect": true },
      { "id": "option_2", "text": "app/views", "isCorrect": false },
      { "id": "option_3", "text": "app/controllers", "isCorrect": false },
      { "id": "option_4", "text": "config/models", "isCorrect": false }
    ],
    "hint": "This directory contains Ruby classes that interact with the database.",
    "answerDescription": "In Rails, models are stored in the `app/models` folder."
  },
  {
    "id": "ruby_1662",
    "question": "Which Rails command is used to generate a migration?",
    "options": [
      { "id": "option_1", "text": "rails generate migration", "isCorrect": true },
      { "id": "option_2", "text": "rails new migration", "isCorrect": false },
      { "id": "option_3", "text": "rails create migration", "isCorrect": false },
      { "id": "option_4", "text": "rails db:migrate", "isCorrect": false }
    ],
    "hint": "This command creates a migration file for database schema changes.",
    "answerDescription": "The `rails generate migration` command is used to create a new migration file in Rails."
  },
  {
    "id": "ruby_1663",
    "question": "Which ActiveRecord method is used to retrieve the first record in a table?",
    "options": [
      { "id": "option_1", "text": "first", "isCorrect": true },
      { "id": "option_2", "text": "take", "isCorrect": false },
      { "id": "option_3", "text": "find_first", "isCorrect": false },
      { "id": "option_4", "text": "first_record", "isCorrect": false }
    ],
    "hint": "This method returns the first row of the table based on primary key order.",
    "answerDescription": "The `first` method in ActiveRecord retrieves the first record in a database table."
  },
  {
    "id": "ruby_1664",
    "question": "Which HTTP verb is used in Rails to update an existing resource?",
    "options": [
      { "id": "option_1", "text": "PATCH", "isCorrect": true },
      { "id": "option_2", "text": "GET", "isCorrect": false },
      { "id": "option_3", "text": "POST", "isCorrect": false },
      { "id": "option_4", "text": "DELETE", "isCorrect": false }
    ],
    "hint": "This HTTP method is commonly used to partially update a resource.",
    "answerDescription": "The PATCH method is used to update an existing resource in a Rails application."
  },
  {
    "id": "ruby_1665",
    "question": "Which Rails method is used to retrieve all records from a database table?",
    "options": [
      { "id": "option_1", "text": "all", "isCorrect": true },
      { "id": "option_2", "text": "fetch_all", "isCorrect": false },
      { "id": "option_3", "text": "find_all", "isCorrect": false },
      { "id": "option_4", "text": "list", "isCorrect": false }
    ],
    "hint": "This method returns an ActiveRecord collection containing all records.",
    "answerDescription": "The `all` method retrieves all records from a given database table in Rails."
  },
  {
    "id": "ruby_1666",
    "question": "What is the default database used in a new Rails application?",
    "options": [
      { "id": "option_1", "text": "SQLite", "isCorrect": true },
      { "id": "option_2", "text": "PostgreSQL", "isCorrect": false },
      { "id": "option_3", "text": "MySQL", "isCorrect": false },
      { "id": "option_4", "text": "MongoDB", "isCorrect": false }
    ],
    "hint": "This lightweight database is commonly used for Rails development.",
    "answerDescription": "By default, a new Rails application uses SQLite as its database."
  },
  {
    "id": "ruby_1667",
    "question": "Which Rails file defines the application's routes?",
    "options": [
      { "id": "option_1", "text": "config/routes.rb", "isCorrect": true },
      { "id": "option_2", "text": "app/routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "config/router.rb", "isCorrect": false },
      { "id": "option_4", "text": "app/config/routes.rb", "isCorrect": false }
    ],
    "hint": "This file contains the mapping of URLs to controller actions.",
    "answerDescription": "The `config/routes.rb` file defines the routing logic for a Rails application."
  },
  {
    "id": "ruby_1668",
    "question": "Which component in MVC is responsible for handling database interactions?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": false },
      { "id": "option_2", "text": "Model", "isCorrect": true },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "This component directly interacts with the database and defines business logic.",
    "answerDescription": "The Model handles data storage and business logic in an MVC architecture."
  },
  {
    "id": "ruby_1669",
    "question": "Which directory in a Rails application contains the views?",
    "options": [
      { "id": "option_1", "text": "app/controllers", "isCorrect": false },
      { "id": "option_2", "text": "app/views", "isCorrect": true },
      { "id": "option_3", "text": "app/models", "isCorrect": false },
      { "id": "option_4", "text": "public/views", "isCorrect": false }
    ],
    "hint": "This folder holds templates that render the user interface.",
    "answerDescription": "In Rails, views are stored inside the `app/views` directory."
  },
  {
    "id": "ruby_1670",
    "question": "Which method replaces occurrences of a substring in a string?",
    "options": [
      { "id": "option_1", "text": "change", "isCorrect": false },
      { "id": "option_2", "text": "swap", "isCorrect": false },
      { "id": "option_3", "text": "modify", "isCorrect": false },
      { "id": "option_4", "text": "gsub", "isCorrect": true }
    ],
    "hint": "This method performs global substitution in a string.",
    "answerDescription": "The `gsub` method globally replaces substrings in a string."
  },
  {
    "id": "ruby_1671",
    "question": "What is the purpose of the routes file in Rails?",
    "options": [
      { "id": "option_1", "text": "To define database connections", "isCorrect": false },
      { "id": "option_2", "text": "To map URLs to controllers", "isCorrect": true },
      { "id": "option_3", "text": "To configure caching strategies", "isCorrect": false },
      { "id": "option_4", "text": "To manage application logs", "isCorrect": false }
    ],
    "hint": "This file controls how HTTP requests are directed to controller actions.",
    "answerDescription": "The routes file (`config/routes.rb`) maps incoming requests to controllers in a Rails app."
  },
  {
    "id": "ruby_1672",
    "question": "Which Rails command generates a new controller?",
    "options": [
      { "id": "option_1", "text": "rails create controller", "isCorrect": false },
      { "id": "option_2", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_3", "text": "rails make controller", "isCorrect": false },
      { "id": "option_4", "text": "rails new controller", "isCorrect": false }
    ],
    "hint": "This command is used to scaffold a controller in Rails.",
    "answerDescription": "The `rails generate controller` command creates a new controller in a Rails application."
  },
  {
    "id": "ruby_1673",
    "question": "Which method in Rails retrieves a record by its primary key?",
    "options": [
      { "id": "option_1", "text": "get", "isCorrect": false },
      { "id": "option_2", "text": "find", "isCorrect": true },
      { "id": "option_3", "text": "retrieve", "isCorrect": false },
      { "id": "option_4", "text": "search", "isCorrect": false }
    ],
    "hint": "This method raises an exception if the record is not found.",
    "answerDescription": "The `find` method retrieves a record by its primary key in Rails."
  },
  {
    "id": "ruby_1674",
    "question": "Which Rails method is used to update an existing record?",
    "options": [
      { "id": "option_1", "text": "modify", "isCorrect": false },
      { "id": "option_2", "text": "update", "isCorrect": true },
      { "id": "option_3", "text": "save", "isCorrect": false },
      { "id": "option_4", "text": "edit", "isCorrect": false }
    ],
    "hint": "This method allows modifying attributes and saving changes to the database.",
    "answerDescription": "The `update` method in ActiveRecord is used to modify existing records."
  },
  {
    "id": "ruby_1675",
    "question": "What is the purpose of migrations in Rails?",
    "options": [
      { "id": "option_1", "text": "To handle user authentication", "isCorrect": false },
      { "id": "option_2", "text": "To modify the database schema", "isCorrect": true },
      { "id": "option_3", "text": "To generate models", "isCorrect": false },
      { "id": "option_4", "text": "To configure routes", "isCorrect": false }
    ],
    "hint": "This feature helps manage changes to the database schema over time.",
    "answerDescription": "Migrations in Rails allow for version control of database schema changes."
  },
  {
    "id": "ruby_1676",
    "question": "Which Rails file is responsible for handling database configurations?",
    "options": [
      { "id": "option_1", "text": "config/routes.rb", "isCorrect": false },
      { "id": "option_2", "text": "config/database.yml", "isCorrect": true },
      { "id": "option_3", "text": "app/config/db.rb", "isCorrect": false },
      { "id": "option_4", "text": "config/schema.rb", "isCorrect": false }
    ],
    "hint": "This YAML file contains details about database connection settings.",
    "answerDescription": "The `config/database.yml` file stores database configuration details in a Rails project."
  },
  {
    "id": "ruby_1677",
    "question": "Which ActiveRecord method is used to delete a record from the database?",
    "options": [
      { "id": "option_1", "text": "erase", "isCorrect": false },
      { "id": "option_2", "text": "destroy", "isCorrect": true },
      { "id": "option_3", "text": "remove", "isCorrect": false },
      { "id": "option_4", "text": "delete_all", "isCorrect": false }
    ],
    "hint": "This method also runs callbacks before removing the record.",
    "answerDescription": "The `destroy` method deletes a record and triggers ActiveRecord callbacks."
  },
  {
    "id": "ruby_1678",
    "question": "Which component of MVC handles user requests in a Rails application?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": true },
      { "id": "option_4", "text": "Database", "isCorrect": false }
    ],
    "hint": "This component processes user requests and interacts with models and views.",
    "answerDescription": "The Controller is responsible for handling user requests and directing responses."
  },
  {
    "id": "ruby_1679",
    "question": "Which Rails command is used to generate a new model?",
    "options": [
      { "id": "option_1", "text": "rails create model", "isCorrect": false },
      { "id": "option_2", "text": "rails make model", "isCorrect": false },
      { "id": "option_3", "text": "rails generate model", "isCorrect": true },
      { "id": "option_4", "text": "rails new model", "isCorrect": false }
    ],
    "hint": "This command helps in creating a new model along with its migration.",
    "answerDescription": "The `rails generate model` command creates a new model in a Rails application."
  },
  {
    "id": "ruby_1680",
    "question": "Which folder contains controller files in a Rails application?",
    "options": [
      { "id": "option_1", "text": "app/views", "isCorrect": false },
      { "id": "option_2", "text": "app/models", "isCorrect": false },
      { "id": "option_3", "text": "app/controllers", "isCorrect": true },
      { "id": "option_4", "text": "config/controllers", "isCorrect": false }
    ],
    "hint": "This directory contains files that manage user interactions and business logic.",
    "answerDescription": "Controllers in Rails are stored inside the `app/controllers` directory."
  },
  {
    "id": "ruby_1681",
    "question": "Which ActiveRecord method is used to find the first record that matches conditions?",
    "options": [
      { "id": "option_1", "text": "find_by_all", "isCorrect": false },
      { "id": "option_2", "text": "get_first", "isCorrect": false },
      { "id": "option_3", "text": "find_by", "isCorrect": true },
      { "id": "option_4", "text": "first", "isCorrect": false }
    ],
    "hint": "This method returns the first matching record or `nil` if none is found.",
    "answerDescription": "The `find_by` method retrieves the first record that matches the given condition."
  },
  {
    "id": "ruby_1682",
    "question": "Which ActiveRecord method is used to create a new record and save it immediately?",
    "options": [
      { "id": "option_1", "text": "new", "isCorrect": false },
      { "id": "option_2", "text": "build", "isCorrect": false },
      { "id": "option_3", "text": "create", "isCorrect": true },
      { "id": "option_4", "text": "save", "isCorrect": false }
    ],
    "hint": "This method combines object instantiation and saving in one step.",
    "answerDescription": "The `create` method in ActiveRecord creates and saves a record in one operation."
  },
  {
    "id": "ruby_1683",
    "question": "Which file in a Rails application is used to define database migrations?",
    "options": [
      { "id": "option_1", "text": "schema.rb", "isCorrect": false },
      { "id": "option_2", "text": "routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "migrate/*.rb", "isCorrect": true },
      { "id": "option_4", "text": "database.yml", "isCorrect": false }
    ],
    "hint": "These files contain instructions for modifying the database schema.",
    "answerDescription": "Database migrations in Rails are stored inside the `db/migrate` directory."
  },
  {
    "id": "ruby_1684",
    "question": "Which Rails feature prevents mass assignment vulnerabilities?",
    "options": [
      { "id": "option_1", "text": "Strong Routes", "isCorrect": false },
      { "id": "option_2", "text": "ActiveSanitizer", "isCorrect": false },
      { "id": "option_3", "text": "Strong Parameters", "isCorrect": true },
      { "id": "option_4", "text": "Secure Model", "isCorrect": false }
    ],
    "hint": "This feature ensures only permitted parameters are assigned to models.",
    "answerDescription": "Strong Parameters in Rails prevent mass assignment vulnerabilities by requiring explicit parameter whitelisting."
  },
  {
    "id": "ruby_1685",
    "question": "Which Rails method is used to validate data before saving to the database?",
    "options": [
      { "id": "option_1", "text": "confirm", "isCorrect": false },
      { "id": "option_2", "text": "sanitize", "isCorrect": false },
      { "id": "option_3", "text": "validates", "isCorrect": true },
      { "id": "option_4", "text": "check", "isCorrect": false }
    ],
    "hint": "This method is used within models to enforce business rules.",
    "answerDescription": "The `validates` method in Rails is used to enforce data validation rules in models."
  },
  {
    "id": "ruby_1686",
    "question": "Which Rails file specifies the default database settings?",
    "options": [
      { "id": "option_1", "text": "config/schema.rb", "isCorrect": false },
      { "id": "option_2", "text": "db/migrate.rb", "isCorrect": false },
      { "id": "option_3", "text": "config/database.yml", "isCorrect": true },
      { "id": "option_4", "text": "config/seeds.rb", "isCorrect": false }
    ],
    "hint": "This YAML file holds database configuration settings for different environments.",
    "answerDescription": "The `config/database.yml` file stores database connection details for Rails applications."
  },
  {
    "id": "ruby_1687",
    "question": "Which Rails method is used to define a one-to-many relationship in ActiveRecord?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "relates_to", "isCorrect": false }
    ],
    "hint": "This method allows a model to be associated with multiple records in another table.",
    "answerDescription": "The `has_many` method defines a one-to-many relationship in Rails models."
  },
  {
    "id": "ruby_1688",
    "question": "Which part of the MVC architecture is responsible for interacting with the database?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Router", "isCorrect": false },
      { "id": "option_4", "text": "Model", "isCorrect": true }
    ],
    "hint": "This component is used for data handling and business logic.",
    "answerDescription": "The Model in MVC is responsible for database interactions and data processing."
  },
  {
    "id": "ruby_1689",
    "question": "Which helper method is used to create a form in Rails?",
    "options": [
      { "id": "option_1", "text": "form_with", "isCorrect": true },
      { "id": "option_2", "text": "form_create", "isCorrect": false },
      { "id": "option_3", "text": "new_form", "isCorrect": false },
      { "id": "option_4", "text": "form_tag", "isCorrect": false }
    ],
    "hint": "This method allows easy form creation with model binding.",
    "answerDescription": "Rails provides `form_with` to generate forms linked to models efficiently."
  },
  {
    "id": "ruby_1690",
    "question": "Which Rails file is responsible for defining URL routes?",
    "options": [
      { "id": "option_1", "text": "config/database.yml", "isCorrect": false },
      { "id": "option_2", "text": "app/models.rb", "isCorrect": false },
      { "id": "option_3", "text": "schema.rb", "isCorrect": false },
      { "id": "option_4", "text": "config/routes.rb", "isCorrect": true }
    ],
    "hint": "This file maps URLs to controller actions.",
    "answerDescription": "The `config/routes.rb` file in Rails is used to define the application's URL structure."
  },
  {
    "id": "ruby_1691",
    "question": "Which method in Rails defines a one-to-one association?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_association", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": true }
    ],
    "hint": "This association is used when one record is related to exactly one other record.",
    "answerDescription": "The `has_one` association defines a one-to-one relationship in Rails models."
  },
  {
    "id": "ruby_1692",
    "question": "Which ActiveRecord method fetches all records from a table?",
    "options": [
      { "id": "option_1", "text": "fetch_all", "isCorrect": false },
      { "id": "option_2", "text": "get_all", "isCorrect": false },
      { "id": "option_3", "text": "find_each", "isCorrect": false },
      { "id": "option_4", "text": "all", "isCorrect": true }
    ],
    "hint": "This method retrieves all records as an array.",
    "answerDescription": "The `all` method in ActiveRecord returns all records from a database table."
  },
  {
    "id": "ruby_1693",
    "question": "Which Rails generator is used to create a new controller?",
    "options": [
      { "id": "option_1", "text": "rails new controller", "isCorrect": false },
      { "id": "option_2", "text": "rails generate model", "isCorrect": false },
      { "id": "option_3", "text": "rails add controller", "isCorrect": false },
      { "id": "option_4", "text": "rails generate controller", "isCorrect": true }
    ],
    "hint": "This command creates a new controller along with its associated views and routes.",
    "answerDescription": "The `rails generate controller` command creates a new controller in Rails."
  },
  {
    "id": "ruby_1694",
    "question": "Which Rails file stores configuration settings for different environments?",
    "options": [
      { "id": "option_1", "text": "config/application.rb", "isCorrect": false },
      { "id": "option_2", "text": "config/routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "db/schema.rb", "isCorrect": false },
      { "id": "option_4", "text": "config/environments/*.rb", "isCorrect": true }
    ],
    "hint": "This directory contains settings specific to development, test, and production environments.",
    "answerDescription": "Rails stores environment-specific settings in `config/environments/*.rb` files."
  },
  {
    "id": "ruby_1695",
    "question": "Which method in Rails is used to redirect a user to another action?",
    "options": [
      { "id": "option_1", "text": "goto", "isCorrect": false },
      { "id": "option_2", "text": "redirect_page", "isCorrect": false },
      { "id": "option_3", "text": "forward", "isCorrect": false },
      { "id": "option_4", "text": "redirect_to", "isCorrect": true }
    ],
    "hint": "This method is commonly used in controllers after a successful form submission.",
    "answerDescription": "The `redirect_to` method in Rails redirects users to another controller action or URL."
  },
  {
    "id": "ruby_1696",
    "question": "Which folder in a Rails application contains the HTML templates?",
    "options": [
      { "id": "option_1", "text": "app/assets", "isCorrect": false },
      { "id": "option_2", "text": "app/models", "isCorrect": false },
      { "id": "option_3", "text": "app/controllers", "isCorrect": false },
      { "id": "option_4", "text": "app/views", "isCorrect": true }
    ],
    "hint": "This directory contains ERB files that generate dynamic HTML.",
    "answerDescription": "Rails stores its HTML templates inside the `app/views` directory."
  },
  {
    "id": "ruby_1697",
    "question": "Which Rails feature is used for background job processing?",
    "options": [
      { "id": "option_1", "text": "ActiveQuery", "isCorrect": false },
      { "id": "option_2", "text": "DelayedExecution", "isCorrect": false },
      { "id": "option_3", "text": "TaskRunner", "isCorrect": false },
      { "id": "option_4", "text": "ActiveJob", "isCorrect": true }
    ],
    "hint": "This feature provides an abstraction for handling background jobs.",
    "answerDescription": "ActiveJob is Rails' framework for managing background jobs."
  },
  {
    "id": "ruby_1698",
    "question": "Which component in the MVC architecture handles user input and updates the model?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Database", "isCorrect": false }
    ],
    "hint": "This component acts as a bridge between the view and the model.",
    "answerDescription": "The Controller in MVC is responsible for handling user input and updating the model."
  },
  {
    "id": "ruby_1699",
    "question": "What command is used to create a new Rails application?",
    "options": [
      { "id": "option_1", "text": "rails new app_name", "isCorrect": true },
      { "id": "option_2", "text": "rails create app_name", "isCorrect": false },
      { "id": "option_3", "text": "generate rails app_name", "isCorrect": false },
      { "id": "option_4", "text": "rails generate app", "isCorrect": false }
    ],
    "hint": "This command sets up the basic structure for a Rails application.",
    "answerDescription": "The `rails new app_name` command initializes a new Ruby on Rails application."
  },
  {
    "id": "ruby_1700",
    "question": "Which folder in a Rails application contains the controller files?",
    "options": [
      { "id": "option_1", "text": "app/controllers", "isCorrect": true },
      { "id": "option_2", "text": "app/views", "isCorrect": false },
      { "id": "option_3", "text": "app/models", "isCorrect": false },
      { "id": "option_4", "text": "app/helpers", "isCorrect": false }
    ],
    "hint": "Controllers reside in a dedicated folder inside the `app` directory.",
    "answerDescription": "Rails controllers are stored inside the `app/controllers` folder."
  },
  {
    "id": "ruby_1701",
    "question": "What is the purpose of the `before_action` callback in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "To execute code before controller actions", "isCorrect": true },
      { "id": "option_2", "text": "To define a model association", "isCorrect": false },
      { "id": "option_3", "text": "To validate user input", "isCorrect": false },
      { "id": "option_4", "text": "To create a database migration", "isCorrect": false }
    ],
    "hint": "This is used to execute common logic before specific actions in a controller.",
    "answerDescription": "The `before_action` callback in Rails allows execution of code before specific controller actions."
  },
  {
    "id": "ruby_1702",
    "question": "Which Rails feature is used for handling form submissions?",
    "options": [
      { "id": "option_1", "text": "Strong Parameters", "isCorrect": true },
      { "id": "option_2", "text": "Action Mailer", "isCorrect": false },
      { "id": "option_3", "text": "Active Record", "isCorrect": false },
      { "id": "option_4", "text": "Database Migrations", "isCorrect": false }
    ],
    "hint": "This feature is used to prevent mass-assignment vulnerabilities in forms.",
    "answerDescription": "Strong Parameters help control which attributes can be assigned via forms in Rails."
  },
  {
    "id": "ruby_1703",
    "question": "Which method is used to define a many-to-many relationship in Rails models?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": true },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": false }
    ],
    "hint": "This association is used when two models can have multiple instances of each other.",
    "answerDescription": "The `has_and_belongs_to_many` method defines a many-to-many relationship in Rails."
  },
  {
    "id": "ruby_1704",
    "question": "Which command is used to run database migrations in Rails?",
    "options": [
      { "id": "option_1", "text": "rails db:migrate", "isCorrect": true },
      { "id": "option_2", "text": "rake db:update", "isCorrect": false },
      { "id": "option_3", "text": "rails database apply", "isCorrect": false },
      { "id": "option_4", "text": "rake schema:update", "isCorrect": false }
    ],
    "hint": "This command applies pending migrations to the database.",
    "answerDescription": "The `rails db:migrate` command runs database migrations in Rails."
  },
  {
    "id": "ruby_1705",
    "question": "Which file in a Rails project is used to manage gem dependencies?",
    "options": [
      { "id": "option_1", "text": "Gemfile", "isCorrect": true },
      { "id": "option_2", "text": "database.yml", "isCorrect": false },
      { "id": "option_3", "text": "application.rb", "isCorrect": false },
      { "id": "option_4", "text": "routes.rb", "isCorrect": false }
    ],
    "hint": "This file lists all the required gems for the application.",
    "answerDescription": "The `Gemfile` is used to define gem dependencies in a Rails project."
  },
  {
    "id": "ruby_1706",
    "question": "Which Rails helper method is used to generate a form tag?",
    "options": [
      { "id": "option_1", "text": "form_tag", "isCorrect": true },
      { "id": "option_2", "text": "form_generate", "isCorrect": false },
      { "id": "option_3", "text": "form_for", "isCorrect": false },
      { "id": "option_4", "text": "create_form", "isCorrect": false }
    ],
    "hint": "This helper method is used for creating generic HTML forms in Rails.",
    "answerDescription": "The `form_tag` method generates an HTML form tag in Rails."
  },
  {
    "id": "ruby_1707",
    "question": "Which command is used to rollback the last database migration?",
    "options": [
      { "id": "option_1", "text": "rails db:rollback", "isCorrect": true },
      { "id": "option_2", "text": "rails db:undo", "isCorrect": false },
      { "id": "option_3", "text": "rails db:revert", "isCorrect": false },
      { "id": "option_4", "text": "rails migration:rollback", "isCorrect": false }
    ],
    "hint": "This command is used to undo the last migration applied to the database.",
    "answerDescription": "The `rails db:rollback` command undoes the most recent migration."
  },
  {
    "id": "ruby_1708",
    "question": "What does the Model component in MVC handle?",
    "options": [
      { "id": "option_1", "text": "User interface logic", "isCorrect": false },
      { "id": "option_2", "text": "Data and business logic", "isCorrect": true },
      { "id": "option_3", "text": "Routing requests", "isCorrect": false },
      { "id": "option_4", "text": "Rendering views", "isCorrect": false }
    ],
    "hint": "This component is responsible for managing the application's data.",
    "answerDescription": "The Model in MVC handles the data, business logic, and interactions with the database."
  },
  {
    "id": "ruby_1709",
    "question": "Which file in a Rails project is responsible for defining routes?",
    "options": [
      { "id": "option_1", "text": "application.rb", "isCorrect": false },
      { "id": "option_2", "text": "routes.rb", "isCorrect": true },
      { "id": "option_3", "text": "database.yml", "isCorrect": false },
      { "id": "option_4", "text": "seeds.rb", "isCorrect": false }
    ],
    "hint": "This file is located in the `config` directory and defines the URL mappings.",
    "answerDescription": "In Rails, `routes.rb` defines URL paths and maps them to controllers."
  },
  {
    "id": "ruby_1710",
    "question": "What does `render` do in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "Executes SQL queries", "isCorrect": false },
      { "id": "option_2", "text": "Renders a view template", "isCorrect": true },
      { "id": "option_3", "text": "Redirects to another URL", "isCorrect": false },
      { "id": "option_4", "text": "Creates a database migration", "isCorrect": false }
    ],
    "hint": "This method is used to display views from the controller.",
    "answerDescription": "The `render` method in Rails renders a view template in response to a request."
  },
  {
    "id": "ruby_1711",
    "question": "Which Rails command is used to generate a controller?",
    "options": [
      { "id": "option_1", "text": "rails create controller", "isCorrect": false },
      { "id": "option_2", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_3", "text": "rails make controller", "isCorrect": false },
      { "id": "option_4", "text": "rails new controller", "isCorrect": false }
    ],
    "hint": "This command helps create a new controller with default actions.",
    "answerDescription": "The `rails generate controller` command creates a new controller in a Rails application."
  },
  {
    "id": "ruby_1712",
    "question": "Which method is used to redirect a user to another action in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "navigate_to", "isCorrect": false },
      { "id": "option_2", "text": "redirect_to", "isCorrect": true },
      { "id": "option_3", "text": "forward_to", "isCorrect": false },
      { "id": "option_4", "text": "transfer_to", "isCorrect": false }
    ],
    "hint": "This method is commonly used after form submissions.",
    "answerDescription": "The `redirect_to` method in Rails redirects the user to another URL or action."
  },
  {
    "id": "ruby_1713",
    "question": "Which ActiveRecord method is used to find a record by its ID?",
    "options": [
      { "id": "option_1", "text": "get_by_id", "isCorrect": false },
      { "id": "option_2", "text": "find", "isCorrect": true },
      { "id": "option_3", "text": "search_by_id", "isCorrect": false },
      { "id": "option_4", "text": "retrieve", "isCorrect": false }
    ],
    "hint": "This method raises an error if the record is not found.",
    "answerDescription": "The `find` method in ActiveRecord retrieves a record by its primary key."
  },
  {
    "id": "ruby_1714",
    "question": "What is the default ORM used in Rails?",
    "options": [
      { "id": "option_1", "text": "Sequel", "isCorrect": false },
      { "id": "option_2", "text": "ActiveRecord", "isCorrect": true },
      { "id": "option_3", "text": "DataMapper", "isCorrect": false },
      { "id": "option_4", "text": "Mongoid", "isCorrect": false }
    ],
    "hint": "This ORM allows Rails developers to interact with databases using Ruby.",
    "answerDescription": "ActiveRecord is the default Object-Relational Mapping (ORM) system used in Rails."
  },
  {
    "id": "ruby_1715",
    "question": "What Rails method is used to check if an object is new and unsaved?",
    "options": [
      { "id": "option_1", "text": ".new_record?", "isCorrect": true },
      { "id": "option_2", "text": ".persisted?", "isCorrect": false },
      { "id": "option_3", "text": ".exists?", "isCorrect": false },
      { "id": "option_4", "text": ".valid?", "isCorrect": false }
    ],
    "hint": "It returns true if the record is not yet saved to the database.",
    "answerDescription": "The `.new_record?` method in Rails checks whether an object is new and has not been persisted."
  },
  {
    "id": "ruby_1716",
    "question": "Which file in a Rails application is used to configure the database settings?",
    "options": [
      { "id": "option_1", "text": "config/routes.rb", "isCorrect": false },
      { "id": "option_2", "text": "config/database.yml", "isCorrect": true },
      { "id": "option_3", "text": "config/seeds.rb", "isCorrect": false },
      { "id": "option_4", "text": "config/environments.rb", "isCorrect": false }
    ],
    "hint": "This file contains database connection settings.",
    "answerDescription": "The `config/database.yml` file in Rails is used to configure database settings."
  },
  {
    "id": "ruby_1717",
    "question": "Which command is used to generate a new model in Rails?",
    "options": [
      { "id": "option_1", "text": "rails create model", "isCorrect": false },
      { "id": "option_2", "text": "rails generate model", "isCorrect": true },
      { "id": "option_3", "text": "rails new model", "isCorrect": false },
      { "id": "option_4", "text": "rails make model", "isCorrect": false }
    ],
    "hint": "This command generates a model and its migration file.",
    "answerDescription": "The `rails generate model` command creates a new model and migration file in Rails."
  },
  {
    "id": "ruby_1718",
    "question": "What is the primary responsibility of the View in MVC?",
    "options": [
      { "id": "option_1", "text": "Managing database interactions", "isCorrect": false },
      { "id": "option_2", "text": "Handling business logic", "isCorrect": false },
      { "id": "option_3", "text": "Rendering the user interface", "isCorrect": true },
      { "id": "option_4", "text": "Processing HTTP requests", "isCorrect": false }
    ],
    "hint": "This component is responsible for presenting data to the user.",
    "answerDescription": "The View in MVC is responsible for displaying data to the user, typically using HTML and embedded Ruby."
  },
  {
    "id": "ruby_1719",
    "question": "Which Rails component handles user requests and responses?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": true },
      { "id": "option_4", "text": "Helper", "isCorrect": false }
    ],
    "hint": "This component processes user actions and determines the appropriate response.",
    "answerDescription": "The Controller in Rails handles user requests, processes data, and renders views."
  },
  {
    "id": "ruby_1720",
    "question": "Which method returns the last character of a string?",
    "options": [
      { "id": "option_1", "text": "tail", "isCorrect": false },
      { "id": "option_2", "text": "last_char", "isCorrect": false },
      { "id": "option_3", "text": "final", "isCorrect": false },
      { "id": "option_4", "text": "[-1]", "isCorrect": true }
    ],
    "hint": "Ruby allows negative indices to access characters from the end.",
    "answerDescription": "Using `[-1]` on a string returns the last character."
  },
  {
    "id": "ruby_1721",
    "question": "Which method is used in Rails controllers to render JSON responses?",
    "options": [
      { "id": "option_1", "text": "json_response", "isCorrect": false },
      { "id": "option_2", "text": "render_html", "isCorrect": false },
      { "id": "option_3", "text": "render json:", "isCorrect": true },
      { "id": "option_4", "text": "to_json", "isCorrect": false }
    ],
    "hint": "This method is commonly used in API responses.",
    "answerDescription": "The `render json:` method in Rails is used to send JSON responses from controllers."
  },
  {
    "id": "ruby_1722",
    "question": "How does Rails handle database migrations?",
    "options": [
      { "id": "option_1", "text": "Direct SQL queries", "isCorrect": false },
      { "id": "option_2", "text": "Stored procedures", "isCorrect": false },
      { "id": "option_3", "text": "ActiveRecord migrations", "isCorrect": true },
      { "id": "option_4", "text": "Manual table modifications", "isCorrect": false }
    ],
    "hint": "Rails provides a way to manage database schema changes through versioned files.",
    "answerDescription": "Rails uses ActiveRecord migrations to manage database schema changes through Ruby scripts."
  },
  {
    "id": "ruby_1723",
    "question": "Which Rails command is used to create a new migration?",
    "options": [
      { "id": "option_1", "text": "rails create migration", "isCorrect": false },
      { "id": "option_2", "text": "rails db:migrate", "isCorrect": false },
      { "id": "option_3", "text": "rails generate migration", "isCorrect": true },
      { "id": "option_4", "text": "rails new migration", "isCorrect": false }
    ],
    "hint": "This command generates a new file in the `db/migrate` directory.",
    "answerDescription": "The `rails generate migration` command creates a new database migration in a Rails project."
  },
  {
    "id": "ruby_1724",
    "question": "Which Rails method is used to validate data in a model?",
    "options": [
      { "id": "option_1", "text": "verify", "isCorrect": false },
      { "id": "option_2", "text": "check", "isCorrect": false },
      { "id": "option_3", "text": "validates", "isCorrect": true },
      { "id": "option_4", "text": "authenticate", "isCorrect": false }
    ],
    "hint": "This method is used inside models to enforce data integrity.",
    "answerDescription": "The `validates` method in Rails is used in models to enforce data validation rules."
  },
  {
    "id": "ruby_1725",
    "question": "Which helper method is used to create form elements in Rails views?",
    "options": [
      { "id": "option_1", "text": "input_tag", "isCorrect": false },
      { "id": "option_2", "text": "make_form", "isCorrect": false },
      { "id": "option_3", "text": "form_for", "isCorrect": true },
      { "id": "option_4", "text": "create_form", "isCorrect": false }
    ],
    "hint": "This method is used to bind form elements to model attributes.",
    "answerDescription": "The `form_for` method in Rails helps generate form elements tied to a model."
  },
  {
    "id": "ruby_1726",
    "question": "What is the role of the `has_many` association in Rails models?",
    "options": [
      { "id": "option_1", "text": "Defines a many-to-one relationship", "isCorrect": false },
      { "id": "option_2", "text": "Specifies a one-to-one association", "isCorrect": false },
      { "id": "option_3", "text": "Establishes a one-to-many relationship", "isCorrect": true },
      { "id": "option_4", "text": "Creates a self-referential join", "isCorrect": false }
    ],
    "hint": "This association is often used when a model has multiple related records.",
    "answerDescription": "The `has_many` association in Rails defines a one-to-many relationship between models."
  },
  {
    "id": "ruby_1727",
    "question": "Which command is used to roll back the last Rails migration?",
    "options": [
      { "id": "option_1", "text": "rails db:reset", "isCorrect": false },
      { "id": "option_2", "text": "rails rollback", "isCorrect": false },
      { "id": "option_3", "text": "rails db:rollback", "isCorrect": true },
      { "id": "option_4", "text": "rails undo:migrate", "isCorrect": false }
    ],
    "hint": "This command undoes the last migration step applied to the database.",
    "answerDescription": "The `rails db:rollback` command reverts the last database migration applied."
  },
  {
    "id": "ruby_1728",
    "question": "What does the Model component in MVC primarily handle?",
    "options": [
      { "id": "option_1", "text": "User interface rendering", "isCorrect": false },
      { "id": "option_2", "text": "Handling HTTP requests", "isCorrect": false },
      { "id": "option_3", "text": "Managing frontend interactions", "isCorrect": false },
      { "id": "option_4", "text": "Data management and business logic", "isCorrect": true }
    ],
    "hint": "The Model is responsible for interacting with the database.",
    "answerDescription": "In MVC, the Model component handles business logic and database interactions."
  },
  {
    "id": "ruby_1729",
    "question": "Which Rails component is responsible for defining URL routes?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": false },
      { "id": "option_4", "text": "Router", "isCorrect": true }
    ],
    "hint": "It directs HTTP requests to the correct controller actions.",
    "answerDescription": "In Rails, the Router maps URLs to the appropriate controllers and actions."
  },
  {
    "id": "ruby_1730",
    "question": "What is the purpose of the `params` hash in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "Stores view templates", "isCorrect": false },
      { "id": "option_2", "text": "Manages database queries", "isCorrect": false },
      { "id": "option_3", "text": "Defines application routes", "isCorrect": false },
      { "id": "option_4", "text": "Stores request parameters", "isCorrect": true }
    ],
    "hint": "This hash contains user-submitted data from forms or URLs.",
    "answerDescription": "The `params` hash in Rails controllers holds request parameters, such as form inputs and URL data."
  },
  {
    "id": "ruby_1731",
    "question": "Which Rails method is used to find a record by its ID?",
    "options": [
      { "id": "option_1", "text": "search_by_id", "isCorrect": false },
      { "id": "option_2", "text": "get_record", "isCorrect": false },
      { "id": "option_3", "text": "find_record", "isCorrect": false },
      { "id": "option_4", "text": "find", "isCorrect": true }
    ],
    "hint": "This method is a part of ActiveRecord and throws an error if the record is not found.",
    "answerDescription": "The `find` method in Rails retrieves a record by its primary key."
  },
  {
    "id": "ruby_1732",
    "question": "Which keyword is used in Rails models to establish a one-to-one association?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "has_many_through", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": true }
    ],
    "hint": "This association is used when a model should have at most one related record.",
    "answerDescription": "In Rails, `has_one` defines a one-to-one relationship between models."
  },
  {
    "id": "ruby_1733",
    "question": "What does the `strong_parameters` feature in Rails help prevent?",
    "options": [
      { "id": "option_1", "text": "SQL injection", "isCorrect": false },
      { "id": "option_2", "text": "Broken authentication", "isCorrect": false },
      { "id": "option_3", "text": "Route conflicts", "isCorrect": false },
      { "id": "option_4", "text": "Mass assignment vulnerabilities", "isCorrect": true }
    ],
    "hint": "This feature ensures only permitted attributes can be updated.",
    "answerDescription": "Rails' `strong_parameters` prevent unauthorized mass assignment of model attributes."
  },
  {
    "id": "ruby_1734",
    "question": "Which method in Rails controllers redirects the user to another URL?",
    "options": [
      { "id": "option_1", "text": "send_to", "isCorrect": false },
      { "id": "option_2", "text": "navigate_to", "isCorrect": false },
      { "id": "option_3", "text": "redirect_path", "isCorrect": false },
      { "id": "option_4", "text": "redirect_to", "isCorrect": true }
    ],
    "hint": "This method is commonly used after form submissions or authentication.",
    "answerDescription": "The `redirect_to` method in Rails controllers sends the user to another action or URL."
  },
  {
    "id": "ruby_1735",
    "question": "What is the default template engine used in Rails?",
    "options": [
      { "id": "option_1", "text": "Markdown", "isCorrect": false },
      { "id": "option_2", "text": "ERB", "isCorrect": false },
      { "id": "option_3", "text": "Slim", "isCorrect": false },
      { "id": "option_4", "text": "Embedded Ruby (ERB)", "isCorrect": true }
    ],
    "hint": "This engine allows embedding Ruby code in HTML templates.",
    "answerDescription": "Rails uses Embedded Ruby (ERB) as the default template engine to generate dynamic HTML content."
  },
  {
    "id": "ruby_1736",
    "question": "Which Rails command generates a new controller?",
    "options": [
      { "id": "option_1", "text": "rails new controller", "isCorrect": false },
      { "id": "option_2", "text": "rails make controller", "isCorrect": false },
      { "id": "option_3", "text": "rails generate model", "isCorrect": false },
      { "id": "option_4", "text": "rails generate controller", "isCorrect": true }
    ],
    "hint": "This command creates a new controller file along with view templates.",
    "answerDescription": "The `rails generate controller` command is used to create a new controller in a Rails application."
  },
  {
    "id": "ruby_1737",
    "question": "Which Rails command is used to run the development server?",
    "options": [
      { "id": "option_1", "text": "rails start", "isCorrect": false },
      { "id": "option_2", "text": "rails run", "isCorrect": false },
      { "id": "option_3", "text": "rails devserver", "isCorrect": false },
      { "id": "option_4", "text": "rails server", "isCorrect": true }
    ],
    "hint": "This command launches a local web server for development purposes.",
    "answerDescription": "The `rails server` command starts the built-in development server in a Rails application."
  },
  {
    "id": "ruby_1738",
    "question": "Which part of the MVC pattern is responsible for handling user input and updating the model?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Database", "isCorrect": false },
      { "id": "option_4", "text": "Controller", "isCorrect": true }
    ],
    "hint": "This component acts as an intermediary between the Model and View.",
    "answerDescription": "The Controller in MVC handles user input and interacts with the Model to update data."
  },
  {
    "id": "ruby_1739",
    "question": "What is the purpose of the `before_action` filter in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "It ensures a method runs after an action", "isCorrect": false },
      { "id": "option_2", "text": "It validates user input automatically", "isCorrect": false },
      { "id": "option_3", "text": "It is used to configure ActiveRecord associations", "isCorrect": false },
      { "id": "option_4", "text": "It runs a method before a controller action executes", "isCorrect": true }
    ],
    "hint": "This is often used for authentication or setting up variables.",
    "answerDescription": "`before_action` is a Rails filter that runs a method before executing controller actions."
  },
  {
    "id": "ruby_1740",
    "question": "Which Rails feature allows handling errors at the controller level?",
    "options": [
      { "id": "option_1", "text": "render_error", "isCorrect": false },
      { "id": "option_2", "text": "error_handler", "isCorrect": false },
      { "id": "option_3", "text": "rescue_block", "isCorrect": false },
      { "id": "option_4", "text": "rescue_from", "isCorrect": true }
    ],
    "hint": "This feature allows defining error-handling behavior for exceptions.",
    "answerDescription": "In Rails, `rescue_from` is used in controllers to handle specific exceptions gracefully."
  },
  {
    "id": "ruby_1741",
    "question": "What is the default ORM used in Ruby on Rails?",
    "options": [
      { "id": "option_1", "text": "Sequel", "isCorrect": false },
      { "id": "option_2", "text": "DataMapper", "isCorrect": false },
      { "id": "option_3", "text": "ROM", "isCorrect": false },
      { "id": "option_4", "text": "ActiveRecord", "isCorrect": true }
    ],
    "hint": "This ORM follows the 'convention over configuration' principle.",
    "answerDescription": "ActiveRecord is the default ORM in Rails, simplifying database interactions."
  },
  {
    "id": "ruby_1742",
    "question": "Which command is used to create a new Rails model?",
    "options": [
      { "id": "option_1", "text": "rails create model", "isCorrect": false },
      { "id": "option_2", "text": "rails scaffold model", "isCorrect": false },
      { "id": "option_3", "text": "rails generate controller", "isCorrect": false },
      { "id": "option_4", "text": "rails generate model", "isCorrect": true }
    ],
    "hint": "This command creates a model along with its migration file.",
    "answerDescription": "The `rails generate model` command creates a new model and database migration."
  },
  {
    "id": "ruby_1743",
    "question": "What is the primary function of the View component in MVC?",
    "options": [
      { "id": "option_1", "text": "To store application data", "isCorrect": false },
      { "id": "option_2", "text": "To process business logic", "isCorrect": false },
      { "id": "option_3", "text": "To handle URL routing", "isCorrect": false },
      { "id": "option_4", "text": "To present data to the user", "isCorrect": true }
    ],
    "hint": "It deals with what the user sees in the browser.",
    "answerDescription": "In MVC, the View is responsible for rendering data to the user."
  },
  {
    "id": "ruby_1744",
    "question": "Which method is used to define a many-to-many association in Rails models?",
    "options": [
      { "id": "option_1", "text": "has_many_through", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": true }
    ],
    "hint": "This method creates a direct many-to-many relationship.",
    "answerDescription": "In Rails, `has_and_belongs_to_many` sets up a many-to-many association without an intermediary model."
  },
  {
    "id": "ruby_1745",
    "question": "Which command is used to generate database migrations in Rails?",
    "options": [
      { "id": "option_1", "text": "rails db:migrate", "isCorrect": false },
      { "id": "option_2", "text": "rails migration run", "isCorrect": false },
      { "id": "option_3", "text": "rails db:seed", "isCorrect": false },
      { "id": "option_4", "text": "rails generate migration", "isCorrect": true }
    ],
    "hint": "This command creates a new migration file but does not apply it.",
    "answerDescription": "The `rails generate migration` command creates a new migration file for modifying the database schema."
  },
  {
    "id": "ruby_1746",
    "question": "What is the purpose of the `flash` hash in Rails?",
    "options": [
      { "id": "option_1", "text": "It is used to store session data", "isCorrect": false },
      { "id": "option_2", "text": "It holds environment variables", "isCorrect": false },
      { "id": "option_3", "text": "It handles AJAX requests", "isCorrect": false },
      { "id": "option_4", "text": "It stores temporary messages between requests", "isCorrect": true }
    ],
    "hint": "This feature is commonly used for success and error messages.",
    "answerDescription": "The `flash` hash in Rails temporarily stores messages that persist for one request-response cycle."
  },
  {
    "id": "ruby_1747",
    "question": "Which Rails method checks if a database record exists?",
    "options": [
      { "id": "option_1", "text": "find_record", "isCorrect": false },
      { "id": "option_2", "text": "record_present?", "isCorrect": false },
      { "id": "option_3", "text": "search_for", "isCorrect": false },
      { "id": "option_4", "text": "exists?", "isCorrect": true }
    ],
    "hint": "This method returns true or false without fetching the record.",
    "answerDescription": "The `exists?` method in Rails checks if a record is present in the database."
  },
  {
    "id": "ruby_1748",
    "question": "What does the Model component in MVC primarily handle?",
    "options": [
      { "id": "option_1", "text": "Data and business logic", "isCorrect": true },
      { "id": "option_2", "text": "User interface and presentation", "isCorrect": false },
      { "id": "option_3", "text": "Request routing", "isCorrect": false },
      { "id": "option_4", "text": "Authentication", "isCorrect": false }
    ],
    "hint": "This component interacts with the database and performs calculations.",
    "answerDescription": "The Model in MVC handles data storage, retrieval, and business logic."
  },
  {
    "id": "ruby_1749",
    "question": "Which command is used to create a new Rails controller?",
    "options": [
      { "id": "option_1", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_2", "text": "rails make controller", "isCorrect": false },
      { "id": "option_3", "text": "rails new controller", "isCorrect": false },
      { "id": "option_4", "text": "rails create controller", "isCorrect": false }
    ],
    "hint": "This command is used to scaffold a new controller.",
    "answerDescription": "In Rails, `rails generate controller` creates a new controller with associated views and routes."
  },
  {
    "id": "ruby_1750",
    "question": "What does the `has_many` association in Rails do?",
    "options": [
      { "id": "option_1", "text": "Defines a one-to-many relationship", "isCorrect": true },
      { "id": "option_2", "text": "Defines a many-to-many relationship", "isCorrect": false },
      { "id": "option_3", "text": "Defines a one-to-one relationship", "isCorrect": false },
      { "id": "option_4", "text": "Defines a belongs-to relationship", "isCorrect": false }
    ],
    "hint": "This association is used when a model can have multiple related records.",
    "answerDescription": "The `has_many` association in Rails establishes a one-to-many relationship between models."
  },
  {
    "id": "ruby_1751",
    "question": "Which method is used in Rails controllers to redirect to another action?",
    "options": [
      { "id": "option_1", "text": "redirect_to", "isCorrect": true },
      { "id": "option_2", "text": "send_to", "isCorrect": false },
      { "id": "option_3", "text": "forward_to", "isCorrect": false },
      { "id": "option_4", "text": "route_to", "isCorrect": false }
    ],
    "hint": "This method is used to redirect users to a different route.",
    "answerDescription": "In Rails, `redirect_to` is used in controllers to navigate to another action or URL."
  },
  {
    "id": "ruby_1752",
    "question": "Which Rails component is responsible for rendering HTML templates?",
    "options": [
      { "id": "option_1", "text": "View", "isCorrect": true },
      { "id": "option_2", "text": "Controller", "isCorrect": false },
      { "id": "option_3", "text": "Model", "isCorrect": false },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "This part of MVC displays data to the user.",
    "answerDescription": "In Rails, the View is responsible for rendering HTML templates and presenting data."
  },
  {
    "id": "ruby_1753",
    "question": "What is the purpose of the `belongs_to` association in Rails?",
    "options": [
      { "id": "option_1", "text": "Defines an association where a model is a child of another", "isCorrect": true },
      { "id": "option_2", "text": "Defines an association where a model owns another", "isCorrect": false },
      { "id": "option_3", "text": "Defines an association for many-to-many relationships", "isCorrect": false },
      { "id": "option_4", "text": "Defines an association for one-to-one relationships only", "isCorrect": false }
    ],
    "hint": "This association is used when a model is dependent on another model.",
    "answerDescription": "In Rails, `belongs_to` establishes a direct association where a record is linked to another parent record."
  },
  {
    "id": "ruby_1754",
    "question": "Which Rails feature is used for routing HTTP requests to controller actions?",
    "options": [
      { "id": "option_1", "text": "routes.rb", "isCorrect": true },
      { "id": "option_2", "text": "models.rb", "isCorrect": false },
      { "id": "option_3", "text": "controllers.rb", "isCorrect": false },
      { "id": "option_4", "text": "views.rb", "isCorrect": false }
    ],
    "hint": "This file defines URL mappings for the application.",
    "answerDescription": "In Rails, the `routes.rb` file manages URL patterns and directs them to appropriate controller actions."
  },
  {
    "id": "ruby_1755",
    "question": "Which Rails helper is used to create links in views?",
    "options": [
      { "id": "option_1", "text": "link_to", "isCorrect": true },
      { "id": "option_2", "text": "href_to", "isCorrect": false },
      { "id": "option_3", "text": "redirect_to", "isCorrect": false },
      { "id": "option_4", "text": "navigate_to", "isCorrect": false }
    ],
    "hint": "This helper generates an anchor tag for navigation.",
    "answerDescription": "The `link_to` helper in Rails is used to create hyperlinks in views."
  },
  {
    "id": "ruby_1756",
    "question": "Which ActiveRecord method is used to update a record in Rails?",
    "options": [
      { "id": "option_1", "text": "update", "isCorrect": true },
      { "id": "option_2", "text": "change", "isCorrect": false },
      { "id": "option_3", "text": "modify", "isCorrect": false },
      { "id": "option_4", "text": "edit", "isCorrect": false }
    ],
    "hint": "This method is used to modify an existing database record.",
    "answerDescription": "In Rails, `update` is an ActiveRecord method used to modify a record's attributes."
  },
  {
    "id": "ruby_1757",
    "question": "Which ActiveRecord method is used to retrieve all records of a model?",
    "options": [
      { "id": "option_1", "text": "all", "isCorrect": true },
      { "id": "option_2", "text": "find_all", "isCorrect": false },
      { "id": "option_3", "text": "fetch", "isCorrect": false },
      { "id": "option_4", "text": "retrieve", "isCorrect": false }
    ],
    "hint": "This method returns a collection of all records in a table.",
    "answerDescription": "The `all` method in ActiveRecord retrieves all records from a model’s associated table."
  },
  {
    "id": "ruby_1758",
    "question": "Which component of MVC handles user input in a Ruby on Rails application?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "Controller", "isCorrect": true },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "This component processes user requests and interacts with the Model.",
    "answerDescription": "The Controller in MVC handles user input and directs interactions between the Model and View."
  },
  {
    "id": "ruby_1759",
    "question": "What is the purpose of the `before_action` callback in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "To render the view before the model is called", "isCorrect": false },
      { "id": "option_2", "text": "To run a method before executing a controller action", "isCorrect": true },
      { "id": "option_3", "text": "To validate parameters before they reach the model", "isCorrect": false },
      { "id": "option_4", "text": "To set up session variables before login", "isCorrect": false }
    ],
    "hint": "It is commonly used for authentication and filtering requests.",
    "answerDescription": "In Rails, `before_action` is a controller callback that runs specified methods before executing actions."
  },
  {
    "id": "ruby_1760",
    "question": "Which command generates a new Rails model?",
    "options": [
      { "id": "option_1", "text": "rails new model", "isCorrect": false },
      { "id": "option_2", "text": "rails generate model", "isCorrect": true },
      { "id": "option_3", "text": "rails create model", "isCorrect": false },
      { "id": "option_4", "text": "rails scaffold model", "isCorrect": false }
    ],
    "hint": "This command creates a model file and associated migration.",
    "answerDescription": "The `rails generate model` command is used to create a new ActiveRecord model in Rails."
  },
  {
    "id": "ruby_1761",
    "question": "Which Rails file defines database table structures?",
    "options": [
      { "id": "option_1", "text": "schema.rb", "isCorrect": false },
      { "id": "option_2", "text": "migrations", "isCorrect": true },
      { "id": "option_3", "text": "routes.rb", "isCorrect": false },
      { "id": "option_4", "text": "database.yml", "isCorrect": false }
    ],
    "hint": "These files help modify the database schema over time.",
    "answerDescription": "Migrations in Rails define database table structures and allow changes to be version-controlled."
  },
  {
    "id": "ruby_1762",
    "question": "Which Rails helper is used to generate a form in views?",
    "options": [
      { "id": "option_1", "text": "create_form", "isCorrect": false },
      { "id": "option_2", "text": "form_with", "isCorrect": true },
      { "id": "option_3", "text": "new_form", "isCorrect": false },
      { "id": "option_4", "text": "form_for", "isCorrect": false }
    ],
    "hint": "This method is preferred in Rails 5+ for creating forms.",
    "answerDescription": "The `form_with` helper is the recommended way to create forms in Rails applications."
  },
  {
    "id": "ruby_1763",
    "question": "How do you retrieve the first record of a model in Rails?",
    "options": [
      { "id": "option_1", "text": "Model.first()", "isCorrect": false },
      { "id": "option_2", "text": "Model.first", "isCorrect": true },
      { "id": "option_3", "text": "Model.find(1)", "isCorrect": false },
      { "id": "option_4", "text": "Model.retrieve", "isCorrect": false }
    ],
    "hint": "This method retrieves the first record based on primary key order.",
    "answerDescription": "In Rails, `Model.first` fetches the first record from the database."
  },
  {
    "id": "ruby_1764",
    "question": "Which ActiveRecord method is used to delete a record?",
    "options": [
      { "id": "option_1", "text": "remove", "isCorrect": false },
      { "id": "option_2", "text": "destroy", "isCorrect": true },
      { "id": "option_3", "text": "erase", "isCorrect": false },
      { "id": "option_4", "text": "delete", "isCorrect": false }
    ],
    "hint": "This method not only removes the record but also triggers callbacks.",
    "answerDescription": "The `destroy` method in Rails deletes a record and runs callbacks like `before_destroy`."
  },
  {
    "id": "ruby_1765",
    "question": "Which HTTP verb does Rails use for deleting a resource?",
    "options": [
      { "id": "option_1", "text": "REMOVE", "isCorrect": false },
      { "id": "option_2", "text": "DELETE", "isCorrect": true },
      { "id": "option_3", "text": "DESTROY", "isCorrect": false },
      { "id": "option_4", "text": "REMOVE_ALL", "isCorrect": false }
    ],
    "hint": "This verb is part of RESTful architecture.",
    "answerDescription": "The `DELETE` HTTP verb is used in Rails to remove a resource."
  },
  {
    "id": "ruby_1766",
    "question": "Which of the following is true about Rails strong parameters?",
    "options": [
      { "id": "option_1", "text": "They allow any parameters to be used in controllers", "isCorrect": false },
      { "id": "option_2", "text": "They prevent mass assignment vulnerabilities", "isCorrect": true },
      { "id": "option_3", "text": "They automatically sanitize all inputs", "isCorrect": false },
      { "id": "option_4", "text": "They are required only in models", "isCorrect": false }
    ],
    "hint": "These help prevent security risks in Rails controllers.",
    "answerDescription": "Strong parameters in Rails prevent unauthorized mass assignment of model attributes."
  },
  {
    "id": "ruby_1767",
    "question": "What is the default ORM used by Rails?",
    "options": [
      { "id": "option_1", "text": "ActiveRecord", "isCorrect": true },
      { "id": "option_2", "text": "Sequel", "isCorrect": false },
      { "id": "option_3", "text": "DataMapper", "isCorrect": false },
      { "id": "option_4", "text": "ROM", "isCorrect": false }
    ],
    "hint": "This ORM is tightly integrated with Rails.",
    "answerDescription": "Rails uses ActiveRecord as its default ORM to interact with databases."
  },
  {
    "id": "ruby_1768",
    "question": "Which layer of MVC in Rails is responsible for handling database interactions?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Model", "isCorrect": true },
      { "id": "option_4", "text": "Helper", "isCorrect": false }
    ],
    "hint": "This layer interacts directly with the database.",
    "answerDescription": "In Rails, the Model layer is responsible for database interactions and business logic."
  },
  {
    "id": "ruby_1769",
    "question": "Which file in a Rails project is used to define routes?",
    "options": [
      { "id": "option_1", "text": "application.rb", "isCorrect": false },
      { "id": "option_2", "text": "database.yml", "isCorrect": false },
      { "id": "option_3", "text": "routes.rb", "isCorrect": true },
      { "id": "option_4", "text": "schema.rb", "isCorrect": false }
    ],
    "hint": "This file is located inside the 'config' directory.",
    "answerDescription": "The `routes.rb` file in Rails defines the application's routes and URL patterns."
  },
  {
    "id": "ruby_1770",
    "question": "Which of the following methods is used to retrieve all records of a model in Rails?",
    "options": [
      { "id": "option_1", "text": "Model.retrieve_all", "isCorrect": false },
      { "id": "option_2", "text": "Model.getAll", "isCorrect": false },
      { "id": "option_3", "text": "Model.all", "isCorrect": true },
      { "id": "option_4", "text": "Model.find_all", "isCorrect": false }
    ],
    "hint": "This method returns an ActiveRecord relation with all records.",
    "answerDescription": "`Model.all` fetches all records from the database in Rails."
  },
  {
    "id": "ruby_1771",
    "question": "Which method is used to validate attributes in a Rails model?",
    "options": [
      { "id": "option_1", "text": "validate()", "isCorrect": false },
      { "id": "option_2", "text": "check_validity()", "isCorrect": false },
      { "id": "option_3", "text": "validates", "isCorrect": true },
      { "id": "option_4", "text": "require_valid()", "isCorrect": false }
    ],
    "hint": "This method is defined inside the model to enforce data integrity.",
    "answerDescription": "In Rails, `validates` is used to define validation rules for model attributes."
  },
  {
    "id": "ruby_1772",
    "question": "Which Rails command is used to create a new controller?",
    "options": [
      { "id": "option_1", "text": "rails new controller", "isCorrect": false },
      { "id": "option_2", "text": "rails create controller", "isCorrect": false },
      { "id": "option_3", "text": "rails generate controller", "isCorrect": true },
      { "id": "option_4", "text": "rails add controller", "isCorrect": false }
    ],
    "hint": "This command also creates a corresponding directory in the 'app/controllers' folder.",
    "answerDescription": "The `rails generate controller` command creates a new controller with actions and views."
  },
  {
    "id": "ruby_1773",
    "question": "Which helper method is used to create a link in Rails views?",
    "options": [
      { "id": "option_1", "text": "url_for", "isCorrect": false },
      { "id": "option_2", "text": "path_to", "isCorrect": false },
      { "id": "option_3", "text": "link_to", "isCorrect": true },
      { "id": "option_4", "text": "href_to", "isCorrect": false }
    ],
    "hint": "This method generates an anchor tag dynamically.",
    "answerDescription": "In Rails, `link_to` is a helper method used to generate links in views."
  },
  {
    "id": "ruby_1774",
    "question": "Which component of MVC is responsible for presenting data to the user?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "Controller", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": true },
      { "id": "option_4", "text": "Route", "isCorrect": false }
    ],
    "hint": "This component generates the HTML or JSON response.",
    "answerDescription": "The View component in MVC is responsible for rendering the user interface in Rails."
  },
  {
    "id": "ruby_1775",
    "question": "Which Rails method fetches a record by its primary key?",
    "options": [
      { "id": "option_1", "text": "Model.retrieve(id)", "isCorrect": false },
      { "id": "option_2", "text": "Model.get(id)", "isCorrect": false },
      { "id": "option_3", "text": "Model.find(id)", "isCorrect": true },
      { "id": "option_4", "text": "Model.select(id)", "isCorrect": false }
    ],
    "hint": "This method raises an exception if the record is not found.",
    "answerDescription": "`Model.find(id)` is used in Rails to retrieve a record by its primary key."
  },
  {
    "id": "ruby_1776",
    "question": "Which Rails method is used to establish a one-to-many association?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "This association is used when one model has multiple related records.",
    "answerDescription": "The `has_many` method in Rails defines a one-to-many association between models."
  },
  {
    "id": "ruby_1777",
    "question": "Which file in a Rails project contains database connection settings?",
    "options": [
      { "id": "option_1", "text": "routes.rb", "isCorrect": false },
      { "id": "option_2", "text": "schema.rb", "isCorrect": false },
      { "id": "option_3", "text": "database.yml", "isCorrect": true },
      { "id": "option_4", "text": "config.rb", "isCorrect": false }
    ],
    "hint": "This file is located inside the 'config' folder.",
    "answerDescription": "The `database.yml` file in Rails contains configuration settings for database connections."
  },
  {
    "id": "ruby_1778",
    "question": "Which command is used to start a Rails server in ruby?",
    "options": [
      { "id": "option_1", "text": "rails server start", "isCorrect": false },
      { "id": "option_2", "text": "rails run", "isCorrect": false },
      { "id": "option_3", "text": "rails server", "isCorrect": true },
      { "id": "option_4", "text": "rails start", "isCorrect": false }
    ],
    "hint": "This command is often shortened as 'rails s'.",
    "answerDescription": "The `rails server` command starts the local development server for a Rails application."
  },
  {
    "id": "ruby_1779",
    "question": "Which Rails method is used to create a migration file?",
    "options": [
      { "id": "option_1", "text": "rails make:migration", "isCorrect": false },
      { "id": "option_2", "text": "rails create:migration", "isCorrect": false },
      { "id": "option_3", "text": "rails generate migration", "isCorrect": true },
      { "id": "option_4", "text": "rails new migration", "isCorrect": false }
    ],
    "hint": "This command is often shortened as 'rails g migration'.",
    "answerDescription": "The `rails generate migration` command is used to create a new database migration file."
  },
  {
    "id": "ruby_1780",
    "question": "Which Rails component is responsible for handling user requests?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": true },
      { "id": "option_4", "text": "Database", "isCorrect": false }
    ],
    "hint": "This component processes HTTP requests and calls the appropriate model and view.",
    "answerDescription": "In Rails, the Controller is responsible for handling user requests and interacting with models and views."
  },
  {
    "id": "ruby_1781",
    "question": "What is the purpose of the 'before_action' callback in Rails controllers?",
    "options": [
      { "id": "option_1", "text": "To execute code before the Rails application starts", "isCorrect": false },
      { "id": "option_2", "text": "To run code before a model validation", "isCorrect": false },
      { "id": "option_3", "text": "To execute code before a controller action runs", "isCorrect": true },
      { "id": "option_4", "text": "To filter records before a query is executed", "isCorrect": false }
    ],
    "hint": "This callback is used to perform authentication or set instance variables before actions.",
    "answerDescription": "The `before_action` callback in Rails controllers allows executing code before specific controller actions run."
  },
  {
    "id": "ruby_1782",
    "question": "Which method is used to update an existing record in Rails?",
    "options": [
      { "id": "option_1", "text": "save", "isCorrect": false },
      { "id": "option_2", "text": "modify", "isCorrect": false },
      { "id": "option_3", "text": "update", "isCorrect": true },
      { "id": "option_4", "text": "change", "isCorrect": false }
    ],
    "hint": "This method modifies an existing database record and saves changes.",
    "answerDescription": "The `update` method in Rails is used to modify an existing record in the database."
  },
  {
    "id": "ruby_1783",
    "question": "Which Rails file contains environment-specific configurations?",
    "options": [
      { "id": "option_1", "text": "application.rb", "isCorrect": false },
      { "id": "option_2", "text": "routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "environment.rb", "isCorrect": true },
      { "id": "option_4", "text": "config.rb", "isCorrect": false }
    ],
    "hint": "This file loads configuration settings based on the environment (development, test, production).",
    "answerDescription": "The `environment.rb` file in Rails stores configurations specific to different environments."
  },
  {
    "id": "ruby_1784",
    "question": "Which Rails ActiveRecord method is used to delete a record?",
    "options": [
      { "id": "option_1", "text": "remove", "isCorrect": false },
      { "id": "option_2", "text": "destroy!", "isCorrect": false },
      { "id": "option_3", "text": "destroy", "isCorrect": true },
      { "id": "option_4", "text": "delete!", "isCorrect": false }
    ],
    "hint": "This method also triggers callbacks like 'before_destroy'.",
    "answerDescription": "The `destroy` method in ActiveRecord removes a record and triggers callbacks before deletion."
  },
  {
    "id": "ruby_1785",
    "question": "Which of the following Rails components is responsible for rendering views?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": false },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": true },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "This component generates HTML or JSON responses for the user.",
    "answerDescription": "In Rails, the View component is responsible for rendering data into HTML, JSON, or other formats."
  },
  {
    "id": "ruby_1786",
    "question": "Which Rails feature helps in organizing code by separating concerns?",
    "options": [
      { "id": "option_1", "text": "RESTful architecture", "isCorrect": false },
      { "id": "option_2", "text": "Singleton pattern", "isCorrect": false },
      { "id": "option_3", "text": "MVC pattern", "isCorrect": true },
      { "id": "option_4", "text": "Decorator pattern", "isCorrect": false }
    ],
    "hint": "This pattern divides the application into three distinct components.",
    "answerDescription": "The MVC (Model-View-Controller) pattern in Rails organizes code by separating data, presentation, and logic."
  },
  {
    "id": "ruby_1787",
    "question": "Which Rails command is used to run database migrations?",
    "options": [
      { "id": "option_1", "text": "rails migrate up", "isCorrect": false },
      { "id": "option_2", "text": "rails database update", "isCorrect": false },
      { "id": "option_3", "text": "rails db:migrate", "isCorrect": true },
      { "id": "option_4", "text": "rails schema update", "isCorrect": false }
    ],
    "hint": "This command applies all pending migrations to the database.",
    "answerDescription": "The `rails db:migrate` command executes database migrations to update the schema."
  },
  {
    "id": "ruby_1788",
    "question": "What is the primary purpose of a model in Rails?",
    "options": [
      { "id": "option_1", "text": "To handle HTTP requests", "isCorrect": false },
      { "id": "option_2", "text": "To define application routes", "isCorrect": false },
      { "id": "option_3", "text": "To render views", "isCorrect": false },
      { "id": "option_4", "text": "To manage database interactions", "isCorrect": true }
    ],
    "hint": "This component is responsible for handling data and business logic.",
    "answerDescription": "In Rails, a model represents the application's data and provides methods for database interactions."
  },
  {
    "id": "ruby_1789",
    "question": "Which Rails feature helps prevent SQL injection?",
    "options": [
      { "id": "option_1", "text": "Direct SQL queries", "isCorrect": false },
      { "id": "option_2", "text": "Inline JavaScript", "isCorrect": false },
      { "id": "option_3", "text": "Session cookies", "isCorrect": false },
      { "id": "option_4", "text": "ActiveRecord query methods", "isCorrect": true }
    ],
    "hint": "Using Rails' ORM methods ensures parameterized queries.",
    "answerDescription": "ActiveRecord query methods help prevent SQL injection by using parameterized queries."
  },
  {
    "id": "ruby_1790",
    "question": "Which Rails directory contains view templates?",
    "options": [
      { "id": "option_1", "text": "app/controllers", "isCorrect": false },
      { "id": "option_2", "text": "app/models", "isCorrect": false },
      { "id": "option_3", "text": "db/migrate", "isCorrect": false },
      { "id": "option_4", "text": "app/views", "isCorrect": true }
    ],
    "hint": "This directory stores HTML and template files.",
    "answerDescription": "In Rails, the `app/views` directory contains view templates used to render responses."
  },
  {
    "id": "ruby_1791",
    "question": "Which of the following is NOT a Rails controller action?",
    "options": [
      { "id": "option_1", "text": "index", "isCorrect": false },
      { "id": "option_2", "text": "show", "isCorrect": false },
      { "id": "option_3", "text": "list", "isCorrect": false },
      { "id": "option_4", "text": "browse", "isCorrect": true }
    ],
    "hint": "Rails follows RESTful conventions for controller actions.",
    "answerDescription": "Rails controllers use standard RESTful actions like `index`, `show`, `create`, `update`, and `destroy`. `browse` is not one of them."
  },
  {
    "id": "ruby_1792",
    "question": "How do you define a new route in Rails?",
    "options": [
      { "id": "option_1", "text": "In app/controllers", "isCorrect": false },
      { "id": "option_2", "text": "Using the model file", "isCorrect": false },
      { "id": "option_3", "text": "Inside the app/views directory", "isCorrect": false },
      { "id": "option_4", "text": "In config/routes.rb", "isCorrect": true }
    ],
    "hint": "Routes are defined in a special configuration file.",
    "answerDescription": "Rails routes are defined in the `config/routes.rb` file to map URLs to controller actions."
  },
  {
    "id": "ruby_1793",
    "question": "Which method is used to validate data in a Rails model?",
    "options": [
      { "id": "option_1", "text": "before_save", "isCorrect": false },
      { "id": "option_2", "text": "has_secure_password", "isCorrect": false },
      { "id": "option_3", "text": "foreign_key", "isCorrect": false },
      { "id": "option_4", "text": "validates", "isCorrect": true }
    ],
    "hint": "This method is used to enforce constraints on model attributes.",
    "answerDescription": "Rails provides the `validates` method to enforce data validation rules in models."
  },
  {
    "id": "ruby_1794",
    "question": "What is the role of the 'flash' in Rails?",
    "options": [
      { "id": "option_1", "text": "To store long-term session data", "isCorrect": false },
      { "id": "option_2", "text": "To manage user authentication", "isCorrect": false },
      { "id": "option_3", "text": "To define database schema", "isCorrect": false },
      { "id": "option_4", "text": "To display temporary messages", "isCorrect": true }
    ],
    "hint": "This feature helps pass messages between requests.",
    "answerDescription": "The `flash` object in Rails is used to display temporary messages, such as success or error notifications."
  },
  {
    "id": "ruby_1795",
    "question": "Which method in Rails fetches a record by its primary key?",
    "options": [
      { "id": "option_1", "text": "where", "isCorrect": false },
      { "id": "option_2", "text": "find_by", "isCorrect": false },
      { "id": "option_3", "text": "pluck", "isCorrect": false },
      { "id": "option_4", "text": "find", "isCorrect": true }
    ],
    "hint": "This method raises an error if the record is not found.",
    "answerDescription": "The `find` method retrieves a record by its primary key and raises an error if it does not exist."
  },
  {
    "id": "ruby_1796",
    "question": "Which of the following is true about Rails partials?",
    "options": [
      { "id": "option_1", "text": "They are used for database transactions", "isCorrect": false },
      { "id": "option_2", "text": "They are used to define routes", "isCorrect": false },
      { "id": "option_3", "text": "They store ActiveRecord queries", "isCorrect": false },
      { "id": "option_4", "text": "They help reuse view templates", "isCorrect": true }
    ],
    "hint": "They allow breaking up views into smaller reusable components.",
    "answerDescription": "Rails partials allow reusing sections of view templates to keep code DRY."
  },
  {
    "id": "ruby_1797",
    "question": "Which of the following is NOT a Rails environment?",
    "options": [
      { "id": "option_1", "text": "Development", "isCorrect": false },
      { "id": "option_2", "text": "Production", "isCorrect": false },
      { "id": "option_3", "text": "Test", "isCorrect": false },
      { "id": "option_4", "text": "Debug", "isCorrect": true }
    ],
    "hint": "Rails comes with three default environments.",
    "answerDescription": "Rails includes Development, Production, and Test environments by default. `Debug` is not an official environment."
  },
  {
    "id": "ruby_1798",
    "question": "What does the 'C' in MVC stand for in Rails?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": true },
      { "id": "option_2", "text": "Config", "isCorrect": false },
      { "id": "option_3", "text": "Component", "isCorrect": false },
      { "id": "option_4", "text": "Cache", "isCorrect": false }
    ],
    "hint": "It manages the logic and flow between models and views.",
    "answerDescription": "In Rails, the Controller handles requests and connects models with views."
  },
  {
    "id": "ruby_1799",
    "question": "Which component of MVC is responsible for rendering HTML in Rails?",
    "options": [
      { "id": "option_1", "text": "View", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": false },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "This component deals with user interface output.",
    "answerDescription": "The View in Rails is responsible for rendering HTML templates."
  },
  {
    "id": "ruby_1800",
    "question": "Which file in a Rails project defines routes?",
    "options": [
      { "id": "option_1", "text": "routes.rb", "isCorrect": true },
      { "id": "option_2", "text": "schema.rb", "isCorrect": false },
      { "id": "option_3", "text": "application.rb", "isCorrect": false },
      { "id": "option_4", "text": "seeds.rb", "isCorrect": false }
    ],
    "hint": "It is located in the config folder.",
    "answerDescription": "Routes in Rails are defined in the `config/routes.rb` file."
  },
  {
    "id": "ruby_1801",
    "question": "In Rails, which method retrieves all records from a model?",
    "options": [
      { "id": "option_1", "text": ".all", "isCorrect": true },
      { "id": "option_2", "text": ".find", "isCorrect": false },
      { "id": "option_3", "text": ".first", "isCorrect": false },
      { "id": "option_4", "text": ".where", "isCorrect": false }
    ],
    "hint": "It returns an array of all records.",
    "answerDescription": "The `.all` method in Rails ActiveRecord retrieves all records from a model."
  },
  {
    "id": "ruby_1802",
    "question": "What command is used to generate a new model in Rails?",
    "options": [
      { "id": "option_1", "text": "rails generate model", "isCorrect": true },
      { "id": "option_2", "text": "rails create model", "isCorrect": false },
      { "id": "option_3", "text": "rails make model", "isCorrect": false },
      { "id": "option_4", "text": "rails new model", "isCorrect": false }
    ],
    "hint": "It is a command-line tool used to create ActiveRecord models.",
    "answerDescription": "Rails uses `rails generate model` to create a new model file and migration."
  },
  {
    "id": "ruby_1803",
    "question": "Which Rails component is responsible for handling HTTP requests?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": true },
      { "id": "option_2", "text": "Model", "isCorrect": false },
      { "id": "option_3", "text": "View", "isCorrect": false },
      { "id": "option_4", "text": "Helper", "isCorrect": false }
    ],
    "hint": "It acts as the middle layer between models and views.",
    "answerDescription": "The Controller in Rails processes HTTP requests, interacts with models, and renders views."
  },
  {
    "id": "ruby_1804",
    "question": "Which command is used to create a new Rails application?",
    "options": [
      { "id": "option_1", "text": "rails start project_name", "isCorrect": false },
      { "id": "option_2", "text": "rails new project_name", "isCorrect": true },
      { "id": "option_3", "text": "rails generate project_name", "isCorrect": false },
      { "id": "option_4", "text": "rails create project_name", "isCorrect": false }
    ],
    "hint": "This command generates a new Rails project with necessary files.",
    "answerDescription": "`rails new project_name` initializes a new Rails application."
  },
  {
    "id": "ruby_1805",
    "question": "What is the role of `flash` messages in Rails?",
    "options": [
      { "id": "option_1", "text": "To log debug information", "isCorrect": false },
      { "id": "option_2", "text": "To display temporary messages between requests", "isCorrect": true },
      { "id": "option_3", "text": "To store permanent user preferences", "isCorrect": false },
      { "id": "option_4", "text": "To define HTML templates", "isCorrect": false }
    ],
    "hint": "They are often used for success or error messages after form submissions.",
    "answerDescription": "Rails `flash` messages store temporary notifications for users between requests."
  },
  {
    "id": "ruby_1806",
    "question": "What does the `params` object in Rails store?",
    "options": [
      { "id": "option_1", "text": "Session variables", "isCorrect": false },
      { "id": "option_2", "text": "Request parameters", "isCorrect": true },
      { "id": "option_3", "text": "Database records", "isCorrect": false },
      { "id": "option_4", "text": "Configuration settings", "isCorrect": false }
    ],
    "hint": "It is commonly used to capture form inputs and query strings.",
    "answerDescription": "The `params` object stores HTTP request parameters in a controller."
  },
  {
    "id": "ruby_1807",
    "question": "Which method is used to redirect users to another action in Rails?",
    "options": [
      { "id": "option_1", "text": "render", "isCorrect": false },
      { "id": "option_2", "text": "redirect_to", "isCorrect": true },
      { "id": "option_3", "text": "link_to", "isCorrect": false },
      { "id": "option_4", "text": "redirect_path", "isCorrect": false }
    ],
    "hint": "It issues an HTTP redirect response.",
    "answerDescription": "`redirect_to` is used in controllers to navigate to another page or action."
  },
  {
    "id": "ruby_1808",
    "question": "What is the primary function of a Rails Model?",
    "options": [
      { "id": "option_1", "text": "To handle user input", "isCorrect": false },
      { "id": "option_2", "text": "To interact with the database", "isCorrect": true },
      { "id": "option_3", "text": "To render views", "isCorrect": false },
      { "id": "option_4", "text": "To manage routes", "isCorrect": false }
    ],
    "hint": "It deals with data storage and retrieval.",
    "answerDescription": "Rails Models interact with the database using ActiveRecord."
  },
  {
    "id": "ruby_1809",
    "question": "Which Rails component is responsible for URL mapping?",
    "options": [
      { "id": "option_1", "text": "Controller", "isCorrect": false },
      { "id": "option_2", "text": "Router", "isCorrect": true },
      { "id": "option_3", "text": "Model", "isCorrect": false },
      { "id": "option_4", "text": "Helper", "isCorrect": false }
    ],
    "hint": "It connects HTTP requests to controllers.",
    "answerDescription": "Rails uses a Router to map URLs to appropriate Controllers."
  },
  {
    "id": "ruby_1810",
    "question": "Which command is used to start a Rails server?",
    "options": [
      { "id": "option_1", "text": "rails new server", "isCorrect": false },
      { "id": "option_2", "text": "rails server", "isCorrect": true },
      { "id": "option_3", "text": "rails run", "isCorrect": false },
      { "id": "option_4", "text": "rails boot", "isCorrect": false }
    ],
    "hint": "The command starts the web server for your Rails application.",
    "answerDescription": "The `rails server` command starts the local development server."
  },
  {
    "id": "ruby_1811",
    "question": "What is the purpose of the `before_action` callback in a Rails controller?",
    "options": [
      { "id": "option_1", "text": "To validate user input", "isCorrect": false },
      { "id": "option_2", "text": "To execute code before a controller action", "isCorrect": true },
      { "id": "option_3", "text": "To render a view", "isCorrect": false },
      { "id": "option_4", "text": "To define model relationships", "isCorrect": false }
    ],
    "hint": "It is used to set up common behavior before specific controller actions execute.",
    "answerDescription": "`before_action` allows defining methods that run before executing controller actions."
  },
  {
    "id": "ruby_1812",
    "question": "What is the function of the `has_many` association in Rails?",
    "options": [
      { "id": "option_1", "text": "Defines a one-to-one relationship", "isCorrect": false },
      { "id": "option_2", "text": "Defines a one-to-many relationship", "isCorrect": true },
      { "id": "option_3", "text": "Defines a many-to-many relationship", "isCorrect": false },
      { "id": "option_4", "text": "Defines an optional dependency", "isCorrect": false }
    ],
    "hint": "It is used when a model has multiple associated records.",
    "answerDescription": "`has_many` creates a one-to-many association between models."
  },
  {
    "id": "ruby_1813",
    "question": "Which method is used to define strong parameters in Rails?",
    "options": [
      { "id": "option_1", "text": "params.allow", "isCorrect": false },
      { "id": "option_2", "text": "params.require", "isCorrect": false },
      { "id": "option_3", "text": "permit", "isCorrect": true },
      { "id": "option_4", "text": "params.include", "isCorrect": false }
    ],
    "hint": "It helps prevent mass-assignment vulnerabilities.",
    "answerDescription": "The `permit` method is used to whitelist parameters in Rails controllers."
  },
  {
    "id": "ruby_1814",
    "question": "What is the function of the `scope` method in ActiveRecord?",
    "options": [
      { "id": "option_1", "text": "To define database indexes", "isCorrect": false },
      { "id": "option_2", "text": "To set default values for columns", "isCorrect": false },
      { "id": "option_3", "text": "To define reusable queries", "isCorrect": true },
      { "id": "option_4", "text": "To specify table constraints", "isCorrect": false }
    ],
    "hint": "It helps define commonly used query conditions.",
    "answerDescription": "The `scope` method in ActiveRecord allows defining reusable queries."
  },
  {
    "id": "ruby_1815",
    "question": "Which keyword is used to define a new route in Rails?",
    "options": [
      { "id": "option_1", "text": "define", "isCorrect": false },
      { "id": "option_2", "text": "route", "isCorrect": false },
      { "id": "option_3", "text": "get", "isCorrect": true },
      { "id": "option_4", "text": "path", "isCorrect": false }
    ],
    "hint": "This keyword is commonly used for mapping HTTP GET requests to actions.",
    "answerDescription": "The `get` keyword is used in Rails routes to define a new GET request."
  },
  {
    "id": "ruby_1816",
    "question": "In a Rails application, where are views stored?",
    "options": [
      { "id": "option_1", "text": "app/models", "isCorrect": false },
      { "id": "option_2", "text": "app/controllers", "isCorrect": false },
      { "id": "option_3", "text": "app/views", "isCorrect": true },
      { "id": "option_4", "text": "config/routes", "isCorrect": false }
    ],
    "hint": "This directory contains templates for rendering HTML responses.",
    "answerDescription": "Views in Rails are stored in the `app/views` folder."
  },
  {
    "id": "ruby_1817",
    "question": "What is the purpose of the `validates` method in a Rails model?",
    "options": [
      { "id": "option_1", "text": "To define database relationships", "isCorrect": false },
      { "id": "option_2", "text": "To format output in views", "isCorrect": false },
      { "id": "option_3", "text": "To enforce data validation rules", "isCorrect": true },
      { "id": "option_4", "text": "To store session data", "isCorrect": false }
    ],
    "hint": "It helps prevent invalid data from being saved in the database.",
    "answerDescription": "The `validates` method ensures that data stored in the database follows specified rules."
  }, 
  {
    "id": "ruby_1818",
    "question": "Which part of the MVC architecture handles user input and updates the model accordingly?",
    "options": [
      { "id": "option_1", "text": "Model", "isCorrect": false },
      { "id": "option_2", "text": "View", "isCorrect": false },
      { "id": "option_3", "text": "Controller", "isCorrect": true },
      { "id": "option_4", "text": "Router", "isCorrect": false }
    ],
    "hint": "This component processes user interactions and directs them to the appropriate logic.",
    "answerDescription": "Controllers handle user input and interact with the Model to update data."
  },
  {
    "id": "ruby_1819",
    "question": "Which Rails feature is responsible for database migrations?",
    "options": [
      { "id": "option_1", "text": "ActiveSupport", "isCorrect": false },
      { "id": "option_2", "text": "ActionView", "isCorrect": false },
      { "id": "option_3", "text": "ActiveRecord", "isCorrect": true },
      { "id": "option_4", "text": "ActionController", "isCorrect": false }
    ],
    "hint": "This ORM system manages database interactions.",
    "answerDescription": "ActiveRecord provides methods to handle database migrations and queries."
  },
  {
    "id": "ruby_1820",
    "question": "What does `rails routes` command do?",
    "options": [
      { "id": "option_1", "text": "Starts the Rails server", "isCorrect": false },
      { "id": "option_2", "text": "Creates a new route", "isCorrect": false },
      { "id": "option_3", "text": "Displays all defined routes", "isCorrect": true },
      { "id": "option_4", "text": "Deletes existing routes", "isCorrect": false }
    ],
    "hint": "It lists all available paths and their associated controllers.",
    "answerDescription": "The `rails routes` command prints all currently defined routes in a Rails application."
  },
  {
    "id": "ruby_1821",
    "question": "What is the function of the `has_one` association in Rails?",
    "options": [
      { "id": "option_1", "text": "Defines a one-to-many relationship", "isCorrect": false },
      { "id": "option_2", "text": "Defines a many-to-many relationship", "isCorrect": false },
      { "id": "option_3", "text": "Defines a one-to-one relationship", "isCorrect": true },
      { "id": "option_4", "text": "Defines an optional dependency", "isCorrect": false }
    ],
    "hint": "It indicates that a record is associated with exactly one other record.",
    "answerDescription": "The `has_one` association in Rails is used for one-to-one relationships."
  },
  {
    "id": "ruby_1822",
    "question": "What does 'Convention over Configuration' mean in Rails?",
    "options": [
      { "id": "option_1", "text": "Developers must manually configure every setting", "isCorrect": false },
      { "id": "option_2", "text": "Rails enforces strict rules for coding style", "isCorrect": false },
      { "id": "option_3", "text": "Rails provides sensible defaults to reduce configuration", "isCorrect": true },
      { "id": "option_4", "text": "It means following the MVC pattern strictly", "isCorrect": false }
    ],
    "hint": "It helps developers focus on writing business logic instead of configurations.",
    "answerDescription": "Rails follows 'Convention over Configuration' by providing default settings, reducing the need for manual configurations."
  },
  {
    "id": "ruby_1823",
    "question": "Which of the following is an example of 'Convention over Configuration' in Rails?",
    "options": [
      { "id": "option_1", "text": "Defining custom routing for every controller action", "isCorrect": false },
      { "id": "option_2", "text": "Manually specifying table names for models", "isCorrect": false },
      { "id": "option_3", "text": "Using pluralized table names for ActiveRecord models", "isCorrect": true },
      { "id": "option_4", "text": "Writing SQL queries instead of ActiveRecord methods", "isCorrect": false }
    ],
    "hint": "Rails automatically maps models to plural table names.",
    "answerDescription": "By default, Rails maps models to database tables using pluralized names, e.g., `User` → `users`."
  },
  {
    "id": "ruby_1824",
    "question": "In Rails, where should model files be stored by convention?",
    "options": [
      { "id": "option_1", "text": "app/controllers", "isCorrect": false },
      { "id": "option_2", "text": "app/views", "isCorrect": false },
      { "id": "option_3", "text": "app/models", "isCorrect": true },
      { "id": "option_4", "text": "config/database", "isCorrect": false }
    ],
    "hint": "This directory contains files responsible for database interactions.",
    "answerDescription": "In Rails, model files are conventionally stored in the `app/models` directory."
  },
  {
    "id": "ruby_1825",
    "question": "How does Rails determine the database table name for a model?",
    "options": [
      { "id": "option_1", "text": "It requires manual configuration in the model file", "isCorrect": false },
      { "id": "option_2", "text": "It uses the singular form of the model name", "isCorrect": false },
      { "id": "option_3", "text": "It automatically maps the model to a pluralized table name", "isCorrect": true },
      { "id": "option_4", "text": "It assigns random table names to models", "isCorrect": false }
    ],
    "hint": "Rails pluralizes model names when mapping to tables.",
    "answerDescription": "By convention, Rails maps the model `User` to the table `users`."
  },
  {
    "id": "ruby_1826",
    "question": "Which Rails naming convention applies to controller names?",
    "options": [
      { "id": "option_1", "text": "Controller names should be singular", "isCorrect": false },
      { "id": "option_2", "text": "Controller names must always end with 'Handler'", "isCorrect": false },
      { "id": "option_3", "text": "Controller names should be pluralized", "isCorrect": true },
      { "id": "option_4", "text": "Controller names should match the model name exactly", "isCorrect": false }
    ],
    "hint": "Controllers typically manage collections of resources.",
    "answerDescription": "In Rails, controllers follow a plural naming convention, e.g., `UsersController` for managing users."
  },
  {
    "id": "ruby_1827",
    "question": "What is the default file extension for Rails view templates?",
    "options": [
      { "id": "option_1", "text": ".erb", "isCorrect": false },
      { "id": "option_2", "text": ".rb", "isCorrect": false },
      { "id": "option_3", "text": ".html.erb", "isCorrect": true },
      { "id": "option_4", "text": ".rhtml", "isCorrect": false }
    ],
    "hint": "This extension allows embedding Ruby in HTML.",
    "answerDescription": "Rails view templates typically use the `.html.erb` extension, supporting embedded Ruby."
  },
  {
    "id": "ruby_1828",
    "question": "What is the default folder structure for storing JavaScript files in a Rails application?",
    "options": [
      { "id": "option_1", "text": "app/assets/javascripts", "isCorrect": false },
      { "id": "option_2", "text": "config/javascript", "isCorrect": false },
      { "id": "option_3", "text": "app/javascript", "isCorrect": true },
      { "id": "option_4", "text": "public/js", "isCorrect": false }
    ],
    "hint": "Rails uses Webpacker and keeps JavaScript files in this directory.",
    "answerDescription": "In modern Rails applications, JavaScript files are conventionally stored in `app/javascript`."
  },
  {
    "id": "ruby_1829",
    "question": "Which Rails convention applies to helper methods?",
    "options": [
      { "id": "option_1", "text": "Helpers must be defined in the model file", "isCorrect": false },
      { "id": "option_2", "text": "Helpers should always be placed inside controllers", "isCorrect": false },
      { "id": "option_3", "text": "Helpers should be stored in the 'app/helpers' directory", "isCorrect": true },
      { "id": "option_4", "text": "Helpers should only be defined inside views", "isCorrect": false }
    ],
    "hint": "Rails provides a specific directory for helper files.",
    "answerDescription": "Rails conventionally stores helper methods in `app/helpers`."
  },
  {
    "id": "ruby_1830",
    "question": "How does Rails determine which controller action to execute for a given request?",
    "options": [
      { "id": "option_1", "text": "It requires explicit mapping for each action", "isCorrect": false },
      { "id": "option_2", "text": "It uses a predefined lookup table", "isCorrect": false },
      { "id": "option_3", "text": "It follows RESTful conventions based on URL patterns", "isCorrect": true },
      { "id": "option_4", "text": "It randomly assigns actions to routes", "isCorrect": false }
    ],
    "hint": "Rails follows RESTful routing by default.",
    "answerDescription": "Rails maps URLs to controller actions using RESTful conventions."
  },
  {
    "id": "ruby_1831",
    "question": "In Rails, what is the default naming convention for database foreign keys?",
    "options": [
      { "id": "option_1", "text": "Uses the full class name as the foreign key", "isCorrect": false },
      { "id": "option_2", "text": "Uses a random identifier", "isCorrect": false },
      { "id": "option_3", "text": "Uses the model name followed by '_id'", "isCorrect": true },
      { "id": "option_4", "text": "Uses the singular model name only", "isCorrect": false }
    ],
    "hint": "Rails automatically appends '_id' to foreign keys.",
    "answerDescription": "Rails conventionally names foreign keys as `model_id`, e.g., `user_id` for a `User` model."
  },
  {
    "id": "ruby_1832",
    "question": "What is the correct syntax to define a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "method my_method { puts 'Hello' }", "isCorrect": false },
      { "id": "option_2", "text": "def my_method puts 'Hello' end", "isCorrect": false },
      { "id": "option_3", "text": "define my_method { puts 'Hello' }", "isCorrect": false },
      { "id": "option_4", "text": "def my_method; puts 'Hello'; end", "isCorrect": true }
    ],
    "hint": "Use 'def' to define a method.",
    "answerDescription": "Ruby uses the 'def' keyword followed by the method name and optional parameters."
  },
  {
    "id": "ruby_1833",
    "question": "What keyword is used to return a value from a method explicitly?",
    "options": [
      { "id": "option_1", "text": "exit", "isCorrect": false },
      { "id": "option_2", "text": "return_value", "isCorrect": false },
      { "id": "option_3", "text": "output", "isCorrect": false },
      { "id": "option_4", "text": "return", "isCorrect": true }
    ],
    "hint": "Explicitly sending back a value requires a keyword.",
    "answerDescription": "The 'return' keyword is used to exit a method and send a value back to the caller."
  },
  {
    "id": "ruby_1834",
    "question": "How can you define a method with a default parameter in Ruby?",
    "options": [
      { "id": "option_1", "text": "def greet(name: 'Guest'); puts 'Hello, #{name}' end", "isCorrect": false },
      { "id": "option_2", "text": "def greet(name <- 'Guest'); puts 'Hello, #{name}' end", "isCorrect": false },
      { "id": "option_3", "text": "define greet(name = 'Guest') { puts 'Hello, #{name}' }", "isCorrect": false },
      { "id": "option_4", "text": "def greet(name = 'Guest'); puts 'Hello, #{name}' end", "isCorrect": true }
    ],
    "hint": "Default values are assigned using '=' in method definitions.",
    "answerDescription": "A default parameter is defined by assigning a value within the method signature."
  },
  {
    "id": "ruby_1835",
    "question": "What happens when a method is called without an explicit 'return' statement?",
    "options": [
      { "id": "option_1", "text": "It returns nil by default.", "isCorrect": false },
      { "id": "option_2", "text": "It returns an empty string.", "isCorrect": false },
      { "id": "option_3", "text": "It raises an error.", "isCorrect": false },
      { "id": "option_4", "text": "It returns the last evaluated expression.", "isCorrect": true }
    ],
    "hint": "Methods automatically return a value even without 'return'.",
    "answerDescription": "In Ruby, the last evaluated expression is returned if there is no explicit 'return'."
  },
  {
    "id": "ruby_1836",
    "question": "How can you define a method that accepts a variable number of arguments in Ruby?",
    "options": [
      { "id": "option_1", "text": "def sum(numbers...); numbers.sum; end", "isCorrect": false },
      { "id": "option_2", "text": "def sum(+numbers); numbers.sum; end", "isCorrect": false },
      { "id": "option_3", "text": "define sum(numbers) { numbers.sum }", "isCorrect": false },
      { "id": "option_4", "text": "def sum(*numbers); numbers.sum; end", "isCorrect": true }
    ],
    "hint": "Ruby uses a special symbol to handle multiple arguments.",
    "answerDescription": "The '*' (splat) operator allows a method to accept multiple arguments as an array."
  },
  {
    "id": "ruby_1837",
    "question": "What will the following method return?\n\ndef multiply(a, b = 2)\n  a * b\nend\nmultiply(5)",
    "options": [
      { "id": "option_1", "text": "5", "isCorrect": false },
      { "id": "option_2", "text": "2", "isCorrect": false },
      { "id": "option_3", "text": "nil", "isCorrect": false },
      { "id": "option_4", "text": "10", "isCorrect": true }
    ],
    "hint": "Check the default value of 'b'.",
    "answerDescription": "Since 'b' defaults to 2 and 'a' is 5, the method returns 5 * 2 = 10."
  },
  {
    "id": "ruby_1838",
    "question": "How do you call a method with keyword arguments?",
    "options": [
      { "id": "option_1", "text": "method_name value1, value2", "isCorrect": false },
      { "id": "option_2", "text": "method_name(:arg1 => value1, :arg2 => value2)", "isCorrect": false },
      { "id": "option_3", "text": "method_name{ arg1: value1, arg2: value2 }", "isCorrect": false },
      { "id": "option_4", "text": "method_name(arg1: value1, arg2: value2)", "isCorrect": true }
    ],
    "hint": "Ruby has a special syntax for passing named arguments.",
    "answerDescription": "Ruby allows passing named arguments using 'arg_name: value' syntax."
  },
  {
    "id": "ruby_1839",
    "question": "What is the purpose of the 'alias' keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "It renames a variable.", "isCorrect": false },
      { "id": "option_2", "text": "It defines a new method.", "isCorrect": false },
      { "id": "option_3", "text": "It removes a method.", "isCorrect": false },
      { "id": "option_4", "text": "It creates an alternative name for a method.", "isCorrect": true }
    ],
    "hint": "This keyword creates method synonyms.",
    "answerDescription": "The 'alias' keyword allows renaming an existing method."
  },
  {
    "id": "ruby_1840",
    "question": "What is the purpose of routes in Rails?",
    "options": [
      { "id": "option_1", "text": "To define URL patterns and map them to controller actions.", "isCorrect": true },
      { "id": "option_2", "text": "To create database tables automatically.", "isCorrect": false },
      { "id": "option_3", "text": "To store application configuration settings.", "isCorrect": false },
      { "id": "option_4", "text": "To define background jobs.", "isCorrect": false }
    ],
    "hint": "Routes connect HTTP requests to the appropriate controller and action.",
    "answerDescription": "Rails routes define URL patterns and direct them to the corresponding controller actions."
  },
  {
    "id": "ruby_1841",
    "question": "Which Rails file is used to define application routes?",
    "options": [
      { "id": "option_1", "text": "config/routes.rb", "isCorrect": true },
      { "id": "option_2", "text": "app/routes.rb", "isCorrect": false },
      { "id": "option_3", "text": "db/routes.rb", "isCorrect": false },
      { "id": "option_4", "text": "routes.yaml", "isCorrect": false }
    ],
    "hint": "This file is located inside the config directory.",
    "answerDescription": "Routes in a Rails application are defined in the `config/routes.rb` file."
  },
  {
    "id": "ruby_1842",
    "question": "Which of the following is a valid way to define a named route in Rails?",
    "options": [
      { "id": "option_1", "text": "get 'dashboard', to: 'home#index', as: 'dashboard'", "isCorrect": true },
      { "id": "option_2", "text": "route 'dashboard', controller: 'home', action: 'index'", "isCorrect": false },
      { "id": "option_3", "text": "get 'home#index' => 'dashboard'", "isCorrect": false },
      { "id": "option_4", "text": "route 'home#index', to: 'dashboard'", "isCorrect": false }
    ],
    "hint": "Named routes use the `as` option to provide an alias.",
    "answerDescription": "Using `as: 'dashboard'` allows referencing the route as `dashboard_path` or `dashboard_url`."
  },
  {
    "id": "ruby_1843",
    "question": "What does the `resources :articles` route helper generate?",
    "options": [
      { "id": "option_1", "text": "RESTful routes for CRUD operations on the articles resource.", "isCorrect": true },
      { "id": "option_2", "text": "A single route pointing to an index action.", "isCorrect": false },
      { "id": "option_3", "text": "A wildcard route that matches any URL.", "isCorrect": false },
      { "id": "option_4", "text": "Only a show route for the article model.", "isCorrect": false }
    ],
    "hint": "This helper generates routes for multiple controller actions.",
    "answerDescription": "The `resources :articles` helper generates RESTful routes such as index, show, new, create, edit, update, and destroy."
  },
  {
    "id": "ruby_1844",
    "question": "How can you generate only specific routes using the `resources` method?",
    "options": [
      { "id": "option_1", "text": "resources :articles, only: [:index, :show]", "isCorrect": true },
      { "id": "option_2", "text": "resources :articles, except: [:index, :show]", "isCorrect": false },
      { "id": "option_3", "text": "routes :articles, only: [:index, :show]", "isCorrect": false },
      { "id": "option_4", "text": "resources 'articles' include: [:index, :show]", "isCorrect": false }
    ],
    "hint": "Use `only` or `except` to restrict generated routes.",
    "answerDescription": "Using `only: [:index, :show]` ensures only those routes are created."
  },
  {
    "id": "ruby_1845",
    "question": "Which route helper method generates a full URL instead of a relative path?",
    "options": [
      { "id": "option_1", "text": "article_url", "isCorrect": true },
      { "id": "option_2", "text": "article_path", "isCorrect": false },
      { "id": "option_3", "text": "full_article_path", "isCorrect": false },
      { "id": "option_4", "text": "generate_url('article')", "isCorrect": false }
    ],
    "hint": "URL helpers ending in `_url` generate absolute URLs.",
    "answerDescription": "`article_url` generates a full URL including the domain, while `article_path` generates a relative path."
  },
  {
    "id": "ruby_1846",
    "question": "How do you define a custom route with a dynamic segment in Rails?",
    "options": [
      { "id": "option_1", "text": "get 'articles/:id', to: 'articles#show'", "isCorrect": true },
      { "id": "option_2", "text": "route 'articles/{id}', controller: 'articles', action: 'show'", "isCorrect": false },
      { "id": "option_3", "text": "match 'articles/:id' => 'articles#show', method: :get", "isCorrect": false },
      { "id": "option_4", "text": "get 'articles/show/:id'", "isCorrect": false }
    ],
    "hint": "Dynamic segments use a colon (`:`) before the parameter name.",
    "answerDescription": "The correct format for dynamic segments in routes is `get 'articles/:id', to: 'articles#show'`."
  },
  {
    "id": "ruby_1847",
    "question": "What is the purpose of `root 'pages#home'` in Rails routes?",
    "options": [
      { "id": "option_1", "text": "It sets the default landing page for the application.", "isCorrect": true },
      { "id": "option_2", "text": "It creates a RESTful resource for pages.", "isCorrect": false },
      { "id": "option_3", "text": "It redirects all routes to the home action.", "isCorrect": false },
      { "id": "option_4", "text": "It defines a named route called 'root_path'.", "isCorrect": false }
    ],
    "hint": "This route determines the page loaded at '/' in the app.",
    "answerDescription": "The `root` route sets the homepage for the Rails application."
  },
  {
    "id": "ruby_1848",
    "question": "Which command can be used to see all defined routes in a Rails application?",
    "options": [
      { "id": "option_1", "text": "rails routes", "isCorrect": true },
      { "id": "option_2", "text": "rake routes", "isCorrect": false },
      { "id": "option_3", "text": "rails show_routes", "isCorrect": false },
      { "id": "option_4", "text": "routes list", "isCorrect": false }
    ],
    "hint": "This command lists all defined routes and their corresponding controller actions.",
    "answerDescription": "`rails routes` displays all defined routes in a Rails application."
  },
  {
    "id": "ruby_1849",
    "question": "How can you generate a controller along with routes for RESTful actions?",
    "options": [
      { "id": "option_1", "text": "rails generate scaffold_controller Articles", "isCorrect": true },
      { "id": "option_2", "text": "rails create controller Articles", "isCorrect": false },
      { "id": "option_3", "text": "rails add controller Articles", "isCorrect": false },
      { "id": "option_4", "text": "rails scaffold Articles", "isCorrect": false }
    ],
    "hint": "This command generates a controller with CRUD actions and routes.",
    "answerDescription": "`rails generate scaffold_controller Articles` creates a controller with RESTful routes."
  },
  {
    "id": "ruby_1850",
    "question": "Which file defines the main application routes in a Rails project?",
    "options": [
      { "id": "option_1", "text": "config/database.yml", "isCorrect": false },
      { "id": "option_2", "text": "config/routes.rb", "isCorrect": true },
      { "id": "option_3", "text": "app/controllers/routes.rb", "isCorrect": false },
      { "id": "option_4", "text": "routes/config.rb", "isCorrect": false }
    ],
    "hint": "This file contains all route definitions for a Rails application.",
    "answerDescription": "The `config/routes.rb` file is used to define the application's routing structure."
  },
  {
    "id": "ruby_1851",
    "question": "How do you create a resourceful route for a `products` controller?",
    "options": [
      { "id": "option_1", "text": "resources :products", "isCorrect": true },
      { "id": "option_2", "text": "resourceful :products", "isCorrect": false },
      { "id": "option_3", "text": "routes :products", "isCorrect": false },
      { "id": "option_4", "text": "map.resources :products", "isCorrect": false }
    ],
    "hint": "This keyword automatically generates routes for standard CRUD actions.",
    "answerDescription": "`resources :products` defines RESTful routes for the `products` controller."
  },
  {
    "id": "ruby_1852",
    "question": "What does the `root` method do in Rails routing?",
    "options": [
      { "id": "option_1", "text": "Defines the default page for the application", "isCorrect": true },
      { "id": "option_2", "text": "Redirects all routes to the home page", "isCorrect": false },
      { "id": "option_3", "text": "Generates a namespace for routes", "isCorrect": false },
      { "id": "option_4", "text": "Creates a catch-all route", "isCorrect": false }
    ],
    "hint": "This method determines the landing page when users visit `/`.",
    "answerDescription": "The `root` method specifies the default controller and action when the root URL is accessed."
  },
  {
    "id": "ruby_1853",
    "question": "Which command displays all defined routes in a Rails application?",
    "options": [
      { "id": "option_1", "text": "rails show routes", "isCorrect": false },
      { "id": "option_2", "text": "rails routes", "isCorrect": true },
      { "id": "option_3", "text": "rails list_routes", "isCorrect": false },
      { "id": "option_4", "text": "rails config routes", "isCorrect": false }
    ],
    "hint": "This command helps debug and view all available routes.",
    "answerDescription": "`rails routes` lists all defined routes in a Rails application."
  },
  {
    "id": "ruby_1854",
    "question": "How can you define a named route in Rails?",
    "options": [
      { "id": "option_1", "text": "get 'profile', to: 'users#show', as: 'user_profile'", "isCorrect": true },
      { "id": "option_2", "text": "name_route 'profile' => 'users#show'", "isCorrect": false },
      { "id": "option_3", "text": "route_name 'profile', to: 'users#show'", "isCorrect": false },
      { "id": "option_4", "text": "set_route 'profile' => 'users#show'", "isCorrect": false }
    ],
    "hint": "Named routes use the `as` keyword to create URL helpers.",
    "answerDescription": "Adding `as: 'user_profile'` creates a named route that can be referenced in views and controllers."
  },
  {
    "id": "ruby_1855",
    "question": "Which HTTP verb is used for updating a resource in Rails routes?",
    "options": [
      { "id": "option_1", "text": "PATCH", "isCorrect": true },
      { "id": "option_2", "text": "POST", "isCorrect": false },
      { "id": "option_3", "text": "GET", "isCorrect": false },
      { "id": "option_4", "text": "DELETE", "isCorrect": false }
    ],
    "hint": "This verb is used to modify existing resources.",
    "answerDescription": "The `PATCH` method updates an existing resource, typically using a form submission."
  },
  {
    "id": "ruby_1856",
    "question": "How do you define a custom route that maps `/dashboard` to the `dashboard#index` action?",
    "options": [
      { "id": "option_1", "text": "get 'dashboard', to: 'dashboard#index'", "isCorrect": true },
      { "id": "option_2", "text": "route 'dashboard' => 'dashboard#index'", "isCorrect": false },
      { "id": "option_3", "text": "match 'dashboard', controller: 'dashboard', action: 'index'", "isCorrect": false },
      { "id": "option_4", "text": "set_route 'dashboard' to: 'dashboard#index'", "isCorrect": false }
    ],
    "hint": "Use `get` to define a simple route for a controller action.",
    "answerDescription": "`get 'dashboard', to: 'dashboard#index'` routes `/dashboard` to the `index` action of the `dashboard` controller."
  },
  {
    "id": "ruby_1857",
    "question": "Which routing helper generates the URL for a specific resource?",
    "options": [
      { "id": "option_1", "text": "resource_url(resource)", "isCorrect": false },
      { "id": "option_2", "text": "resource_path(resource)", "isCorrect": true },
      { "id": "option_3", "text": "route_to(resource)", "isCorrect": false },
      { "id": "option_4", "text": "url_for(resource)", "isCorrect": false }
    ],
    "hint": "Rails provides `_path` and `_url` helpers for routing.",
    "answerDescription": "`resource_path(resource)` generates a relative URL for the given resource."
  },
  {
    "id": "ruby_1858",
    "question": "What does the `scope` method do in Rails routing?",
    "options": [
      { "id": "option_1", "text": "Groups routes under a specified path prefix", "isCorrect": true },
      { "id": "option_2", "text": "Creates a named route", "isCorrect": false },
      { "id": "option_3", "text": "Restricts access to certain routes", "isCorrect": false },
      { "id": "option_4", "text": "Maps multiple controllers to a single route", "isCorrect": false }
    ],
    "hint": "This method is used for namespacing and path prefixes.",
    "answerDescription": "The `scope` method groups routes under a common prefix while maintaining controller structure."
  },
  {
    "id": "ruby_1859",
    "question": "What is the purpose of `namespace` in Rails routing?",
    "options": [
      { "id": "option_1", "text": "Defines a module to group controllers", "isCorrect": true },
      { "id": "option_2", "text": "Creates an alias for a route", "isCorrect": false },
      { "id": "option_3", "text": "Shortens URL paths", "isCorrect": false },
      { "id": "option_4", "text": "Adds middleware for specific routes", "isCorrect": false }
    ],
    "hint": "This is useful for organizing routes for admin panels or APIs.",
    "answerDescription": "The `namespace` method groups controllers under a module and modifies URL structure accordingly."
  },
  {
    "id": "ruby_1860",
    "question": "Which Rails helper generates the full URL of a resource?",
    "options": [
      { "id": "option_1", "text": "resource_path(resource)", "isCorrect": false },
      { "id": "option_2", "text": "route_for(resource)", "isCorrect": false },
      { "id": "option_3", "text": "resource_url(resource)", "isCorrect": true },
      { "id": "option_4", "text": "full_path(resource)", "isCorrect": false }
    ],
    "hint": "The `_url` helper provides the complete URL including host.",
    "answerDescription": "`resource_url(resource)` generates an absolute URL including protocol and domain."
  },
  {
    "id": "ruby_1861",
    "question": "What is the primary purpose of RESTful routing in Rails?",
    "options": [
      { "id": "option_1", "text": "To minimize the number of controllers in an application", "isCorrect": false },
      { "id": "option_2", "text": "To enforce security by default", "isCorrect": false },
      { "id": "option_3", "text": "To map HTTP verbs to CRUD actions automatically", "isCorrect": true },
      { "id": "option_4", "text": "To generate database schema automatically", "isCorrect": false }
    ],
    "hint": "RESTful routing organizes application resources around HTTP methods.",
    "answerDescription": "RESTful routing associates HTTP verbs (GET, POST, PATCH, DELETE) with controller actions."
  },
  {
    "id": "ruby_1862",
    "question": "Which option correctly defines a wildcard route in Rails?",
    "options": [
      { "id": "option_1", "text": "get '*anything', to: 'errors#not_found'", "isCorrect": false },
      { "id": "option_2", "text": "match '*path', to: 'errors#show', via: :all", "isCorrect": false },
      { "id": "option_3", "text": "get '*path', to: 'errors#not_found'", "isCorrect": true },
      { "id": "option_4", "text": "catch_all 'errors#show'", "isCorrect": false }
    ],
    "hint": "Wildcard routes use `*` to capture any undefined path.",
    "answerDescription": "Using `get '*path', to: 'errors#not_found'` allows handling unmatched routes."
  },
  {
    "id": "ruby_1863",
    "question": "How do you create a route that only responds to `POST` requests?",
    "options": [
      { "id": "option_1", "text": "match 'create', to: 'posts#create', via: :post", "isCorrect": false },
      { "id": "option_2", "text": "get 'create', to: 'posts#create'", "isCorrect": false },
      { "id": "option_3", "text": "post 'create', to: 'posts#create'", "isCorrect": true },
      { "id": "option_4", "text": "define 'create', controller: 'posts', method: 'POST'", "isCorrect": false }
    ],
    "hint": "Rails uses a dedicated keyword for defining `POST` routes.",
    "answerDescription": "`post 'create', to: 'posts#create'` ensures that the route only handles `POST` requests."
  },
  {
    "id": "ruby_1864",
    "question": "Which keyword is used to define a submodule in Rails routing?",
    "options": [
      { "id": "option_1", "text": "scope", "isCorrect": false },
      { "id": "option_2", "text": "resources", "isCorrect": false },
      { "id": "option_3", "text": "namespace", "isCorrect": true },
      { "id": "option_4", "text": "group", "isCorrect": false }
    ],
    "hint": "This keyword is commonly used for API versioning.",
    "answerDescription": "`namespace` groups controllers under a specific module and modifies URL structure."
  },
  {
    "id": "ruby_1865",
    "question": "Which method ensures that a named route is available in views and controllers?",
    "options": [
      { "id": "option_1", "text": "get 'profile', to: 'users#show'", "isCorrect": false },
      { "id": "option_2", "text": "route 'profile', controller: 'users', action: 'show'", "isCorrect": false },
      { "id": "option_3", "text": "get 'profile', to: 'users#show', as: 'user_profile'", "isCorrect": true },
      { "id": "option_4", "text": "define_route 'profile', to: 'users#show'", "isCorrect": false }
    ],
    "hint": "Named routes use the `as` option.",
    "answerDescription": "Using `as: 'user_profile'` creates a named route that can be used in helpers."
  },
  {
    "id": "ruby_1866",
    "question": "Which route helper generates a URL for a nested resource?",
    "options": [
      { "id": "option_1", "text": "parent_child_url(parent, child)", "isCorrect": false },
      { "id": "option_2", "text": "nested_path(parent, child)", "isCorrect": false },
      { "id": "option_3", "text": "parent_child_path(parent, child)", "isCorrect": true },
      { "id": "option_4", "text": "child_of_parent_path(parent, child)", "isCorrect": false }
    ],
    "hint": "Rails follows the pattern of `parent_child_path(parent, child)`.",
    "answerDescription": "For a nested route, `parent_child_path(parent, child)` correctly generates the URL."
  },
  {
    "id": "ruby_1867",
    "question": "How do you redirect a route in Rails?",
    "options": [
      { "id": "option_1", "text": "move 'old_path', to: 'new_path'", "isCorrect": false },
      { "id": "option_2", "text": "redirect_to 'new_path'", "isCorrect": false },
      { "id": "option_3", "text": "get 'old_path', to: redirect('new_path')", "isCorrect": true },
      { "id": "option_4", "text": "alias 'old_path', 'new_path'", "isCorrect": false }
    ],
    "hint": "Rails provides a `redirect` method in routes.",
    "answerDescription": "Using `get 'old_path', to: redirect('new_path')` properly redirects one route to another."
  },
  {
    "id": "ruby_1868",
    "question": "What does `shallow: true` do in nested routes?",
    "options": [
      { "id": "option_1", "text": "It removes the parent resource ID from child routes where it's not needed.", "isCorrect": false },
      { "id": "option_2", "text": "It restricts access to nested routes.", "isCorrect": false },
      { "id": "option_3", "text": "It simplifies URLs by making child routes independent of the parent when possible.", "isCorrect": true },
      { "id": "option_4", "text": "It makes all routes optional.", "isCorrect": false }
    ],
    "hint": "This helps keep URLs clean while still enforcing nesting when necessary.",
    "answerDescription": "`shallow: true` removes the parent resource ID from routes where it's not required."
  },
  {
    "id": "ruby_1869",
    "question": "Which option correctly defines a catch-all route in Rails?",
    "options": [
      { "id": "option_1", "text": "match '*unmatched', to: 'errors#not_found', via: :all", "isCorrect": false },
      { "id": "option_2", "text": "get '*catchall', to: 'errors#handle'", "isCorrect": false },
      { "id": "option_3", "text": "match '*path', to: 'errors#not_found', via: :all", "isCorrect": true },
      { "id": "option_4", "text": "route_all 'errors#handle'", "isCorrect": false }
    ],
    "hint": "Use `*` to capture undefined routes.",
    "answerDescription": "`match '*path', to: 'errors#not_found', via: :all` captures all undefined routes."
  },
  {
    "id": "ruby_1870",
    "question": "What is the correct way to define a method with default parameters in Ruby?",
    "options": [
      { "id": "option_1", "text": "def greet(name = 'Guest')", "isCorrect": false },
      { "id": "option_2", "text": "def greet(name: 'Guest')", "isCorrect": false },
      { "id": "option_3", "text": "def greet(name => 'Guest')", "isCorrect": false },
      { "id": "option_4", "text": "def greet(name = 'Guest'); end", "isCorrect": true }
    ],
    "hint": "Use '=' inside parentheses to assign default values.",
    "answerDescription": "In Ruby, default arguments are assigned using '=' inside the method definition."
  },
  {
    "id": "ruby_1871",
    "question": "How do you return multiple values from a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Using an array [val1, val2]", "isCorrect": false },
      { "id": "option_2", "text": "Using a hash { key1: val1, key2: val2 }", "isCorrect": false },
      { "id": "option_3", "text": "Using a return statement with multiple values separated by commas", "isCorrect": false },
      { "id": "option_4", "text": "All of the above", "isCorrect": true }
    ],
    "hint": "Ruby allows multiple return mechanisms.",
    "answerDescription": "Methods in Ruby can return multiple values using arrays, hashes, or multiple return values."
  },
  {
    "id": "ruby_1872",
    "question": "Which symbol is used to define a splat operator in method parameters?",
    "options": [
      { "id": "option_1", "text": "`*`", "isCorrect": true },
      { "id": "option_2", "text": "`&`", "isCorrect": false },
      { "id": "option_3", "text": "`@`", "isCorrect": false },
      { "id": "option_4", "text": "`#`", "isCorrect": false }
    ],
    "hint": "It is a single character that represents multiple arguments.",
    "answerDescription": "The `*` (splat) operator is used in method parameters to accept multiple arguments."
  },
  {
    "id": "ruby_1873",
    "question": "What is the purpose of the 'yield' keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "It stops method execution", "isCorrect": false },
      { "id": "option_2", "text": "It invokes a block passed to the method", "isCorrect": false },
      { "id": "option_3", "text": "It defines a method", "isCorrect": false },
      { "id": "option_4", "text": "It allows a method to execute a block of code from outside the method", "isCorrect": true }
    ],
    "hint": "It works with blocks.",
    "answerDescription": "'yield' executes a block given to a method."
  },
  {
    "id": "ruby_1874",
    "question": "What is the correct syntax to call a method with keyword arguments in Ruby?",
    "options": [
      { "id": "option_1", "text": "greet('John')", "isCorrect": false },
      { "id": "option_2", "text": "greet(name: 'John')", "isCorrect": false },
      { "id": "option_3", "text": "greet(:name => 'John')", "isCorrect": false },
      { "id": "option_4", "text": "Both 2 and 3", "isCorrect": true }
    ],
    "hint": "Keyword arguments use named parameters.",
    "answerDescription": "Ruby supports keyword arguments with both `name: 'value'` and `:name => 'value'` syntax."
  },
  {
    "id": "ruby_1875",
    "question": "What is the main advantage of using 'lambda' over 'proc' in Ruby?",
    "options": [
      { "id": "option_1", "text": "'lambda' does not check the number of arguments", "isCorrect": false },
      { "id": "option_2", "text": "'lambda' exits the method immediately", "isCorrect": false },
      { "id": "option_3", "text": "'lambda' enforces the number of arguments strictly", "isCorrect": false },
      { "id": "option_4", "text": "'lambda' behaves like a regular method with strict argument checking", "isCorrect": true }
    ],
    "hint": "It's stricter than procs in argument handling.",
    "answerDescription": "Lambdas enforce strict argument checking, unlike procs."
  },
  {
    "id": "ruby_1876",
    "question": "What does the 'super' keyword do inside a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Calls a method from another class", "isCorrect": false },
      { "id": "option_2", "text": "Calls a method of the superclass with the same name", "isCorrect": false },
      { "id": "option_3", "text": "Calls the parent class's constructor", "isCorrect": false },
      { "id": "option_4", "text": "Calls the method of the superclass with the same name, optionally passing arguments", "isCorrect": true }
    ],
    "hint": "It helps invoke parent class methods.",
    "answerDescription": "'super' allows calling a method from the superclass within a subclass."
  },
  {
    "id": "ruby_1877",
    "question": "What happens if you call 'return' inside a block in Ruby?",
    "options": [
      { "id": "option_1", "text": "It raises an error", "isCorrect": false },
      { "id": "option_2", "text": "It returns from the block", "isCorrect": false },
      { "id": "option_3", "text": "It exits the enclosing method", "isCorrect": false },
      { "id": "option_4", "text": "It exits the enclosing method, not just the block", "isCorrect": true }
    ],
    "hint": "'return' in a block is different from 'break'.",
    "answerDescription": "Calling 'return' inside a block exits the entire enclosing method."
  },
  {
    "id": "ruby_1878",
    "question": "How do you define a singleton method for an object in Ruby?",
    "options": [
      { "id": "option_1", "text": "def object.method_name", "isCorrect": false },
      { "id": "option_2", "text": "class << object; def method_name; end; end", "isCorrect": false },
      { "id": "option_3", "text": "object.class_eval { def method_name; end }", "isCorrect": false },
      { "id": "option_4", "text": "All of the above", "isCorrect": true }
    ],
    "hint": "There are multiple ways to define singleton methods.",
    "answerDescription": "Singleton methods can be defined using `def`, `class << object`, or `class_eval`."
  },
  {
    "id": "ruby_1879",
    "question": "What is the best way to define an alias for a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "def new_name; old_name; end", "isCorrect": false },
      { "id": "option_2", "text": "new_name = old_name", "isCorrect": false },
      { "id": "option_3", "text": "alias new_name old_name", "isCorrect": false },
      { "id": "option_4", "text": "alias_method :new_name, :old_name", "isCorrect": true }
    ],
    "hint": "There's a method dedicated to aliasing methods.",
    "answerDescription": "The `alias_method` function is the preferred way to define method aliases in Ruby."
  },
  {
    "id": "ruby_1880",
    "question": "What does the 'define_method' method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Defines a method dynamically at runtime", "isCorrect": true },
      { "id": "option_2", "text": "Defines a method before the program runs", "isCorrect": false },
      { "id": "option_3", "text": "Deletes an existing method", "isCorrect": false },
      { "id": "option_4", "text": "Overwrites an existing method", "isCorrect": false }
    ],
    "hint": "It is often used with metaprogramming.",
    "answerDescription": "'define_method' allows defining methods dynamically during runtime."
  },
  {
    "id": "ruby_1881",
    "question": "How can you make a method private in Ruby?",
    "options": [
      { "id": "option_1", "text": "Use the 'private' keyword before defining the method", "isCorrect": false },
      { "id": "option_2", "text": "Use the 'private' keyword followed by the method name", "isCorrect": false },
      { "id": "option_3", "text": "Place the method under 'private' in the class", "isCorrect": true },
      { "id": "option_4", "text": "Prefix the method name with an underscore", "isCorrect": false }
    ],
    "hint": "Ruby does not use underscores for private methods like Python.",
    "answerDescription": "Methods defined after 'private' in a class are private unless changed."
  },
  {
    "id": "ruby_1882",
    "question": "What is a key difference between a block and a lambda in Ruby?",
    "options": [
      { "id": "option_1", "text": "Blocks do not check argument counts, but lambdas do", "isCorrect": true },
      { "id": "option_2", "text": "Lambdas cannot be assigned to variables", "isCorrect": false },
      { "id": "option_3", "text": "Blocks return values, while lambdas do not", "isCorrect": false },
      { "id": "option_4", "text": "Blocks are objects, but lambdas are not", "isCorrect": false }
    ],
    "hint": "Lambdas behave more like regular methods.",
    "answerDescription": "Blocks ignore argument mismatches, while lambdas enforce strict argument checking."
  },
  {
    "id": "ruby_1883",
    "question": "Which method is used to check if an object responds to a specific method in Ruby?",
    "options": [
      { "id": "option_1", "text": "responds_to?", "isCorrect": false },
      { "id": "option_2", "text": "can_call?", "isCorrect": false },
      { "id": "option_3", "text": "respond_to?", "isCorrect": true },
      { "id": "option_4", "text": "method_check?", "isCorrect": false }
    ],
    "hint": "The method name contains 'respond'.",
    "answerDescription": "'respond_to?' checks if an object can call a method."
  },
  {
    "id": "ruby_1884",
    "question": "How do you define a method that accepts an unlimited number of arguments in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using a single '*' before a parameter name", "isCorrect": true },
      { "id": "option_2", "text": "Using a double '**' before a parameter name", "isCorrect": false },
      { "id": "option_3", "text": "Listing multiple parameters explicitly", "isCorrect": false },
      { "id": "option_4", "text": "Using parentheses with multiple variable names", "isCorrect": false }
    ],
    "hint": "The parameter uses a special symbol before its name.",
    "answerDescription": "Using '*' before a parameter collects all remaining arguments into an array."
  },
  {
    "id": "ruby_1885",
    "question": "What does the 'method_missing' method do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Handles calls to undefined methods", "isCorrect": true },
      { "id": "option_2", "text": "Raises an error when a method is missing", "isCorrect": false },
      { "id": "option_3", "text": "Logs missing method calls to a file", "isCorrect": false },
      { "id": "option_4", "text": "Redirects calls to a superclass method", "isCorrect": false }
    ],
    "hint": "It helps implement dynamic method handling.",
    "answerDescription": "'method_missing' allows handling calls to undefined methods dynamically."
  },
  {
    "id": "ruby_1886",
    "question": "Which of the following is true about method overloading in Ruby?",
    "options": [
      { "id": "option_1", "text": "Ruby supports method overloading like Java", "isCorrect": false },
      { "id": "option_2", "text": "Ruby allows defining multiple methods with the same name", "isCorrect": false },
      { "id": "option_3", "text": "Ruby does not support method overloading directly", "isCorrect": true },
      { "id": "option_4", "text": "Method overloading is achieved using different argument types", "isCorrect": false }
    ],
    "hint": "Ruby does not natively support method overloading.",
    "answerDescription": "Unlike Java, Ruby does not support defining multiple methods with the same name."
  },
  {
    "id": "ruby_1887",
    "question": "What is a Proc in Ruby?",
    "options": [
      { "id": "option_1", "text": "A stored block of code that can be executed later", "isCorrect": true },
      { "id": "option_2", "text": "A special type of class in Ruby", "isCorrect": false },
      { "id": "option_3", "text": "A method that can be overwritten", "isCorrect": false },
      { "id": "option_4", "text": "A way to call another method inside a class", "isCorrect": false }
    ],
    "hint": "It allows saving a block of code for later execution.",
    "answerDescription": "A Proc is an object representing a block of code that can be stored and called later."
  },
  {
    "id": "ruby_1888",
    "question": "Which keyword is used to pass a block to a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "yield", "isCorrect": false },
      { "id": "option_2", "text": "&", "isCorrect": true },
      { "id": "option_3", "text": "*", "isCorrect": false },
      { "id": "option_4", "text": "block", "isCorrect": false }
    ],
    "hint": "It is a special symbol used before a parameter.",
    "answerDescription": "The '&' symbol is used before a parameter to pass a block to a method."
  },
  {
    "id": "ruby_1889",
    "question": "What does 'self' refer to inside an instance method in Ruby?",
    "options": [
      { "id": "option_1", "text": "The current class", "isCorrect": false },
      { "id": "option_2", "text": "The superclass of the method", "isCorrect": false },
      { "id": "option_3", "text": "The current object instance", "isCorrect": true },
      { "id": "option_4", "text": "A global object", "isCorrect": false }
    ],
    "hint": "It represents the object that is executing the method.",
    "answerDescription": "'self' inside an instance method refers to the instance of the class calling the method."
  },
  {
    "id": "ruby_1890",
    "question": "Which keyword is used to return a value from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "break", "isCorrect": false },
      { "id": "option_2", "text": "return", "isCorrect": true },
      { "id": "option_3", "text": "yield", "isCorrect": false },
      { "id": "option_4", "text": "exit", "isCorrect": false }
    ],
    "hint": "This keyword explicitly sends back a result from a method.",
    "answerDescription": "In Ruby, 'return' is used to explicitly return a value from a method."
  },
  {
    "id": "ruby_1891",
    "question": "How do you define a class method in Ruby?",
    "options": [
      { "id": "option_1", "text": "By using the '@' symbol before the method name", "isCorrect": false },
      { "id": "option_2", "text": "By prefixing the method name with 'self.'", "isCorrect": true },
      { "id": "option_3", "text": "By using 'def class_method'", "isCorrect": false },
      { "id": "option_4", "text": "By using 'def static'", "isCorrect": false }
    ],
    "hint": "It involves the keyword 'self'.",
    "answerDescription": "A class method in Ruby is defined by prefixing the method name with 'self.'."
  },
  {
    "id": "ruby_1892",
    "question": "What is the purpose of 'super' in a method definition?",
    "options": [
      { "id": "option_1", "text": "To call a method from another class", "isCorrect": false },
      { "id": "option_2", "text": "To call a method of the same name from the superclass", "isCorrect": true },
      { "id": "option_3", "text": "To define a superclass", "isCorrect": false },
      { "id": "option_4", "text": "To override an existing method", "isCorrect": false }
    ],
    "hint": "It allows method reuse from parent classes.",
    "answerDescription": "'super' calls the same-named method from the superclass."
  },
  {
    "id": "ruby_1893",
    "question": "Which operator is used to define a lambda in Ruby?",
    "options": [
      { "id": "option_1", "text": "->", "isCorrect": false },
      { "id": "option_2", "text": "->{}", "isCorrect": true },
      { "id": "option_3", "text": "{}->", "isCorrect": false },
      { "id": "option_4", "text": "$->", "isCorrect": false }
    ],
    "hint": "It looks like an arrow.",
    "answerDescription": "The '->{}' syntax defines a lambda function in Ruby."
  },
  {
    "id": "ruby_1894",
    "question": "How do you define a method with default parameters in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using 'default: value'", "isCorrect": false },
      { "id": "option_2", "text": "By assigning a default value in the method signature", "isCorrect": true },
      { "id": "option_3", "text": "Using an if statement inside the method", "isCorrect": false },
      { "id": "option_4", "text": "Ruby does not support default parameters", "isCorrect": false }
    ],
    "hint": "You specify the default in the method definition itself.",
    "answerDescription": "In Ruby, default parameters are set by assigning a value in the method definition."
  },
  {
    "id": "ruby_1895",
    "question": "How do you define an anonymous function in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `def anonymous`", "isCorrect": false },
      { "id": "option_2", "text": "With the `new` keyword", "isCorrect": false },
      { "id": "option_3", "text": "Using `method_missing`", "isCorrect": false },
      { "id": "option_4", "text": "With `lambda` or `Proc.new`", "isCorrect": true }
    ],
    "hint": "It can be created using either `lambda` or `Proc.new`.",
    "answerDescription": "Anonymous functions in Ruby are created using `lambda` or `Proc.new`."
  },
  {
    "id": "ruby_1896",
    "question": "How can you convert a block into a Proc?",
    "options": [
      { "id": "option_1", "text": "Using '&block'", "isCorrect": false },
      { "id": "option_2", "text": "By prefixing the parameter with '&'", "isCorrect": true },
      { "id": "option_3", "text": "By calling 'block.to_proc'", "isCorrect": false },
      { "id": "option_4", "text": "By using 'convert_to_proc(block)'", "isCorrect": false }
    ],
    "hint": "A special symbol before the parameter helps.",
    "answerDescription": "Using '&' before a parameter converts a block into a Proc."
  },
  {
    "id": "ruby_1897",
    "question": "What is the default return value of a method in Ruby if 'return' is not used?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": false },
      { "id": "option_2", "text": "The value of the last evaluated expression", "isCorrect": true },
      { "id": "option_3", "text": "An empty string", "isCorrect": false },
      { "id": "option_4", "text": "0", "isCorrect": false }
    ],
    "hint": "Ruby implicitly returns the last computed result.",
    "answerDescription": "In Ruby, the last evaluated expression is returned by default."
  },
  {
    "id": "ruby_1898",
    "question": "Which method is used to find all methods available on an object?",
    "options": [
      { "id": "option_1", "text": "object.methods", "isCorrect": false },
      { "id": "option_2", "text": "methods", "isCorrect": true },
      { "id": "option_3", "text": "all_methods", "isCorrect": false },
      { "id": "option_4", "text": "method_list", "isCorrect": false }
    ],
    "hint": "It is a built-in method that returns an array.",
    "answerDescription": "'methods' lists all available methods on an object."
  },
  {
    "id": "ruby_1899",
    "question": "What does 'yield' do inside a method?",
    "options": [
      { "id": "option_1", "text": "Stops the execution of the method", "isCorrect": false },
      { "id": "option_2", "text": "Executes a block passed to the method", "isCorrect": true },
      { "id": "option_3", "text": "Returns a value from the method", "isCorrect": false },
      { "id": "option_4", "text": "Calls another method inside the class", "isCorrect": false }
    ],
    "hint": "It allows executing a block within a method.",
    "answerDescription": "'yield' executes the block passed to the method."
  },
  {
    "id": "ruby_1900",
    "question": "What does the 'def' keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Declares a variable", "isCorrect": false },
      { "id": "option_2", "text": "Creates a class", "isCorrect": false },
      { "id": "option_3", "text": "Defines a method", "isCorrect": true },
      { "id": "option_4", "text": "Calls a method", "isCorrect": false }
    ],
    "hint": "It is used at the beginning of a method definition.",
    "answerDescription": "The 'def' keyword in Ruby is used to define a method."
  },
  {
    "id": "ruby_1901",
    "question": "What does the 'yield' keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Stops execution of a method", "isCorrect": false },
      { "id": "option_2", "text": "Returns a value", "isCorrect": false },
      { "id": "option_3", "text": "Executes a block passed to the method", "isCorrect": true },
      { "id": "option_4", "text": "Creates a new thread", "isCorrect": false }
    ],
    "hint": "It is used to invoke a block passed to a method.",
    "answerDescription": "'yield' executes the block passed to the method."
  },
  {
    "id": "ruby_1902",
    "question": "How can you pass a block explicitly to a method?",
    "options": [
      { "id": "option_1", "text": "Using 'proc { }'", "isCorrect": false },
      { "id": "option_2", "text": "With the 'return' keyword", "isCorrect": false },
      { "id": "option_3", "text": "By prefixing the parameter with '&'", "isCorrect": true },
      { "id": "option_4", "text": "Using the 'do' keyword", "isCorrect": false }
    ],
    "hint": "A special character is needed before the parameter name.",
    "answerDescription": "Using '&' before a parameter allows passing a block explicitly to a method."
  },
  {
    "id": "ruby_1903",
    "question": "Which method converts a Proc to a block?",
    "options": [
      { "id": "option_1", "text": "to_proc()", "isCorrect": false },
      { "id": "option_2", "text": "call()", "isCorrect": false },
      { "id": "option_3", "text": "&proc", "isCorrect": true },
      { "id": "option_4", "text": "proc_block()", "isCorrect": false }
    ],
    "hint": "It involves using a special character before the Proc.",
    "answerDescription": "Using '&proc' converts a Proc into a block."
  },
  {
    "id": "ruby_1904",
    "question": "Which statement correctly defines a method with variable arguments?",
    "options": [
      { "id": "option_1", "text": "def method(*args) end", "isCorrect": false },
      { "id": "option_2", "text": "def method(args...) end", "isCorrect": false },
      { "id": "option_3", "text": "def method(*args) end", "isCorrect": true },
      { "id": "option_4", "text": "def method(args*) end", "isCorrect": false }
    ],
    "hint": "It uses an asterisk (*) before the parameter name.",
    "answerDescription": "Using '*args' allows a method to accept a variable number of arguments."
  },
  {
    "id": "ruby_1905",
    "question": "How do you call a superclass method inside an overridden method?",
    "options": [
      { "id": "option_1", "text": "superclass.method_name", "isCorrect": false },
      { "id": "option_2", "text": "self.method_name", "isCorrect": false },
      { "id": "option_3", "text": "super", "isCorrect": true },
      { "id": "option_4", "text": "parent.method_name", "isCorrect": false }
    ],
    "hint": "It is a built-in keyword that calls the parent method.",
    "answerDescription": "The 'super' keyword calls the same-named method in the superclass."
  },
  {
    "id": "ruby_1906",
    "question": "What is a lambda in Ruby?",
    "options": [
      { "id": "option_1", "text": "A special kind of block that enforces argument count", "isCorrect": false },
      { "id": "option_2", "text": "A class used for concurrency", "isCorrect": false },
      { "id": "option_3", "text": "An anonymous function that checks argument count", "isCorrect": true },
      { "id": "option_4", "text": "A method to define a global variable", "isCorrect": false }
    ],
    "hint": "It is a function that behaves like a Proc but with stricter argument checking.",
    "answerDescription": "Lambdas in Ruby enforce argument count and return values like regular methods."
  },
  {
    "id": "ruby_1907",
    "question": "How do you call a lambda function in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the '.call' method", "isCorrect": true },
      { "id": "option_2", "text": "Using the 'execute' keyword", "isCorrect": false },
      { "id": "option_3", "text": "Using square brackets", "isCorrect": false },
      { "id": "option_4", "text": "Using the 'invoke' keyword", "isCorrect": false }
    ],
    "hint": "It’s a common method used on callable objects.",
    "answerDescription": "Lambda functions in Ruby are called using the '.call' method to execute their enclosed logic."
},
{
    "id": "ruby_1908",
    "question": "What keyword is used to define a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "method", "isCorrect": false },
      { "id": "option_2", "text": "def", "isCorrect": true },
      { "id": "option_3", "text": "function", "isCorrect": false },
      { "id": "option_4", "text": "define", "isCorrect": false }
    ],
    "hint": "It starts with 'd' and ends with 'f'.",
    "answerDescription": "Ruby uses the 'def' keyword to define methods."
  },
  {
    "id": "ruby_1909",
    "question": "What is the implicit return value of a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": false },
      { "id": "option_2", "text": "The last evaluated expression", "isCorrect": true },
      { "id": "option_3", "text": "An empty string", "isCorrect": false },
      { "id": "option_4", "text": "A boolean value", "isCorrect": false }
    ],
    "hint": "Ruby methods automatically return something.",
    "answerDescription": "In Ruby, methods return the value of the last evaluated expression unless an explicit return is used."
  },
  {
    "id": "ruby_1910",
    "question": "Which operator is used to accept a variable number of arguments in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "&", "isCorrect": false },
      { "id": "option_2", "text": "*", "isCorrect": true },
      { "id": "option_3", "text": "@", "isCorrect": false },
      { "id": "option_4", "text": "$", "isCorrect": false }
    ],
    "hint": "It's also known as the splat operator.",
    "answerDescription": "The splat operator (*) allows methods to accept a variable number of arguments as an array."
  },
  {
    "id": "ruby_1911",
    "question": "What is the purpose of the 'yield' keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "To define a new method", "isCorrect": false },
      { "id": "option_2", "text": "To call a block within a method", "isCorrect": true },
      { "id": "option_3", "text": "To return a value", "isCorrect": false },
      { "id": "option_4", "text": "To iterate over an array", "isCorrect": false }
    ],
    "hint": "It helps execute blocks passed to methods.",
    "answerDescription": "The 'yield' keyword allows a method to call a block passed to it without explicitly naming it."
  },
  {
    "id": "ruby_1912",
    "question": "What does 'return' do in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Ends the program", "isCorrect": false },
      { "id": "option_2", "text": "Immediately exits the method and returns a value", "isCorrect": true },
      { "id": "option_3", "text": "Skips an iteration in a loop", "isCorrect": false },
      { "id": "option_4", "text": "Prints output to the console", "isCorrect": false }
    ],
    "hint": "It provides an explicit way to return from a method.",
    "answerDescription": "The 'return' keyword in Ruby exits a method immediately and returns the specified value."
  },
  {
    "id": "ruby_1913",
    "question": "How do you convert a block into a Proc in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the `convert` method", "isCorrect": false },
      { "id": "option_2", "text": "By wrapping it inside `{}`", "isCorrect": false },
      { "id": "option_3", "text": "Using the `&` operator in method parameters", "isCorrect": true },
      { "id": "option_4", "text": "By calling `block.to_proc`", "isCorrect": false }
    ],
    "hint": "A special symbol is used to convert blocks into Procs.",
    "answerDescription": "In Ruby, the `&` operator is used to convert a block into a Proc when passing it to a method."
  },
  {
    "id": "ruby_1914",
    "question": "What is the difference between a block and a lambda in Ruby?",
    "options": [
      { "id": "option_1", "text": "Blocks can be assigned to variables, lambdas cannot", "isCorrect": false },
      { "id": "option_2", "text": "Lambdas are objects, but blocks are not", "isCorrect": true },
      { "id": "option_3", "text": "Blocks enforce strict argument checking", "isCorrect": false },
      { "id": "option_4", "text": "There is no difference", "isCorrect": false }
    ],
    "hint": "One of them is a Proc object.",
    "answerDescription": "Lambdas are objects and can be assigned to variables, while blocks are not objects and must be passed directly to methods."
  },
  {
    "id": "ruby_1915",
    "question": "What is an advantage of using keyword arguments in Ruby methods?",
    "options": [
      { "id": "option_1", "text": "They make methods run faster", "isCorrect": false },
      { "id": "option_2", "text": "They improve method readability and flexibility", "isCorrect": true },
      { "id": "option_3", "text": "They prevent method overloading", "isCorrect": false },
      { "id": "option_4", "text": "They are required in all Ruby methods", "isCorrect": false }
    ],
    "hint": "They enhance code clarity by naming arguments.",
    "answerDescription": "Keyword arguments improve method readability by explicitly naming parameters, making it clear what values are being passed."
  },
  {
    "id": "ruby_1916",
    "question": "What happens when a method is defined with an ampersand parameter (&block)?",
    "options": [
      { "id": "option_1", "text": "It creates a new instance of a class", "isCorrect": false },
      { "id": "option_2", "text": "It allows the method to accept a block", "isCorrect": true },
      { "id": "option_3", "text": "It defines a default parameter", "isCorrect": false },
      { "id": "option_4", "text": "It makes the method private", "isCorrect": false }
    ],
    "hint": "It allows handling an optional code block.",
    "answerDescription": "Using '&block' in a method definition enables it to accept a block and execute it within the method."
  },
  {
    "id": "ruby_1917",
    "question": "Which of the following correctly calls a method with a block?",
    "options": [
      { "id": "option_1", "text": "method_name[block]", "isCorrect": false },
      { "id": "option_2", "text": "method_name { puts 'Hello' }", "isCorrect": true },
      { "id": "option_3", "text": "method_name = { block }", "isCorrect": false },
      { "id": "option_4", "text": "method_name->block", "isCorrect": false }
    ],
    "hint": "Blocks use curly braces or do...end.",
    "answerDescription": "A method is called with a block using curly braces or the 'do...end' syntax."
  },  
  {
    "id": "ruby_1918",
    "question": "What is the default return value of a Ruby method?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": false },
      { "id": "option_2", "text": "undefined", "isCorrect": false },
      { "id": "option_3", "text": "The last evaluated expression", "isCorrect": true },
      { "id": "option_4", "text": "0", "isCorrect": false }
    ],
    "hint": "Ruby methods return the last evaluated expression.",
    "answerDescription": "In Ruby, a method automatically returns the last evaluated expression unless an explicit 'return' is used."
  },
  {
    "id": "ruby_1919",
    "question": "How do you define a method with a default parameter in Ruby?",
    "options": [
      { "id": "option_1", "text": "def method_name(param = default_value)", "isCorrect": false },
      { "id": "option_2", "text": "define method_name(param: default_value)", "isCorrect": false },
      { "id": "option_3", "text": "def method_name(param = 'default')", "isCorrect": true },
      { "id": "option_4", "text": "method_name = lambda { |param: default| }", "isCorrect": false }
    ],
    "hint": "Default values are assigned using '=' inside method definitions.",
    "answerDescription": "In Ruby, default values for parameters are set using the '=' operator inside the method definition."
  },
  {
    "id": "ruby_1920",
    "question": "What is the purpose of the `yield` keyword in Ruby?",
    "options": [
      { "id": "option_1", "text": "To define a new method", "isCorrect": false },
      { "id": "option_2", "text": "To stop method execution", "isCorrect": false },
      { "id": "option_3", "text": "To execute a block passed to the method", "isCorrect": true },
      { "id": "option_4", "text": "To declare a variable", "isCorrect": false }
    ],
    "hint": "It allows execution of a block passed to a method.",
    "answerDescription": "The `yield` keyword in Ruby is used to call a block of code that has been passed to the method."
  },
  {
    "id": "ruby_1921",
    "question": "What is the difference between `public`, `private`, and `protected` methods in Ruby?",
    "options": [
      { "id": "option_1", "text": "Only public methods can be called with an explicit receiver", "isCorrect": false },
      { "id": "option_2", "text": "Protected methods can only be called within subclasses", "isCorrect": false },
      { "id": "option_3", "text": "Private methods cannot be called with an explicit receiver", "isCorrect": true },
      { "id": "option_4", "text": "All methods behave the same regardless of access modifier", "isCorrect": false }
    ],
    "hint": "One of these cannot be called with an explicit receiver.",
    "answerDescription": "Private methods in Ruby cannot be called with an explicit receiver, while public and protected methods can."
  },
  {
    "id": "ruby_1922",
    "question": "What does the 'yield' keyword do in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Returns a value immediately", "isCorrect": false },
      { "id": "option_2", "text": "Stops the method execution", "isCorrect": false },
      { "id": "option_3", "text": "Creates a new thread", "isCorrect": false },
      { "id": "option_4", "text": "Invokes a block passed to the method", "isCorrect": true }
    ],
    "hint": "'yield' allows execution of a block passed to the method.",
    "answerDescription": "The 'yield' keyword allows a method to call a block of code that was passed as an argument."
  },
  {
    "id": "ruby_1923",
    "question": "Which method allows an object to handle unknown messages dynamically?",
    "options": [
      { "id": "option_1", "text": "respond_to?", "isCorrect": false },
      { "id": "option_2", "text": "call_missing", "isCorrect": false },
      { "id": "option_3", "text": "send_method", "isCorrect": false },
      { "id": "option_4", "text": "method_missing", "isCorrect": true }
    ],
    "hint": "It is a special method used for handling undefined method calls.",
    "answerDescription": "The `method_missing` method allows handling undefined method calls dynamically."
  },
  {
    "id": "ruby_1924",
    "question": "What does the 'return' keyword do in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "Prints a value to the console", "isCorrect": false },
      { "id": "option_2", "text": "Stops the execution of the method and returns a value", "isCorrect": false },
      { "id": "option_3", "text": "Executes the next method in the stack", "isCorrect": false },
      { "id": "option_4", "text": "Stops execution and returns control to the caller", "isCorrect": true }
    ],
    "hint": "'return' exits the method with an optional value.",
    "answerDescription": "The 'return' keyword immediately stops method execution and sends a value back to the caller."
  },
  {
    "id": "ruby_1925",
    "question": "How do you create a method that takes a block in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using curly braces {}", "isCorrect": false },
      { "id": "option_2", "text": "Using brackets []", "isCorrect": false },
      { "id": "option_3", "text": "Using the lambda keyword", "isCorrect": false },
      { "id": "option_4", "text": "By using 'yield' inside the method", "isCorrect": true }
    ],
    "hint": "Blocks can be executed using a special keyword.",
    "answerDescription": "In Ruby, a method can accept a block and execute it using the 'yield' keyword."
  },
  {
    "id": "ruby_1926",
    "question": "What will happen if a method is defined without an explicit return statement?",
    "options": [
      { "id": "option_1", "text": "It will return nil", "isCorrect": false },
      { "id": "option_2", "text": "It will cause an error", "isCorrect": false },
      { "id": "option_3", "text": "It will return an empty string", "isCorrect": false },
      { "id": "option_4", "text": "It will return the value of the last executed expression", "isCorrect": true }
    ],
    "hint": "Ruby methods return values even without 'return'.",
    "answerDescription": "Ruby methods return the result of the last executed expression if no explicit return is provided."
  },
  {
    "id": "ruby_1927",
    "question": "What is the purpose of the 'super' keyword in Ruby methods?",
    "options": [
      { "id": "option_1", "text": "To define a superclass", "isCorrect": false },
      { "id": "option_2", "text": "To prevent method overriding", "isCorrect": false },
      { "id": "option_3", "text": "To create a new instance", "isCorrect": false },
      { "id": "option_4", "text": "To call a method from the parent class", "isCorrect": true }
    ],
    "hint": "This keyword is used in method inheritance.",
    "answerDescription": "The 'super' keyword is used to call a method from the parent class, useful in method overriding."
  },
  {
    "id": "ruby_1928",
    "question": "How can you pass a block to a method explicitly?",
    "options": [
      { "id": "option_1", "text": "Using the 'block' keyword", "isCorrect": false },
      { "id": "option_2", "text": "Using angle brackets <>", "isCorrect": false },
      { "id": "option_3", "text": "Using square brackets []", "isCorrect": false },
      { "id": "option_4", "text": "Using an ampersand (&) before the block parameter", "isCorrect": true }
    ],
    "hint": "Use '&' to convert a block into a Proc.",
    "answerDescription": "To pass a block explicitly, use an ampersand (&) before the block parameter in the method definition."
  },
  {
    "id": "ruby_1929",
    "question": "Which method allows creating a lambda function in Ruby?",
    "options": [
      { "id": "option_1", "text": "proc()", "isCorrect": false },
      { "id": "option_2", "text": "def()", "isCorrect": false },
      { "id": "option_3", "text": "method()", "isCorrect": false },
      { "id": "option_4", "text": "lambda()", "isCorrect": true }
    ],
    "hint": "This method is an alternative to 'Proc.new'.",
    "answerDescription": "The 'lambda' method in Ruby creates a lambda function, which is a type of Proc with strict argument checking."
  },  {
    "id": "ruby_1930",
    "question": "What is the purpose of the `return` keyword in Ruby methods?",
    "options": [
      { "id": "option_1", "text": "It explicitly specifies the value a method returns", "isCorrect": true },
      { "id": "option_2", "text": "It stops the execution of the entire program", "isCorrect": false },
      { "id": "option_3", "text": "It defines a new method", "isCorrect": false },
      { "id": "option_4", "text": "It repeats the last statement in the method", "isCorrect": false }
    ],
    "hint": "In Ruby, methods return the last evaluated expression by default.",
    "answerDescription": "The `return` keyword is used to explicitly return a value from a method, though Ruby methods return the last evaluated expression even without it."
  },
  {
    "id": "ruby_1931",
    "question": "What does the `yield` keyword do in a Ruby method?",
    "options": [
      { "id": "option_1", "text": "It passes control to a block provided with the method", "isCorrect": true },
      { "id": "option_2", "text": "It creates a new thread", "isCorrect": false },
      { "id": "option_3", "text": "It stops method execution immediately", "isCorrect": false },
      { "id": "option_4", "text": "It raises an exception", "isCorrect": false }
    ],
    "hint": "It allows a method to execute code from a block.",
    "answerDescription": "The `yield` keyword is used in a method to pass control to an associated block, executing its code before returning to the method."
  },
  {
    "id": "ruby_1932",
    "question": "What is a default argument in Ruby methods?",
    "options": [
      { "id": "option_1", "text": "An argument that has a predefined value if none is provided", "isCorrect": true },
      { "id": "option_2", "text": "An argument that must always be provided", "isCorrect": false },
      { "id": "option_3", "text": "An argument that takes any data type", "isCorrect": false },
      { "id": "option_4", "text": "An argument that only accepts strings", "isCorrect": false }
    ],
    "hint": "This type of argument prevents errors when no value is passed.",
    "answerDescription": "A default argument in Ruby allows a method to have a predefined value if no argument is supplied during the call."
  },
  {
    "id": "ruby_1933",
    "question": "What does the `define_method` function in Ruby do?",
    "options": [
      { "id": "option_1", "text": "Defines a method inside an instance", "isCorrect": false },
      { "id": "option_2", "text": "Removes an existing method", "isCorrect": false },
      { "id": "option_3", "text": "Creates a method dynamically in a class or module", "isCorrect": true },
      { "id": "option_4", "text": "Renames a method", "isCorrect": false }
    ],
    "hint": "This method dynamically creates methods at runtime.",
    "answerDescription": "Using `define_method`, you can define methods programmatically within a class or module."
  },
  {
    "id": "ruby_1934",
    "question": "Which method is used to execute a block passed to a method?",
    "options": [
      { "id": "option_1", "text": "execute()", "isCorrect": false },
      { "id": "option_2", "text": "run_block()", "isCorrect": false },
      { "id": "option_3", "text": "yield", "isCorrect": true },
      { "id": "option_4", "text": "call_block()", "isCorrect": false }
    ],
    "hint": "It is a built-in keyword used in method definitions.",
    "answerDescription": "'yield' executes the block passed to a method."
  },
  { 
    "id": "ruby_1935",
    "question": "Which of the following is a correct way to call a method with arguments?",
    "options": [
      { "id": "option_1", "text": "method_name[]", "isCorrect": false },
      { "id": "option_2", "text": "method_name {}", "isCorrect": false },
      { "id": "option_3", "text": "method_name |arg1, arg2|", "isCorrect": false },
      { "id": "option_4", "text": "method_name(arg1, arg2)", "isCorrect": true }
    ],
    "hint": "Arguments are usually passed inside parentheses.",
    "answerDescription": "In Ruby, methods are called using parentheses when passing arguments."
  },
  { 
    "id": "ruby_1936",
    "question": "What is a key difference between 'return' in a method and 'next' in a block?",
    "options": [
      { "id": "option_1", "text": "'return' skips the next iteration", "isCorrect": false },
      { "id": "option_2", "text": "'next' exits the method", "isCorrect": false },
      { "id": "option_3", "text": "'return' does not stop execution", "isCorrect": false },
      { "id": "option_4", "text": "'return' exits the method, while 'next' skips to the next iteration", "isCorrect": true }
    ],
    "hint": "'return' affects the method scope, while 'next' affects loops.",
    "answerDescription": "'return' exits the entire method, whereas 'next' skips to the next iteration within a loop or block."
  },
  { 
    "id": "ruby_1937",
    "question": "What does the keyword 'super' do inside a method?",
    "options": [
      { "id": "option_1", "text": "Calls a private method", "isCorrect": false },
      { "id": "option_2", "text": "Ends the method execution", "isCorrect": false },
      { "id": "option_3", "text": "Creates a new instance of the class", "isCorrect": false },
      { "id": "option_4", "text": "Calls the same method from the superclass", "isCorrect": true }
    ],
    "hint": "It's used in inheritance to refer to the parent method.",
    "answerDescription": "The 'super' keyword calls a method of the same name from the superclass."
  },
  { 
    "id": "ruby_1938",
    "question": "How can you make a method return multiple values?",
    "options": [
      { "id": "option_1", "text": "Using multiple 'return' statements", "isCorrect": false },
      { "id": "option_2", "text": "By returning an array", "isCorrect": false },
      { "id": "option_3", "text": "Using the 'yield' keyword", "isCorrect": false },
      { "id": "option_4", "text": "By separating values with commas", "isCorrect": true }
    ],
    "hint": "Ruby allows multiple return values without an array.",
    "answerDescription": "Ruby allows returning multiple values by separating them with commas, which are then captured as an array."
  },
  { 
    "id": "ruby_1939",
    "question": "How do you define a method that provides a default value for an argument?",
    "options": [
      { "id": "option_1", "text": "By assigning the value inside the method body", "isCorrect": false },
      { "id": "option_2", "text": "Using 'var = value' before calling the method", "isCorrect": false },
      { "id": "option_3", "text": "Using an if condition inside the method", "isCorrect": false },
      { "id": "option_4", "text": "By assigning a default value in the parameter list", "isCorrect": true }
    ],
    "hint": "The default value should be part of the method definition.",
    "answerDescription": "Default argument values are set by assigning them in the parameter list, e.g., 'def greet(name = \"Guest\")'."
  },
  { 
    "id": "ruby_1940",
    "question": "What does the 'method_missing' method do?",
    "options": [
      { "id": "option_1", "text": "Raises an error for undefined methods", "isCorrect": false },
      { "id": "option_2", "text": "Automatically defines missing methods", "isCorrect": false },
      { "id": "option_3", "text": "Stops execution when a method is missing", "isCorrect": false },
      { "id": "option_4", "text": "Handles calls to undefined methods dynamically", "isCorrect": true }
    ],
    "hint": "It allows handling of undefined method calls.",
    "answerDescription": "The 'method_missing' method intercepts calls to undefined methods, allowing custom handling."
  },
  { 
    "id": "ruby_1941",
    "question": "What is the difference between 'private' and 'protected' methods in Ruby?",
    "options": [
      { "id": "option_1", "text": "Private methods can be accessed outside the class", "isCorrect": false },
      { "id": "option_2", "text": "Protected methods can't be called within the same class", "isCorrect": false },
      { "id": "option_3", "text": "Private methods require an explicit receiver", "isCorrect": false },
      { "id": "option_4", "text": "Protected methods can be accessed within subclasses", "isCorrect": true }
    ],
    "hint": "Protected methods allow access within the class hierarchy.",
    "answerDescription": "Private methods can only be called within the defining class, while protected methods are accessible by instances of the same class and its subclasses."
  },  {
    "id": "ruby_1942",
    "question": "What is the return value of a method in Ruby if no explicit return is used?",
    "options": [
      { "id": "option_1", "text": "The last evaluated expression", "isCorrect": true },
      { "id": "option_2", "text": "nil", "isCorrect": false },
      { "id": "option_3", "text": "0", "isCorrect": false },
      { "id": "option_4", "text": "An empty string", "isCorrect": false }
    ],
    "hint": "Ruby methods automatically return the last evaluated expression.",
    "answerDescription": "In Ruby, methods return the last evaluated expression by default, so an explicit return is not required."
  },
  {
    "id": "ruby_1943",
    "question": "How do you define a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using the 'def' keyword followed by the method name", "isCorrect": true },
      { "id": "option_2", "text": "Using the 'function' keyword", "isCorrect": false },
      { "id": "option_3", "text": "Using the 'method' keyword", "isCorrect": false },
      { "id": "option_4", "text": "Using angle brackets", "isCorrect": false }
    ],
    "hint": "Ruby uses 'def' to define methods.",
    "answerDescription": "Methods in Ruby are defined using the 'def' keyword followed by the method name and optional parameters."
  },
  {
    "id": "ruby_1944",
    "question": "Which keyword is used to exit a method and return a value explicitly?",
    "options": [
      { "id": "option_1", "text": "return", "isCorrect": true },
      { "id": "option_2", "text": "break", "isCorrect": false },
      { "id": "option_3", "text": "exit", "isCorrect": false },
      { "id": "option_4", "text": "yield", "isCorrect": false }
    ],
    "hint": "This keyword is commonly used to explicitly specify a return value.",
    "answerDescription": "The 'return' keyword is used in Ruby to explicitly return a value from a method."
  },
  {
    "id": "ruby_1945",
    "question": "What does the 'yield' keyword do in a method?",
    "options": [
      { "id": "option_1", "text": "It pauses execution and calls a provided block", "isCorrect": true },
      { "id": "option_2", "text": "It stops execution of the program", "isCorrect": false },
      { "id": "option_3", "text": "It loops through an array", "isCorrect": false },
      { "id": "option_4", "text": "It defines a new method", "isCorrect": false }
    ],
    "hint": "This keyword is used in methods to execute a block passed to the method.",
    "answerDescription": "'yield' allows a method to execute a block of code passed to it without explicitly naming the block."
  },
  {
    "id": "ruby_1946",
    "question": "How can you define a method that takes a variable number of arguments?",
    "options": [
      { "id": "option_1", "text": "Using the splat operator '*'", "isCorrect": true },
      { "id": "option_2", "text": "Using the '&' symbol", "isCorrect": false },
      { "id": "option_3", "text": "Using brackets '[]'", "isCorrect": false },
      { "id": "option_4", "text": "Using curly braces '{}'", "isCorrect": false }
    ],
    "hint": "The '*' symbol allows a method to take multiple arguments as an array.",
    "answerDescription": "The splat operator '*' lets a method accept a variable number of arguments, which are collected into an array."
  },
  {
    "id": "ruby_1947",
    "question": "What does the '&' symbol do when used in a method parameter?",
    "options": [
      { "id": "option_1", "text": "It converts a block into a Proc", "isCorrect": true },
      { "id": "option_2", "text": "It indicates a pointer reference", "isCorrect": false },
      { "id": "option_3", "text": "It concatenates strings", "isCorrect": false },
      { "id": "option_4", "text": "It defines a lambda function", "isCorrect": false }
    ],
    "hint": "The '&' symbol is used to work with blocks inside methods.",
    "answerDescription": "When used in a method parameter, '&' converts a block into a Proc object, allowing it to be passed and called explicitly."
  },
  {
    "id": "ruby_1948",
    "question": "Which method allows calling a block inside a method?",
    "options": [
      { "id": "option_1", "text": "yield", "isCorrect": true },
      { "id": "option_2", "text": "call_block", "isCorrect": false },
      { "id": "option_3", "text": "invoke", "isCorrect": false },
      { "id": "option_4", "text": "execute", "isCorrect": false }
    ],
    "hint": "This keyword is used inside a method to execute a passed block.",
    "answerDescription": "The 'yield' keyword is used in a method to invoke a block passed to it."
  },
  {
    "id": "ruby_1949",
    "question": "What does the 'lambda' keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates an anonymous function", "isCorrect": true },
      { "id": "option_2", "text": "Declares a new variable", "isCorrect": false },
      { "id": "option_3", "text": "Calls a method dynamically", "isCorrect": false },
      { "id": "option_4", "text": "Exits the program", "isCorrect": false }
    ],
    "hint": "This keyword is used to create anonymous functions in Ruby.",
    "answerDescription": "The 'lambda' keyword in Ruby is used to define anonymous functions that can be stored in variables and executed later."
  },
  {
    "id": "ruby_1950",
    "question": "How can you define a method with default arguments in Ruby?",
    "options": [
      { "id": "option_1", "text": "By using `self` keyword before the argument", "isCorrect": false },
      { "id": "option_2", "text": "By passing `nil` as the argument when calling the method", "isCorrect": false },
      { "id": "option_3", "text": "By assigning default values in the method definition", "isCorrect": true },
      { "id": "option_4", "text": "By defining the method inside a class", "isCorrect": false }
    ],
    "hint": "Default arguments are assigned in the method signature.",
    "answerDescription": "In Ruby, you can specify default argument values in the method definition using `param = value`."
  },
  {
    "id": "ruby_1951",
    "question": "What command is used to create a new database in Rails?",
    "options": [
      { "id": "option_1", "text": "`rails db:generate`", "isCorrect": false },
      { "id": "option_2", "text": "`rails new db`", "isCorrect": false },
      { "id": "option_3", "text": "`rake db:create_migration`", "isCorrect": false },
      { "id": "option_4", "text": "`rails db:create`", "isCorrect": true }
    ],
    "hint": "Use a Rails command starting with `db:` to create the database.",
    "answerDescription": "The `rails db:create` command creates the database defined in `config/database.yml`."
  },
  {
    "id": "ruby_1952",
    "question": "Which command generates a new migration file in Rails?",
    "options": [
      { "id": "option_1", "text": "`rails migration new`", "isCorrect": false },
      { "id": "option_2", "text": "`rails generate migration_file`", "isCorrect": false },
      { "id": "option_3", "text": "`rails db:migrate:create`", "isCorrect": false },
      { "id": "option_4", "text": "`rails generate migration`", "isCorrect": true }
    ],
    "hint": "Use the `generate` command to create a migration.",
    "answerDescription": "The `rails generate migration MigrationName` command creates a new migration file."
  },
  {
    "id": "ruby_1953",
    "question": "What is the purpose of `db:migrate` in Rails?",
    "options": [
      { "id": "option_1", "text": "Deletes the database", "isCorrect": false },
      { "id": "option_2", "text": "Resets all tables", "isCorrect": false },
      { "id": "option_3", "text": "Updates ActiveRecord models", "isCorrect": false },
      { "id": "option_4", "text": "Applies pending migrations to the database", "isCorrect": true }
    ],
    "hint": "It applies database changes defined in migration files.",
    "answerDescription": "The `rails db:migrate` command applies pending migrations to update the database schema."
  },
  {
    "id": "ruby_1954",
    "question": "Where are migration files stored in a Rails project?",
    "options": [
      { "id": "option_1", "text": "`app/migrations`", "isCorrect": false },
      { "id": "option_2", "text": "`config/db/migrations`", "isCorrect": false },
      { "id": "option_3", "text": "`db/schema/`", "isCorrect": false },
      { "id": "option_4", "text": "`db/migrate/`", "isCorrect": true }
    ],
    "hint": "The directory is inside the `db` folder.",
    "answerDescription": "Migration files are stored in the `db/migrate/` directory in a Rails project."
  },
  {
    "id": "ruby_1955",
    "question": "What does the `change` method do in a migration?",
    "options": [
      { "id": "option_1", "text": "Reverses all database changes", "isCorrect": false },
      { "id": "option_2", "text": "Drops the entire database", "isCorrect": false },
      { "id": "option_3", "text": "Commits migrations without changes", "isCorrect": false },
      { "id": "option_4", "text": "Defines changes that can be automatically reversed", "isCorrect": true }
    ],
    "hint": "It allows automatic reversal of migrations.",
    "answerDescription": "The `change` method in migrations defines database changes that Rails can automatically roll back."
  },
  {
    "id": "ruby_1956",
    "question": "How do you roll back the last migration?",
    "options": [
      { "id": "option_1", "text": "`rails db:reset_last`", "isCorrect": false },
      { "id": "option_2", "text": "`rails db:undo`", "isCorrect": false },
      { "id": "option_3", "text": "`rails db:migrate --rollback`", "isCorrect": false },
      { "id": "option_4", "text": "`rails db:rollback`", "isCorrect": true }
    ],
    "hint": "Use a `db:` command to undo migrations.",
    "answerDescription": "The `rails db:rollback` command reverts the last migration."
  },
  {
    "id": "ruby_1957",
    "question": "Which file contains the current database schema in Rails?",
    "options": [
      { "id": "option_1", "text": "`db/migrate/schema.rb`", "isCorrect": false },
      { "id": "option_2", "text": "`config/database_schema.rb`", "isCorrect": false },
      { "id": "option_3", "text": "`app/models/schema.rb`", "isCorrect": false },
      { "id": "option_4", "text": "`db/schema.rb`", "isCorrect": true }
    ],
    "hint": "This file is located in the `db/` directory.",
    "answerDescription": "The `db/schema.rb` file stores the current database schema in Rails."
  },
  {
    "id": "ruby_1958",
    "question": "Which command resets the database by dropping, creating, and migrating it?",
    "options": [
      { "id": "option_1", "text": "`rails db:restart`", "isCorrect": false },
      { "id": "option_2", "text": "`rails db:drop_create_migrate`", "isCorrect": false },
      { "id": "option_3", "text": "`rails db:refresh`", "isCorrect": false },
      { "id": "option_4", "text": "`rails db:reset`", "isCorrect": true }
    ],
    "hint": "It resets the database to a fresh state.",
    "answerDescription": "The `rails db:reset` command drops, creates, and runs migrations on the database."
  },
  {
    "id": "ruby_1959",
    "question": "Which migration method is used to remove a table from the database?",
    "options": [
      { "id": "option_1", "text": "`drop_table!`", "isCorrect": false },
      { "id": "option_2", "text": "`remove_table`", "isCorrect": false },
      { "id": "option_3", "text": "`delete_table`", "isCorrect": false },
      { "id": "option_4", "text": "`drop_table`", "isCorrect": true }
    ],
    "hint": "It removes an existing table from the database.",
    "answerDescription": "The `drop_table` method is used in migrations to remove a table from the database."
  },
  {
    "id": "ruby_1960",
    "question": "How can you check the status of pending migrations?",
    "options": [
      { "id": "option_1", "text": "`rails migration:status`", "isCorrect": false },
      { "id": "option_2", "text": "`rails db:check_migrations`", "isCorrect": false },
      { "id": "option_3", "text": "`rails db:migrate:check`", "isCorrect": false },
      { "id": "option_4", "text": "`rails db:migrate:status`", "isCorrect": true }
    ],
    "hint": "Use a `db:migrate` subcommand to check migration status.",
    "answerDescription": "The `rails db:migrate:status` command shows which migrations have been applied and which are pending."
  },
  {
    "id": "ruby_1961",
    "question": "What does the `add_column` method do in a migration?",
    "options": [
      { "id": "option_1", "text": "Removes a column from a table", "isCorrect": false },
      { "id": "option_2", "text": "Drops an entire table", "isCorrect": false },
      { "id": "option_3", "text": "Resets all table columns", "isCorrect": false },
      { "id": "option_4", "text": "Adds a new column to an existing table", "isCorrect": true }
    ],
    "hint": "It modifies an existing table structure by adding a new field.",
    "answerDescription": "The `add_column` method is used in migrations to add a new column to an existing table."
  },
  {
    "id": "ruby_1962",
    "question": "Which command lists all available database-related tasks in Rails?",
    "options": [
      { "id": "option_1", "text": "`rails db:list_tasks`", "isCorrect": false },
      { "id": "option_2", "text": "`rails db:tasks`", "isCorrect": false },
      { "id": "option_3", "text": "`rails db:help`", "isCorrect": false },
      { "id": "option_4", "text": "`rails db:tasks --all`", "isCorrect": true }
    ],
    "hint": "Use a Rails command to display database tasks.",
    "answerDescription": "The `rails db:tasks --all` command lists all available database-related tasks in Rails."
  },
  {
    "id": "ruby_1963",
    "question": "What is the purpose of `change_column` in a migration?",
    "options": [
      { "id": "option_1", "text": "Adds a new column", "isCorrect": false },
      { "id": "option_2", "text": "Drops an existing column", "isCorrect": false },
      { "id": "option_3", "text": "Deletes a table", "isCorrect": false },
      { "id": "option_4", "text": "Modifies an existing column’s type or properties", "isCorrect": true }
    ],
    "hint": "It is used to alter existing column attributes.",
    "answerDescription": "The `change_column` method allows you to modify an existing column’s type or other properties in a migration."
  },
  {
    "id": "ruby_1964",
    "question": "Which command undoes the last batch of migrations in Rails?",
    "options": [
      { "id": "option_1", "text": "`rails db:rollback --all`", "isCorrect": false },
      { "id": "option_2", "text": "`rails db:undo_all`", "isCorrect": false },
      { "id": "option_3", "text": "`rails db:migrate:reverse`", "isCorrect": false },
      { "id": "option_4", "text": "`rails db:rollback STEP=1`", "isCorrect": true }
    ],
    "hint": "Use the `db:rollback` command with a step count.",
    "answerDescription": "The `rails db:rollback STEP=1` command undoes the last migration batch applied to the database."
  },
  {
    "id": "ruby_1965",
    "question": "How do you create a model with an associated migration in Rails?",
    "options": [
      { "id": "option_1", "text": "`rails db:model NewModel`", "isCorrect": false },
      { "id": "option_2", "text": "`rails generate db model NewModel`", "isCorrect": false },
      { "id": "option_3", "text": "`rails new_model generate`", "isCorrect": false },
      { "id": "option_4", "text": "`rails generate model NewModel`", "isCorrect": true }
    ],
    "hint": "Use the `generate model` command in Rails.",
    "answerDescription": "The `rails generate model ModelName` command creates a new model and an associated migration file."
  },
  {
    "id": "ruby_1966",
    "question": "What does the `rename_column` method do in a migration?",
    "options": [
      { "id": "option_1", "text": "Drops a column from a table", "isCorrect": false },
      { "id": "option_2", "text": "Adds a new column to a table", "isCorrect": false },
      { "id": "option_3", "text": "Copies data from one column to another", "isCorrect": false },
      { "id": "option_4", "text": "Changes the name of an existing column", "isCorrect": true }
    ],
    "hint": "It modifies an existing column name.",
    "answerDescription": "The `rename_column` method in migrations changes the name of an existing column in a database table."
  },
  {
    "id": "ruby_1967",
    "question": "How do you add an index to a column in a migration?",
    "options": [
      { "id": "option_1", "text": "`add_column_index`", "isCorrect": false },
      { "id": "option_2", "text": "`create_index`", "isCorrect": false },
      { "id": "option_3", "text": "`index_column`", "isCorrect": false },
      { "id": "option_4", "text": "`add_index`", "isCorrect": true }
    ],
    "hint": "Look for a method with 'index' in its name.",
    "answerDescription": "The `add_index` method in migrations is used to create an index on a database column."
  },
  {
    "id": "ruby_1968",
    "question": "Which command loads the database schema instead of running migrations?",
    "options": [
      { "id": "option_1", "text": "`rails db:migrate:schema_load`", "isCorrect": false },
      { "id": "option_2", "text": "`rails db:import_schema`", "isCorrect": false },
      { "id": "option_3", "text": "`rails db:load_structure`", "isCorrect": false },
      { "id": "option_4", "text": "`rails db:schema:load`", "isCorrect": true }
    ],
    "hint": "It uses the `schema:load` command to set up the database.",
    "answerDescription": "The `rails db:schema:load` command loads the schema directly without running migrations."
  },
  {
    "id": "ruby_1969",
    "question": "Which ActiveRecord method is used to define a foreign key constraint?",
    "options": [
      { "id": "option_1", "text": "`add_foreign_key_constraint`", "isCorrect": false },
      { "id": "option_2", "text": "`create_foreign_key`", "isCorrect": false },
      { "id": "option_3", "text": "`foreign_key`", "isCorrect": false },
      { "id": "option_4", "text": "`add_foreign_key`", "isCorrect": true }
    ],
    "hint": "It starts with `add_` and involves foreign keys.",
    "answerDescription": "The `add_foreign_key` method is used in migrations to create a foreign key constraint."
  },
  {
    "id": "ruby_1970",
    "question": "What does the `remove_index` method do in a migration?",
    "options": [
      { "id": "option_1", "text": "Drops a table from the database", "isCorrect": false },
      { "id": "option_2", "text": "Deletes an entire column", "isCorrect": false },
      { "id": "option_3", "text": "Renames an index", "isCorrect": false },
      { "id": "option_4", "text": "Removes an index from a column", "isCorrect": true }
    ],
    "hint": "It removes an index from a table column.",
    "answerDescription": "The `remove_index` method is used in migrations to drop an index from a table."
  },
  {
    "id": "ruby_1971",
    "question": "What will be the output of the following Ruby code?\n```ruby\ndef greet(name)\n  \"Hello, #{name}!\"\nend\nputs greet(\"Alice\")\n```",
    "options": [
      { "id": "option_1", "text": "\"Hello, Alice!\"", "isCorrect": true },
      { "id": "option_2", "text": "\"Hello, name!\"", "isCorrect": false },
      { "id": "option_3", "text": "nil", "isCorrect": false },
      { "id": "option_4", "text": "Syntax Error", "isCorrect": false }
    ],
    "hint": "The method interpolates the argument into the string.",
    "answerDescription": "The method `greet` takes a parameter and returns a formatted string."
  },
  {
    "id": "ruby_1972",
    "question": "How can you define a method with a default parameter in Ruby?",
    "options": [
      { "id": "option_1", "text": "def greet(name = \"Guest\")", "isCorrect": true },
      { "id": "option_2", "text": "def greet(name: \"Guest\")", "isCorrect": false },
      { "id": "option_3", "text": "def greet(name -> \"Guest\")", "isCorrect": false },
      { "id": "option_4", "text": "def greet(name) = \"Guest\"", "isCorrect": false }
    ],
    "hint": "Use `=` inside the parameter list to provide a default value.",
    "answerDescription": "In Ruby, default values for parameters are assigned using the `=` operator inside the method definition."
  },
  {
    "id": "ruby_1973",
    "question": "Which keyword is used to return a value from a Ruby method explicitly?",
    "options": [
      { "id": "option_1", "text": "return", "isCorrect": true },
      { "id": "option_2", "text": "exit", "isCorrect": false },
      { "id": "option_3", "text": "yield", "isCorrect": false },
      { "id": "option_4", "text": "stop", "isCorrect": false }
    ],
    "hint": "This keyword exits the method and sends a value back to the caller.",
    "answerDescription": "Ruby methods return the last evaluated expression by default, but you can use `return` explicitly."
  },
  {
    "id": "ruby_1974",
    "question": "What will be the output of the following code?\n```ruby\ndef add(a, b)\n  return a + b\nend\nputs add(3, 4)\n```",
    "options": [
      { "id": "option_1", "text": "7", "isCorrect": true },
      { "id": "option_2", "text": "\"34\"", "isCorrect": false },
      { "id": "option_3", "text": "nil", "isCorrect": false },
      { "id": "option_4", "text": "undefined method 'add'", "isCorrect": false }
    ],
    "hint": "The method adds two numbers and returns the sum.",
    "answerDescription": "The method `add` returns `3 + 4`, which evaluates to `7`."
  },
  {
    "id": "ruby_1975",
    "question": "In Ruby, what is the purpose of the `yield` keyword in a method?",
    "options": [
      { "id": "option_1", "text": "It executes a block passed to the method.", "isCorrect": true },
      { "id": "option_2", "text": "It returns a value from the method.", "isCorrect": false },
      { "id": "option_3", "text": "It stops the execution of the method.", "isCorrect": false },
      { "id": "option_4", "text": "It raises an error when no block is given.", "isCorrect": false }
    ],
    "hint": "This keyword calls a block passed to a method.",
    "answerDescription": "In Ruby, `yield` executes a block if one is provided to the method."
  },
  {
    "id": "ruby_1976",
    "question": "How do you define a method in Ruby that takes a variable number of arguments?",
    "options": [
      { "id": "option_1", "text": "def sum(*numbers)", "isCorrect": true },
      { "id": "option_2", "text": "def sum(numbers: [])", "isCorrect": false },
      { "id": "option_3", "text": "def sum(numbers...)", "isCorrect": false },
      { "id": "option_4", "text": "def sum(numbers=>[])", "isCorrect": false }
    ],
    "hint": "Use an asterisk before the parameter name.",
    "answerDescription": "The `*` operator collects arguments into an array."
  },
  {
    "id": "ruby_1977",
    "question": "What happens if a method does not explicitly return a value in Ruby?",
    "options": [
      { "id": "option_1", "text": "It returns the last evaluated expression.", "isCorrect": true },
      { "id": "option_2", "text": "It returns `nil`.", "isCorrect": false },
      { "id": "option_3", "text": "It causes a syntax error.", "isCorrect": false },
      { "id": "option_4", "text": "It prints an error message.", "isCorrect": false }
    ],
    "hint": "Ruby automatically returns the last evaluated expression.",
    "answerDescription": "Unlike some languages, Ruby does not require an explicit `return`."
  },
  {
    "id": "ruby_1978",
    "question": "What will the following code print?\n```ruby\ndef check_even(number)\n  return \"Even\" if number.even?\n  \"Odd\"\nend\nputs check_even(7)\n```",
    "options": [
      { "id": "option_1", "text": "\"Odd\"", "isCorrect": true },
      { "id": "option_2", "text": "\"Even\"", "isCorrect": false },
      { "id": "option_3", "text": "nil", "isCorrect": false },
      { "id": "option_4", "text": "Syntax Error", "isCorrect": false }
    ],
    "hint": "Check the conditional return value.",
    "answerDescription": "Since `7.even?` is false, the method returns \"Odd\"."
  },
  {
    "id": "ruby_1979",
    "question": "Which of the following is a valid way to call a method without parentheses in Ruby?",
    "options": [
      { "id": "option_1", "text": "greet \"Alice\"", "isCorrect": true },
      { "id": "option_2", "text": "greet[\"Alice\"]", "isCorrect": false },
      { "id": "option_3", "text": "greet->\"Alice\"", "isCorrect": false },
      { "id": "option_4", "text": "greet=>\"Alice\"", "isCorrect": false }
    ],
    "hint": "Ruby allows omitting parentheses for method calls.",
    "answerDescription": "In Ruby, `greet \"Alice\"` is valid syntax."
  },
  {
    "id": "ruby_1980",
    "question": "What is the purpose of the `define_method` in Ruby?",
    "options": [
      { "id": "option_1", "text": "To define a global function", "isCorrect": false },
      { "id": "option_2", "text": "To dynamically define a method inside a class or module", "isCorrect": true },
      { "id": "option_3", "text": "To override an existing method", "isCorrect": false },
      { "id": "option_4", "text": "To create a private method", "isCorrect": false }
    ],
    "hint": "This method is used for metaprogramming and dynamically creates methods.",
    "answerDescription": "The `define_method` is a Ruby metaprogramming technique that defines a method dynamically within a class or module."
  },
  {
    "id": "ruby_1981",
    "question": "Which keyword allows passing a block to a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "return", "isCorrect": false },
      { "id": "option_2", "text": "yield", "isCorrect": true },
      { "id": "option_3", "text": "exit", "isCorrect": false },
      { "id": "option_4", "text": "block", "isCorrect": false }
    ],
    "hint": "This keyword executes a block inside a method.",
    "answerDescription": "The `yield` keyword is used to pass control to a block inside a method."
  },
  {
    "id": "ruby_1982",
    "question": "How can you create a migration in Rails?",
    "options": [
      { "id": "option_1", "text": "rails db:create", "isCorrect": false },
      { "id": "option_2", "text": "rails generate migration AddFieldToTable", "isCorrect": true },
      { "id": "option_3", "text": "rails new migration AddFieldToTable", "isCorrect": false },
      { "id": "option_4", "text": "rails db:migrate", "isCorrect": false }
    ],
    "hint": "This command is used to generate a migration file.",
    "answerDescription": "The `rails generate migration AddFieldToTable` command creates a new migration file for modifying the database schema."
  },
  {
    "id": "ruby_1983",
    "question": "Which method is used to execute a migration in Rails?",
    "options": [
      { "id": "option_1", "text": "rails db:rollback", "isCorrect": false },
      { "id": "option_2", "text": "rails db:migrate", "isCorrect": true },
      { "id": "option_3", "text": "rails db:reset", "isCorrect": false },
      { "id": "option_4", "text": "rails generate migration", "isCorrect": false }
    ],
    "hint": "This command applies pending migrations.",
    "answerDescription": "`rails db:migrate` runs all pending migrations to update the database schema."
  },
  {
    "id": "ruby_1984",
    "question": "What does `self.up` and `self.down` do in an old-style migration?",
    "options": [
      { "id": "option_1", "text": "Creates and removes a model", "isCorrect": false },
      { "id": "option_2", "text": "Defines how to apply and revert the migration", "isCorrect": true },
      { "id": "option_3", "text": "Runs and resets the database", "isCorrect": false },
      { "id": "option_4", "text": "Deletes a table and rolls back a migration", "isCorrect": false }
    ],
    "hint": "These methods define the change and rollback logic.",
    "answerDescription": "`self.up` describes how to apply a migration, while `self.down` describes how to revert it."
  },
  {
    "id": "ruby_1985",
    "question": "Which command allows rolling back the last migration in Rails?",
    "options": [
      { "id": "option_1", "text": "rails db:migrate", "isCorrect": false },
      { "id": "option_2", "text": "rails db:rollback", "isCorrect": true },
      { "id": "option_3", "text": "rails db:reset", "isCorrect": false },
      { "id": "option_4", "text": "rails db:drop", "isCorrect": false }
    ],
    "hint": "This command undoes the last migration.",
    "answerDescription": "`rails db:rollback` rolls back the last executed migration."
  },
  {
    "id": "ruby_1986",
    "question": "How can you reset the database in Rails?",
    "options": [
      { "id": "option_1", "text": "rails db:migrate", "isCorrect": false },
      { "id": "option_2", "text": "rails db:reset", "isCorrect": true },
      { "id": "option_3", "text": "rails generate migration", "isCorrect": false },
      { "id": "option_4", "text": "rails db:rollback", "isCorrect": false }
    ],
    "hint": "This command drops, recreates, and migrates the database.",
    "answerDescription": "`rails db:reset` drops the database, recreates it, and runs all migrations."
  },
  {
    "id": "ruby_1987",
    "question": "Which Rails file contains the database configuration settings?",
    "options": [
      { "id": "option_1", "text": "config/routes.rb", "isCorrect": false },
      { "id": "option_2", "text": "config/database.yml", "isCorrect": true },
      { "id": "option_3", "text": "db/schema.rb", "isCorrect": false },
      { "id": "option_4", "text": "config/application.rb", "isCorrect": false }
    ],
    "hint": "This YAML file stores database connection details.",
    "answerDescription": "`config/database.yml` contains database connection settings for different environments."
  },
  {
    "id": "ruby_1988",
    "question": "Which file stores the current database schema in Rails?",
    "options": [
      { "id": "option_1", "text": "config/database.yml", "isCorrect": false },
      { "id": "option_2", "text": "db/schema.rb", "isCorrect": true },
      { "id": "option_3", "text": "db/migrate/", "isCorrect": false },
      { "id": "option_4", "text": "config/routes.rb", "isCorrect": false }
    ],
    "hint": "This file is updated after running migrations.",
    "answerDescription": "`db/schema.rb` reflects the current state of the database schema."
  },
  {
    "id": "ruby_1989",
    "question": "Which command generates a new model along with its migration in Rails?",
    "options": [
      { "id": "option_1", "text": "rails generate controller ModelName", "isCorrect": false },
      { "id": "option_2", "text": "rails generate model ModelName", "isCorrect": true },
      { "id": "option_3", "text": "rails db:migrate", "isCorrect": false },
      { "id": "option_4", "text": "rails new ModelName", "isCorrect": false }
    ],
    "hint": "This command creates a model file and a migration file.",
    "answerDescription": "`rails generate model ModelName` generates a new model with a corresponding migration file."
  },
  {
    "id": "ruby_1990",
    "question": "Which method in Ruby checks if a given object is an instance of a specific class?",
    "options": [
      { "id": "option_1", "text": "is_a?", "isCorrect": false },
      { "id": "option_2", "text": "instance_eval", "isCorrect": false },
      { "id": "option_3", "text": "instance_of?", "isCorrect": true },
      { "id": "option_4", "text": "kind_of?", "isCorrect": false }
    ],
    "hint": "This method checks if an object is an exact instance of a given class.",
    "answerDescription": "`instance_of?` returns `true` only if the object is an exact instance of the specified class."
  },
  {
    "id": "ruby_1991",
    "question": "What does the `super` keyword do in Ruby?",
    "options": [
      { "id": "option_1", "text": "Creates a new instance of a class", "isCorrect": false },
      { "id": "option_2", "text": "References the superclass of an object", "isCorrect": false },
      { "id": "option_3", "text": "Calls a method of the same name from the superclass", "isCorrect": true },
      { "id": "option_4", "text": "Defines a superclass method", "isCorrect": false }
    ],
    "hint": "This keyword is used for method inheritance.",
    "answerDescription": "`super` calls the method of the same name in the superclass, optionally passing arguments."
  },
  {
    "id": "ruby_1992",
    "question": "Which method is used to convert a string to an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_f", "isCorrect": false },
      { "id": "option_2", "text": "to_sym", "isCorrect": false },
      { "id": "option_3", "text": "to_i", "isCorrect": true },
      { "id": "option_4", "text": "to_s", "isCorrect": false }
    ],
    "hint": "This method transforms a string representation of a number into an integer.",
    "answerDescription": "`to_i` converts a string to an integer, ignoring non-numeric characters after the first number."
  },
  {
    "id": "ruby_1993",
    "question": "Which operator is used in Ruby to check if an object responds to a method?",
    "options": [
      { "id": "option_1", "text": "is_a?", "isCorrect": false },
      { "id": "option_2", "text": "has_method?", "isCorrect": false },
      { "id": "option_3", "text": "respond_to?", "isCorrect": true },
      { "id": "option_4", "text": "defined?", "isCorrect": false }
    ],
    "hint": "This method checks if an object can execute a method before calling it.",
    "answerDescription": "`respond_to?` is used to check whether an object has a particular method before calling it."
  },
  {
    "id": "ruby_1994",
    "question": "What will `puts nil.to_s` output in Ruby?",
    "options": [
      { "id": "option_1", "text": "nil", "isCorrect": false },
      { "id": "option_2", "text": "false", "isCorrect": false },
      { "id": "option_3", "text": "An empty string", "isCorrect": true },
      { "id": "option_4", "text": "0", "isCorrect": false }
    ],
    "hint": "The `to_s` method converts `nil` to a string.",
    "answerDescription": " 'nil.to_s' returns an empty string"
  },
  {
    "id": "ruby_1995",
    "question": "How do you define a constant in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `@` before the name", "isCorrect": false },
      { "id": "option_2", "text": "Using `#` before the name", "isCorrect": false },
      { "id": "option_3", "text": "By writing the name in all uppercase", "isCorrect": true },
      { "id": "option_4", "text": "Using `const` keyword", "isCorrect": false }
    ],
    "hint": "Ruby constants follow a naming convention rather than a keyword.",
    "answerDescription": "A Ruby constant is defined by writing its name in all uppercase, such as `PI = 3.14`."
  },
  {
    "id": "ruby_1996",
    "question": "Which method is used to execute a string as Ruby code?",
    "options": [
      { "id": "option_1", "text": "run", "isCorrect": false },
      { "id": "option_2", "text": "exec", "isCorrect": false },
      { "id": "option_3", "text": "eval", "isCorrect": true },
      { "id": "option_4", "text": "execute", "isCorrect": false }
    ],
    "hint": "This method is often discouraged for security reasons.",
    "answerDescription": "`eval` executes a string as Ruby code, which can be risky due to potential security vulnerabilities."
  },
  {
    "id": "ruby_1997",
    "question": "Which method in Ruby is used to remove leading and trailing whitespace from a string?",
    "options": [
      { "id": "option_1", "text": "chomp", "isCorrect": false },
      { "id": "option_2", "text": "strip!", "isCorrect": false },
      { "id": "option_3", "text": "strip", "isCorrect": true },
      { "id": "option_4", "text": "rstrip", "isCorrect": false }
    ],
    "hint": "This method removes both leading and trailing whitespace.",
    "answerDescription": "`strip` removes whitespace from both ends of a string, whereas `chomp` only removes a newline."
  },
  {
    "id": "ruby_1998",
    "question": "How do you define a class method in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using `def self.method_name`", "isCorrect": false },
      { "id": "option_2", "text": "Using `def @method_name`", "isCorrect": false },
      { "id": "option_3", "text": "Using `def ClassName.method_name`", "isCorrect": true },
      { "id": "option_4", "text": "Using `def @@method_name`", "isCorrect": false }
    ],
    "hint": "A class method belongs to the class itself, not instances.",
    "answerDescription": "A class method is defined using `def ClassName.method_name`, making it callable on the class itself."
  },
  {
    "id": "ruby_1999",
    "question": "Which data structure in Ruby maintains key-value pairs?",
    "options": [
      { "id": "option_1", "text": "Array", "isCorrect": false },
      { "id": "option_2", "text": "Set", "isCorrect": false },
      { "id": "option_3", "text": "Hash", "isCorrect": true },
      { "id": "option_4", "text": "Tuple", "isCorrect": false }
    ],
    "hint": "This data structure is also known as a dictionary or map in other languages.",
    "answerDescription": "A `Hash` in Ruby stores key-value pairs and allows efficient lookup by key."
  },
  {
    "id": "ruby_2000",
    "question": "Which method is used to check if an array includes a specific element?",
    "options": [
      { "id": "option_1", "text": "contains?", "isCorrect": false },
      { "id": "option_2", "text": "has?", "isCorrect": false },
      { "id": "option_3", "text": "include?", "isCorrect": false },
      { "id": "option_4", "text": "member?", "isCorrect": true }
    ],
    "hint": "This method is a synonym for `include?`.",
    "answerDescription": "In Ruby, `member?` and `include?` both check if an element exists in an array."
  },
  {
    "id": "ruby_2001",
    "question": "How do you create a symbol in Ruby?",
    "options": [
      { "id": "option_1", "text": "Using double quotes", "isCorrect": false },
      { "id": "option_2", "text": "Using curly braces", "isCorrect": false },
      { "id": "option_3", "text": "Using brackets", "isCorrect": false },
      { "id": "option_4", "text": "Using a colon before the name", "isCorrect": true }
    ],
    "hint": "Symbols are prefixed with a special character.",
    "answerDescription": "A symbol in Ruby is created using a colon, e.g., `:symbol_name`."
  },
  {
    "id": "ruby_2002",
    "question": "Which method removes the last element from an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "shift", "isCorrect": false },
      { "id": "option_2", "text": "delete_at", "isCorrect": false },
      { "id": "option_3", "text": "remove_last", "isCorrect": false },
      { "id": "option_4", "text": "pop", "isCorrect": true }
    ],
    "hint": "This method returns and removes the last item of an array.",
    "answerDescription": "`pop` removes the last element from an array and returns it."
  },
  {
    "id": "ruby_2003",
    "question": "Which method is used to check if an array includes a specific value?",
    "options": [
      { "id": "option_1", "text": "include?", "isCorrect": true },
      { "id": "option_2", "text": "exists?", "isCorrect": false },
      { "id": "option_3", "text": "has?", "isCorrect": false },
      { "id": "option_4", "text": "contains?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the array contains the specified element.",
    "answerDescription": "The `include?` method checks if an array contains a specific value."
  },
  {
    "id": "ruby_2004",
    "question": "Which method converts a hash into an array of key-value pairs?",
    "options": [
      { "id": "option_1", "text": "to_list", "isCorrect": false },
      { "id": "option_2", "text": "entries", "isCorrect": false },
      { "id": "option_3", "text": "map_pairs", "isCorrect": false },
      { "id": "option_4", "text": "to_a", "isCorrect": true }
    ],
    "hint": "This method transforms a hash into an array.",
    "answerDescription": "The `to_a` method converts a hash into an array of key-value pairs."
  },
  {
    "id": "ruby_2005",
    "question": "Which method reverses the order of elements in an array?",
    "options": [
      { "id": "option_1", "text": "flip", "isCorrect": false },
      { "id": "option_2", "text": "invert", "isCorrect": false },
      { "id": "option_3", "text": "reverse_order", "isCorrect": false },
      { "id": "option_4", "text": "reverse", "isCorrect": true }
    ],
    "hint": "This method returns a new array with elements in the opposite order.",
    "answerDescription": "The `reverse` method reverses the order of elements in an array."
  },
  {
    "id": "ruby_2006",
    "question": "Which method is used to remove duplicate elements from an array?",
    "options": [
      { "id": "option_1", "text": "delete_dupes", "isCorrect": false },
      { "id": "option_2", "text": "unique", "isCorrect": false },
      { "id": "option_3", "text": "compact", "isCorrect": false },
      { "id": "option_4", "text": "uniq", "isCorrect": true }
    ],
    "hint": "This method removes repeated values from an array.",
    "answerDescription": "The `uniq` method removes duplicate elements from an array."
  },
  {
    "id": "ruby_2007",
    "question": "Which method returns an array of keys from a hash?",
    "options": [
      { "id": "option_1", "text": "key_list", "isCorrect": false },
      { "id": "option_2", "text": "keys_array", "isCorrect": false },
      { "id": "option_3", "text": "all_keys", "isCorrect": false },
      { "id": "option_4", "text": "keys", "isCorrect": true }
    ],
    "hint": "This method returns only the keys from a hash.",
    "answerDescription": "The `keys` method returns an array of all the keys in a hash."
  },
  {
    "id": "ruby_2008",
    "question": "Which method is used to sort an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "arrange", "isCorrect": false },
      { "id": "option_2", "text": "order", "isCorrect": false },
      { "id": "option_3", "text": "sequence", "isCorrect": false },
      { "id": "option_4", "text": "sort", "isCorrect": true }
    ],
    "hint": "This method organizes an array's elements in ascending order by default.",
    "answerDescription": "The `sort` method orders an array in ascending order unless specified otherwise."
  },
  {
    "id": "ruby_2009",
    "question": "Which method returns an array containing the values of a hash?",
    "options": [
      { "id": "option_1", "text": "get_values", "isCorrect": false },
      { "id": "option_2", "text": "all_values", "isCorrect": false },
      { "id": "option_3", "text": "values_list", "isCorrect": false },
      { "id": "option_4", "text": "values", "isCorrect": true }
    ],
    "hint": "This method returns only the values from a hash.",
    "answerDescription": "The `values` method returns an array of all values in a hash."
  },
  {
    "id": "ruby_2010",
    "question": "Which method removes and returns the first element from an array?",
    "options": [
      { "id": "option_1", "text": "shift", "isCorrect": true },
      { "id": "option_2", "text": "pop", "isCorrect": false },
      { "id": "option_3", "text": "delete_first", "isCorrect": false },
      { "id": "option_4", "text": "remove", "isCorrect": false }
    ],
    "hint": "This method works similarly to `pop`, but from the beginning.",
    "answerDescription": "`shift` removes the first element from an array and returns it."
  },
  {
    "id": "ruby_2011",
    "question": "Which keyword is used to define a function in Ruby?",
    "options": [
      { "id": "option_1", "text": "def", "isCorrect": true },
      { "id": "option_2", "text": "function", "isCorrect": false },
      { "id": "option_3", "text": "method", "isCorrect": false },
      { "id": "option_4", "text": "define", "isCorrect": false }
    ],
    "hint": "This keyword starts a method definition in Ruby.",
    "answerDescription": "In Ruby, functions (methods) are defined using the `def` keyword."
  },
  {
    "id": "ruby_2012",
    "question": "Which method checks if an object is nil?",
    "options": [
      { "id": "option_1", "text": "nil?", "isCorrect": true },
      { "id": "option_2", "text": "empty?", "isCorrect": false },
      { "id": "option_3", "text": "blank?", "isCorrect": false },
      { "id": "option_4", "text": "void?", "isCorrect": false }
    ],
    "hint": "This method is commonly used to check for `nil` values.",
    "answerDescription": "`nil?` returns `true` if the object is `nil`, otherwise `false`."
  },
  {
    "id": "ruby_2013",
    "question": "Which method returns the number of characters in a string?",
    "options": [
      { "id": "option_1", "text": "length", "isCorrect": true },
      { "id": "option_2", "text": "size", "isCorrect": false },
      { "id": "option_3", "text": "count_chars", "isCorrect": false },
      { "id": "option_4", "text": "char_count", "isCorrect": false }
    ],
    "hint": "This method is used to get the character count in a string.",
    "answerDescription": "`length` returns the number of characters in a string."
  },
  {
    "id": "ruby_2014",
    "question": "Which method capitalizes the first letter of a string?",
    "options": [
      { "id": "option_1", "text": "capitalize", "isCorrect": true },
      { "id": "option_2", "text": "titlecase", "isCorrect": false },
      { "id": "option_3", "text": "uppercase_first", "isCorrect": false },
      { "id": "option_4", "text": "upcase_first", "isCorrect": false }
    ],
    "hint": "This method capitalizes only the first letter of a string.",
    "answerDescription": "`capitalize` changes only the first character to uppercase."
  },
  {
    "id": "ruby_2015",
    "question": "Which method returns an array of characters from a string?",
    "options": [
      { "id": "option_1", "text": "chars", "isCorrect": true },
      { "id": "option_2", "text": "split_chars", "isCorrect": false },
      { "id": "option_3", "text": "letters", "isCorrect": false },
      { "id": "option_4", "text": "to_a", "isCorrect": false }
    ],
    "hint": "This method converts a string into an array of individual characters.",
    "answerDescription": "`chars` splits a string into an array of characters."
  },
  {
    "id": "ruby_2016",
    "question": "Which method converts an array into a string with a given separator?",
    "options": [
      { "id": "option_1", "text": "join", "isCorrect": true },
      { "id": "option_2", "text": "merge", "isCorrect": false },
      { "id": "option_3", "text": "concat", "isCorrect": false },
      { "id": "option_4", "text": "implode", "isCorrect": false }
    ],
    "hint": "This method is useful for formatting output from an array.",
    "answerDescription": "The `join` method converts an array into a string using a given separator."
  },
  {
    "id": "ruby_2017",
    "question": "Which method returns a reversed version of an array?",
    "options": [
      { "id": "option_1", "text": "reverse", "isCorrect": true },
      { "id": "option_2", "text": "invert", "isCorrect": false },
      { "id": "option_3", "text": "flip", "isCorrect": false },
      { "id": "option_4", "text": "backwards", "isCorrect": false }
    ],
    "hint": "This method returns a reversed copy of an array.",
    "answerDescription": "`reverse` returns a new array with elements in the opposite order."
  },
  {
    "id": "ruby_2018",
    "question": "Which method returns a string in lowercase?",
    "options": [
      { "id": "option_1", "text": "downcase", "isCorrect": true },
      { "id": "option_2", "text": "lower", "isCorrect": false },
      { "id": "option_3", "text": "to_lower", "isCorrect": false },
      { "id": "option_4", "text": "small_case", "isCorrect": false }
    ],
    "hint": "This method converts all uppercase letters to lowercase.",
    "answerDescription": "`downcase` transforms a string into all lowercase letters."
  },
  {
    "id": "ruby_2019",
    "question": "Which method returns a string with leading and trailing whitespace removed?",
    "options": [
      { "id": "option_1", "text": "strip", "isCorrect": true },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "chop", "isCorrect": false },
      { "id": "option_4", "text": "clean", "isCorrect": false }
    ],
    "hint": "This method removes unnecessary whitespace from both ends of a string.",
    "answerDescription": "`strip` removes leading and trailing whitespace in a string."
  },
  {
    "id": "ruby_2020",
    "question": "Which method converts a string to an integer?",
    "options": [
      { "id": "option_1", "text": "to_f", "isCorrect": false },
      { "id": "option_2", "text": "to_i", "isCorrect": true },
      { "id": "option_3", "text": "to_int", "isCorrect": false },
      { "id": "option_4", "text": "parseInt", "isCorrect": false }
    ],
    "hint": "This method is used to change a string to an integer.",
    "answerDescription": "`to_i` converts a string into an integer in Ruby."
  },
  {
    "id": "ruby_2021",
    "question": "Which loop in Ruby runs at least once even if the condition is false?",
    "options": [
      { "id": "option_1", "text": "for loop", "isCorrect": false },
      { "id": "option_2", "text": "do-while loop", "isCorrect": true },
      { "id": "option_3", "text": "while loop", "isCorrect": false },
      { "id": "option_4", "text": "until loop", "isCorrect": false }
    ],
    "hint": "This loop guarantees at least one execution before checking the condition.",
    "answerDescription": "The `do-while` loop executes the block once before checking the condition."
  },
  {
    "id": "ruby_2022",
    "question": "Which method returns an array of keys from a hash?",
    "options": [
      { "id": "option_1", "text": "values", "isCorrect": false },
      { "id": "option_2", "text": "keys", "isCorrect": true },
      { "id": "option_3", "text": "hash_keys", "isCorrect": false },
      { "id": "option_4", "text": "get_keys", "isCorrect": false }
    ],
    "hint": "This method extracts only the keys from a hash.",
    "answerDescription": "`keys` returns an array containing all keys from the hash."
  },
  {
    "id": "ruby_2023",
    "question": "Which symbol is used for string interpolation in Ruby?",
    "options": [
      { "id": "option_1", "text": "#", "isCorrect": false },
      { "id": "option_2", "text": "#{ }", "isCorrect": true },
      { "id": "option_3", "text": "$()", "isCorrect": false },
      { "id": "option_4", "text": "@{}", "isCorrect": false }
    ],
    "hint": "It is enclosed within double quotes and includes curly braces.",
    "answerDescription": "`#{ }` is used for embedding expressions inside a string."
  },
  {
    "id": "ruby_2024",
    "question": "Which method removes trailing newline characters from a string?",
    "options": [
      { "id": "option_1", "text": "strip", "isCorrect": false },
      { "id": "option_2", "text": "chomp", "isCorrect": true },
      { "id": "option_3", "text": "trim", "isCorrect": false },
      { "id": "option_4", "text": "rstrip", "isCorrect": false }
    ],
    "hint": "This method removes only newline characters, unlike `strip`.",
    "answerDescription": "`chomp` removes the trailing newline character from a string."
  },
  {
    "id": "ruby_2025",
    "question": "Which operator is used to check if a value exists in an array?",
    "options": [
      { "id": "option_1", "text": "&&", "isCorrect": false },
      { "id": "option_2", "text": "include?", "isCorrect": true },
      { "id": "option_3", "text": "exists?", "isCorrect": false },
      { "id": "option_4", "text": "contains?", "isCorrect": false }
    ],
    "hint": "This method returns true if an element is present in an array.",
    "answerDescription": "`include?` checks if an array contains a specific element."
  },
  {
    "id": "ruby_2026",
    "question": "Which keyword is used to return a value from a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "yield", "isCorrect": false },
      { "id": "option_2", "text": "return", "isCorrect": true },
      { "id": "option_3", "text": "exit", "isCorrect": false },
      { "id": "option_4", "text": "stop", "isCorrect": false }
    ],
    "hint": "This keyword explicitly returns a value from a method.",
    "answerDescription": "The `return` keyword is used to return a value from a method."
  },
  {
    "id": "ruby_2027",
    "question": "Which method converts an array into a string?",
    "options": [
      { "id": "option_1", "text": "concat", "isCorrect": false },
      { "id": "option_2", "text": "join", "isCorrect": true },
      { "id": "option_3", "text": "combine", "isCorrect": false },
      { "id": "option_4", "text": "merge", "isCorrect": false }
    ],
    "hint": "This method joins elements of an array into a string.",
    "answerDescription": "`join` converts an array into a string, with an optional separator."
  },
  {
    "id": "ruby_2028",
    "question": "Which method is used to iterate over each element in an array?",
    "options": [
      { "id": "option_1", "text": "map", "isCorrect": false },
      { "id": "option_2", "text": "each", "isCorrect": true },
      { "id": "option_3", "text": "loop", "isCorrect": false },
      { "id": "option_4", "text": "iterate", "isCorrect": false }
    ],
    "hint": "This method applies a block of code to each element in an array.",
    "answerDescription": "`each` iterates through an array, executing a block for each element."
  },
  {
    "id": "ruby_2029",
    "question": "Which method removes nil values from an array?",
    "options": [
      { "id": "option_1", "text": "delete", "isCorrect": false },
      { "id": "option_2", "text": "compact", "isCorrect": true },
      { "id": "option_3", "text": "reject", "isCorrect": false },
      { "id": "option_4", "text": "filter_nil", "isCorrect": false }
    ],
    "hint": "This method returns a new array without `nil` values.",
    "answerDescription": "`compact` removes `nil` values from an array and returns a new array."
  },
  {
    "id": "ruby_2030",
    "question": "Which method is used to find the length of an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "count", "isCorrect": false },
      { "id": "option_2", "text": "size?", "isCorrect": false },
      { "id": "option_3", "text": "length", "isCorrect": true },
      { "id": "option_4", "text": "measure", "isCorrect": false }
    ],
    "hint": "This method is commonly used to get the number of elements in an array.",
    "answerDescription": "The `length` method returns the number of elements in an array."
  },
  {
    "id": "ruby_2031",
    "question": "Which method removes duplicate elements from an array?",
    "options": [
      { "id": "option_1", "text": "delete_duplicates", "isCorrect": false },
      { "id": "option_2", "text": "remove_dup", "isCorrect": false },
      { "id": "option_3", "text": "uniq", "isCorrect": true },
      { "id": "option_4", "text": "distinct", "isCorrect": false }
    ],
    "hint": "This method returns a new array with unique values.",
    "answerDescription": "The `uniq` method removes duplicate elements from an array."
  },
  {
    "id": "ruby_2032",
    "question": "Which method is used to check if a string is empty?",
    "options": [
      { "id": "option_1", "text": "nil?", "isCorrect": false },
      { "id": "option_2", "text": "blank?", "isCorrect": false },
      { "id": "option_3", "text": "empty?", "isCorrect": true },
      { "id": "option_4", "text": "clear?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the string has no characters.",
    "answerDescription": "The `empty?` method checks if a string has zero characters."
  },
  {
    "id": "ruby_2033",
    "question": "Which keyword is used to define a block in Ruby?",
    "options": [
      { "id": "option_1", "text": "function", "isCorrect": false },
      { "id": "option_2", "text": "begin", "isCorrect": false },
      { "id": "option_3", "text": "do", "isCorrect": true },
      { "id": "option_4", "text": "block", "isCorrect": false }
    ],
    "hint": "It is often used in conjunction with `each` or `times`.",
    "answerDescription": "The `do` keyword is used to define a block in Ruby."
  },
  {
    "id": "ruby_2034",
    "question": "Which method converts a symbol to a string?",
    "options": [
      { "id": "option_1", "text": "to_sym", "isCorrect": false },
      { "id": "option_2", "text": "convert", "isCorrect": false },
      { "id": "option_3", "text": "to_s", "isCorrect": true },
      { "id": "option_4", "text": "stringify", "isCorrect": false }
    ],
    "hint": "This method is also used to convert numbers to strings.",
    "answerDescription": "The `to_s` method converts a symbol to a string."
  },
  {
    "id": "ruby_2035",
    "question": "Which method adds an element to the end of an array?",
    "options": [
      { "id": "option_1", "text": "prepend", "isCorrect": false },
      { "id": "option_2", "text": "push_to_end", "isCorrect": false },
      { "id": "option_3", "text": "push", "isCorrect": true },
      { "id": "option_4", "text": "insert", "isCorrect": false }
    ],
    "hint": "This method appends a value to the end of an array.",
    "answerDescription": "The `push` method adds an element to the end of an array."
  },
  {
    "id": "ruby_2036",
    "question": "Which method is used to iterate over an array and apply a block of code?",
    "options": [
      { "id": "option_1", "text": "each", "isCorrect": true },
      { "id": "option_2", "text": "loop", "isCorrect": false },
      { "id": "option_3", "text": "repeat", "isCorrect": false },
      { "id": "option_4", "text": "cycle", "isCorrect": false }
    ],
    "hint": "This method is used to traverse each element in an array.",
    "answerDescription": "The `each` method iterates over an array and applies a block of code to each element."
  },
  {
    "id": "ruby_2037",
    "question": "Which method returns a new array sorted in ascending order?",
    "options": [
      { "id": "option_1", "text": "sort_asc", "isCorrect": false },
      { "id": "option_2", "text": "order", "isCorrect": false },
      { "id": "option_3", "text": "sort", "isCorrect": true },
      { "id": "option_4", "text": "arrange", "isCorrect": false }
    ],
    "hint": "This method organizes elements from smallest to largest.",
    "answerDescription": "The `sort` method returns a new array sorted in ascending order."
  },
  {
    "id": "ruby_2038",
    "question": "Which method removes leading and trailing whitespace from a string?",
    "options": [
      { "id": "option_1", "text": "strip_whitespace", "isCorrect": false },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "strip", "isCorrect": true },
      { "id": "option_4", "text": "clean", "isCorrect": false }
    ],
    "hint": "This method is useful for cleaning up input data.",
    "answerDescription": "The `strip` method removes whitespace from both ends of a string."
  },
  {
    "id": "ruby_2039",
    "question": "Which method checks if a number is even?",
    "options": [
      { "id": "option_1", "text": "is_even", "isCorrect": false },
      { "id": "option_2", "text": "even_check", "isCorrect": false },
      { "id": "option_3", "text": "even?", "isCorrect": true },
      { "id": "option_4", "text": "mod2", "isCorrect": false }
    ],
    "hint": "This method returns true if a number is divisible by 2.",
    "answerDescription": "The `even?` method returns true if the number is even."
  },
  {
    "id": "ruby_2040",
    "question": "Which method returns the first element of an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "begin", "isCorrect": false },
      { "id": "option_2", "text": "start", "isCorrect": false },
      { "id": "option_3", "text": "initial", "isCorrect": false },
      { "id": "option_4", "text": "first", "isCorrect": true }
    ],
    "hint": "This method returns the first element in an array.",
    "answerDescription": "The `first` method retrieves the first element of an array."
  },
  {
    "id": "ruby_2041",
    "question": "Which method converts an array into a string?",
    "options": [
      { "id": "option_1", "text": "stringify", "isCorrect": false },
      { "id": "option_2", "text": "array_to_string", "isCorrect": false },
      { "id": "option_3", "text": "joiner", "isCorrect": false },
      { "id": "option_4", "text": "join", "isCorrect": true }
    ],
    "hint": "This method concatenates elements into a single string.",
    "answerDescription": "The `join` method converts an array into a string."
  },
  {
    "id": "ruby_2042",
    "question": "Which method is used to check if a hash contains a specific key?",
    "options": [
      { "id": "option_1", "text": "has?", "isCorrect": false },
      { "id": "option_2", "text": "find_key", "isCorrect": false },
      { "id": "option_3", "text": "exists?", "isCorrect": false },
      { "id": "option_4", "text": "key?", "isCorrect": true }
    ],
    "hint": "This method returns `true` if the given key exists in the hash.",
    "answerDescription": "The `key?` method checks if a hash contains a specific key."
  },
  {
    "id": "ruby_2043",
    "question": "Which method returns the number of key-value pairs in a hash?",
    "options": [
      { "id": "option_1", "text": "pairs_count", "isCorrect": false },
      { "id": "option_2", "text": "size_of", "isCorrect": false },
      { "id": "option_3", "text": "entries", "isCorrect": false },
      { "id": "option_4", "text": "size", "isCorrect": true }
    ],
    "hint": "This method gives the total number of elements in a hash.",
    "answerDescription": "The `size` method returns the number of key-value pairs in a hash."
  },
  {
    "id": "ruby_2044",
    "question": "Which method reverses the characters in a string?",
    "options": [
      { "id": "option_1", "text": "flip", "isCorrect": false },
      { "id": "option_2", "text": "invert", "isCorrect": false },
      { "id": "option_3", "text": "reverse_string", "isCorrect": false },
      { "id": "option_4", "text": "reverse", "isCorrect": true }
    ],
    "hint": "This method returns the string in backward order.",
    "answerDescription": "The `reverse` method reverses the characters in a string."
  },
  {
    "id": "ruby_2045",
    "question": "Which method is used to round a float number to the nearest integer?",
    "options": [
      { "id": "option_1", "text": "ceil", "isCorrect": false },
      { "id": "option_2", "text": "round", "isCorrect": true },
      { "id": "option_3", "text": "floor", "isCorrect": false },
      { "id": "option_4", "text": "truncate", "isCorrect": false }
    ],
    "hint": "This method rounds a float number based on standard rounding rules.",
    "answerDescription": "The `round` method rounds a floating-point number to the nearest integer."
  },
  {
    "id": "ruby_2046",
    "question": "Which method checks if a string includes a specific substring?",
    "options": [
      { "id": "option_1", "text": "has_substring?", "isCorrect": false },
      { "id": "option_2", "text": "contains?", "isCorrect": false },
      { "id": "option_3", "text": "find_in", "isCorrect": false },
      { "id": "option_4", "text": "include?", "isCorrect": true }
    ],
    "hint": "This method returns `true` if the string contains the given substring.",
    "answerDescription": "The `include?` method checks if a string includes a specific substring."
  },
  {
    "id": "ruby_2047",
    "question": "Which method converts a string to lowercase?",
    "options": [
      { "id": "option_1", "text": "to_lower", "isCorrect": false },
      { "id": "option_2", "text": "lower_case", "isCorrect": false },
      { "id": "option_3", "text": "smallify", "isCorrect": false },
      { "id": "option_4", "text": "downcase", "isCorrect": true }
    ],
    "hint": "This method transforms all uppercase letters into lowercase.",
    "answerDescription": "The `downcase` method converts a string to lowercase."
  },
  {
    "id": "ruby_2048",
    "question": "Which method checks if a given number is even?",
    "options": [
      { "id": "option_1", "text": "is_even?", "isCorrect": false },
      { "id": "option_2", "text": "check_even", "isCorrect": false },
      { "id": "option_3", "text": "div_by_two?", "isCorrect": false },
      { "id": "option_4", "text": "even?", "isCorrect": true }
    ],
    "hint": "This method returns `true` for numbers divisible by 2.",
    "answerDescription": "The `even?` method checks if a given number is even."
  },
  {
    "id": "ruby_2049",
    "question": "Which method removes `nil` values from an array?",
    "options": [
      { "id": "option_1", "text": "compactify", "isCorrect": false },
      { "id": "option_2", "text": "remove_nil", "isCorrect": false },
      { "id": "option_3", "text": "clean", "isCorrect": false },
      { "id": "option_4", "text": "compact", "isCorrect": true }
    ],
    "hint": "This method returns a new array without `nil` values.",
    "answerDescription": "The `compact` method removes `nil` values from an array."
  },
  {
    "id": "ruby_2050",
    "question": "Which method returns `true` if all elements in an array satisfy a given condition?",
    "options": [
      { "id": "option_1", "text": "match_all?", "isCorrect": false },
      { "id": "option_2", "text": "each_satisfy?", "isCorrect": false },
      { "id": "option_3", "text": "every?", "isCorrect": false },
      { "id": "option_4", "text": "all?", "isCorrect": true }
    ],
    "hint": "This method checks if all elements meet a specified condition.",
    "answerDescription": "The `all?` method returns `true` if all elements in an array satisfy a given condition."
  },
  {
    "id": "ruby_2051",
    "question": "Which method converts a string into an integer?",
    "options": [
      { "id": "option_1", "text": "to_i", "isCorrect": true },
      { "id": "option_2", "text": "integerize", "isCorrect": false },
      { "id": "option_3", "text": "convert_int", "isCorrect": false },
      { "id": "option_4", "text": "parse_int", "isCorrect": false }
    ],
    "hint": "This method transforms a string representation of a number into an integer.",
    "answerDescription": "The `to_i` method converts a string into an integer."
  },
  {
    "id": "ruby_2052",
    "question": "Which method removes leading and trailing whitespace from a string?",
    "options": [
      { "id": "option_1", "text": "strip", "isCorrect": true },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "chop_whitespace", "isCorrect": false },
      { "id": "option_4", "text": "clean", "isCorrect": false }
    ],
    "hint": "This method eliminates unnecessary spaces around a string.",
    "answerDescription": "The `strip` method removes leading and trailing whitespace from a string."
  },
  {
    "id": "ruby_2053",
    "question": "Which method returns a new array with elements sorted?",
    "options": [
      { "id": "option_1", "text": "sort", "isCorrect": true },
      { "id": "option_2", "text": "order", "isCorrect": false },
      { "id": "option_3", "text": "arrange", "isCorrect": false },
      { "id": "option_4", "text": "sequence", "isCorrect": false }
    ],
    "hint": "This method arranges elements in ascending order by default.",
    "answerDescription": "The `sort` method returns a new array with elements sorted."
  },
  {
    "id": "ruby_2054",
    "question": "Which method returns an array containing the keys of a hash?",
    "options": [
      { "id": "option_1", "text": "keys", "isCorrect": true },
      { "id": "option_2", "text": "get_keys", "isCorrect": false },
      { "id": "option_3", "text": "list_keys", "isCorrect": false },
      { "id": "option_4", "text": "hash_keys", "isCorrect": false }
    ],
    "hint": "This method extracts only the keys from a hash.",
    "answerDescription": "The `keys` method returns an array containing the keys of a hash."
  },
  {
    "id": "ruby_2055",
    "question": "Which method converts an object to a string?",
    "options": [
      { "id": "option_1", "text": "to_s", "isCorrect": true },
      { "id": "option_2", "text": "stringify", "isCorrect": false },
      { "id": "option_3", "text": "convert_str", "isCorrect": false },
      { "id": "option_4", "text": "to_string", "isCorrect": false }
    ],
    "hint": "This method is commonly used for printing objects.",
    "answerDescription": "The `to_s` method converts an object to a string."
  },
  {
    "id": "ruby_2056",
    "question": "Which method returns an array with duplicate values removed?",
    "options": [
      { "id": "option_1", "text": "uniq", "isCorrect": true },
      { "id": "option_2", "text": "distinct", "isCorrect": false },
      { "id": "option_3", "text": "unique", "isCorrect": false },
      { "id": "option_4", "text": "deduplicate", "isCorrect": false }
    ],
    "hint": "This method removes repeating elements while keeping order.",
    "answerDescription": "The `uniq` method returns an array with duplicate values removed."
  },
  {
    "id": "ruby_2057",
    "question": "Which method returns the index of the first occurrence of a value in an array?",
    "options": [
      { "id": "option_1", "text": "index", "isCorrect": true },
      { "id": "option_2", "text": "find_position", "isCorrect": false },
      { "id": "option_3", "text": "search", "isCorrect": false },
      { "id": "option_4", "text": "locate", "isCorrect": false }
    ],
    "hint": "This method helps find where an element is first located in an array.",
    "answerDescription": "The `index` method returns the index of the first occurrence of a value in an array."
  },
  {
    "id": "ruby_2058",
    "question": "Which method adds an element to the end of an array?",
    "options": [
      { "id": "option_1", "text": "push", "isCorrect": true },
      { "id": "option_2", "text": "append", "isCorrect": false },
      { "id": "option_3", "text": "add", "isCorrect": false },
      { "id": "option_4", "text": "insert_last", "isCorrect": false }
    ],
    "hint": "This method appends a new element at the end of an array.",
    "answerDescription": "The `push` method adds an element to the end of an array."
  },
  {
    "id": "ruby_2059",
    "question": "Which method returns the number of characters in a string?",
    "options": [
      { "id": "option_1", "text": "length", "isCorrect": true },
      { "id": "option_2", "text": "size_of", "isCorrect": false },
      { "id": "option_3", "text": "count_chars", "isCorrect": false },
      { "id": "option_4", "text": "string_size", "isCorrect": false }
    ],
    "hint": "This method counts the number of characters in a string.",
    "answerDescription": "The `length` method returns the number of characters in a string."
  },
  {
    "id": "ruby_2060",
    "question": "Which method removes the last element from an array?",
    "options": [
      { "id": "option_1", "text": "remove_last", "isCorrect": false },
      { "id": "option_2", "text": "pop", "isCorrect": true },
      { "id": "option_3", "text": "delete_end", "isCorrect": false },
      { "id": "option_4", "text": "trim", "isCorrect": false }
    ],
    "hint": "This method removes and returns the last element of an array.",
    "answerDescription": "The `pop` method removes the last element from an array."
  },
  {
    "id": "ruby_2061",
    "question": "Which method in Ruby returns an array of keys from a hash?",
    "options": [
      { "id": "option_1", "text": "get_keys", "isCorrect": false },
      { "id": "option_2", "text": "keys_list", "isCorrect": false },
      { "id": "option_3", "text": "fetch_keys", "isCorrect": false },
      { "id": "option_4", "text": "keys", "isCorrect": true }
    ],
    "hint": "This method extracts and returns all keys from a hash.",
    "answerDescription": "The `keys` method returns an array of keys in a hash."
  },
  {
    "id": "ruby_2062",
    "question": "Which method finds the minimum value in an array?",
    "options": [
      { "id": "option_1", "text": "smallest", "isCorrect": false },
      { "id": "option_2", "text": "lowest", "isCorrect": false },
      { "id": "option_3", "text": "least", "isCorrect": false },
      { "id": "option_4", "text": "min", "isCorrect": true }
    ],
    "hint": "This method returns the smallest number in an array.",
    "answerDescription": "The `min` method returns the minimum value in an array."
  },
  
  {
    "id": "ruby_2063",
    "question": "Which method checks if a given key exists in a hash?",
    "options": [
      { "id": "option_1", "text": "contains_key?", "isCorrect": false },
      { "id": "option_2", "text": "key?", "isCorrect": true },
      { "id": "option_3", "text": "has?", "isCorrect": false },
      { "id": "option_4", "text": "find_key", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the key exists in the hash.",
    "answerDescription": "The `key?` method checks if a given key exists in a hash."
  },
  {
    "id": "ruby_2064",
    "question": "Which method checks if a given value exists in a hash?",
    "options": [
      { "id": "option_1", "text": "contains_value?", "isCorrect": false },
      { "id": "option_2", "text": "value?", "isCorrect": true },
      { "id": "option_3", "text": "has_value?", "isCorrect": false },
      { "id": "option_4", "text": "find_value", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the value exists in the hash.",
    "answerDescription": "The `value?` method checks if a given value exists in a hash."
  },
  {
    "id": "ruby_2065",
    "question": "Which method joins array elements into a single string?",
    "options": [
      { "id": "option_1", "text": "combine", "isCorrect": false },
      { "id": "option_2", "text": "join", "isCorrect": true },
      { "id": "option_3", "text": "merge", "isCorrect": false },
      { "id": "option_4", "text": "concat", "isCorrect": false }
    ],
    "hint": "This method concatenates array elements into a string.",
    "answerDescription": "The `join` method joins array elements into a single string."
  },
  {
    "id": "ruby_2066",
    "question": "Which method returns a string in uppercase?",
    "options": [
      { "id": "option_1", "text": "upcase!", "isCorrect": false },
      { "id": "option_2", "text": "upcase", "isCorrect": true },
      { "id": "option_3", "text": "uppercase", "isCorrect": false },
      { "id": "option_4", "text": "capitalize_all", "isCorrect": false }
    ],
    "hint": "This method transforms all letters to uppercase.",
    "answerDescription": "The `upcase` method returns a string in uppercase."
  },
  {
    "id": "ruby_2067",
    "question": "Which method checks if a string includes a certain substring?",
    "options": [
      { "id": "option_1", "text": "contains?", "isCorrect": false },
      { "id": "option_2", "text": "include?", "isCorrect": true },
      { "id": "option_3", "text": "has_substring?", "isCorrect": false },
      { "id": "option_4", "text": "find?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the substring is found within the string.",
    "answerDescription": "The `include?` method checks if a string includes a certain substring."
  },
  {
    "id": "ruby_2068",
    "question": "Which method returns a new string with all occurrences of a substring replaced?",
    "options": [
      { "id": "option_1", "text": "switch", "isCorrect": false },
      { "id": "option_2", "text": "modify", "isCorrect": false },
      { "id": "option_3", "text": "gsub", "isCorrect": true },
      { "id": "option_4", "text": "replace", "isCorrect": false }
    ],
    "hint": "This method replaces all occurrences of a pattern in a string.",
    "answerDescription": "The `gsub` method replaces all occurrences of a substring in a string."
  },
  {
    "id": "ruby_2069",
    "question": "Which method returns a new array with elements reversed?",
    "options": [
      { "id": "option_1", "text": "flip", "isCorrect": false },
      { "id": "option_2", "text": "reverse", "isCorrect": true },
      { "id": "option_3", "text": "invert", "isCorrect": false },
      { "id": "option_4", "text": "swap", "isCorrect": false }
    ],
    "hint": "This method rearranges array elements in reverse order.",
    "answerDescription": "The `reverse` method returns a new array with elements reversed."
  },
  {
    "id": "ruby_2070",
    "question": "Which method adds an element to the end of an array?",
    "options": [
      { "id": "option_1", "text": "push_last", "isCorrect": false },
      { "id": "option_2", "text": "append", "isCorrect": false },
      { "id": "option_3", "text": "push", "isCorrect": true },
      { "id": "option_4", "text": "add_to_end", "isCorrect": false }
    ],
    "hint": "This method appends an element to the array.",
    "answerDescription": "The `push` method adds an element to the end of an array."
  },
  {
    "id": "ruby_2071",
    "question": "Which method is used to reverse the order of elements in an array?",
    "options": [
      { "id": "option_1", "text": "invert", "isCorrect": false },
      { "id": "option_2", "text": "reverse", "isCorrect": true },
      { "id": "option_3", "text": "flip", "isCorrect": false },
      { "id": "option_4", "text": "swap", "isCorrect": false }
    ],
    "hint": "This method returns an array with elements in reverse order.",
    "answerDescription": "The `reverse` method reverses the order of elements in an array."
  },
  {
    "id": "ruby_2072",
    "question": "Which method checks if an array includes a specific value?",
    "options": [
      { "id": "option_1", "text": "has?", "isCorrect": false },
      { "id": "option_2", "text": "contains?", "isCorrect": false },
      { "id": "option_3", "text": "include?", "isCorrect": true },
      { "id": "option_4", "text": "exists?", "isCorrect": false }
    ],
    "hint": "This method returns true if the array contains the given value.",
    "answerDescription": "The `include?` method checks whether an array includes a specific element."
  },
  {
    "id": "ruby_2073",
    "question": "Which method converts a string into an array of characters?",
    "options": [
      { "id": "option_1", "text": "split_into_chars", "isCorrect": false },
      { "id": "option_2", "text": "explode", "isCorrect": false },
      { "id": "option_3", "text": "chars", "isCorrect": true },
      { "id": "option_4", "text": "arrayify", "isCorrect": false }
    ],
    "hint": "This method returns an array of characters from a string.",
    "answerDescription": "The `chars` method converts a string into an array of characters."
  },
  {
    "id": "ruby_2074",
    "question": "Which method checks if an array includes a certain element?",
    "options": [
      { "id": "option_1", "text": "has_element?", "isCorrect": false },
      { "id": "option_2", "text": "contains?", "isCorrect": false },
      { "id": "option_3", "text": "include?", "isCorrect": true },
      { "id": "option_4", "text": "find_element", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the element exists in the array.",
    "answerDescription": "The `include?` method checks if an array includes a certain element."
  },
  {
    "id": "ruby_2075",
    "question": "Which method converts all characters in a string to uppercase?",
    "options": [
      { "id": "option_1", "text": "uppercase!", "isCorrect": false },
      { "id": "option_2", "text": "capitalize_all", "isCorrect": false },
      { "id": "option_3", "text": "upcase", "isCorrect": true },
      { "id": "option_4", "text": "upper", "isCorrect": false }
    ],
    "hint": "This method transforms all letters in a string to uppercase.",
    "answerDescription": "The `upcase` method converts all characters in a string to uppercase."
  },
  {
    "id": "ruby_2076",
    "question": "Which method converts all characters in a string to lowercase?",
    "options": [
      { "id": "option_1", "text": "lowercase!", "isCorrect": false },
      { "id": "option_2", "text": "downcase_all", "isCorrect": false },
      { "id": "option_3", "text": "downcase", "isCorrect": true },
      { "id": "option_4", "text": "lower", "isCorrect": false }
    ],
    "hint": "This method transforms all letters in a string to lowercase.",
    "answerDescription": "The `downcase` method converts all characters in a string to lowercase."
  },
  {
    "id": "ruby_2077",
    "question": "Which method swaps the case of each letter in a string?",
    "options": [
      { "id": "option_1", "text": "swap_letters", "isCorrect": false },
      { "id": "option_2", "text": "invert_case", "isCorrect": false },
      { "id": "option_3", "text": "swapcase", "isCorrect": true },
      { "id": "option_4", "text": "toggle_case", "isCorrect": false }
    ],
    "hint": "This method converts uppercase letters to lowercase and vice versa.",
    "answerDescription": "The `swapcase` method swaps the case of each letter in a string."
  },
  {
    "id": "ruby_2078",
    "question": "Which method capitalizes the first letter of a string?",
    "options": [
      { "id": "option_1", "text": "capitalize_first", "isCorrect": false },
      { "id": "option_2", "text": "uppercase_first", "isCorrect": false },
      { "id": "option_3", "text": "capitalize", "isCorrect": true },
      { "id": "option_4", "text": "title_case", "isCorrect": false }
    ],
    "hint": "This method makes the first letter uppercase and the rest lowercase.",
    "answerDescription": "The `capitalize` method capitalizes the first letter of a string."
  },
  {
    "id": "ruby_2079",
    "question": "Which method checks if a hash contains a specific key?",
    "options": [
      { "id": "option_1", "text": "find_key?", "isCorrect": false },
      { "id": "option_2", "text": "contains_key?", "isCorrect": false },
      { "id": "option_3", "text": "key?", "isCorrect": true },
      { "id": "option_4", "text": "has?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the key exists in the hash.",
    "answerDescription": "The `key?` method checks if a hash contains a specific key."
  },
  {
    "id": "ruby_2080",
    "question": "Which method returns the last element of an array without modifying it?",
    "options": [
      { "id": "option_1", "text": "tail", "isCorrect": false },
      { "id": "option_2", "text": "end_element", "isCorrect": false },
      { "id": "option_3", "text": "fetch_last", "isCorrect": false },
      { "id": "option_4", "text": "last", "isCorrect": true }
    ],
    "hint": "This method retrieves the last element without removing it.",
    "answerDescription": "The `last` method returns the last element of an array without modifying it."
  },
  {
    "id": "ruby_2081",
    "question": "Which method converts an array into a string with elements separated by a given delimiter?",
    "options": [
      { "id": "option_1", "text": "concat", "isCorrect": false },
      { "id": "option_2", "text": "merge_to_string", "isCorrect": false },
      { "id": "option_3", "text": "combine_text", "isCorrect": false },
      { "id": "option_4", "text": "join", "isCorrect": true }
    ],
    "hint": "This method joins array elements into a single string.",
    "answerDescription": "The `join` method converts an array into a string with elements separated by a given delimiter."
  },
  {
    "id": "ruby_2082",
    "question": "Which method is used to get the number of elements in an array?",
    "options": [
      { "id": "option_1", "text": "count_items", "isCorrect": false },
      { "id": "option_2", "text": "size_of", "isCorrect": false },
      { "id": "option_3", "text": "length", "isCorrect": true },
      { "id": "option_4", "text": "total", "isCorrect": false }
    ],
    "hint": "This method returns the number of elements in an array.",
    "answerDescription": "The `length` method returns the number of elements in an array."
  },
  {
    "id": "ruby_2083",
    "question": "Which method returns a portion of an array based on given index range?",
    "options": [
      { "id": "option_1", "text": "segment", "isCorrect": false },
      { "id": "option_2", "text": "extract", "isCorrect": false },
      { "id": "option_3", "text": "portion", "isCorrect": false },
      { "id": "option_4", "text": "slice", "isCorrect": true }
    ],
    "hint": "This method retrieves part of an array using an index range.",
    "answerDescription": "The `slice` method returns a portion of an array based on a given index range."
  },
  {
    "id": "ruby_2084",
    "question": "Which method reverses the elements of an array?",
    "options": [
      { "id": "option_1", "text": "invert", "isCorrect": false },
      { "id": "option_2", "text": "flip", "isCorrect": false },
      { "id": "option_3", "text": "turn_around", "isCorrect": false },
      { "id": "option_4", "text": "reverse", "isCorrect": true }
    ],
    "hint": "This method flips the order of elements.",
    "answerDescription": "The `reverse` method reverses the elements of an array."
  },
  {
    "id": "ruby_2085",
    "question": "Which method joins elements of an array into a single string?",
    "options": [
      { "id": "option_1", "text": "combine", "isCorrect": false },
      { "id": "option_2", "text": "concat", "isCorrect": false },
      { "id": "option_3", "text": "merge_str", "isCorrect": false },
      { "id": "option_4", "text": "join", "isCorrect": true }
    ],
    "hint": "This method converts an array into a single string.",
    "answerDescription": "The `join` method joins elements of an array into a single string."
  },
  {
    "id": "ruby_2086",
    "question": "Which method is used to check if a hash contains a specific key?",
    "options": [
      { "id": "option_1", "text": "has?", "isCorrect": false },
      { "id": "option_2", "text": "exists?", "isCorrect": false },
      { "id": "option_3", "text": "include?", "isCorrect": false },
      { "id": "option_4", "text": "key?", "isCorrect": true }
    ],
    "hint": "This method returns true if the key exists in the hash.",
    "answerDescription": "The `key?` method checks if a hash contains a specific key."
  },
  {
    "id": "ruby_2087",
    "question": "Which method checks if an array is empty?",
    "options": [
      { "id": "option_1", "text": "null?", "isCorrect": false },
      { "id": "option_2", "text": "zero?", "isCorrect": false },
      { "id": "option_3", "text": "blank?", "isCorrect": false },
      { "id": "option_4", "text": "empty?", "isCorrect": true }
    ],
    "hint": "This method returns true if the array has no elements.",
    "answerDescription": "The `empty?` method checks if an array has zero elements."
  },
  {
    "id": "ruby_2088",
    "question": "Which method removes all elements from an array that meet a specified condition?",
    "options": [
      { "id": "option_1", "text": "delete_selected", "isCorrect": false },
      { "id": "option_2", "text": "remove_by_condition", "isCorrect": false },
      { "id": "option_3", "text": "filter_out", "isCorrect": false },
      { "id": "option_4", "text": "delete_if", "isCorrect": true }
    ],
    "hint": "This method removes elements that match a given block condition.",
    "answerDescription": "The `delete_if` method removes all elements from an array that meet a specified condition."
  },
  {
    "id": "ruby_2089",
    "question": "Which method removes the first occurrence of a specified element from an array?",
    "options": [
      { "id": "option_1", "text": "remove_first", "isCorrect": false },
      { "id": "option_2", "text": "pop_element", "isCorrect": false },
      { "id": "option_3", "text": "erase", "isCorrect": false },
      { "id": "option_4", "text": "delete", "isCorrect": true }
    ],
    "hint": "This method removes the first matching element from the array.",
    "answerDescription": "The `delete` method removes the first occurrence of a specified element from an array."
  },
  {
    "id": "ruby_2090",
    "question": "Which keyword is used to define a method in Ruby?",
    "options": [
      { "id": "option_1", "text": "function", "isCorrect": false },
      { "id": "option_2", "text": "method", "isCorrect": false },
      { "id": "option_3", "text": "define", "isCorrect": false },
      { "id": "option_4", "text": "def", "isCorrect": true }
    ],
    "hint": "This keyword is followed by the method name when defining a method.",
    "answerDescription": "The `def` keyword is used to define a method in Ruby."
  },
  {
    "id": "ruby_2091",
    "question": "Which method adds an element to the end of an array?",
    "options": [
      { "id": "option_1", "text": "insert_last", "isCorrect": false },
      { "id": "option_2", "text": "append", "isCorrect": false },
      { "id": "option_3", "text": "push", "isCorrect": true },
      { "id": "option_4", "text": "add_last", "isCorrect": false }
    ],
    "hint": "This method is commonly used to add elements to the end of an array.",
    "answerDescription": "The `push` method adds an element to the end of an array."
  },
  {
    "id": "ruby_2092",
    "question": "Which method returns a hash with unique keys from an array?",
    "options": [
      { "id": "option_1", "text": "unique_hash", "isCorrect": false },
      { "id": "option_2", "text": "group_by", "isCorrect": false },
      { "id": "option_3", "text": "tally", "isCorrect": true },
      { "id": "option_4", "text": "hashify", "isCorrect": false }
    ],
    "hint": "This method counts occurrences of elements and returns a hash.",
    "answerDescription": "The `tally` method returns a hash where keys are unique elements, and values are their count."
  },
  {
    "id": "ruby_2093",
    "question": "Which method checks if a given element is included in an array?",
    "options": [
      { "id": "option_1", "text": "exists?", "isCorrect": false },
      { "id": "option_2", "text": "contains?", "isCorrect": false },
      { "id": "option_3", "text": "include?", "isCorrect": true },
      { "id": "option_4", "text": "has_element?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if an array contains the specified element.",
    "answerDescription": "The `include?` method checks if a given element is included in an array."
  },
  {
    "id": "ruby_2094",
    "question": "Which method concatenates two arrays?",
    "options": [
      { "id": "option_1", "text": "combine", "isCorrect": false },
      { "id": "option_2", "text": "merge", "isCorrect": false },
      { "id": "option_3", "text": "+", "isCorrect": true },
      { "id": "option_4", "text": "append_array", "isCorrect": false }
    ],
    "hint": "This operator is used to join two arrays together.",
    "answerDescription": "The `+` operator concatenates two arrays."
  },
  {
    "id": "ruby_2095",
    "question": "Which method removes all elements from an array?",
    "options": [
      { "id": "option_1", "text": "clear_all", "isCorrect": false },
      { "id": "option_2", "text": "empty_out", "isCorrect": false },
      { "id": "option_3", "text": "clear", "isCorrect": true },
      { "id": "option_4", "text": "delete_all", "isCorrect": false }
    ],
    "hint": "This method makes an array empty.",
    "answerDescription": "The `clear` method removes all elements from an array."
  },
  {
    "id": "ruby_2096",
    "question": "Which method retrieves an element at a specific index in an array?",
    "options": [
      { "id": "option_1", "text": "fetch_at", "isCorrect": false },
      { "id": "option_2", "text": "retrieve", "isCorrect": false },
      { "id": "option_3", "text": "[]", "isCorrect": true },
      { "id": "option_4", "text": "element_at", "isCorrect": false }
    ],
    "hint": "This method is used with an index to get an element.",
    "answerDescription": "The `[]` method retrieves an element at a specific index in an array."
  },
  {
    "id": "ruby_2097",
    "question": "Which method inserts an element at a specified index in an array?",
    "options": [
      { "id": "option_1", "text": "place_at", "isCorrect": false },
      { "id": "option_2", "text": "add_index", "isCorrect": false },
      { "id": "option_3", "text": "insert", "isCorrect": true },
      { "id": "option_4", "text": "push_at", "isCorrect": false }
    ],
    "hint": "This method is used to add elements at a specific position.",
    "answerDescription": "The `insert` method inserts an element at a specified index in an array."
  },
  {
    "id": "ruby_2098",
    "question": "Which method returns a new array with elements in a random order?",
    "options": [
      { "id": "option_1", "text": "randomize", "isCorrect": false },
      { "id": "option_2", "text": "mix", "isCorrect": false },
      { "id": "option_3", "text": "shuffle", "isCorrect": true },
      { "id": "option_4", "text": "scramble", "isCorrect": false }
    ],
    "hint": "This method randomly arranges elements of an array.",
    "answerDescription": "The `shuffle` method returns a new array with elements in a random order."
  },
  {
    "id": "ruby_2099",
    "question": "Which method finds the index of the first occurrence of a value in an array?",
    "options": [
      { "id": "option_1", "text": "find_index_of", "isCorrect": false },
      { "id": "option_2", "text": "search", "isCorrect": false },
      { "id": "option_3", "text": "index", "isCorrect": true },
      { "id": "option_4", "text": "position", "isCorrect": false }
    ],
    "hint": "This method returns the position of the first matching element.",
    "answerDescription": "The `index` method finds the index of the first occurrence of a value in an array."
  },
  {
    "id": "ruby_2100",
    "question": "Which method returns the number of elements in an array?",
    "options": [
      { "id": "option_1", "text": "size_of", "isCorrect": false },
      { "id": "option_2", "text": "length_of", "isCorrect": false },
      { "id": "option_3", "text": "count_elements", "isCorrect": false },
      { "id": "option_4", "text": "length", "isCorrect": true }
    ],
    "hint": "This method returns the total number of elements in an array.",
    "answerDescription": "The `length` method returns the number of elements in an array."
  },
  {
    "id": "ruby_2101",
    "question": "Which method returns a new array with only unique elements?",
    "options": [
      { "id": "option_1", "text": "distinct", "isCorrect": false },
      { "id": "option_2", "text": "filter_unique", "isCorrect": false },
      { "id": "option_3", "text": "remove_duplicates", "isCorrect": false },
      { "id": "option_4", "text": "uniq", "isCorrect": true }
    ],
    "hint": "This method eliminates duplicate values from an array.",
    "answerDescription": "The `uniq` method returns a new array with only unique elements."
  },  
  {
    "id": "ruby_2102",
    "question": "Which method returns a new array with elements transformed using a given block?",
    "options": [
      { "id": "option_1", "text": "map", "isCorrect": true },
      { "id": "option_2", "text": "transform", "isCorrect": false },
      { "id": "option_3", "text": "convert", "isCorrect": false },
      { "id": "option_4", "text": "modify", "isCorrect": false }
    ],
    "hint": "This method applies a block to each element and returns a new array.",
    "answerDescription": "The `map` method returns a new array with elements transformed using a given block."
  },
  {
    "id": "ruby_2103",
    "question": "Which method is used to capitalize the first letter of a string?",
    "options": [
      { "id": "option_1", "text": "uppercase", "isCorrect": false },
      { "id": "option_2", "text": "capitalize_first", "isCorrect": false },
      { "id": "option_3", "text": "capitalize", "isCorrect": true },
      { "id": "option_4", "text": "title_case", "isCorrect": false }
    ],
    "hint": "This method changes only the first letter to uppercase.",
    "answerDescription": "The `capitalize` method makes the first character uppercase and the rest lowercase."
  },
  {
    "id": "ruby_2104",
    "question": "Which method returns a portion of an array based on a given index range?",
    "options": [
      { "id": "option_1", "text": "slice", "isCorrect": true },
      { "id": "option_2", "text": "segment", "isCorrect": false },
      { "id": "option_3", "text": "extract", "isCorrect": false },
      { "id": "option_4", "text": "portion", "isCorrect": false }
    ],
    "hint": "This method retrieves part of an array using an index range.",
    "answerDescription": "The `slice` method returns a portion of an array based on a given index range."
  },
  {
    "id": "ruby_2105",
    "question": "Which method removes all elements from an array that meet a specified condition?",
    "options": [
      { "id": "option_1", "text": "delete_if", "isCorrect": true },
      { "id": "option_2", "text": "delete_selected", "isCorrect": false },
      { "id": "option_3", "text": "remove_by_condition", "isCorrect": false },
      { "id": "option_4", "text": "filter_out", "isCorrect": false }
    ],
    "hint": "This method removes elements that match a given block condition.",
    "answerDescription": "The `delete_if` method removes all elements from an array that meet a specified condition."
  },
  {
    "id": "ruby_2106",
    "question": "Which method removes the last element from an array and returns it?",
    "options": [
      { "id": "option_1", "text": "pop", "isCorrect": true },
      { "id": "option_2", "text": "remove_last", "isCorrect": false },
      { "id": "option_3", "text": "delete_last", "isCorrect": false },
      { "id": "option_4", "text": "shift", "isCorrect": false }
    ],
    "hint": "This method modifies the original array by removing its last element.",
    "answerDescription": "The `pop` method removes the last element from an array and returns it."
  },

  {
    "id": "ruby_2107",
    "question": "Which association type is used when a model has a single related record?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": true },
      { "id": "option_2", "text": "has_many", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "This association is used when a model owns one other model instance.",
    "answerDescription": "The `has_one` association sets up a one-to-one connection with another model."
  },
  {
    "id": "ruby_2108",
    "question": "What association should be used when multiple records belong to a single record?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": true },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "This is used when one record owns multiple records.",
    "answerDescription": "The `has_many` association is used when a model can be associated with multiple records of another model."
  },
  {
    "id": "ruby_2109",
    "question": "Which association must be declared in the child model when using 'has_many' in the parent model?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": true },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "This association indicates ownership from the child side.",
    "answerDescription": "The `belongs_to` association is used in the child model to link back to the parent model that has declared `has_many`."
  },
  {
    "id": "ruby_2110",
    "question": "Which association should be used when two models are related and require a join table?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": true },
      { "id": "option_2", "text": "has_many :through", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": false }
    ],
    "hint": "This association does not require an intermediate model but needs a join table.",
    "answerDescription": "The `has_and_belongs_to_many` association is used to set up a many-to-many connection between two models using a join table."
  },
  {
    "id": "ruby_2111",
    "question": "What is the difference between 'has_many' and 'has_many :through'?",
    "options": [
      { "id": "option_1", "text": "'has_many :through' uses an intermediate model.", "isCorrect": true },
      { "id": "option_2", "text": "'has_many' requires an intermediate model.", "isCorrect": false },
      { "id": "option_3", "text": "'has_many :through' is for one-to-one relationships.", "isCorrect": false },
      { "id": "option_4", "text": "There is no difference.", "isCorrect": false }
    ],
    "hint": "One of these associations allows for extra data in the join model.",
    "answerDescription": "The `has_many :through` association allows models to be connected through an intermediate model, while `has_many` connects them directly."
  },
  {
    "id": "ruby_2112",
    "question": "Which association is used when one model has multiple instances of another model?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": true },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "This association allows a model to own multiple related records.",
    "answerDescription": "The `has_many` association is used when a model contains multiple instances of another model."
  },
  {
    "id": "ruby_2113",
    "question": "What does the belongs_to association indicate in Rails?",
    "options": [
      { "id": "option_1", "text": "A model holds a foreign key referencing another model", "isCorrect": true },
      { "id": "option_2", "text": "A model owns multiple related models", "isCorrect": false },
      { "id": "option_3", "text": "A model connects to another through an intermediary", "isCorrect": false },
      { "id": "option_4", "text": "A model has an independent association", "isCorrect": false }
    ],
    "hint": "This association defines a foreign key relationship in the database.",
    "answerDescription": "The `belongs_to` association means the model contains a foreign key that links to another model."
  },
  {
    "id": "ruby_2114",
    "question": "Which Rails association is used to define a one-to-one relationship?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": true },
      { "id": "option_2", "text": "has_many", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "This association is used when a model is related to only one instance of another model.",
    "answerDescription": "The `has_one` association is used when a model contains only a single instance of another model."
  },
  {
    "id": "ruby_2115",
    "question": "Which ActiveRecord association allows many-to-many relationships without an explicit join model?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": true },
      { "id": "option_2", "text": "has_many", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": false }
    ],
    "hint": "This association allows direct many-to-many relationships between models.",
    "answerDescription": "The `has_and_belongs_to_many` association is used for many-to-many relationships without an explicit join model."
  },
  {
    "id": "ruby_2116",
    "question": "What is the primary difference between has_many and has_many :through associations?",
    "options": [
      { "id": "option_1", "text": "has_many :through requires an intermediary model", "isCorrect": true },
      { "id": "option_2", "text": "has_many does not allow multiple associations", "isCorrect": false },
      { "id": "option_3", "text": "has_many must always include a foreign key", "isCorrect": false },
      { "id": "option_4", "text": "has_many is only used for self-referential relationships", "isCorrect": false }
    ],
    "hint": "One of these associations relies on a join model.",
    "answerDescription": "The `has_many :through` association requires an intermediary model, whereas `has_many` does not."
  },
  {
    "id": "ruby_2117",
    "question": "How can you delete child records automatically when a parent record is removed?",
    "options": [
      { "id": "option_1", "text": "Use dependent: :destroy in the association", "isCorrect": true },
      { "id": "option_2", "text": "Manually delete child records in the controller", "isCorrect": false },
      { "id": "option_3", "text": "Use dependent: :nullify", "isCorrect": false },
      { "id": "option_4", "text": "Enable cascading delete in SQL", "isCorrect": false }
    ],
    "hint": "Rails provides an option in the model association to handle dependent records.",
    "answerDescription": "Using `dependent: :destroy` in an association ensures associated records are deleted when the parent is removed."
  },
  {
    "id": "ruby_2118",
    "question": "Which association allows a model to be associated with multiple models of different types?",
    "options": [
      { "id": "option_1", "text": "Polymorphic association", "isCorrect": true },
      { "id": "option_2", "text": "Self-referential association", "isCorrect": false },
      { "id": "option_3", "text": "Nested association", "isCorrect": false },
      { "id": "option_4", "text": "Join table association", "isCorrect": false }
    ],
    "hint": "This association allows a model to belong to multiple types of other models.",
    "answerDescription": "Polymorphic associations allow a model to be associated with multiple models of different types."
  },
  {
    "id": "ruby_2119",
    "question": "Which association should be used if a model needs to connect to another model via an intermediary model?",
    "options": [
      { "id": "option_1", "text": "has_many :through", "isCorrect": true },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "This association allows an indirect relationship through another model.",
    "answerDescription": "The `has_many :through` association allows models to be connected via an intermediary model."
  },
  {
    "id": "ruby_2120",
    "question": "How do you specify that a model must always have an associated record in Rails?",
    "options": [
      { "id": "option_1", "text": "validates :association_name, presence: true", "isCorrect": true },
      { "id": "option_2", "text": "belongs_to :model, required: true", "isCorrect": false },
      { "id": "option_3", "text": "has_one :model, required: true", "isCorrect": false },
      { "id": "option_4", "text": "before_save :check_association", "isCorrect": false }
    ],
    "hint": "This validation ensures an associated record is always present.",
    "answerDescription": "Using `validates :association_name, presence: true` ensures the model always has an associated record."
  },
  {
    "id": "ruby_2121",
    "question": "Which method retrieves associated records in Rails?",
    "options": [
      { "id": "option_1", "text": "By calling the association method on an instance", "isCorrect": true },
      { "id": "option_2", "text": "Using a raw SQL query", "isCorrect": false },
      { "id": "option_3", "text": "By manually joining tables", "isCorrect": false },
      { "id": "option_4", "text": "By iterating through all records and filtering", "isCorrect": false }
    ],
    "hint": "Rails provides built-in methods to access related records.",
    "answerDescription": "Calling the association method on an instance retrieves the related records in ActiveRecord."
  },
  {
    "id": "ruby_2122",
    "question": "Which association should be used to model a one-to-many relationship in Rails?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": true },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": false }
    ],
    "hint": "This association allows a model to own multiple records of another model.",
    "answerDescription": "The `has_many` association is used when one model has multiple related records."
  },
  {
    "id": "ruby_2123",
    "question": "How can you ensure an associated record is always present in a belongs_to relationship?",
    "options": [
      { "id": "option_1", "text": "Using before_save callback", "isCorrect": false },
      { "id": "option_2", "text": "Adding validates :association_name, presence: true", "isCorrect": true },
      { "id": "option_3", "text": "Setting has_many :required => true", "isCorrect": false },
      { "id": "option_4", "text": "Using a database trigger", "isCorrect": false }
    ],
    "hint": "This validation ensures that the foreign key is always set.",
    "answerDescription": "The `validates :association_name, presence: true` ensures the associated record is always present."
  },
  {
    "id": "ruby_2124",
    "question": "Which option correctly describes a has_and_belongs_to_many association?",
    "options": [
      { "id": "option_1", "text": "It allows one model to belong to another", "isCorrect": false },
      { "id": "option_2", "text": "It establishes a many-to-many relationship without a join model", "isCorrect": true },
      { "id": "option_3", "text": "It is used for one-to-one associations", "isCorrect": false },
      { "id": "option_4", "text": "It only works with self-referencing associations", "isCorrect": false }
    ],
    "hint": "This association allows a direct many-to-many relationship.",
    "answerDescription": "The `has_and_belongs_to_many` association creates a many-to-many relationship without needing an explicit join model."
  },
  {
    "id": "ruby_2125",
    "question": "What does the dependent: :nullify option do in an ActiveRecord association?",
    "options": [
      { "id": "option_1", "text": "Deletes associated records when the parent is destroyed", "isCorrect": false },
      { "id": "option_2", "text": "Sets the foreign key to NULL without deleting the records", "isCorrect": true },
      { "id": "option_3", "text": "Prevents deletion of child records", "isCorrect": false },
      { "id": "option_4", "text": "Ensures child records are duplicated", "isCorrect": false }
    ],
    "hint": "This option modifies the foreign key rather than deleting records.",
    "answerDescription": "Using `dependent: :nullify` ensures that associated records remain but their foreign key is set to NULL."
  },
  {
    "id": "ruby_2126",
    "question": "Which association is best for connecting a model to another model that serves as a category?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": true },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": false }
    ],
    "hint": "The model that holds the foreign key uses this association.",
    "answerDescription": "A `belongs_to` association is ideal when a model refers to another as a category or type."
  },
  {
    "id": "ruby_2127",
    "question": "Which Rails method reloads an association from the database?",
    "options": [
      { "id": "option_1", "text": "reload", "isCorrect": false },
      { "id": "option_2", "text": "association_name.reload", "isCorrect": true },
      { "id": "option_3", "text": "association_name.refresh", "isCorrect": false },
      { "id": "option_4", "text": "reset_association", "isCorrect": false }
    ],
    "hint": "This method can be called on an ActiveRecord association.",
    "answerDescription": "Calling `association_name.reload` refreshes the association from the database."
  },
  {
    "id": "ruby_2128",
    "question": "Which option correctly describes a self-referential has_many association?",
    "options": [
      { "id": "option_1", "text": "It connects a model to itself through a foreign key", "isCorrect": false },
      { "id": "option_2", "text": "It allows a model to have multiple relationships with itself", "isCorrect": true },
      { "id": "option_3", "text": "It is only used for join tables", "isCorrect": false },
      { "id": "option_4", "text": "It prevents duplicate associations", "isCorrect": false }
    ],
    "hint": "This is used when a model references itself as a parent-child relationship.",
    "answerDescription": "A self-referential `has_many` association allows a model to associate with multiple instances of itself."
  },
  {
    "id": "ruby_2129",
    "question": "How can you create a default scope for an association in Rails?",
    "options": [
      { "id": "option_1", "text": "Using a custom SQL query in a callback", "isCorrect": false },
      { "id": "option_2", "text": "Adding a default_scope in the model", "isCorrect": true },
      { "id": "option_3", "text": "Modifying the belongs_to declaration", "isCorrect": false },
      { "id": "option_4", "text": "Using dependent: :restrict_with_error", "isCorrect": false }
    ],
    "hint": "This method sets a default query for retrieving associated records.",
    "answerDescription": "Using `default_scope` in the model allows setting default queries for associations."
  },
  {
    "id": "ruby_2130",
    "question": "Which method can be used to check if an association is loaded?",
    "options": [
      { "id": "option_1", "text": "association_name.check?", "isCorrect": false },
      { "id": "option_2", "text": "association_name.loaded?", "isCorrect": true },
      { "id": "option_3", "text": "association_name.exists?", "isCorrect": false },
      { "id": "option_4", "text": "association_name.nil?", "isCorrect": false }
    ],
    "hint": "This method is used to determine if an association has been retrieved.",
    "answerDescription": "The `association_name.loaded?` method checks if an association has been loaded in memory."
  },
  {
    "id": "ruby_2131",
    "question": "Which association type is best suited for a blog post and its author?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": true },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A post should reference its author using a foreign key.",
    "answerDescription": "The `belongs_to` association is used when a model references another model as its owner."
  },
  {
    "id": "ruby_2132",
    "question": "Which association should be used when each user has exactly one profile?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "This association is used when one model is linked to only one instance of another model.",
    "answerDescription": "The `has_one` association ensures that each record of a model is linked to exactly one record of another model."
  },
  {
    "id": "ruby_2133",
    "question": "What does `inverse_of` provide in a Rails association?",
    "options": [
      { "id": "option_1", "text": "It prevents circular dependencies", "isCorrect": false },
      { "id": "option_2", "text": "It ensures foreign key constraints", "isCorrect": false },
      { "id": "option_3", "text": "It allows Rails to use the same object in memory for both sides of an association", "isCorrect": true },
      { "id": "option_4", "text": "It automatically deletes orphaned records", "isCorrect": false }
    ],
    "hint": "This option improves performance by preventing redundant queries.",
    "answerDescription": "The `inverse_of` option enables Active Record to recognize the reverse association and reuse the same object in memory."
  },
  {
    "id": "ruby_2134",
    "question": "Which option correctly defines a polymorphic association in Rails?",
    "options": [
      { "id": "option_1", "text": "Using multiple belongs_to associations", "isCorrect": false },
      { "id": "option_2", "text": "Using a join table to connect models", "isCorrect": false },
      { "id": "option_3", "text": "Using belongs_to with a `:polymorphic => true` option", "isCorrect": true },
      { "id": "option_4", "text": "Using a mixin module for multiple associations", "isCorrect": false }
    ],
    "hint": "This feature allows a model to belong to multiple other models through a single association.",
    "answerDescription": "A polymorphic association in Rails is defined using `belongs_to :recordable, polymorphic: true`."
  },
  {
    "id": "ruby_2135",
    "question": "Which Rails method can preload associations to prevent N+1 queries?",
    "options": [
      { "id": "option_1", "text": "includes", "isCorrect": false },
      { "id": "option_2", "text": "eager_load", "isCorrect": false },
      { "id": "option_3", "text": "preload", "isCorrect": true },
      { "id": "option_4", "text": "lazy_load", "isCorrect": false }
    ],
    "hint": "This method loads associated records in separate queries instead of a single SQL join.",
    "answerDescription": "The `preload` method loads the association in separate queries to avoid performance issues caused by N+1 queries."
  },
  {
    "id": "ruby_2136",
    "question": "Which database constraint ensures referential integrity in belongs_to associations?",
    "options": [
      { "id": "option_1", "text": "NOT NULL constraint", "isCorrect": false },
      { "id": "option_2", "text": "CHECK constraint", "isCorrect": false },
      { "id": "option_3", "text": "FOREIGN KEY constraint", "isCorrect": true },
      { "id": "option_4", "text": "DEFAULT constraint", "isCorrect": false }
    ],
    "hint": "This constraint enforces valid references between associated tables.",
    "answerDescription": "The `FOREIGN KEY` constraint ensures that a referenced record exists in the related table, maintaining referential integrity."
  },
  {
    "id": "ruby_2137",
    "question": "Which Rails option is used to prevent deletion of parent records if child records exist?",
    "options": [
      { "id": "option_1", "text": "dependent: :destroy", "isCorrect": false },
      { "id": "option_2", "text": "dependent: :nullify", "isCorrect": false },
      { "id": "option_3", "text": "dependent: :restrict_with_error", "isCorrect": true },
      { "id": "option_4", "text": "dependent: :cascade", "isCorrect": false }
    ],
    "hint": "This option raises an error when a parent record is deleted while child records still exist.",
    "answerDescription": "Using `dependent: :restrict_with_error` prevents parent records from being deleted if dependent records still exist."
  },
  {
    "id": "ruby_2138",
    "question": "How do you specify a custom foreign key in a Rails association?",
    "options": [
      { "id": "option_1", "text": "Using foreign_key: 'custom_key'", "isCorrect": false },
      { "id": "option_2", "text": "Adding a custom SQL constraint", "isCorrect": false },
      { "id": "option_3", "text": "Using belongs_to or has_many with foreign_key: 'custom_key'", "isCorrect": true },
      { "id": "option_4", "text": "Using a database trigger", "isCorrect": false }
    ],
    "hint": "This method allows specifying a non-standard foreign key for an association.",
    "answerDescription": "Using `foreign_key: 'custom_key'` in a `belongs_to` or `has_many` association explicitly defines the foreign key column."
  },
  {
    "id": "ruby_2139",
    "question": "What is the primary difference between has_many and has_and_belongs_to_many?",
    "options": [
      { "id": "option_1", "text": "has_many uses a join table, whereas has_and_belongs_to_many does not", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many does not require a join model", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many skips the intermediary ActiveRecord model", "isCorrect": true },
      { "id": "option_4", "text": "has_many is always faster", "isCorrect": false }
    ],
    "hint": "One of these associations does not require an explicit join model.",
    "answerDescription": "The `has_and_belongs_to_many` association allows a many-to-many relationship without requiring a join model."
  },
  {
    "id": "ruby_2140",
    "question": "What does counter_cache do in a Rails association?",
    "options": [
      { "id": "option_1", "text": "Stores a count of associated records in the parent model", "isCorrect": false },
      { "id": "option_2", "text": "Caches the last associated record", "isCorrect": false },
      { "id": "option_3", "text": "Automatically updates a counter column when associated records are added or removed", "isCorrect": true },
      { "id": "option_4", "text": "Prevents associated records from being counted twice", "isCorrect": false }
    ],
    "hint": "This feature helps optimize queries by maintaining a cached count.",
    "answerDescription": "The `counter_cache` option updates a specified column to keep track of the number of associated records."
  },
  {
    "id": "ruby_2141",
    "question": "Which association is ideal for modeling a company's CEO and their company?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": true },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "Each company has only one CEO.",
    "answerDescription": "A `has_one` association is suitable because a company has exactly one CEO."
  },
  {
    "id": "ruby_2142",
    "question": "Which association should be used when a post can have multiple comments, but each comment belongs to one post?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A post can have multiple comments, but each comment is tied to a single post.",
    "answerDescription": "The `has_many` association is used when one record has multiple related records."
  },
  {
    "id": "ruby_2143",
    "question": "Which association is best suited for modeling an order that contains multiple products, and a product that can belong to multiple orders?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": true },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "Each order can have multiple products, and products can appear in multiple orders.",
    "answerDescription": "A `has_and_belongs_to_many` association is ideal for many-to-many relationships without a join model."
  },
  {
    "id": "ruby_2144",
    "question": "What association should be used if a customer places multiple orders, but each order belongs to one customer?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "One customer can place multiple orders, but each order is tied to a single customer.",
    "answerDescription": "The `has_many` association should be used because a customer has multiple orders."
  },
  {
    "id": "ruby_2145",
    "question": "Which association should be used if an employee belongs to only one department?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "Each employee is assigned to a single department.",
    "answerDescription": "A `belongs_to` association is used when a model is linked to a single instance of another model."
  },
  {
    "id": "ruby_2146",
    "question": "Which association should be used to model a company and its CEO, where a company can have only one CEO?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A company has exactly one CEO.",
    "answerDescription": "A `has_one` association is suitable when a model has a single associated record."
  },
  {
    "id": "ruby_2147",
    "question": "Which association should be used for a case where each book has a single author, and an author can write multiple books?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": true },
      { "id": "option_4", "text": "has_many", "isCorrect": false }
    ],
    "hint": "Each book is written by a single author.",
    "answerDescription": "A `belongs_to` association is appropriate because each book is linked to a single author."
  },
  {
    "id": "ruby_2148",
    "question": "Which association should be used when a teacher can have many students, but each student has only one teacher?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "has_one", "isCorrect": false }
    ],
    "hint": "Each teacher has many students, but each student has a single teacher.",
    "answerDescription": "The `has_many` association is used when one model has multiple related records."
  },
  {
    "id": "ruby_2149",
    "question": "Which association should be used when modeling an author and their profile, where each author has only one profile?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": true },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "Each author has a single profile.",
    "answerDescription": "A `has_one` association is used when a model has a single related record."
  },
  {
    "id": "ruby_2150",
    "question": "Which association should be used for modeling a car and its owner, where each car has exactly one owner?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": true },
      { "id": "option_4", "text": "has_one", "isCorrect": false }
    ],
    "hint": "Each car belongs to a single owner.",
    "answerDescription": "A `belongs_to` association is appropriate because each car is linked to a single owner."
  },
  {
    "id": "ruby_2151",
    "question": "Which association should be used for modeling a user and their account, where each user has exactly one account?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": true },
      { "id": "option_4", "text": "has_many", "isCorrect": false }
    ],
    "hint": "Each user has a single account.",
    "answerDescription": "A `has_one` association is used when a model has a single associated record."
  },
  {
    "id": "ruby_2152",
    "question": "Which association is best used when a product belongs to a single category, but a category can have many products?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "A category contains multiple products.",
    "answerDescription": "A `has_many` association is used when one model contains multiple associated records."
  },
  {
    "id": "ruby_2153",
    "question": "Which association should be used when a city can have many residents, but each resident belongs to one city?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "A city has multiple residents.",
    "answerDescription": "The `has_many` association is suitable when a model contains multiple related records."
  },
  {
    "id": "ruby_2154",
    "question": "Which association is appropriate for modeling an event that has multiple attendees, where attendees can also attend multiple events?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": true }
    ],
    "hint": "Events and attendees have a many-to-many relationship.",
    "answerDescription": "A `has_and_belongs_to_many` association is used when both models share a direct many-to-many relationship."
  },
  {
    "id": "ruby_2155",
    "question": "Which association should be used if a doctor has many patients, but each patient is assigned to only one doctor?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "A doctor has multiple patients under their care.",
    "answerDescription": "The `has_many` association is used when one model can be linked to multiple instances of another model."
  },
  {
    "id": "ruby_2156",
    "question": "Which association should be used when an account belongs to a user, and each user has exactly one account?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": true }
    ],
    "hint": "Each user has exactly one account.",
    "answerDescription": "A `has_one` association is appropriate when one model has a single related record."
  },
  {
    "id": "ruby_2157",
    "question": "Which association should be used when a professor teaches multiple courses, but each course has only one professor?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "A professor handles multiple courses, but each course has a single professor.",
    "answerDescription": "A `has_many` association is used when one model is related to multiple instances of another model."
  },
  {
    "id": "ruby_2158",
    "question": "Which association should be used when a book has multiple chapters, but each chapter belongs to a single book?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "A book contains multiple chapters.",
    "answerDescription": "The `has_many` association is suitable because a book contains multiple chapters."
  },
  {
    "id": "ruby_2159",
    "question": "Which association should be used when a car has a single engine, and an engine belongs to a single car?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": true }
    ],
    "hint": "A car has only one engine.",
    "answerDescription": "A `has_one` association is used when a model has a single associated record."
  },
  {
    "id": "ruby_2160",
    "question": "Which association should be used when a musician plays multiple instruments, and an instrument can be played by multiple musicians?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": true }
    ],
    "hint": "Many musicians can play multiple instruments.",
    "answerDescription": "A `has_and_belongs_to_many` association is appropriate for many-to-many relationships."
  },
  {
    "id": "ruby_2161",
    "question": "Which association should be used when a company has a single headquarters, but each headquarters belongs to one company?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": true }
    ],
    "hint": "Each company has only one headquarters.",
    "answerDescription": "A `has_one` association is used when a model has a single associated record."
  },
  {
    "id": "ruby_2162",
    "question": "Which association should be used when an order belongs to a single customer, but a customer can place multiple orders?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": true },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A customer can have multiple orders.",
    "answerDescription": "A `has_many` association is used when one model is related to multiple instances of another model."
  },
  {
    "id": "ruby_2163",
    "question": "Which association should be used when a student can enroll in multiple courses, and a course can have multiple students?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": true },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": false },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "Students and courses share a many-to-many relationship.",
    "answerDescription": "A `has_and_belongs_to_many` association is used when both models share a direct many-to-many relationship."
  },
  {
    "id": "ruby_2164",
    "question": "Which association is appropriate when a house has only one owner, and an owner can own multiple houses?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": true },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A person can own multiple houses.",
    "answerDescription": "A `has_many` association is appropriate when one model has multiple related records."
  },
  {
    "id": "ruby_2165",
    "question": "Which association should be used when a driver has only one assigned vehicle, and each vehicle belongs to a single driver?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": true },
      { "id": "option_2", "text": "has_many", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "Each driver has only one vehicle assigned.",
    "answerDescription": "A `has_one` association is used when a model has a single associated record."
  },
  {
    "id": "ruby_2166",
    "question": "Which association should be used when an employee belongs to one department, but a department has multiple employees?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": true },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A department contains multiple employees.",
    "answerDescription": "A `has_many` association is used when one model has multiple associated records."
  },
  {
    "id": "ruby_2167",
    "question": "Which association is best suited when a blog post has multiple comments, but each comment belongs to one blog post?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": true },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": false }
    ],
    "hint": "A blog post can have multiple comments.",
    "answerDescription": "A `has_many` association is used when a model has multiple associated records."
  },
  {
    "id": "ruby_2168",
    "question": "Which association should be used when an author can write multiple books, but each book has only one author?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": true },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "An author can write multiple books.",
    "answerDescription": "A `has_many` association is appropriate when one model has multiple related records."
  },
  {
    "id": "ruby_2169",
    "question": "Which association should be used when a pet belongs to one owner, but an owner can have multiple pets?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": true },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "An owner can have multiple pets.",
    "answerDescription": "A `has_many` association is used when one model has multiple related records."
  },
  {
    "id": "ruby_2170",
    "question": "Which association should be used when a publisher publishes multiple books, but each book has only one publisher?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": true },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A publisher produces multiple books.",
    "answerDescription": "A `has_many` association is suitable when one model is related to multiple instances of another model."
  },
  {
    "id": "ruby_2171",
    "question": "Which association should be used when an artist creates multiple paintings, but each painting is created by only one artist?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": true },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "An artist can create multiple paintings.",
    "answerDescription": "A `has_many` association is used when one model has multiple associated records."
  },  {
    "id": "ruby_2172",
    "question": "Which association should be used when an invoice belongs to one customer, but a customer can have multiple invoices?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": true },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A customer can have multiple invoices.",
    "answerDescription": "A `has_many` association is used when one model is related to multiple instances of another model."
  },
  {
    "id": "ruby_2173",
    "question": "Which association should be used when a library has many books, but each book belongs to only one library?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": true },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "A library contains multiple books.",
    "answerDescription": "A `has_many` association is appropriate when one model has multiple related records."
  },
  {
    "id": "ruby_2174",
    "question": "Which association is best for a country that has multiple cities, but each city belongs to only one country?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": true },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "A country consists of multiple cities.",
    "answerDescription": "A `has_many` association is used when a model has multiple associated records."
  },
  {
    "id": "ruby_2175",
    "question": "Which association is most appropriate when a person has only one passport, and a passport belongs to a single person?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": true },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "Each person has only one passport.",
    "answerDescription": "A `has_one` association is used when a model has a single associated record."
  },
  {
    "id": "ruby_2176",
    "question": "Which association should be used when a category can have multiple products, but a product belongs to only one category?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": true },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": false }
    ],
    "hint": "A category groups multiple products.",
    "answerDescription": "A `has_many` association is used when a model is related to multiple instances of another model."
  },
  {
    "id": "ruby_2177",
    "question": "Which association should be used when a company has multiple employees, but each employee belongs to only one company?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": true },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A company employs multiple workers.",
    "answerDescription": "A `has_many` association is suitable when one model is related to multiple instances of another model."
  },
  {
    "id": "ruby_2178",
    "question": "Which association is appropriate when a teacher can teach multiple courses, but each course is assigned to only one teacher?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": true },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A teacher teaches multiple courses.",
    "answerDescription": "A `has_many` association is used when a model has multiple associated records."
  },
  {
    "id": "ruby_2179",
    "question": "Which association should be used when an airline has multiple flights, but each flight belongs to only one airline?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": true },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": false }
    ],
    "hint": "An airline manages multiple flights.",
    "answerDescription": "A `has_many` association is used when a model is related to multiple instances of another model."
  },
  {
    "id": "ruby_2180",
    "question": "Which association should be used when a doctor can see multiple patients, but each patient has only one primary doctor?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": true },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A doctor treats multiple patients.",
    "answerDescription": "A `has_many` association is used when one model has multiple associated records."
  },
  {
    "id": "ruby_2181",
    "question": "Which association should be used when a movie has multiple actors, and each actor can be in multiple movies?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": true },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": false }
    ],
    "hint": "Movies and actors share a many-to-many relationship.",
    "answerDescription": "A `has_and_belongs_to_many` association is used when both models share a direct many-to-many relationship."
  },
  {
    "id": "ruby_2182",
    "question": "Which association should be used when a project has many tasks, but each task belongs to only one project?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A project contains multiple tasks.",
    "answerDescription": "A `has_many` association is used when a model is related to multiple instances of another model."
  },
  {
    "id": "ruby_2183",
    "question": "Which association should be used when a school has multiple teachers, and each teacher belongs to only one school?",
    "options": [
      { "id": "option_1", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "A school employs multiple teachers.",
    "answerDescription": "A `has_many` association is used when one model contains multiple associated records."
  },
  {
    "id": "ruby_2184",
    "question": "Which association should be used when a company has multiple departments, but each department belongs to one company?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A company consists of multiple departments.",
    "answerDescription": "A `has_many` association is used when a model contains multiple associated records."
  },
  {
    "id": "ruby_2185",
    "question": "Which association should be used when a musician can play multiple instruments, and each instrument can be played by multiple musicians?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": true },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "This is a many-to-many relationship.",
    "answerDescription": "A `has_and_belongs_to_many` association is used when both models share a many-to-many relationship."
  },
  {
    "id": "ruby_2186",
    "question": "Which association should be used when a car has one engine, and an engine belongs to a single car?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "Each car has only one engine.",
    "answerDescription": "A `has_one` association is used when a model has a single associated record."
  },
  {
    "id": "ruby_2187",
    "question": "Which association should be used when an order has multiple order items, and each order item belongs to only one order?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "An order contains multiple order items.",
    "answerDescription": "A `has_many` association is appropriate when one model has multiple related records."
  },
  {
    "id": "ruby_2188",
    "question": "Which association should be used when a blog post has multiple comments, and each comment belongs to only one blog post?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A blog post can have many comments.",
    "answerDescription": "A `has_many` association is used when a model contains multiple associated records."
  },
  {
    "id": "ruby_2189",
    "question": "Which association should be used when a doctor can work at multiple hospitals, and each hospital can have multiple doctors?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": true },
      { "id": "option_4", "text": "belongs_to", "isCorrect": false }
    ],
    "hint": "Doctors and hospitals share a many-to-many relationship.",
    "answerDescription": "A `has_and_belongs_to_many` association is used when both models share a many-to-many relationship."
  },
  {
    "id": "ruby_2190",
    "question": "Which association should be used when an event has one location, and a location can host multiple events?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A location can host multiple events.",
    "answerDescription": "A `has_many` association is used when a model is related to multiple instances of another model."
  },
  {
    "id": "ruby_2191",
    "question": "Which association should be used when a parent has multiple children, and each child belongs to one parent?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_many", "isCorrect": true },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": false }
    ],
    "hint": "A parent has multiple children.",
    "answerDescription": "A `has_many` association is appropriate when one model has multiple associated records."
  },
  {
    "id": "ruby_2192",
    "question": "Which association should be used when a book belongs to one author, and an author can have multiple books?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "An author can write multiple books.",
    "answerDescription": "A `has_many` association is used when a model is related to multiple instances of another model."
  },
  {
    "id": "ruby_2193",
    "question": "Which association should be used when a student can enroll in multiple courses, and each course can have multiple students?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": true }
    ],
    "hint": "A student can take many courses, and each course has many students.",
    "answerDescription": "A `has_and_belongs_to_many` association is used when both models share a many-to-many relationship."
  },
  {
    "id": "ruby_2194",
    "question": "Which association should be used when a city belongs to one country, but a country has many cities?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "A country can have multiple cities.",
    "answerDescription": "A `has_many` association is used when a model contains multiple associated records."
  },
  {
    "id": "ruby_2195",
    "question": "Which association should be used when an employee belongs to one department, but a department has many employees?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "has_many", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "belongs_to", "isCorrect": true }
    ],
    "hint": "Each employee is assigned to only one department.",
    "answerDescription": "A `belongs_to` association is used when a model is linked to another model as a dependent."
  },
  {
    "id": "ruby_2196",
    "question": "Which association should be used when a movie has one director, and a director can direct multiple movies?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "has_one", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "A director can direct multiple movies.",
    "answerDescription": "A `has_many` association is used when one model has multiple associated records."
  },
  {
    "id": "ruby_2197",
    "question": "Which association should be used when a library has many books, but each book belongs to only one library?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "A library owns multiple books.",
    "answerDescription": "A `has_many` association is used when a model contains multiple associated records."
  },
  {
    "id": "ruby_2198",
    "question": "Which association should be used when a user has one profile, and each profile belongs to only one user?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_one", "isCorrect": true }
    ],
    "hint": "A user has exactly one profile.",
    "answerDescription": "A `has_one` association is used when a model has a single associated record."
  },
  {
    "id": "ruby_2199",
    "question": "Which association should be used when a playlist contains multiple songs, and each song can belong to multiple playlists?",
    "options": [
      { "id": "option_1", "text": "has_many", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "belongs_to", "isCorrect": false },
      { "id": "option_4", "text": "has_and_belongs_to_many", "isCorrect": true }
    ],
    "hint": "A song can belong to multiple playlists.",
    "answerDescription": "A `has_and_belongs_to_many` association is used for many-to-many relationships."
  },
  {
    "id": "ruby_2200",
    "question": "Which association should be used when a person can own multiple pets, and each pet belongs to one person?",
    "options": [
      { "id": "option_1", "text": "belongs_to", "isCorrect": false },
      { "id": "option_2", "text": "has_one", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "A person can have more than one pet.",
    "answerDescription": "A `has_many` association is used when a model contains multiple associated records."
  },
  {
    "id": "ruby_2201",
    "question": "Which association should be used when a supplier provides multiple products, and each product belongs to one supplier?",
    "options": [
      { "id": "option_1", "text": "has_one", "isCorrect": false },
      { "id": "option_2", "text": "belongs_to", "isCorrect": false },
      { "id": "option_3", "text": "has_and_belongs_to_many", "isCorrect": false },
      { "id": "option_4", "text": "has_many", "isCorrect": true }
    ],
    "hint": "A supplier supplies multiple products.",
    "answerDescription": "A `has_many` association is used when one model has multiple associated records."
  },
  {
    "id": "ruby_2202",
    "question": "Which method should be used to determine if a key exists in a Ruby hash?",
    "options": [
      { "id": "option_1", "text": "has_key?", "isCorrect": true },
      { "id": "option_2", "text": "contains?", "isCorrect": false },
      { "id": "option_3", "text": "include_key?", "isCorrect": false },
      { "id": "option_4", "text": "exists?", "isCorrect": false }
    ],
    "hint": "Ruby provides a method that checks for a key's presence in a hash.",
    "answerDescription": "The `has_key?` method (also known as `key?`) checks if a hash contains a specific key."
  },
  {
    "id": "ruby_2203",
    "question": "Which method can be used to merge two hashes in Ruby?",
    "options": [
      { "id": "option_1", "text": "merge", "isCorrect": true },
      { "id": "option_2", "text": "combine", "isCorrect": false },
      { "id": "option_3", "text": "append", "isCorrect": false },
      { "id": "option_4", "text": "union", "isCorrect": false }
    ],
    "hint": "This method returns a new hash containing contents of both hashes.",
    "answerDescription": "The `merge` method in Ruby combines two hashes and returns a new hash."
  },
  {
    "id": "ruby_2204",
    "question": "Which Ruby method is used to remove the last element from an array?",
    "options": [
      { "id": "option_1", "text": "pop", "isCorrect": true },
      { "id": "option_2", "text": "remove_last", "isCorrect": false },
      { "id": "option_3", "text": "delete_last", "isCorrect": false },
      { "id": "option_4", "text": "slice!", "isCorrect": false }
    ],
    "hint": "This method removes the last element and returns it.",
    "answerDescription": "The `pop` method removes the last element from an array and returns it."
  },
  {
    "id": "ruby_2205",
    "question": "Which method checks if an array contains a specific element?",
    "options": [
      { "id": "option_1", "text": "include?", "isCorrect": true },
      { "id": "option_2", "text": "has_element?", "isCorrect": false },
      { "id": "option_3", "text": "exists?", "isCorrect": false },
      { "id": "option_4", "text": "contains?", "isCorrect": false }
    ],
    "hint": "Ruby provides a method that checks for an element's presence in an array.",
    "answerDescription": "The `include?` method returns `true` if the array contains the given element."
  },
  {
    "id": "ruby_2206",
    "question": "Which method is used to get the last element of an array?",
    "options": [
      { "id": "option_1", "text": "end", "isCorrect": false },
      { "id": "option_2", "text": "last", "isCorrect": true },
      { "id": "option_3", "text": "final", "isCorrect": false },
      { "id": "option_4", "text": "tail", "isCorrect": false }
    ],
    "hint": "This method retrieves the last element without removing it.",
    "answerDescription": "The `last` method returns the last element of an array."
  },
  {
    "id": "ruby_2207",
    "question": "Which method converts a string to an integer in Ruby?",
    "options": [
      { "id": "option_1", "text": "to_i", "isCorrect": true },
      { "id": "option_2", "text": "convert_to_int", "isCorrect": false },
      { "id": "option_3", "text": "integerify", "isCorrect": false },
      { "id": "option_4", "text": "parse_int", "isCorrect": false }
    ],
    "hint": "This method converts a string into an integer.",
    "answerDescription": "The `to_i` method converts a string to an integer in Ruby."
  },
  {
    "id": "ruby_2208",
    "question": "Which method removes leading and trailing whitespace from a string?",
    "options": [
      { "id": "option_1", "text": "strip", "isCorrect": true },
      { "id": "option_2", "text": "trim", "isCorrect": false },
      { "id": "option_3", "text": "clean", "isCorrect": false },
      { "id": "option_4", "text": "remove_whitespace", "isCorrect": false }
    ],
    "hint": "This method removes whitespace from both ends of a string.",
    "answerDescription": "The `strip` method removes leading and trailing whitespace from a string."
  },
  {
    "id": "ruby_2209",
    "question": "Which method in Ruby returns the number of elements in an array?",
    "options": [
      { "id": "option_1", "text": "length", "isCorrect": true },
      { "id": "option_2", "text": "size_of", "isCorrect": false },
      { "id": "option_3", "text": "count_elements", "isCorrect": false },
      { "id": "option_4", "text": "total", "isCorrect": false }
    ],
    "hint": "This method is commonly used to check the number of elements.",
    "answerDescription": "The `length` method returns the number of elements in an array."
  },
  {
    "id": "ruby_2210",
    "question": "Which method is used to get a subarray from an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "slice", "isCorrect": true },
      { "id": "option_2", "text": "cut", "isCorrect": false },
      { "id": "option_3", "text": "extract", "isCorrect": false },
      { "id": "option_4", "text": "sublist", "isCorrect": false }
    ],
    "hint": "This method allows you to retrieve a part of an array.",
    "answerDescription": "The `slice` method returns a portion of an array based on index or range."
  },
  {
    "id": "ruby_2211",
    "question": "Which method is used to repeat a string multiple times in Ruby?",
    "options": [
      { "id": "option_1", "text": "*", "isCorrect": true },
      { "id": "option_2", "text": "repeat", "isCorrect": false },
      { "id": "option_3", "text": "duplicate", "isCorrect": false },
      { "id": "option_4", "text": "times", "isCorrect": false }
    ],
    "hint": "This operator multiplies the string by a given number.",
    "answerDescription": "The `*` operator is used to repeat a string multiple times (e.g., `'a' * 3` results in `'aaa'`)."
  },
  {
    "id": "ruby_2212",
    "question": "Which method is used to return the first element of an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "peek", "isCorrect": false },
      { "id": "option_2", "text": "first", "isCorrect": true },
      { "id": "option_3", "text": "head", "isCorrect": false },
      { "id": "option_4", "text": "begin", "isCorrect": false }
    ],
    "hint": "This method retrieves the first element of an array.",
    "answerDescription": "The `first` method returns the first element of an array in Ruby."
  },
  {
    "id": "ruby_2213",
    "question": "Which method in Ruby converts an integer to a string?",
    "options": [
      { "id": "option_1", "text": "int_to_s", "isCorrect": false },
      { "id": "option_2", "text": "to_s", "isCorrect": true },
      { "id": "option_3", "text": "convert_str", "isCorrect": false },
      { "id": "option_4", "text": "stringify", "isCorrect": false }
    ],
    "hint": "This method converts any object to a string.",
    "answerDescription": "The `to_s` method converts an integer to a string in Ruby."
  },
  {
    "id": "ruby_2214",
    "question": "Which method is used to find the index of a specific element in an array?",
    "options": [
      { "id": "option_1", "text": "position", "isCorrect": false },
      { "id": "option_2", "text": "index", "isCorrect": true },
      { "id": "option_3", "text": "search", "isCorrect": false },
      { "id": "option_4", "text": "find", "isCorrect": false }
    ],
    "hint": "This method returns the position of an element in an array.",
    "answerDescription": "The `index` method returns the index of a specified element in an array."
  },
  {
    "id": "ruby_2215",
    "question": "Which method is used to check if an object is nil in Ruby?",
    "options": [
      { "id": "option_1", "text": "empty?", "isCorrect": false },
      { "id": "option_2", "text": "nil?", "isCorrect": true },
      { "id": "option_3", "text": "null?", "isCorrect": false },
      { "id": "option_4", "text": "zero?", "isCorrect": false }
    ],
    "hint": "This method is used to check if an object is explicitly nil.",
    "answerDescription": "The `nil?` method returns `true` if the object is nil."
  },
  {
    "id": "ruby_2216",
    "question": "Which method in Ruby capitalizes the first letter of a string?",
    "options": [
      { "id": "option_1", "text": "upcase_first", "isCorrect": false },
      { "id": "option_2", "text": "capitalize", "isCorrect": true },
      { "id": "option_3", "text": "titlecase", "isCorrect": false },
      { "id": "option_4", "text": "uppercase", "isCorrect": false }
    ],
    "hint": "This method only capitalizes the first letter and lowercases the rest.",
    "answerDescription": "The `capitalize` method makes only the first letter uppercase."
  },
  {
    "id": "ruby_2217",
    "question": "Which method in Ruby removes and returns the first element of an array?",
    "options": [
      { "id": "option_1", "text": "delete_first", "isCorrect": false },
      { "id": "option_2", "text": "shift", "isCorrect": true },
      { "id": "option_3", "text": "pop", "isCorrect": false },
      { "id": "option_4", "text": "remove", "isCorrect": false }
    ],
    "hint": "This method removes the first element and shifts the rest.",
    "answerDescription": "The `shift` method removes and returns the first element of an array."
  },
  {
    "id": "ruby_2218",
    "question": "Which Ruby method is used to join array elements into a string?",
    "options": [
      { "id": "option_1", "text": "concat", "isCorrect": false },
      { "id": "option_2", "text": "join", "isCorrect": true },
      { "id": "option_3", "text": "combine", "isCorrect": false },
      { "id": "option_4", "text": "merge", "isCorrect": false }
    ],
    "hint": "This method joins elements using a specified separator.",
    "answerDescription": "The `join` method converts an array into a string by joining elements with a separator."
  },
  {
    "id": "ruby_2219",
    "question": "Which method is used to reverse the characters in a string?",
    "options": [
      { "id": "option_1", "text": "flip", "isCorrect": false },
      { "id": "option_2", "text": "reverse", "isCorrect": true },
      { "id": "option_3", "text": "invert", "isCorrect": false },
      { "id": "option_4", "text": "backwards", "isCorrect": false }
    ],
    "hint": "This method flips the order of characters in a string.",
    "answerDescription": "The `reverse` method returns a string with its characters reversed."
  },
  {
    "id": "ruby_2220",
    "question": "Which method is used to repeat an operation a specific number of times in Ruby?",
    "options": [
      { "id": "option_1", "text": "loop", "isCorrect": false },
      { "id": "option_2", "text": "times", "isCorrect": true },
      { "id": "option_3", "text": "repeat", "isCorrect": false },
      { "id": "option_4", "text": "iterate", "isCorrect": false }
    ],
    "hint": "This method is used when a specific count is known.",
    "answerDescription": "The `times` method repeats an operation a specified number of times."
  },
  {
    "id": "ruby_2221",
    "question": "Which method is used to replace all occurrences of a substring in Ruby?",
    "options": [
      { "id": "option_1", "text": "switch", "isCorrect": false },
      { "id": "option_2", "text": "gsub", "isCorrect": true },
      { "id": "option_3", "text": "replace", "isCorrect": false },
      { "id": "option_4", "text": "change", "isCorrect": false }
    ],
    "hint": "This method performs global substitution in strings.",
    "answerDescription": "The `gsub` method replaces all occurrences of a substring with another string."
  },
  {
    "id": "ruby_2222",
    "question": "Which method checks if an array includes a specific value?",
    "options": [
      { "id": "option_1", "text": "include?", "isCorrect": true },
      { "id": "option_2", "text": "has?", "isCorrect": false },
      { "id": "option_3", "text": "exists?", "isCorrect": false },
      { "id": "option_4", "text": "contains?", "isCorrect": false }
    ],
    "hint": "This method returns true if the value exists in the array.",
    "answerDescription": "The `include?` method checks if an array contains a specific value."
  },
  {
    "id": "ruby_2223",
    "question": "Which method converts a string into an array of characters?",
    "options": [
      { "id": "option_1", "text": "split", "isCorrect": false },
      { "id": "option_2", "text": "separate", "isCorrect": false },
      { "id": "option_3", "text": "chars", "isCorrect": true },
      { "id": "option_4", "text": "explode", "isCorrect": false }
    ],
    "hint": "This method breaks down a string into individual characters.",
    "answerDescription": "The `chars` method returns an array of characters from a string."
  },
  {
    "id": "ruby_2224",
    "question": "Which method checks if a string contains a certain substring?",
    "options": [
      { "id": "option_1", "text": "includes?", "isCorrect": false },
      { "id": "option_2", "text": "has_sub?", "isCorrect": false },
      { "id": "option_3", "text": "include?", "isCorrect": true },
      { "id": "option_4", "text": "contains?", "isCorrect": false }
    ],
    "hint": "This method checks if a string includes another string.",
    "answerDescription": "The `include?` method returns `true` if a substring exists within a string."
  },
  {
    "id": "ruby_2225",
    "question": "Which method removes the last element from an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "delete_last", "isCorrect": false },
      { "id": "option_2", "text": "remove", "isCorrect": false },
      { "id": "option_3", "text": "pop", "isCorrect": true },
      { "id": "option_4", "text": "shift", "isCorrect": false }
    ],
    "hint": "This method removes and returns the last element of an array.",
    "answerDescription": "The `pop` method removes and returns the last element of an array."
  },
  {
    "id": "ruby_2226",
    "question": "Which method returns the length of an array in Ruby?",
    "options": [
      { "id": "option_1", "text": "count", "isCorrect": false },
      { "id": "option_2", "text": "size", "isCorrect": false },
      { "id": "option_3", "text": "length", "isCorrect": true },
      { "id": "option_4", "text": "total", "isCorrect": false }
    ],
    "hint": "This method returns the total number of elements in an array.",
    "answerDescription": "The `length` method returns the number of elements in an array."
  },
  {
    "id": "ruby_2227",
    "question": "Which method in Ruby converts a string to an array based on a given delimiter?",
    "options": [
      { "id": "option_1", "text": "explode", "isCorrect": false },
      { "id": "option_2", "text": "segment", "isCorrect": false },
      { "id": "option_3", "text": "split", "isCorrect": true },
      { "id": "option_4", "text": "divide", "isCorrect": false }
    ],
    "hint": "This method breaks a string into an array of substrings.",
    "answerDescription": "The `split` method splits a string into an array based on a delimiter."
  },
  {
    "id": "ruby_2228",
    "question": "Which method in Ruby is used to convert a string to an integer?",
    "options": [
      { "id": "option_1", "text": "to_i", "isCorrect": true },
      { "id": "option_2", "text": "to_int", "isCorrect": false },
      { "id": "option_3", "text": "convert_int", "isCorrect": false },
      { "id": "option_4", "text": "parseInt", "isCorrect": false }
    ],
    "hint": "This method is commonly used to convert numeric strings to integers.",
    "answerDescription": "The `to_i` method converts a string into an integer."
  },
  {
    "id": "ruby_2229",
    "question": "Which method is used to find the maximum value in an array?",
    "options": [
      { "id": "option_1", "text": "biggest", "isCorrect": false },
      { "id": "option_2", "text": "largest", "isCorrect": false },
      { "id": "option_3", "text": "max", "isCorrect": true },
      { "id": "option_4", "text": "greatest", "isCorrect": false }
    ],
    "hint": "This method returns the highest numerical value from an array.",
    "answerDescription": "The `max` method finds and returns the maximum value in an array."
  },
  {
    "id": "ruby_2230",
    "question": "Which method is used to check if a value exists in a hash?",
    "options": [
      { "id": "option_1", "text": "key?", "isCorrect": false },
      { "id": "option_2", "text": "has_key?", "isCorrect": true },
      { "id": "option_3", "text": "find_key", "isCorrect": false },
      { "id": "option_4", "text": "contains?", "isCorrect": false }
    ],
    "hint": "This method returns `true` if the hash contains the specified key.",
    "answerDescription": "The `has_key?` method checks if a given key exists in a hash."
  },
  
  
   

  ]
  
  
 